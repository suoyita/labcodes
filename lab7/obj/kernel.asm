
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 00 13 00 	lgdtl  0x130018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 00 13 c0       	mov    $0xc0130000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba c4 46 1c c0       	mov    $0xc01c46c4,%edx
c0100035:	b8 f9 13 1c c0       	mov    $0xc01c13f9,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 f9 13 1c c0 	movl   $0xc01c13f9,(%esp)
c0100051:	e8 81 d0 00 00       	call   c010d0d7 <memset>

    cons_init();                // init the console
c0100056:	e8 85 16 00 00       	call   c01016e0 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 60 d2 10 c0 	movl   $0xc010d260,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 7c d2 10 c0 	movl   $0xc010d27c,(%esp)
c0100070:	e8 e3 02 00 00       	call   c0100358 <cprintf>

    print_kerninfo();
c0100075:	e8 0a 09 00 00       	call   c0100984 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a2 00 00 00       	call   c0100121 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 c6 53 00 00       	call   c010544a <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 35 20 00 00       	call   c01020be <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 ad 21 00 00       	call   c010223b <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 94 82 00 00       	call   c0108327 <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 7d be 00 00       	call   c010bf15 <sched_init>
    proc_init();                // init process table
c0100098:	e8 be b7 00 00       	call   c010b85b <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 6f 17 00 00       	call   c0101811 <ide_init>
    swap_init();                // init swap
c01000a2:	e8 6e 6a 00 00       	call   c0106b15 <swap_init>

    clock_init();               // init clock interrupt
c01000a7:	e8 ea 0d 00 00       	call   c0100e96 <clock_init>
    intr_enable();              // enable irq interrupt
c01000ac:	e8 7b 1f 00 00       	call   c010202c <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b1:	e8 64 b9 00 00       	call   c010ba1a <cpu_idle>

c01000b6 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000b6:	55                   	push   %ebp
c01000b7:	89 e5                	mov    %esp,%ebp
c01000b9:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000bc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c3:	00 
c01000c4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000cb:	00 
c01000cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d3:	e8 f0 0c 00 00       	call   c0100dc8 <mon_backtrace>
}
c01000d8:	c9                   	leave  
c01000d9:	c3                   	ret    

c01000da <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000da:	55                   	push   %ebp
c01000db:	89 e5                	mov    %esp,%ebp
c01000dd:	53                   	push   %ebx
c01000de:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e1:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000e7:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ed:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000f5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000f9:	89 04 24             	mov    %eax,(%esp)
c01000fc:	e8 b5 ff ff ff       	call   c01000b6 <grade_backtrace2>
}
c0100101:	83 c4 14             	add    $0x14,%esp
c0100104:	5b                   	pop    %ebx
c0100105:	5d                   	pop    %ebp
c0100106:	c3                   	ret    

c0100107 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100107:	55                   	push   %ebp
c0100108:	89 e5                	mov    %esp,%ebp
c010010a:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c010010d:	8b 45 10             	mov    0x10(%ebp),%eax
c0100110:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100114:	8b 45 08             	mov    0x8(%ebp),%eax
c0100117:	89 04 24             	mov    %eax,(%esp)
c010011a:	e8 bb ff ff ff       	call   c01000da <grade_backtrace1>
}
c010011f:	c9                   	leave  
c0100120:	c3                   	ret    

c0100121 <grade_backtrace>:

void
grade_backtrace(void) {
c0100121:	55                   	push   %ebp
c0100122:	89 e5                	mov    %esp,%ebp
c0100124:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100127:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c010012c:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100133:	ff 
c0100134:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100138:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010013f:	e8 c3 ff ff ff       	call   c0100107 <grade_backtrace0>
}
c0100144:	c9                   	leave  
c0100145:	c3                   	ret    

c0100146 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100146:	55                   	push   %ebp
c0100147:	89 e5                	mov    %esp,%ebp
c0100149:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010014c:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010014f:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100152:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100155:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100158:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010015c:	0f b7 c0             	movzwl %ax,%eax
c010015f:	83 e0 03             	and    $0x3,%eax
c0100162:	89 c2                	mov    %eax,%edx
c0100164:	a1 00 14 1c c0       	mov    0xc01c1400,%eax
c0100169:	89 54 24 08          	mov    %edx,0x8(%esp)
c010016d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100171:	c7 04 24 81 d2 10 c0 	movl   $0xc010d281,(%esp)
c0100178:	e8 db 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c010017d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100181:	0f b7 d0             	movzwl %ax,%edx
c0100184:	a1 00 14 1c c0       	mov    0xc01c1400,%eax
c0100189:	89 54 24 08          	mov    %edx,0x8(%esp)
c010018d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100191:	c7 04 24 8f d2 10 c0 	movl   $0xc010d28f,(%esp)
c0100198:	e8 bb 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c010019d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a1:	0f b7 d0             	movzwl %ax,%edx
c01001a4:	a1 00 14 1c c0       	mov    0xc01c1400,%eax
c01001a9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b1:	c7 04 24 9d d2 10 c0 	movl   $0xc010d29d,(%esp)
c01001b8:	e8 9b 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001bd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c1:	0f b7 d0             	movzwl %ax,%edx
c01001c4:	a1 00 14 1c c0       	mov    0xc01c1400,%eax
c01001c9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d1:	c7 04 24 ab d2 10 c0 	movl   $0xc010d2ab,(%esp)
c01001d8:	e8 7b 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001dd:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e1:	0f b7 d0             	movzwl %ax,%edx
c01001e4:	a1 00 14 1c c0       	mov    0xc01c1400,%eax
c01001e9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f1:	c7 04 24 b9 d2 10 c0 	movl   $0xc010d2b9,(%esp)
c01001f8:	e8 5b 01 00 00       	call   c0100358 <cprintf>
    round ++;
c01001fd:	a1 00 14 1c c0       	mov    0xc01c1400,%eax
c0100202:	83 c0 01             	add    $0x1,%eax
c0100205:	a3 00 14 1c c0       	mov    %eax,0xc01c1400
}
c010020a:	c9                   	leave  
c010020b:	c3                   	ret    

c010020c <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c010020c:	55                   	push   %ebp
c010020d:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c010020f:	5d                   	pop    %ebp
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
c0100219:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c010021c:	e8 25 ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100221:	c7 04 24 c8 d2 10 c0 	movl   $0xc010d2c8,(%esp)
c0100228:	e8 2b 01 00 00       	call   c0100358 <cprintf>
    lab1_switch_to_user();
c010022d:	e8 da ff ff ff       	call   c010020c <lab1_switch_to_user>
    lab1_print_cur_status();
c0100232:	e8 0f ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100237:	c7 04 24 e8 d2 10 c0 	movl   $0xc010d2e8,(%esp)
c010023e:	e8 15 01 00 00       	call   c0100358 <cprintf>
    lab1_switch_to_kernel();
c0100243:	e8 c9 ff ff ff       	call   c0100211 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100248:	e8 f9 fe ff ff       	call   c0100146 <lab1_print_cur_status>
}
c010024d:	c9                   	leave  
c010024e:	c3                   	ret    

c010024f <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010024f:	55                   	push   %ebp
c0100250:	89 e5                	mov    %esp,%ebp
c0100252:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c0100255:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100259:	74 13                	je     c010026e <readline+0x1f>
        cprintf("%s", prompt);
c010025b:	8b 45 08             	mov    0x8(%ebp),%eax
c010025e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100262:	c7 04 24 07 d3 10 c0 	movl   $0xc010d307,(%esp)
c0100269:	e8 ea 00 00 00       	call   c0100358 <cprintf>
    }
    int i = 0, c;
c010026e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100275:	e8 66 01 00 00       	call   c01003e0 <getchar>
c010027a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c010027d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100281:	79 07                	jns    c010028a <readline+0x3b>
            return NULL;
c0100283:	b8 00 00 00 00       	mov    $0x0,%eax
c0100288:	eb 79                	jmp    c0100303 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010028a:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010028e:	7e 28                	jle    c01002b8 <readline+0x69>
c0100290:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100297:	7f 1f                	jg     c01002b8 <readline+0x69>
            cputchar(c);
c0100299:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010029c:	89 04 24             	mov    %eax,(%esp)
c010029f:	e8 da 00 00 00       	call   c010037e <cputchar>
            buf[i ++] = c;
c01002a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002a7:	8d 50 01             	lea    0x1(%eax),%edx
c01002aa:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002b0:	88 90 20 14 1c c0    	mov    %dl,-0x3fe3ebe0(%eax)
c01002b6:	eb 46                	jmp    c01002fe <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002b8:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002bc:	75 17                	jne    c01002d5 <readline+0x86>
c01002be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002c2:	7e 11                	jle    c01002d5 <readline+0x86>
            cputchar(c);
c01002c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002c7:	89 04 24             	mov    %eax,(%esp)
c01002ca:	e8 af 00 00 00       	call   c010037e <cputchar>
            i --;
c01002cf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002d3:	eb 29                	jmp    c01002fe <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002d5:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002d9:	74 06                	je     c01002e1 <readline+0x92>
c01002db:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002df:	75 1d                	jne    c01002fe <readline+0xaf>
            cputchar(c);
c01002e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002e4:	89 04 24             	mov    %eax,(%esp)
c01002e7:	e8 92 00 00 00       	call   c010037e <cputchar>
            buf[i] = '\0';
c01002ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002ef:	05 20 14 1c c0       	add    $0xc01c1420,%eax
c01002f4:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002f7:	b8 20 14 1c c0       	mov    $0xc01c1420,%eax
c01002fc:	eb 05                	jmp    c0100303 <readline+0xb4>
        }
    }
c01002fe:	e9 72 ff ff ff       	jmp    c0100275 <readline+0x26>
}
c0100303:	c9                   	leave  
c0100304:	c3                   	ret    

c0100305 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100305:	55                   	push   %ebp
c0100306:	89 e5                	mov    %esp,%ebp
c0100308:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010030b:	8b 45 08             	mov    0x8(%ebp),%eax
c010030e:	89 04 24             	mov    %eax,(%esp)
c0100311:	e8 f6 13 00 00       	call   c010170c <cons_putc>
    (*cnt) ++;
c0100316:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100319:	8b 00                	mov    (%eax),%eax
c010031b:	8d 50 01             	lea    0x1(%eax),%edx
c010031e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100321:	89 10                	mov    %edx,(%eax)
}
c0100323:	c9                   	leave  
c0100324:	c3                   	ret    

c0100325 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100325:	55                   	push   %ebp
c0100326:	89 e5                	mov    %esp,%ebp
c0100328:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c010032b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c0100332:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100335:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100339:	8b 45 08             	mov    0x8(%ebp),%eax
c010033c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100340:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100343:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100347:	c7 04 24 05 03 10 c0 	movl   $0xc0100305,(%esp)
c010034e:	e8 c5 c4 00 00       	call   c010c818 <vprintfmt>
    return cnt;
c0100353:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100356:	c9                   	leave  
c0100357:	c3                   	ret    

c0100358 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100358:	55                   	push   %ebp
c0100359:	89 e5                	mov    %esp,%ebp
c010035b:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010035e:	8d 45 0c             	lea    0xc(%ebp),%eax
c0100361:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100364:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100367:	89 44 24 04          	mov    %eax,0x4(%esp)
c010036b:	8b 45 08             	mov    0x8(%ebp),%eax
c010036e:	89 04 24             	mov    %eax,(%esp)
c0100371:	e8 af ff ff ff       	call   c0100325 <vcprintf>
c0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100379:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010037c:	c9                   	leave  
c010037d:	c3                   	ret    

c010037e <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010037e:	55                   	push   %ebp
c010037f:	89 e5                	mov    %esp,%ebp
c0100381:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100384:	8b 45 08             	mov    0x8(%ebp),%eax
c0100387:	89 04 24             	mov    %eax,(%esp)
c010038a:	e8 7d 13 00 00       	call   c010170c <cons_putc>
}
c010038f:	c9                   	leave  
c0100390:	c3                   	ret    

c0100391 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c0100391:	55                   	push   %ebp
c0100392:	89 e5                	mov    %esp,%ebp
c0100394:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0100397:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c010039e:	eb 13                	jmp    c01003b3 <cputs+0x22>
        cputch(c, &cnt);
c01003a0:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003a4:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003a7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003ab:	89 04 24             	mov    %eax,(%esp)
c01003ae:	e8 52 ff ff ff       	call   c0100305 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01003b6:	8d 50 01             	lea    0x1(%eax),%edx
c01003b9:	89 55 08             	mov    %edx,0x8(%ebp)
c01003bc:	0f b6 00             	movzbl (%eax),%eax
c01003bf:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003c2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003c6:	75 d8                	jne    c01003a0 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003c8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003cf:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003d6:	e8 2a ff ff ff       	call   c0100305 <cputch>
    return cnt;
c01003db:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003de:	c9                   	leave  
c01003df:	c3                   	ret    

c01003e0 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003e0:	55                   	push   %ebp
c01003e1:	89 e5                	mov    %esp,%ebp
c01003e3:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003e6:	e8 5d 13 00 00       	call   c0101748 <cons_getc>
c01003eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003f2:	74 f2                	je     c01003e6 <getchar+0x6>
        /* do nothing */;
    return c;
c01003f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01003f7:	c9                   	leave  
c01003f8:	c3                   	ret    

c01003f9 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01003f9:	55                   	push   %ebp
c01003fa:	89 e5                	mov    %esp,%ebp
c01003fc:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01003ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100402:	8b 00                	mov    (%eax),%eax
c0100404:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100407:	8b 45 10             	mov    0x10(%ebp),%eax
c010040a:	8b 00                	mov    (%eax),%eax
c010040c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010040f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100416:	e9 d2 00 00 00       	jmp    c01004ed <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c010041b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010041e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100421:	01 d0                	add    %edx,%eax
c0100423:	89 c2                	mov    %eax,%edx
c0100425:	c1 ea 1f             	shr    $0x1f,%edx
c0100428:	01 d0                	add    %edx,%eax
c010042a:	d1 f8                	sar    %eax
c010042c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010042f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100432:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100435:	eb 04                	jmp    c010043b <stab_binsearch+0x42>
            m --;
c0100437:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010043b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010043e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100441:	7c 1f                	jl     c0100462 <stab_binsearch+0x69>
c0100443:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100446:	89 d0                	mov    %edx,%eax
c0100448:	01 c0                	add    %eax,%eax
c010044a:	01 d0                	add    %edx,%eax
c010044c:	c1 e0 02             	shl    $0x2,%eax
c010044f:	89 c2                	mov    %eax,%edx
c0100451:	8b 45 08             	mov    0x8(%ebp),%eax
c0100454:	01 d0                	add    %edx,%eax
c0100456:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010045a:	0f b6 c0             	movzbl %al,%eax
c010045d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100460:	75 d5                	jne    c0100437 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100462:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100465:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100468:	7d 0b                	jge    c0100475 <stab_binsearch+0x7c>
            l = true_m + 1;
c010046a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010046d:	83 c0 01             	add    $0x1,%eax
c0100470:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100473:	eb 78                	jmp    c01004ed <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100475:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010047c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010047f:	89 d0                	mov    %edx,%eax
c0100481:	01 c0                	add    %eax,%eax
c0100483:	01 d0                	add    %edx,%eax
c0100485:	c1 e0 02             	shl    $0x2,%eax
c0100488:	89 c2                	mov    %eax,%edx
c010048a:	8b 45 08             	mov    0x8(%ebp),%eax
c010048d:	01 d0                	add    %edx,%eax
c010048f:	8b 40 08             	mov    0x8(%eax),%eax
c0100492:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100495:	73 13                	jae    c01004aa <stab_binsearch+0xb1>
            *region_left = m;
c0100497:	8b 45 0c             	mov    0xc(%ebp),%eax
c010049a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010049d:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004a2:	83 c0 01             	add    $0x1,%eax
c01004a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004a8:	eb 43                	jmp    c01004ed <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c01004aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004ad:	89 d0                	mov    %edx,%eax
c01004af:	01 c0                	add    %eax,%eax
c01004b1:	01 d0                	add    %edx,%eax
c01004b3:	c1 e0 02             	shl    $0x2,%eax
c01004b6:	89 c2                	mov    %eax,%edx
c01004b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01004bb:	01 d0                	add    %edx,%eax
c01004bd:	8b 40 08             	mov    0x8(%eax),%eax
c01004c0:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004c3:	76 16                	jbe    c01004db <stab_binsearch+0xe2>
            *region_right = m - 1;
c01004c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c8:	8d 50 ff             	lea    -0x1(%eax),%edx
c01004cb:	8b 45 10             	mov    0x10(%ebp),%eax
c01004ce:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01004d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d3:	83 e8 01             	sub    $0x1,%eax
c01004d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004d9:	eb 12                	jmp    c01004ed <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01004db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004de:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004e1:	89 10                	mov    %edx,(%eax)
            l = m;
c01004e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01004e9:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01004ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01004f0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01004f3:	0f 8e 22 ff ff ff    	jle    c010041b <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01004f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01004fd:	75 0f                	jne    c010050e <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01004ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100502:	8b 00                	mov    (%eax),%eax
c0100504:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100507:	8b 45 10             	mov    0x10(%ebp),%eax
c010050a:	89 10                	mov    %edx,(%eax)
c010050c:	eb 3f                	jmp    c010054d <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c010050e:	8b 45 10             	mov    0x10(%ebp),%eax
c0100511:	8b 00                	mov    (%eax),%eax
c0100513:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100516:	eb 04                	jmp    c010051c <stab_binsearch+0x123>
c0100518:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010051c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010051f:	8b 00                	mov    (%eax),%eax
c0100521:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100524:	7d 1f                	jge    c0100545 <stab_binsearch+0x14c>
c0100526:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100529:	89 d0                	mov    %edx,%eax
c010052b:	01 c0                	add    %eax,%eax
c010052d:	01 d0                	add    %edx,%eax
c010052f:	c1 e0 02             	shl    $0x2,%eax
c0100532:	89 c2                	mov    %eax,%edx
c0100534:	8b 45 08             	mov    0x8(%ebp),%eax
c0100537:	01 d0                	add    %edx,%eax
c0100539:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010053d:	0f b6 c0             	movzbl %al,%eax
c0100540:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100543:	75 d3                	jne    c0100518 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100545:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100548:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010054b:	89 10                	mov    %edx,(%eax)
    }
}
c010054d:	c9                   	leave  
c010054e:	c3                   	ret    

c010054f <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010054f:	55                   	push   %ebp
c0100550:	89 e5                	mov    %esp,%ebp
c0100552:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100555:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100558:	c7 00 0c d3 10 c0    	movl   $0xc010d30c,(%eax)
    info->eip_line = 0;
c010055e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100561:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100568:	8b 45 0c             	mov    0xc(%ebp),%eax
c010056b:	c7 40 08 0c d3 10 c0 	movl   $0xc010d30c,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100572:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100575:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010057c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010057f:	8b 55 08             	mov    0x8(%ebp),%edx
c0100582:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100588:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010058f:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100596:	76 21                	jbe    c01005b9 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100598:	c7 45 f4 c0 fe 10 c0 	movl   $0xc010fec0,-0xc(%ebp)
        stab_end = __STAB_END__;
c010059f:	c7 45 f0 0c 6f 12 c0 	movl   $0xc0126f0c,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c01005a6:	c7 45 ec 0d 6f 12 c0 	movl   $0xc0126f0d,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01005ad:	c7 45 e8 15 de 12 c0 	movl   $0xc012de15,-0x18(%ebp)
c01005b4:	e9 ea 00 00 00       	jmp    c01006a3 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01005b9:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01005c0:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c01005c5:	85 c0                	test   %eax,%eax
c01005c7:	74 11                	je     c01005da <debuginfo_eip+0x8b>
c01005c9:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c01005ce:	8b 40 18             	mov    0x18(%eax),%eax
c01005d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01005d4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01005d8:	75 0a                	jne    c01005e4 <debuginfo_eip+0x95>
            return -1;
c01005da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01005df:	e9 9e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01005e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01005e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01005ee:	00 
c01005ef:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01005f6:	00 
c01005f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01005fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01005fe:	89 04 24             	mov    %eax,(%esp)
c0100601:	e8 1d 86 00 00       	call   c0108c23 <user_mem_check>
c0100606:	85 c0                	test   %eax,%eax
c0100608:	75 0a                	jne    c0100614 <debuginfo_eip+0xc5>
            return -1;
c010060a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010060f:	e9 6e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100614:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100617:	8b 00                	mov    (%eax),%eax
c0100619:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010061c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010061f:	8b 40 04             	mov    0x4(%eax),%eax
c0100622:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100625:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100628:	8b 40 08             	mov    0x8(%eax),%eax
c010062b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010062e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100631:	8b 40 0c             	mov    0xc(%eax),%eax
c0100634:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100637:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010063a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010063d:	29 c2                	sub    %eax,%edx
c010063f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100642:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100649:	00 
c010064a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010064e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100652:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100655:	89 04 24             	mov    %eax,(%esp)
c0100658:	e8 c6 85 00 00       	call   c0108c23 <user_mem_check>
c010065d:	85 c0                	test   %eax,%eax
c010065f:	75 0a                	jne    c010066b <debuginfo_eip+0x11c>
            return -1;
c0100661:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100666:	e9 17 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c010066b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010066e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100671:	29 c2                	sub    %eax,%edx
c0100673:	89 d0                	mov    %edx,%eax
c0100675:	89 c2                	mov    %eax,%edx
c0100677:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010067a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100681:	00 
c0100682:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100686:	89 44 24 04          	mov    %eax,0x4(%esp)
c010068a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010068d:	89 04 24             	mov    %eax,(%esp)
c0100690:	e8 8e 85 00 00       	call   c0108c23 <user_mem_check>
c0100695:	85 c0                	test   %eax,%eax
c0100697:	75 0a                	jne    c01006a3 <debuginfo_eip+0x154>
            return -1;
c0100699:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010069e:	e9 df 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c01006a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006a6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01006a9:	76 0d                	jbe    c01006b8 <debuginfo_eip+0x169>
c01006ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006ae:	83 e8 01             	sub    $0x1,%eax
c01006b1:	0f b6 00             	movzbl (%eax),%eax
c01006b4:	84 c0                	test   %al,%al
c01006b6:	74 0a                	je     c01006c2 <debuginfo_eip+0x173>
        return -1;
c01006b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006bd:	e9 c0 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01006c2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01006c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006cf:	29 c2                	sub    %eax,%edx
c01006d1:	89 d0                	mov    %edx,%eax
c01006d3:	c1 f8 02             	sar    $0x2,%eax
c01006d6:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01006dc:	83 e8 01             	sub    $0x1,%eax
c01006df:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01006e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01006e5:	89 44 24 10          	mov    %eax,0x10(%esp)
c01006e9:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01006f0:	00 
c01006f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01006f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01006f8:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01006fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100702:	89 04 24             	mov    %eax,(%esp)
c0100705:	e8 ef fc ff ff       	call   c01003f9 <stab_binsearch>
    if (lfile == 0)
c010070a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010070d:	85 c0                	test   %eax,%eax
c010070f:	75 0a                	jne    c010071b <debuginfo_eip+0x1cc>
        return -1;
c0100711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100716:	e9 67 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c010071b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010071e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0100721:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100724:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100727:	8b 45 08             	mov    0x8(%ebp),%eax
c010072a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010072e:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100735:	00 
c0100736:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100739:	89 44 24 08          	mov    %eax,0x8(%esp)
c010073d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100740:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100744:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100747:	89 04 24             	mov    %eax,(%esp)
c010074a:	e8 aa fc ff ff       	call   c01003f9 <stab_binsearch>

    if (lfun <= rfun) {
c010074f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100752:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100755:	39 c2                	cmp    %eax,%edx
c0100757:	7f 7c                	jg     c01007d5 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100759:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010075c:	89 c2                	mov    %eax,%edx
c010075e:	89 d0                	mov    %edx,%eax
c0100760:	01 c0                	add    %eax,%eax
c0100762:	01 d0                	add    %edx,%eax
c0100764:	c1 e0 02             	shl    $0x2,%eax
c0100767:	89 c2                	mov    %eax,%edx
c0100769:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010076c:	01 d0                	add    %edx,%eax
c010076e:	8b 10                	mov    (%eax),%edx
c0100770:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100773:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100776:	29 c1                	sub    %eax,%ecx
c0100778:	89 c8                	mov    %ecx,%eax
c010077a:	39 c2                	cmp    %eax,%edx
c010077c:	73 22                	jae    c01007a0 <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010077e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100781:	89 c2                	mov    %eax,%edx
c0100783:	89 d0                	mov    %edx,%eax
c0100785:	01 c0                	add    %eax,%eax
c0100787:	01 d0                	add    %edx,%eax
c0100789:	c1 e0 02             	shl    $0x2,%eax
c010078c:	89 c2                	mov    %eax,%edx
c010078e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100791:	01 d0                	add    %edx,%eax
c0100793:	8b 10                	mov    (%eax),%edx
c0100795:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100798:	01 c2                	add    %eax,%edx
c010079a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010079d:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c01007a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007a3:	89 c2                	mov    %eax,%edx
c01007a5:	89 d0                	mov    %edx,%eax
c01007a7:	01 c0                	add    %eax,%eax
c01007a9:	01 d0                	add    %edx,%eax
c01007ab:	c1 e0 02             	shl    $0x2,%eax
c01007ae:	89 c2                	mov    %eax,%edx
c01007b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007b3:	01 d0                	add    %edx,%eax
c01007b5:	8b 50 08             	mov    0x8(%eax),%edx
c01007b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007bb:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01007be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007c1:	8b 40 10             	mov    0x10(%eax),%eax
c01007c4:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01007c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01007cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01007d3:	eb 15                	jmp    c01007ea <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01007d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007d8:	8b 55 08             	mov    0x8(%ebp),%edx
c01007db:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01007de:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01007e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007e7:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01007ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007ed:	8b 40 08             	mov    0x8(%eax),%eax
c01007f0:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01007f7:	00 
c01007f8:	89 04 24             	mov    %eax,(%esp)
c01007fb:	e8 4b c7 00 00       	call   c010cf4b <strfind>
c0100800:	89 c2                	mov    %eax,%edx
c0100802:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100805:	8b 40 08             	mov    0x8(%eax),%eax
c0100808:	29 c2                	sub    %eax,%edx
c010080a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010080d:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0100810:	8b 45 08             	mov    0x8(%ebp),%eax
c0100813:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100817:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010081e:	00 
c010081f:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100822:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100826:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100829:	89 44 24 04          	mov    %eax,0x4(%esp)
c010082d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100830:	89 04 24             	mov    %eax,(%esp)
c0100833:	e8 c1 fb ff ff       	call   c01003f9 <stab_binsearch>
    if (lline <= rline) {
c0100838:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010083b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010083e:	39 c2                	cmp    %eax,%edx
c0100840:	7f 24                	jg     c0100866 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100842:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100845:	89 c2                	mov    %eax,%edx
c0100847:	89 d0                	mov    %edx,%eax
c0100849:	01 c0                	add    %eax,%eax
c010084b:	01 d0                	add    %edx,%eax
c010084d:	c1 e0 02             	shl    $0x2,%eax
c0100850:	89 c2                	mov    %eax,%edx
c0100852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100855:	01 d0                	add    %edx,%eax
c0100857:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c010085b:	0f b7 d0             	movzwl %ax,%edx
c010085e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100861:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100864:	eb 13                	jmp    c0100879 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100866:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010086b:	e9 12 01 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0100870:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100873:	83 e8 01             	sub    $0x1,%eax
c0100876:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100879:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010087c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010087f:	39 c2                	cmp    %eax,%edx
c0100881:	7c 56                	jl     c01008d9 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100883:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100886:	89 c2                	mov    %eax,%edx
c0100888:	89 d0                	mov    %edx,%eax
c010088a:	01 c0                	add    %eax,%eax
c010088c:	01 d0                	add    %edx,%eax
c010088e:	c1 e0 02             	shl    $0x2,%eax
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100896:	01 d0                	add    %edx,%eax
c0100898:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010089c:	3c 84                	cmp    $0x84,%al
c010089e:	74 39                	je     c01008d9 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c01008a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008a3:	89 c2                	mov    %eax,%edx
c01008a5:	89 d0                	mov    %edx,%eax
c01008a7:	01 c0                	add    %eax,%eax
c01008a9:	01 d0                	add    %edx,%eax
c01008ab:	c1 e0 02             	shl    $0x2,%eax
c01008ae:	89 c2                	mov    %eax,%edx
c01008b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008b3:	01 d0                	add    %edx,%eax
c01008b5:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008b9:	3c 64                	cmp    $0x64,%al
c01008bb:	75 b3                	jne    c0100870 <debuginfo_eip+0x321>
c01008bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008c0:	89 c2                	mov    %eax,%edx
c01008c2:	89 d0                	mov    %edx,%eax
c01008c4:	01 c0                	add    %eax,%eax
c01008c6:	01 d0                	add    %edx,%eax
c01008c8:	c1 e0 02             	shl    $0x2,%eax
c01008cb:	89 c2                	mov    %eax,%edx
c01008cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008d0:	01 d0                	add    %edx,%eax
c01008d2:	8b 40 08             	mov    0x8(%eax),%eax
c01008d5:	85 c0                	test   %eax,%eax
c01008d7:	74 97                	je     c0100870 <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01008d9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008df:	39 c2                	cmp    %eax,%edx
c01008e1:	7c 46                	jl     c0100929 <debuginfo_eip+0x3da>
c01008e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008e6:	89 c2                	mov    %eax,%edx
c01008e8:	89 d0                	mov    %edx,%eax
c01008ea:	01 c0                	add    %eax,%eax
c01008ec:	01 d0                	add    %edx,%eax
c01008ee:	c1 e0 02             	shl    $0x2,%eax
c01008f1:	89 c2                	mov    %eax,%edx
c01008f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008f6:	01 d0                	add    %edx,%eax
c01008f8:	8b 10                	mov    (%eax),%edx
c01008fa:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01008fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100900:	29 c1                	sub    %eax,%ecx
c0100902:	89 c8                	mov    %ecx,%eax
c0100904:	39 c2                	cmp    %eax,%edx
c0100906:	73 21                	jae    c0100929 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100908:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010090b:	89 c2                	mov    %eax,%edx
c010090d:	89 d0                	mov    %edx,%eax
c010090f:	01 c0                	add    %eax,%eax
c0100911:	01 d0                	add    %edx,%eax
c0100913:	c1 e0 02             	shl    $0x2,%eax
c0100916:	89 c2                	mov    %eax,%edx
c0100918:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091b:	01 d0                	add    %edx,%eax
c010091d:	8b 10                	mov    (%eax),%edx
c010091f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100922:	01 c2                	add    %eax,%edx
c0100924:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100927:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100929:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010092c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010092f:	39 c2                	cmp    %eax,%edx
c0100931:	7d 4a                	jge    c010097d <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100933:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100936:	83 c0 01             	add    $0x1,%eax
c0100939:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010093c:	eb 18                	jmp    c0100956 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c010093e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100941:	8b 40 14             	mov    0x14(%eax),%eax
c0100944:	8d 50 01             	lea    0x1(%eax),%edx
c0100947:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094a:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c010094d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100950:	83 c0 01             	add    $0x1,%eax
c0100953:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100956:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100959:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c010095c:	39 c2                	cmp    %eax,%edx
c010095e:	7d 1d                	jge    c010097d <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100960:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100963:	89 c2                	mov    %eax,%edx
c0100965:	89 d0                	mov    %edx,%eax
c0100967:	01 c0                	add    %eax,%eax
c0100969:	01 d0                	add    %edx,%eax
c010096b:	c1 e0 02             	shl    $0x2,%eax
c010096e:	89 c2                	mov    %eax,%edx
c0100970:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100973:	01 d0                	add    %edx,%eax
c0100975:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100979:	3c a0                	cmp    $0xa0,%al
c010097b:	74 c1                	je     c010093e <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c010097d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100982:	c9                   	leave  
c0100983:	c3                   	ret    

c0100984 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100984:	55                   	push   %ebp
c0100985:	89 e5                	mov    %esp,%ebp
c0100987:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c010098a:	c7 04 24 16 d3 10 c0 	movl   $0xc010d316,(%esp)
c0100991:	e8 c2 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100996:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c010099d:	c0 
c010099e:	c7 04 24 2f d3 10 c0 	movl   $0xc010d32f,(%esp)
c01009a5:	e8 ae f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c01009aa:	c7 44 24 04 60 d2 10 	movl   $0xc010d260,0x4(%esp)
c01009b1:	c0 
c01009b2:	c7 04 24 47 d3 10 c0 	movl   $0xc010d347,(%esp)
c01009b9:	e8 9a f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c01009be:	c7 44 24 04 f9 13 1c 	movl   $0xc01c13f9,0x4(%esp)
c01009c5:	c0 
c01009c6:	c7 04 24 5f d3 10 c0 	movl   $0xc010d35f,(%esp)
c01009cd:	e8 86 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c01009d2:	c7 44 24 04 c4 46 1c 	movl   $0xc01c46c4,0x4(%esp)
c01009d9:	c0 
c01009da:	c7 04 24 77 d3 10 c0 	movl   $0xc010d377,(%esp)
c01009e1:	e8 72 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c01009e6:	b8 c4 46 1c c0       	mov    $0xc01c46c4,%eax
c01009eb:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c01009f1:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c01009f6:	29 c2                	sub    %eax,%edx
c01009f8:	89 d0                	mov    %edx,%eax
c01009fa:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a00:	85 c0                	test   %eax,%eax
c0100a02:	0f 48 c2             	cmovs  %edx,%eax
c0100a05:	c1 f8 0a             	sar    $0xa,%eax
c0100a08:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a0c:	c7 04 24 90 d3 10 c0 	movl   $0xc010d390,(%esp)
c0100a13:	e8 40 f9 ff ff       	call   c0100358 <cprintf>
}
c0100a18:	c9                   	leave  
c0100a19:	c3                   	ret    

c0100a1a <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100a1a:	55                   	push   %ebp
c0100a1b:	89 e5                	mov    %esp,%ebp
c0100a1d:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100a23:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100a26:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a2d:	89 04 24             	mov    %eax,(%esp)
c0100a30:	e8 1a fb ff ff       	call   c010054f <debuginfo_eip>
c0100a35:	85 c0                	test   %eax,%eax
c0100a37:	74 15                	je     c0100a4e <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a40:	c7 04 24 ba d3 10 c0 	movl   $0xc010d3ba,(%esp)
c0100a47:	e8 0c f9 ff ff       	call   c0100358 <cprintf>
c0100a4c:	eb 6d                	jmp    c0100abb <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100a55:	eb 1c                	jmp    c0100a73 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a5d:	01 d0                	add    %edx,%eax
c0100a5f:	0f b6 00             	movzbl (%eax),%eax
c0100a62:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100a68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100a6b:	01 ca                	add    %ecx,%edx
c0100a6d:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a6f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100a76:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100a79:	7f dc                	jg     c0100a57 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100a7b:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a84:	01 d0                	add    %edx,%eax
c0100a86:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100a8c:	8b 55 08             	mov    0x8(%ebp),%edx
c0100a8f:	89 d1                	mov    %edx,%ecx
c0100a91:	29 c1                	sub    %eax,%ecx
c0100a93:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100a96:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a99:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100a9d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100aa3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100aa7:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100aab:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100aaf:	c7 04 24 d6 d3 10 c0 	movl   $0xc010d3d6,(%esp)
c0100ab6:	e8 9d f8 ff ff       	call   c0100358 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100abb:	c9                   	leave  
c0100abc:	c3                   	ret    

c0100abd <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100abd:	55                   	push   %ebp
c0100abe:	89 e5                	mov    %esp,%ebp
c0100ac0:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100ac3:	8b 45 04             	mov    0x4(%ebp),%eax
c0100ac6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100ac9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100acc:	c9                   	leave  
c0100acd:	c3                   	ret    

c0100ace <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100ace:	55                   	push   %ebp
c0100acf:	89 e5                	mov    %esp,%ebp
c0100ad1:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100ad4:	89 e8                	mov    %ebp,%eax
c0100ad6:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100ad9:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp();
c0100adc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t eip = read_eip();
c0100adf:	e8 d9 ff ff ff       	call   c0100abd <read_eip>
c0100ae4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int i;
    for (i = 0; i < STACKFRAME_DEPTH && ebp; i++) {
c0100ae7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100aee:	e9 88 00 00 00       	jmp    c0100b7b <print_stackframe+0xad>
        uint32_t *args = (uint32_t *)ebp + 2;
c0100af3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100af6:	83 c0 08             	add    $0x8,%eax
c0100af9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int j;
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100afc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100aff:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100b03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b0a:	c7 04 24 e8 d3 10 c0 	movl   $0xc010d3e8,(%esp)
c0100b11:	e8 42 f8 ff ff       	call   c0100358 <cprintf>
        for (j = 0; j < 4; j++)
c0100b16:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b1d:	eb 25                	jmp    c0100b44 <print_stackframe+0x76>
            cprintf("0x%08x ", args[j]);
c0100b1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b22:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100b29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100b2c:	01 d0                	add    %edx,%eax
c0100b2e:	8b 00                	mov    (%eax),%eax
c0100b30:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b34:	c7 04 24 04 d4 10 c0 	movl   $0xc010d404,(%esp)
c0100b3b:	e8 18 f8 ff ff       	call   c0100358 <cprintf>
    int i;
    for (i = 0; i < STACKFRAME_DEPTH && ebp; i++) {
        uint32_t *args = (uint32_t *)ebp + 2;
        int j;
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        for (j = 0; j < 4; j++)
c0100b40:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100b44:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100b48:	7e d5                	jle    c0100b1f <print_stackframe+0x51>
            cprintf("0x%08x ", args[j]);
        cprintf("\n");
c0100b4a:	c7 04 24 0c d4 10 c0 	movl   $0xc010d40c,(%esp)
c0100b51:	e8 02 f8 ff ff       	call   c0100358 <cprintf>
        print_debuginfo(eip - 1);
c0100b56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b59:	83 e8 01             	sub    $0x1,%eax
c0100b5c:	89 04 24             	mov    %eax,(%esp)
c0100b5f:	e8 b6 fe ff ff       	call   c0100a1a <print_debuginfo>
        eip = *(uint32_t *)(ebp + 4);
c0100b64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b67:	83 c0 04             	add    $0x4,%eax
c0100b6a:	8b 00                	mov    (%eax),%eax
c0100b6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = *(uint32_t *)ebp;
c0100b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b72:	8b 00                	mov    (%eax),%eax
c0100b74:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp();
    uint32_t eip = read_eip();
    int i;
    for (i = 0; i < STACKFRAME_DEPTH && ebp; i++) {
c0100b77:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100b7b:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100b7f:	7f 0a                	jg     c0100b8b <print_stackframe+0xbd>
c0100b81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100b85:	0f 85 68 ff ff ff    	jne    c0100af3 <print_stackframe+0x25>
        cprintf("\n");
        print_debuginfo(eip - 1);
        eip = *(uint32_t *)(ebp + 4);
        ebp = *(uint32_t *)ebp;
    }
}
c0100b8b:	c9                   	leave  
c0100b8c:	c3                   	ret    

c0100b8d <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100b8d:	55                   	push   %ebp
c0100b8e:	89 e5                	mov    %esp,%ebp
c0100b90:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100b93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100b9a:	eb 0c                	jmp    c0100ba8 <parse+0x1b>
            *buf ++ = '\0';
c0100b9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b9f:	8d 50 01             	lea    0x1(%eax),%edx
c0100ba2:	89 55 08             	mov    %edx,0x8(%ebp)
c0100ba5:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100ba8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bab:	0f b6 00             	movzbl (%eax),%eax
c0100bae:	84 c0                	test   %al,%al
c0100bb0:	74 1d                	je     c0100bcf <parse+0x42>
c0100bb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bb5:	0f b6 00             	movzbl (%eax),%eax
c0100bb8:	0f be c0             	movsbl %al,%eax
c0100bbb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bbf:	c7 04 24 90 d4 10 c0 	movl   $0xc010d490,(%esp)
c0100bc6:	e8 4d c3 00 00       	call   c010cf18 <strchr>
c0100bcb:	85 c0                	test   %eax,%eax
c0100bcd:	75 cd                	jne    c0100b9c <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100bcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bd2:	0f b6 00             	movzbl (%eax),%eax
c0100bd5:	84 c0                	test   %al,%al
c0100bd7:	75 02                	jne    c0100bdb <parse+0x4e>
            break;
c0100bd9:	eb 67                	jmp    c0100c42 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100bdb:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100bdf:	75 14                	jne    c0100bf5 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100be1:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100be8:	00 
c0100be9:	c7 04 24 95 d4 10 c0 	movl   $0xc010d495,(%esp)
c0100bf0:	e8 63 f7 ff ff       	call   c0100358 <cprintf>
        }
        argv[argc ++] = buf;
c0100bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf8:	8d 50 01             	lea    0x1(%eax),%edx
c0100bfb:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100bfe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c05:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c08:	01 c2                	add    %eax,%edx
c0100c0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c0d:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c0f:	eb 04                	jmp    c0100c15 <parse+0x88>
            buf ++;
c0100c11:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c15:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c18:	0f b6 00             	movzbl (%eax),%eax
c0100c1b:	84 c0                	test   %al,%al
c0100c1d:	74 1d                	je     c0100c3c <parse+0xaf>
c0100c1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c22:	0f b6 00             	movzbl (%eax),%eax
c0100c25:	0f be c0             	movsbl %al,%eax
c0100c28:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c2c:	c7 04 24 90 d4 10 c0 	movl   $0xc010d490,(%esp)
c0100c33:	e8 e0 c2 00 00       	call   c010cf18 <strchr>
c0100c38:	85 c0                	test   %eax,%eax
c0100c3a:	74 d5                	je     c0100c11 <parse+0x84>
            buf ++;
        }
    }
c0100c3c:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c3d:	e9 66 ff ff ff       	jmp    c0100ba8 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100c42:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100c45:	c9                   	leave  
c0100c46:	c3                   	ret    

c0100c47 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100c47:	55                   	push   %ebp
c0100c48:	89 e5                	mov    %esp,%ebp
c0100c4a:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100c4d:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100c50:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c54:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c57:	89 04 24             	mov    %eax,(%esp)
c0100c5a:	e8 2e ff ff ff       	call   c0100b8d <parse>
c0100c5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100c62:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100c66:	75 0a                	jne    c0100c72 <runcmd+0x2b>
        return 0;
c0100c68:	b8 00 00 00 00       	mov    $0x0,%eax
c0100c6d:	e9 85 00 00 00       	jmp    c0100cf7 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100c72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100c79:	eb 5c                	jmp    c0100cd7 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100c7b:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100c7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c81:	89 d0                	mov    %edx,%eax
c0100c83:	01 c0                	add    %eax,%eax
c0100c85:	01 d0                	add    %edx,%eax
c0100c87:	c1 e0 02             	shl    $0x2,%eax
c0100c8a:	05 20 00 13 c0       	add    $0xc0130020,%eax
c0100c8f:	8b 00                	mov    (%eax),%eax
c0100c91:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100c95:	89 04 24             	mov    %eax,(%esp)
c0100c98:	e8 dc c1 00 00       	call   c010ce79 <strcmp>
c0100c9d:	85 c0                	test   %eax,%eax
c0100c9f:	75 32                	jne    c0100cd3 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100ca1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100ca4:	89 d0                	mov    %edx,%eax
c0100ca6:	01 c0                	add    %eax,%eax
c0100ca8:	01 d0                	add    %edx,%eax
c0100caa:	c1 e0 02             	shl    $0x2,%eax
c0100cad:	05 20 00 13 c0       	add    $0xc0130020,%eax
c0100cb2:	8b 40 08             	mov    0x8(%eax),%eax
c0100cb5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100cb8:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100cbb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100cbe:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100cc2:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100cc5:	83 c2 04             	add    $0x4,%edx
c0100cc8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100ccc:	89 0c 24             	mov    %ecx,(%esp)
c0100ccf:	ff d0                	call   *%eax
c0100cd1:	eb 24                	jmp    c0100cf7 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100cd3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100cd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cda:	83 f8 02             	cmp    $0x2,%eax
c0100cdd:	76 9c                	jbe    c0100c7b <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100cdf:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100ce2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ce6:	c7 04 24 b3 d4 10 c0 	movl   $0xc010d4b3,(%esp)
c0100ced:	e8 66 f6 ff ff       	call   c0100358 <cprintf>
    return 0;
c0100cf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100cf7:	c9                   	leave  
c0100cf8:	c3                   	ret    

c0100cf9 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100cf9:	55                   	push   %ebp
c0100cfa:	89 e5                	mov    %esp,%ebp
c0100cfc:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100cff:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0100d06:	e8 4d f6 ff ff       	call   c0100358 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100d0b:	c7 04 24 f4 d4 10 c0 	movl   $0xc010d4f4,(%esp)
c0100d12:	e8 41 f6 ff ff       	call   c0100358 <cprintf>

    if (tf != NULL) {
c0100d17:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100d1b:	74 0b                	je     c0100d28 <kmonitor+0x2f>
        print_trapframe(tf);
c0100d1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d20:	89 04 24             	mov    %eax,(%esp)
c0100d23:	e8 6a 16 00 00       	call   c0102392 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100d28:	c7 04 24 19 d5 10 c0 	movl   $0xc010d519,(%esp)
c0100d2f:	e8 1b f5 ff ff       	call   c010024f <readline>
c0100d34:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100d37:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100d3b:	74 18                	je     c0100d55 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100d3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d40:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d47:	89 04 24             	mov    %eax,(%esp)
c0100d4a:	e8 f8 fe ff ff       	call   c0100c47 <runcmd>
c0100d4f:	85 c0                	test   %eax,%eax
c0100d51:	79 02                	jns    c0100d55 <kmonitor+0x5c>
                break;
c0100d53:	eb 02                	jmp    c0100d57 <kmonitor+0x5e>
            }
        }
    }
c0100d55:	eb d1                	jmp    c0100d28 <kmonitor+0x2f>
}
c0100d57:	c9                   	leave  
c0100d58:	c3                   	ret    

c0100d59 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100d59:	55                   	push   %ebp
c0100d5a:	89 e5                	mov    %esp,%ebp
c0100d5c:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d66:	eb 3f                	jmp    c0100da7 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100d68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d6b:	89 d0                	mov    %edx,%eax
c0100d6d:	01 c0                	add    %eax,%eax
c0100d6f:	01 d0                	add    %edx,%eax
c0100d71:	c1 e0 02             	shl    $0x2,%eax
c0100d74:	05 20 00 13 c0       	add    $0xc0130020,%eax
c0100d79:	8b 48 04             	mov    0x4(%eax),%ecx
c0100d7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d7f:	89 d0                	mov    %edx,%eax
c0100d81:	01 c0                	add    %eax,%eax
c0100d83:	01 d0                	add    %edx,%eax
c0100d85:	c1 e0 02             	shl    $0x2,%eax
c0100d88:	05 20 00 13 c0       	add    $0xc0130020,%eax
c0100d8d:	8b 00                	mov    (%eax),%eax
c0100d8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100d93:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d97:	c7 04 24 1d d5 10 c0 	movl   $0xc010d51d,(%esp)
c0100d9e:	e8 b5 f5 ff ff       	call   c0100358 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100da3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100daa:	83 f8 02             	cmp    $0x2,%eax
c0100dad:	76 b9                	jbe    c0100d68 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100daf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100db4:	c9                   	leave  
c0100db5:	c3                   	ret    

c0100db6 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100db6:	55                   	push   %ebp
c0100db7:	89 e5                	mov    %esp,%ebp
c0100db9:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100dbc:	e8 c3 fb ff ff       	call   c0100984 <print_kerninfo>
    return 0;
c0100dc1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dc6:	c9                   	leave  
c0100dc7:	c3                   	ret    

c0100dc8 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100dc8:	55                   	push   %ebp
c0100dc9:	89 e5                	mov    %esp,%ebp
c0100dcb:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100dce:	e8 fb fc ff ff       	call   c0100ace <print_stackframe>
    return 0;
c0100dd3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dd8:	c9                   	leave  
c0100dd9:	c3                   	ret    

c0100dda <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100dda:	55                   	push   %ebp
c0100ddb:	89 e5                	mov    %esp,%ebp
c0100ddd:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100de0:	a1 20 18 1c c0       	mov    0xc01c1820,%eax
c0100de5:	85 c0                	test   %eax,%eax
c0100de7:	74 02                	je     c0100deb <__panic+0x11>
        goto panic_dead;
c0100de9:	eb 48                	jmp    c0100e33 <__panic+0x59>
    }
    is_panic = 1;
c0100deb:	c7 05 20 18 1c c0 01 	movl   $0x1,0xc01c1820
c0100df2:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100df5:	8d 45 14             	lea    0x14(%ebp),%eax
c0100df8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100dfb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100dfe:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e02:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e05:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e09:	c7 04 24 26 d5 10 c0 	movl   $0xc010d526,(%esp)
c0100e10:	e8 43 f5 ff ff       	call   c0100358 <cprintf>
    vcprintf(fmt, ap);
c0100e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e18:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e1c:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e1f:	89 04 24             	mov    %eax,(%esp)
c0100e22:	e8 fe f4 ff ff       	call   c0100325 <vcprintf>
    cprintf("\n");
c0100e27:	c7 04 24 42 d5 10 c0 	movl   $0xc010d542,(%esp)
c0100e2e:	e8 25 f5 ff ff       	call   c0100358 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100e33:	e8 fa 11 00 00       	call   c0102032 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100e38:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100e3f:	e8 b5 fe ff ff       	call   c0100cf9 <kmonitor>
    }
c0100e44:	eb f2                	jmp    c0100e38 <__panic+0x5e>

c0100e46 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100e46:	55                   	push   %ebp
c0100e47:	89 e5                	mov    %esp,%ebp
c0100e49:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100e4c:	8d 45 14             	lea    0x14(%ebp),%eax
c0100e4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100e52:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e55:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e59:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e60:	c7 04 24 44 d5 10 c0 	movl   $0xc010d544,(%esp)
c0100e67:	e8 ec f4 ff ff       	call   c0100358 <cprintf>
    vcprintf(fmt, ap);
c0100e6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e73:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e76:	89 04 24             	mov    %eax,(%esp)
c0100e79:	e8 a7 f4 ff ff       	call   c0100325 <vcprintf>
    cprintf("\n");
c0100e7e:	c7 04 24 42 d5 10 c0 	movl   $0xc010d542,(%esp)
c0100e85:	e8 ce f4 ff ff       	call   c0100358 <cprintf>
    va_end(ap);
}
c0100e8a:	c9                   	leave  
c0100e8b:	c3                   	ret    

c0100e8c <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100e8c:	55                   	push   %ebp
c0100e8d:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100e8f:	a1 20 18 1c c0       	mov    0xc01c1820,%eax
}
c0100e94:	5d                   	pop    %ebp
c0100e95:	c3                   	ret    

c0100e96 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100e96:	55                   	push   %ebp
c0100e97:	89 e5                	mov    %esp,%ebp
c0100e99:	83 ec 28             	sub    $0x28,%esp
c0100e9c:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100ea2:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100ea6:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100eaa:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100eae:	ee                   	out    %al,(%dx)
c0100eaf:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100eb5:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100eb9:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100ebd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100ec1:	ee                   	out    %al,(%dx)
c0100ec2:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100ec8:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100ecc:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100ed0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100ed4:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100ed5:	c7 05 d8 44 1c c0 00 	movl   $0x0,0xc01c44d8
c0100edc:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100edf:	c7 04 24 62 d5 10 c0 	movl   $0xc010d562,(%esp)
c0100ee6:	e8 6d f4 ff ff       	call   c0100358 <cprintf>
    pic_enable(IRQ_TIMER);
c0100eeb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100ef2:	e8 99 11 00 00       	call   c0102090 <pic_enable>
}
c0100ef7:	c9                   	leave  
c0100ef8:	c3                   	ret    

c0100ef9 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100ef9:	55                   	push   %ebp
c0100efa:	89 e5                	mov    %esp,%ebp
c0100efc:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100eff:	9c                   	pushf  
c0100f00:	58                   	pop    %eax
c0100f01:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100f04:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100f07:	25 00 02 00 00       	and    $0x200,%eax
c0100f0c:	85 c0                	test   %eax,%eax
c0100f0e:	74 0c                	je     c0100f1c <__intr_save+0x23>
        intr_disable();
c0100f10:	e8 1d 11 00 00       	call   c0102032 <intr_disable>
        return 1;
c0100f15:	b8 01 00 00 00       	mov    $0x1,%eax
c0100f1a:	eb 05                	jmp    c0100f21 <__intr_save+0x28>
    }
    return 0;
c0100f1c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f21:	c9                   	leave  
c0100f22:	c3                   	ret    

c0100f23 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0100f23:	55                   	push   %ebp
c0100f24:	89 e5                	mov    %esp,%ebp
c0100f26:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0100f29:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100f2d:	74 05                	je     c0100f34 <__intr_restore+0x11>
        intr_enable();
c0100f2f:	e8 f8 10 00 00       	call   c010202c <intr_enable>
    }
}
c0100f34:	c9                   	leave  
c0100f35:	c3                   	ret    

c0100f36 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0100f36:	55                   	push   %ebp
c0100f37:	89 e5                	mov    %esp,%ebp
c0100f39:	83 ec 10             	sub    $0x10,%esp
c0100f3c:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f42:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0100f46:	89 c2                	mov    %eax,%edx
c0100f48:	ec                   	in     (%dx),%al
c0100f49:	88 45 fd             	mov    %al,-0x3(%ebp)
c0100f4c:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0100f52:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100f56:	89 c2                	mov    %eax,%edx
c0100f58:	ec                   	in     (%dx),%al
c0100f59:	88 45 f9             	mov    %al,-0x7(%ebp)
c0100f5c:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c0100f62:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f66:	89 c2                	mov    %eax,%edx
c0100f68:	ec                   	in     (%dx),%al
c0100f69:	88 45 f5             	mov    %al,-0xb(%ebp)
c0100f6c:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c0100f72:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0100f76:	89 c2                	mov    %eax,%edx
c0100f78:	ec                   	in     (%dx),%al
c0100f79:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0100f7c:	c9                   	leave  
c0100f7d:	c3                   	ret    

c0100f7e <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0100f7e:	55                   	push   %ebp
c0100f7f:	89 e5                	mov    %esp,%ebp
c0100f81:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0100f84:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0100f8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f8e:	0f b7 00             	movzwl (%eax),%eax
c0100f91:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0100f95:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f98:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0100f9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fa0:	0f b7 00             	movzwl (%eax),%eax
c0100fa3:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0100fa7:	74 12                	je     c0100fbb <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0100fa9:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c0100fb0:	66 c7 05 46 18 1c c0 	movw   $0x3b4,0xc01c1846
c0100fb7:	b4 03 
c0100fb9:	eb 13                	jmp    c0100fce <cga_init+0x50>
    } else {
        *cp = was;
c0100fbb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fbe:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0100fc2:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0100fc5:	66 c7 05 46 18 1c c0 	movw   $0x3d4,0xc01c1846
c0100fcc:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0100fce:	0f b7 05 46 18 1c c0 	movzwl 0xc01c1846,%eax
c0100fd5:	0f b7 c0             	movzwl %ax,%eax
c0100fd8:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0100fdc:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100fe0:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fe4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fe8:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0100fe9:	0f b7 05 46 18 1c c0 	movzwl 0xc01c1846,%eax
c0100ff0:	83 c0 01             	add    $0x1,%eax
c0100ff3:	0f b7 c0             	movzwl %ax,%eax
c0100ff6:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100ffa:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0100ffe:	89 c2                	mov    %eax,%edx
c0101000:	ec                   	in     (%dx),%al
c0101001:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101004:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101008:	0f b6 c0             	movzbl %al,%eax
c010100b:	c1 e0 08             	shl    $0x8,%eax
c010100e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101011:	0f b7 05 46 18 1c c0 	movzwl 0xc01c1846,%eax
c0101018:	0f b7 c0             	movzwl %ax,%eax
c010101b:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010101f:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101023:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101027:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010102b:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c010102c:	0f b7 05 46 18 1c c0 	movzwl 0xc01c1846,%eax
c0101033:	83 c0 01             	add    $0x1,%eax
c0101036:	0f b7 c0             	movzwl %ax,%eax
c0101039:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010103d:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101041:	89 c2                	mov    %eax,%edx
c0101043:	ec                   	in     (%dx),%al
c0101044:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c0101047:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010104b:	0f b6 c0             	movzbl %al,%eax
c010104e:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101051:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101054:	a3 40 18 1c c0       	mov    %eax,0xc01c1840
    crt_pos = pos;
c0101059:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010105c:	66 a3 44 18 1c c0    	mov    %ax,0xc01c1844
}
c0101062:	c9                   	leave  
c0101063:	c3                   	ret    

c0101064 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0101064:	55                   	push   %ebp
c0101065:	89 e5                	mov    %esp,%ebp
c0101067:	83 ec 48             	sub    $0x48,%esp
c010106a:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101070:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101074:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101078:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010107c:	ee                   	out    %al,(%dx)
c010107d:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c0101083:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c0101087:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010108b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010108f:	ee                   	out    %al,(%dx)
c0101090:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c0101096:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c010109a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010109e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01010a2:	ee                   	out    %al,(%dx)
c01010a3:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01010a9:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01010ad:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01010b1:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01010b5:	ee                   	out    %al,(%dx)
c01010b6:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01010bc:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01010c0:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01010c4:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01010c8:	ee                   	out    %al,(%dx)
c01010c9:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01010cf:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01010d3:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01010d7:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01010db:	ee                   	out    %al,(%dx)
c01010dc:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01010e2:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c01010e6:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01010ea:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01010ee:	ee                   	out    %al,(%dx)
c01010ef:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01010f5:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01010f9:	89 c2                	mov    %eax,%edx
c01010fb:	ec                   	in     (%dx),%al
c01010fc:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c01010ff:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101103:	3c ff                	cmp    $0xff,%al
c0101105:	0f 95 c0             	setne  %al
c0101108:	0f b6 c0             	movzbl %al,%eax
c010110b:	a3 48 18 1c c0       	mov    %eax,0xc01c1848
c0101110:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101116:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c010111a:	89 c2                	mov    %eax,%edx
c010111c:	ec                   	in     (%dx),%al
c010111d:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101120:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c0101126:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c010112a:	89 c2                	mov    %eax,%edx
c010112c:	ec                   	in     (%dx),%al
c010112d:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101130:	a1 48 18 1c c0       	mov    0xc01c1848,%eax
c0101135:	85 c0                	test   %eax,%eax
c0101137:	74 0c                	je     c0101145 <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101139:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101140:	e8 4b 0f 00 00       	call   c0102090 <pic_enable>
    }
}
c0101145:	c9                   	leave  
c0101146:	c3                   	ret    

c0101147 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101147:	55                   	push   %ebp
c0101148:	89 e5                	mov    %esp,%ebp
c010114a:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010114d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101154:	eb 09                	jmp    c010115f <lpt_putc_sub+0x18>
        delay();
c0101156:	e8 db fd ff ff       	call   c0100f36 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010115b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010115f:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c0101165:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101169:	89 c2                	mov    %eax,%edx
c010116b:	ec                   	in     (%dx),%al
c010116c:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c010116f:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101173:	84 c0                	test   %al,%al
c0101175:	78 09                	js     c0101180 <lpt_putc_sub+0x39>
c0101177:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c010117e:	7e d6                	jle    c0101156 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101180:	8b 45 08             	mov    0x8(%ebp),%eax
c0101183:	0f b6 c0             	movzbl %al,%eax
c0101186:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c010118c:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010118f:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101193:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101197:	ee                   	out    %al,(%dx)
c0101198:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c010119e:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01011a2:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01011a6:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01011aa:	ee                   	out    %al,(%dx)
c01011ab:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01011b1:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01011b5:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01011b9:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01011bd:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01011be:	c9                   	leave  
c01011bf:	c3                   	ret    

c01011c0 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01011c0:	55                   	push   %ebp
c01011c1:	89 e5                	mov    %esp,%ebp
c01011c3:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01011c6:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01011ca:	74 0d                	je     c01011d9 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01011cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01011cf:	89 04 24             	mov    %eax,(%esp)
c01011d2:	e8 70 ff ff ff       	call   c0101147 <lpt_putc_sub>
c01011d7:	eb 24                	jmp    c01011fd <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01011d9:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01011e0:	e8 62 ff ff ff       	call   c0101147 <lpt_putc_sub>
        lpt_putc_sub(' ');
c01011e5:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01011ec:	e8 56 ff ff ff       	call   c0101147 <lpt_putc_sub>
        lpt_putc_sub('\b');
c01011f1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01011f8:	e8 4a ff ff ff       	call   c0101147 <lpt_putc_sub>
    }
}
c01011fd:	c9                   	leave  
c01011fe:	c3                   	ret    

c01011ff <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c01011ff:	55                   	push   %ebp
c0101200:	89 e5                	mov    %esp,%ebp
c0101202:	53                   	push   %ebx
c0101203:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101206:	8b 45 08             	mov    0x8(%ebp),%eax
c0101209:	b0 00                	mov    $0x0,%al
c010120b:	85 c0                	test   %eax,%eax
c010120d:	75 07                	jne    c0101216 <cga_putc+0x17>
        c |= 0x0700;
c010120f:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101216:	8b 45 08             	mov    0x8(%ebp),%eax
c0101219:	0f b6 c0             	movzbl %al,%eax
c010121c:	83 f8 0a             	cmp    $0xa,%eax
c010121f:	74 4c                	je     c010126d <cga_putc+0x6e>
c0101221:	83 f8 0d             	cmp    $0xd,%eax
c0101224:	74 57                	je     c010127d <cga_putc+0x7e>
c0101226:	83 f8 08             	cmp    $0x8,%eax
c0101229:	0f 85 88 00 00 00    	jne    c01012b7 <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c010122f:	0f b7 05 44 18 1c c0 	movzwl 0xc01c1844,%eax
c0101236:	66 85 c0             	test   %ax,%ax
c0101239:	74 30                	je     c010126b <cga_putc+0x6c>
            crt_pos --;
c010123b:	0f b7 05 44 18 1c c0 	movzwl 0xc01c1844,%eax
c0101242:	83 e8 01             	sub    $0x1,%eax
c0101245:	66 a3 44 18 1c c0    	mov    %ax,0xc01c1844
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c010124b:	a1 40 18 1c c0       	mov    0xc01c1840,%eax
c0101250:	0f b7 15 44 18 1c c0 	movzwl 0xc01c1844,%edx
c0101257:	0f b7 d2             	movzwl %dx,%edx
c010125a:	01 d2                	add    %edx,%edx
c010125c:	01 c2                	add    %eax,%edx
c010125e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101261:	b0 00                	mov    $0x0,%al
c0101263:	83 c8 20             	or     $0x20,%eax
c0101266:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101269:	eb 72                	jmp    c01012dd <cga_putc+0xde>
c010126b:	eb 70                	jmp    c01012dd <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c010126d:	0f b7 05 44 18 1c c0 	movzwl 0xc01c1844,%eax
c0101274:	83 c0 50             	add    $0x50,%eax
c0101277:	66 a3 44 18 1c c0    	mov    %ax,0xc01c1844
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c010127d:	0f b7 1d 44 18 1c c0 	movzwl 0xc01c1844,%ebx
c0101284:	0f b7 0d 44 18 1c c0 	movzwl 0xc01c1844,%ecx
c010128b:	0f b7 c1             	movzwl %cx,%eax
c010128e:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101294:	c1 e8 10             	shr    $0x10,%eax
c0101297:	89 c2                	mov    %eax,%edx
c0101299:	66 c1 ea 06          	shr    $0x6,%dx
c010129d:	89 d0                	mov    %edx,%eax
c010129f:	c1 e0 02             	shl    $0x2,%eax
c01012a2:	01 d0                	add    %edx,%eax
c01012a4:	c1 e0 04             	shl    $0x4,%eax
c01012a7:	29 c1                	sub    %eax,%ecx
c01012a9:	89 ca                	mov    %ecx,%edx
c01012ab:	89 d8                	mov    %ebx,%eax
c01012ad:	29 d0                	sub    %edx,%eax
c01012af:	66 a3 44 18 1c c0    	mov    %ax,0xc01c1844
        break;
c01012b5:	eb 26                	jmp    c01012dd <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01012b7:	8b 0d 40 18 1c c0    	mov    0xc01c1840,%ecx
c01012bd:	0f b7 05 44 18 1c c0 	movzwl 0xc01c1844,%eax
c01012c4:	8d 50 01             	lea    0x1(%eax),%edx
c01012c7:	66 89 15 44 18 1c c0 	mov    %dx,0xc01c1844
c01012ce:	0f b7 c0             	movzwl %ax,%eax
c01012d1:	01 c0                	add    %eax,%eax
c01012d3:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01012d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01012d9:	66 89 02             	mov    %ax,(%edx)
        break;
c01012dc:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01012dd:	0f b7 05 44 18 1c c0 	movzwl 0xc01c1844,%eax
c01012e4:	66 3d cf 07          	cmp    $0x7cf,%ax
c01012e8:	76 5b                	jbe    c0101345 <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c01012ea:	a1 40 18 1c c0       	mov    0xc01c1840,%eax
c01012ef:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c01012f5:	a1 40 18 1c c0       	mov    0xc01c1840,%eax
c01012fa:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c0101301:	00 
c0101302:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101306:	89 04 24             	mov    %eax,(%esp)
c0101309:	e8 08 be 00 00       	call   c010d116 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010130e:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101315:	eb 15                	jmp    c010132c <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c0101317:	a1 40 18 1c c0       	mov    0xc01c1840,%eax
c010131c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010131f:	01 d2                	add    %edx,%edx
c0101321:	01 d0                	add    %edx,%eax
c0101323:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101328:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010132c:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101333:	7e e2                	jle    c0101317 <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101335:	0f b7 05 44 18 1c c0 	movzwl 0xc01c1844,%eax
c010133c:	83 e8 50             	sub    $0x50,%eax
c010133f:	66 a3 44 18 1c c0    	mov    %ax,0xc01c1844
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101345:	0f b7 05 46 18 1c c0 	movzwl 0xc01c1846,%eax
c010134c:	0f b7 c0             	movzwl %ax,%eax
c010134f:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101353:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c0101357:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010135b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010135f:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101360:	0f b7 05 44 18 1c c0 	movzwl 0xc01c1844,%eax
c0101367:	66 c1 e8 08          	shr    $0x8,%ax
c010136b:	0f b6 c0             	movzbl %al,%eax
c010136e:	0f b7 15 46 18 1c c0 	movzwl 0xc01c1846,%edx
c0101375:	83 c2 01             	add    $0x1,%edx
c0101378:	0f b7 d2             	movzwl %dx,%edx
c010137b:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c010137f:	88 45 ed             	mov    %al,-0x13(%ebp)
c0101382:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101386:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010138a:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c010138b:	0f b7 05 46 18 1c c0 	movzwl 0xc01c1846,%eax
c0101392:	0f b7 c0             	movzwl %ax,%eax
c0101395:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101399:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c010139d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01013a1:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01013a5:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c01013a6:	0f b7 05 44 18 1c c0 	movzwl 0xc01c1844,%eax
c01013ad:	0f b6 c0             	movzbl %al,%eax
c01013b0:	0f b7 15 46 18 1c c0 	movzwl 0xc01c1846,%edx
c01013b7:	83 c2 01             	add    $0x1,%edx
c01013ba:	0f b7 d2             	movzwl %dx,%edx
c01013bd:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01013c1:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01013c4:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01013c8:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01013cc:	ee                   	out    %al,(%dx)
}
c01013cd:	83 c4 34             	add    $0x34,%esp
c01013d0:	5b                   	pop    %ebx
c01013d1:	5d                   	pop    %ebp
c01013d2:	c3                   	ret    

c01013d3 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01013d3:	55                   	push   %ebp
c01013d4:	89 e5                	mov    %esp,%ebp
c01013d6:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01013d9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01013e0:	eb 09                	jmp    c01013eb <serial_putc_sub+0x18>
        delay();
c01013e2:	e8 4f fb ff ff       	call   c0100f36 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01013e7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01013eb:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01013f1:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01013f5:	89 c2                	mov    %eax,%edx
c01013f7:	ec                   	in     (%dx),%al
c01013f8:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01013fb:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01013ff:	0f b6 c0             	movzbl %al,%eax
c0101402:	83 e0 20             	and    $0x20,%eax
c0101405:	85 c0                	test   %eax,%eax
c0101407:	75 09                	jne    c0101412 <serial_putc_sub+0x3f>
c0101409:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101410:	7e d0                	jle    c01013e2 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101412:	8b 45 08             	mov    0x8(%ebp),%eax
c0101415:	0f b6 c0             	movzbl %al,%eax
c0101418:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c010141e:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101421:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101425:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101429:	ee                   	out    %al,(%dx)
}
c010142a:	c9                   	leave  
c010142b:	c3                   	ret    

c010142c <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c010142c:	55                   	push   %ebp
c010142d:	89 e5                	mov    %esp,%ebp
c010142f:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101432:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101436:	74 0d                	je     c0101445 <serial_putc+0x19>
        serial_putc_sub(c);
c0101438:	8b 45 08             	mov    0x8(%ebp),%eax
c010143b:	89 04 24             	mov    %eax,(%esp)
c010143e:	e8 90 ff ff ff       	call   c01013d3 <serial_putc_sub>
c0101443:	eb 24                	jmp    c0101469 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c0101445:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010144c:	e8 82 ff ff ff       	call   c01013d3 <serial_putc_sub>
        serial_putc_sub(' ');
c0101451:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101458:	e8 76 ff ff ff       	call   c01013d3 <serial_putc_sub>
        serial_putc_sub('\b');
c010145d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101464:	e8 6a ff ff ff       	call   c01013d3 <serial_putc_sub>
    }
}
c0101469:	c9                   	leave  
c010146a:	c3                   	ret    

c010146b <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c010146b:	55                   	push   %ebp
c010146c:	89 e5                	mov    %esp,%ebp
c010146e:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101471:	eb 33                	jmp    c01014a6 <cons_intr+0x3b>
        if (c != 0) {
c0101473:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101477:	74 2d                	je     c01014a6 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101479:	a1 64 1a 1c c0       	mov    0xc01c1a64,%eax
c010147e:	8d 50 01             	lea    0x1(%eax),%edx
c0101481:	89 15 64 1a 1c c0    	mov    %edx,0xc01c1a64
c0101487:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010148a:	88 90 60 18 1c c0    	mov    %dl,-0x3fe3e7a0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101490:	a1 64 1a 1c c0       	mov    0xc01c1a64,%eax
c0101495:	3d 00 02 00 00       	cmp    $0x200,%eax
c010149a:	75 0a                	jne    c01014a6 <cons_intr+0x3b>
                cons.wpos = 0;
c010149c:	c7 05 64 1a 1c c0 00 	movl   $0x0,0xc01c1a64
c01014a3:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c01014a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01014a9:	ff d0                	call   *%eax
c01014ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01014ae:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01014b2:	75 bf                	jne    c0101473 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01014b4:	c9                   	leave  
c01014b5:	c3                   	ret    

c01014b6 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01014b6:	55                   	push   %ebp
c01014b7:	89 e5                	mov    %esp,%ebp
c01014b9:	83 ec 10             	sub    $0x10,%esp
c01014bc:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014c2:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014c6:	89 c2                	mov    %eax,%edx
c01014c8:	ec                   	in     (%dx),%al
c01014c9:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014cc:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01014d0:	0f b6 c0             	movzbl %al,%eax
c01014d3:	83 e0 01             	and    $0x1,%eax
c01014d6:	85 c0                	test   %eax,%eax
c01014d8:	75 07                	jne    c01014e1 <serial_proc_data+0x2b>
        return -1;
c01014da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01014df:	eb 2a                	jmp    c010150b <serial_proc_data+0x55>
c01014e1:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014e7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01014eb:	89 c2                	mov    %eax,%edx
c01014ed:	ec                   	in     (%dx),%al
c01014ee:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c01014f1:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c01014f5:	0f b6 c0             	movzbl %al,%eax
c01014f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c01014fb:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c01014ff:	75 07                	jne    c0101508 <serial_proc_data+0x52>
        c = '\b';
c0101501:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101508:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010150b:	c9                   	leave  
c010150c:	c3                   	ret    

c010150d <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c010150d:	55                   	push   %ebp
c010150e:	89 e5                	mov    %esp,%ebp
c0101510:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c0101513:	a1 48 18 1c c0       	mov    0xc01c1848,%eax
c0101518:	85 c0                	test   %eax,%eax
c010151a:	74 0c                	je     c0101528 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c010151c:	c7 04 24 b6 14 10 c0 	movl   $0xc01014b6,(%esp)
c0101523:	e8 43 ff ff ff       	call   c010146b <cons_intr>
    }
}
c0101528:	c9                   	leave  
c0101529:	c3                   	ret    

c010152a <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c010152a:	55                   	push   %ebp
c010152b:	89 e5                	mov    %esp,%ebp
c010152d:	83 ec 38             	sub    $0x38,%esp
c0101530:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101536:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010153a:	89 c2                	mov    %eax,%edx
c010153c:	ec                   	in     (%dx),%al
c010153d:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101540:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101544:	0f b6 c0             	movzbl %al,%eax
c0101547:	83 e0 01             	and    $0x1,%eax
c010154a:	85 c0                	test   %eax,%eax
c010154c:	75 0a                	jne    c0101558 <kbd_proc_data+0x2e>
        return -1;
c010154e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101553:	e9 59 01 00 00       	jmp    c01016b1 <kbd_proc_data+0x187>
c0101558:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010155e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101562:	89 c2                	mov    %eax,%edx
c0101564:	ec                   	in     (%dx),%al
c0101565:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101568:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c010156c:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c010156f:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101573:	75 17                	jne    c010158c <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101575:	a1 68 1a 1c c0       	mov    0xc01c1a68,%eax
c010157a:	83 c8 40             	or     $0x40,%eax
c010157d:	a3 68 1a 1c c0       	mov    %eax,0xc01c1a68
        return 0;
c0101582:	b8 00 00 00 00       	mov    $0x0,%eax
c0101587:	e9 25 01 00 00       	jmp    c01016b1 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c010158c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101590:	84 c0                	test   %al,%al
c0101592:	79 47                	jns    c01015db <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101594:	a1 68 1a 1c c0       	mov    0xc01c1a68,%eax
c0101599:	83 e0 40             	and    $0x40,%eax
c010159c:	85 c0                	test   %eax,%eax
c010159e:	75 09                	jne    c01015a9 <kbd_proc_data+0x7f>
c01015a0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015a4:	83 e0 7f             	and    $0x7f,%eax
c01015a7:	eb 04                	jmp    c01015ad <kbd_proc_data+0x83>
c01015a9:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015ad:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01015b0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015b4:	0f b6 80 60 00 13 c0 	movzbl -0x3fecffa0(%eax),%eax
c01015bb:	83 c8 40             	or     $0x40,%eax
c01015be:	0f b6 c0             	movzbl %al,%eax
c01015c1:	f7 d0                	not    %eax
c01015c3:	89 c2                	mov    %eax,%edx
c01015c5:	a1 68 1a 1c c0       	mov    0xc01c1a68,%eax
c01015ca:	21 d0                	and    %edx,%eax
c01015cc:	a3 68 1a 1c c0       	mov    %eax,0xc01c1a68
        return 0;
c01015d1:	b8 00 00 00 00       	mov    $0x0,%eax
c01015d6:	e9 d6 00 00 00       	jmp    c01016b1 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01015db:	a1 68 1a 1c c0       	mov    0xc01c1a68,%eax
c01015e0:	83 e0 40             	and    $0x40,%eax
c01015e3:	85 c0                	test   %eax,%eax
c01015e5:	74 11                	je     c01015f8 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01015e7:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01015eb:	a1 68 1a 1c c0       	mov    0xc01c1a68,%eax
c01015f0:	83 e0 bf             	and    $0xffffffbf,%eax
c01015f3:	a3 68 1a 1c c0       	mov    %eax,0xc01c1a68
    }

    shift |= shiftcode[data];
c01015f8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015fc:	0f b6 80 60 00 13 c0 	movzbl -0x3fecffa0(%eax),%eax
c0101603:	0f b6 d0             	movzbl %al,%edx
c0101606:	a1 68 1a 1c c0       	mov    0xc01c1a68,%eax
c010160b:	09 d0                	or     %edx,%eax
c010160d:	a3 68 1a 1c c0       	mov    %eax,0xc01c1a68
    shift ^= togglecode[data];
c0101612:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101616:	0f b6 80 60 01 13 c0 	movzbl -0x3fecfea0(%eax),%eax
c010161d:	0f b6 d0             	movzbl %al,%edx
c0101620:	a1 68 1a 1c c0       	mov    0xc01c1a68,%eax
c0101625:	31 d0                	xor    %edx,%eax
c0101627:	a3 68 1a 1c c0       	mov    %eax,0xc01c1a68

    c = charcode[shift & (CTL | SHIFT)][data];
c010162c:	a1 68 1a 1c c0       	mov    0xc01c1a68,%eax
c0101631:	83 e0 03             	and    $0x3,%eax
c0101634:	8b 14 85 60 05 13 c0 	mov    -0x3fecfaa0(,%eax,4),%edx
c010163b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010163f:	01 d0                	add    %edx,%eax
c0101641:	0f b6 00             	movzbl (%eax),%eax
c0101644:	0f b6 c0             	movzbl %al,%eax
c0101647:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c010164a:	a1 68 1a 1c c0       	mov    0xc01c1a68,%eax
c010164f:	83 e0 08             	and    $0x8,%eax
c0101652:	85 c0                	test   %eax,%eax
c0101654:	74 22                	je     c0101678 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101656:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c010165a:	7e 0c                	jle    c0101668 <kbd_proc_data+0x13e>
c010165c:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101660:	7f 06                	jg     c0101668 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101662:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101666:	eb 10                	jmp    c0101678 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101668:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c010166c:	7e 0a                	jle    c0101678 <kbd_proc_data+0x14e>
c010166e:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101672:	7f 04                	jg     c0101678 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101674:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101678:	a1 68 1a 1c c0       	mov    0xc01c1a68,%eax
c010167d:	f7 d0                	not    %eax
c010167f:	83 e0 06             	and    $0x6,%eax
c0101682:	85 c0                	test   %eax,%eax
c0101684:	75 28                	jne    c01016ae <kbd_proc_data+0x184>
c0101686:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c010168d:	75 1f                	jne    c01016ae <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c010168f:	c7 04 24 7d d5 10 c0 	movl   $0xc010d57d,(%esp)
c0101696:	e8 bd ec ff ff       	call   c0100358 <cprintf>
c010169b:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c01016a1:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016a5:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01016a9:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01016ad:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01016ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016b1:	c9                   	leave  
c01016b2:	c3                   	ret    

c01016b3 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01016b3:	55                   	push   %ebp
c01016b4:	89 e5                	mov    %esp,%ebp
c01016b6:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01016b9:	c7 04 24 2a 15 10 c0 	movl   $0xc010152a,(%esp)
c01016c0:	e8 a6 fd ff ff       	call   c010146b <cons_intr>
}
c01016c5:	c9                   	leave  
c01016c6:	c3                   	ret    

c01016c7 <kbd_init>:

static void
kbd_init(void) {
c01016c7:	55                   	push   %ebp
c01016c8:	89 e5                	mov    %esp,%ebp
c01016ca:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01016cd:	e8 e1 ff ff ff       	call   c01016b3 <kbd_intr>
    pic_enable(IRQ_KBD);
c01016d2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01016d9:	e8 b2 09 00 00       	call   c0102090 <pic_enable>
}
c01016de:	c9                   	leave  
c01016df:	c3                   	ret    

c01016e0 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01016e0:	55                   	push   %ebp
c01016e1:	89 e5                	mov    %esp,%ebp
c01016e3:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01016e6:	e8 93 f8 ff ff       	call   c0100f7e <cga_init>
    serial_init();
c01016eb:	e8 74 f9 ff ff       	call   c0101064 <serial_init>
    kbd_init();
c01016f0:	e8 d2 ff ff ff       	call   c01016c7 <kbd_init>
    if (!serial_exists) {
c01016f5:	a1 48 18 1c c0       	mov    0xc01c1848,%eax
c01016fa:	85 c0                	test   %eax,%eax
c01016fc:	75 0c                	jne    c010170a <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c01016fe:	c7 04 24 89 d5 10 c0 	movl   $0xc010d589,(%esp)
c0101705:	e8 4e ec ff ff       	call   c0100358 <cprintf>
    }
}
c010170a:	c9                   	leave  
c010170b:	c3                   	ret    

c010170c <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c010170c:	55                   	push   %ebp
c010170d:	89 e5                	mov    %esp,%ebp
c010170f:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101712:	e8 e2 f7 ff ff       	call   c0100ef9 <__intr_save>
c0101717:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c010171a:	8b 45 08             	mov    0x8(%ebp),%eax
c010171d:	89 04 24             	mov    %eax,(%esp)
c0101720:	e8 9b fa ff ff       	call   c01011c0 <lpt_putc>
        cga_putc(c);
c0101725:	8b 45 08             	mov    0x8(%ebp),%eax
c0101728:	89 04 24             	mov    %eax,(%esp)
c010172b:	e8 cf fa ff ff       	call   c01011ff <cga_putc>
        serial_putc(c);
c0101730:	8b 45 08             	mov    0x8(%ebp),%eax
c0101733:	89 04 24             	mov    %eax,(%esp)
c0101736:	e8 f1 fc ff ff       	call   c010142c <serial_putc>
    }
    local_intr_restore(intr_flag);
c010173b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010173e:	89 04 24             	mov    %eax,(%esp)
c0101741:	e8 dd f7 ff ff       	call   c0100f23 <__intr_restore>
}
c0101746:	c9                   	leave  
c0101747:	c3                   	ret    

c0101748 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101748:	55                   	push   %ebp
c0101749:	89 e5                	mov    %esp,%ebp
c010174b:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c010174e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101755:	e8 9f f7 ff ff       	call   c0100ef9 <__intr_save>
c010175a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c010175d:	e8 ab fd ff ff       	call   c010150d <serial_intr>
        kbd_intr();
c0101762:	e8 4c ff ff ff       	call   c01016b3 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101767:	8b 15 60 1a 1c c0    	mov    0xc01c1a60,%edx
c010176d:	a1 64 1a 1c c0       	mov    0xc01c1a64,%eax
c0101772:	39 c2                	cmp    %eax,%edx
c0101774:	74 31                	je     c01017a7 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101776:	a1 60 1a 1c c0       	mov    0xc01c1a60,%eax
c010177b:	8d 50 01             	lea    0x1(%eax),%edx
c010177e:	89 15 60 1a 1c c0    	mov    %edx,0xc01c1a60
c0101784:	0f b6 80 60 18 1c c0 	movzbl -0x3fe3e7a0(%eax),%eax
c010178b:	0f b6 c0             	movzbl %al,%eax
c010178e:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101791:	a1 60 1a 1c c0       	mov    0xc01c1a60,%eax
c0101796:	3d 00 02 00 00       	cmp    $0x200,%eax
c010179b:	75 0a                	jne    c01017a7 <cons_getc+0x5f>
                cons.rpos = 0;
c010179d:	c7 05 60 1a 1c c0 00 	movl   $0x0,0xc01c1a60
c01017a4:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c01017a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01017aa:	89 04 24             	mov    %eax,(%esp)
c01017ad:	e8 71 f7 ff ff       	call   c0100f23 <__intr_restore>
    return c;
c01017b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017b5:	c9                   	leave  
c01017b6:	c3                   	ret    

c01017b7 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01017b7:	55                   	push   %ebp
c01017b8:	89 e5                	mov    %esp,%ebp
c01017ba:	83 ec 14             	sub    $0x14,%esp
c01017bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01017c0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01017c4:	90                   	nop
c01017c5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01017c9:	83 c0 07             	add    $0x7,%eax
c01017cc:	0f b7 c0             	movzwl %ax,%eax
c01017cf:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01017d3:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01017d7:	89 c2                	mov    %eax,%edx
c01017d9:	ec                   	in     (%dx),%al
c01017da:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01017dd:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01017e1:	0f b6 c0             	movzbl %al,%eax
c01017e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01017e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017ea:	25 80 00 00 00       	and    $0x80,%eax
c01017ef:	85 c0                	test   %eax,%eax
c01017f1:	75 d2                	jne    c01017c5 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01017f3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01017f7:	74 11                	je     c010180a <ide_wait_ready+0x53>
c01017f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017fc:	83 e0 21             	and    $0x21,%eax
c01017ff:	85 c0                	test   %eax,%eax
c0101801:	74 07                	je     c010180a <ide_wait_ready+0x53>
        return -1;
c0101803:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101808:	eb 05                	jmp    c010180f <ide_wait_ready+0x58>
    }
    return 0;
c010180a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010180f:	c9                   	leave  
c0101810:	c3                   	ret    

c0101811 <ide_init>:

void
ide_init(void) {
c0101811:	55                   	push   %ebp
c0101812:	89 e5                	mov    %esp,%ebp
c0101814:	57                   	push   %edi
c0101815:	53                   	push   %ebx
c0101816:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c010181c:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0101822:	e9 d6 02 00 00       	jmp    c0101afd <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0101827:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010182b:	c1 e0 03             	shl    $0x3,%eax
c010182e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101835:	29 c2                	sub    %eax,%edx
c0101837:	8d 82 80 1a 1c c0    	lea    -0x3fe3e580(%edx),%eax
c010183d:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0101840:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101844:	66 d1 e8             	shr    %ax
c0101847:	0f b7 c0             	movzwl %ax,%eax
c010184a:	0f b7 04 85 a8 d5 10 	movzwl -0x3fef2a58(,%eax,4),%eax
c0101851:	c0 
c0101852:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0101856:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010185a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101861:	00 
c0101862:	89 04 24             	mov    %eax,(%esp)
c0101865:	e8 4d ff ff ff       	call   c01017b7 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c010186a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010186e:	83 e0 01             	and    $0x1,%eax
c0101871:	c1 e0 04             	shl    $0x4,%eax
c0101874:	83 c8 e0             	or     $0xffffffe0,%eax
c0101877:	0f b6 c0             	movzbl %al,%eax
c010187a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010187e:	83 c2 06             	add    $0x6,%edx
c0101881:	0f b7 d2             	movzwl %dx,%edx
c0101884:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101888:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010188b:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c010188f:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0101893:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101894:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101898:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010189f:	00 
c01018a0:	89 04 24             	mov    %eax,(%esp)
c01018a3:	e8 0f ff ff ff       	call   c01017b7 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01018a8:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018ac:	83 c0 07             	add    $0x7,%eax
c01018af:	0f b7 c0             	movzwl %ax,%eax
c01018b2:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01018b6:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01018ba:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01018be:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01018c2:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01018c3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018c7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01018ce:	00 
c01018cf:	89 04 24             	mov    %eax,(%esp)
c01018d2:	e8 e0 fe ff ff       	call   c01017b7 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01018d7:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018db:	83 c0 07             	add    $0x7,%eax
c01018de:	0f b7 c0             	movzwl %ax,%eax
c01018e1:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018e5:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01018e9:	89 c2                	mov    %eax,%edx
c01018eb:	ec                   	in     (%dx),%al
c01018ec:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01018ef:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01018f3:	84 c0                	test   %al,%al
c01018f5:	0f 84 f7 01 00 00    	je     c0101af2 <ide_init+0x2e1>
c01018fb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018ff:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101906:	00 
c0101907:	89 04 24             	mov    %eax,(%esp)
c010190a:	e8 a8 fe ff ff       	call   c01017b7 <ide_wait_ready>
c010190f:	85 c0                	test   %eax,%eax
c0101911:	0f 85 db 01 00 00    	jne    c0101af2 <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101917:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010191b:	c1 e0 03             	shl    $0x3,%eax
c010191e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101925:	29 c2                	sub    %eax,%edx
c0101927:	8d 82 80 1a 1c c0    	lea    -0x3fe3e580(%edx),%eax
c010192d:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101930:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101934:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101937:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c010193d:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101940:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101947:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010194a:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010194d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101950:	89 cb                	mov    %ecx,%ebx
c0101952:	89 df                	mov    %ebx,%edi
c0101954:	89 c1                	mov    %eax,%ecx
c0101956:	fc                   	cld    
c0101957:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101959:	89 c8                	mov    %ecx,%eax
c010195b:	89 fb                	mov    %edi,%ebx
c010195d:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101960:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101963:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101969:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c010196c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010196f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101975:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101978:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010197b:	25 00 00 00 04       	and    $0x4000000,%eax
c0101980:	85 c0                	test   %eax,%eax
c0101982:	74 0e                	je     c0101992 <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101984:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101987:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c010198d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101990:	eb 09                	jmp    c010199b <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101992:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101995:	8b 40 78             	mov    0x78(%eax),%eax
c0101998:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c010199b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010199f:	c1 e0 03             	shl    $0x3,%eax
c01019a2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019a9:	29 c2                	sub    %eax,%edx
c01019ab:	81 c2 80 1a 1c c0    	add    $0xc01c1a80,%edx
c01019b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01019b4:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c01019b7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01019bb:	c1 e0 03             	shl    $0x3,%eax
c01019be:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019c5:	29 c2                	sub    %eax,%edx
c01019c7:	81 c2 80 1a 1c c0    	add    $0xc01c1a80,%edx
c01019cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01019d0:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c01019d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01019d6:	83 c0 62             	add    $0x62,%eax
c01019d9:	0f b7 00             	movzwl (%eax),%eax
c01019dc:	0f b7 c0             	movzwl %ax,%eax
c01019df:	25 00 02 00 00       	and    $0x200,%eax
c01019e4:	85 c0                	test   %eax,%eax
c01019e6:	75 24                	jne    c0101a0c <ide_init+0x1fb>
c01019e8:	c7 44 24 0c b0 d5 10 	movl   $0xc010d5b0,0xc(%esp)
c01019ef:	c0 
c01019f0:	c7 44 24 08 f3 d5 10 	movl   $0xc010d5f3,0x8(%esp)
c01019f7:	c0 
c01019f8:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01019ff:	00 
c0101a00:	c7 04 24 08 d6 10 c0 	movl   $0xc010d608,(%esp)
c0101a07:	e8 ce f3 ff ff       	call   c0100dda <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101a0c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a10:	c1 e0 03             	shl    $0x3,%eax
c0101a13:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a1a:	29 c2                	sub    %eax,%edx
c0101a1c:	8d 82 80 1a 1c c0    	lea    -0x3fe3e580(%edx),%eax
c0101a22:	83 c0 0c             	add    $0xc,%eax
c0101a25:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101a28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a2b:	83 c0 36             	add    $0x36,%eax
c0101a2e:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101a31:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101a38:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101a3f:	eb 34                	jmp    c0101a75 <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101a41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a44:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a47:	01 c2                	add    %eax,%edx
c0101a49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a4c:	8d 48 01             	lea    0x1(%eax),%ecx
c0101a4f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101a52:	01 c8                	add    %ecx,%eax
c0101a54:	0f b6 00             	movzbl (%eax),%eax
c0101a57:	88 02                	mov    %al,(%edx)
c0101a59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a5c:	8d 50 01             	lea    0x1(%eax),%edx
c0101a5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101a62:	01 c2                	add    %eax,%edx
c0101a64:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a67:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101a6a:	01 c8                	add    %ecx,%eax
c0101a6c:	0f b6 00             	movzbl (%eax),%eax
c0101a6f:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101a71:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101a75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a78:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101a7b:	72 c4                	jb     c0101a41 <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101a7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a80:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a83:	01 d0                	add    %edx,%eax
c0101a85:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101a88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a8b:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101a8e:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101a91:	85 c0                	test   %eax,%eax
c0101a93:	74 0f                	je     c0101aa4 <ide_init+0x293>
c0101a95:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a98:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a9b:	01 d0                	add    %edx,%eax
c0101a9d:	0f b6 00             	movzbl (%eax),%eax
c0101aa0:	3c 20                	cmp    $0x20,%al
c0101aa2:	74 d9                	je     c0101a7d <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101aa4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101aa8:	c1 e0 03             	shl    $0x3,%eax
c0101aab:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ab2:	29 c2                	sub    %eax,%edx
c0101ab4:	8d 82 80 1a 1c c0    	lea    -0x3fe3e580(%edx),%eax
c0101aba:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101abd:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ac1:	c1 e0 03             	shl    $0x3,%eax
c0101ac4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101acb:	29 c2                	sub    %eax,%edx
c0101acd:	8d 82 80 1a 1c c0    	lea    -0x3fe3e580(%edx),%eax
c0101ad3:	8b 50 08             	mov    0x8(%eax),%edx
c0101ad6:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ada:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101ade:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101ae2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101ae6:	c7 04 24 1a d6 10 c0 	movl   $0xc010d61a,(%esp)
c0101aed:	e8 66 e8 ff ff       	call   c0100358 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101af2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101af6:	83 c0 01             	add    $0x1,%eax
c0101af9:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101afd:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101b02:	0f 86 1f fd ff ff    	jbe    c0101827 <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101b08:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101b0f:	e8 7c 05 00 00       	call   c0102090 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101b14:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101b1b:	e8 70 05 00 00       	call   c0102090 <pic_enable>
}
c0101b20:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101b26:	5b                   	pop    %ebx
c0101b27:	5f                   	pop    %edi
c0101b28:	5d                   	pop    %ebp
c0101b29:	c3                   	ret    

c0101b2a <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101b2a:	55                   	push   %ebp
c0101b2b:	89 e5                	mov    %esp,%ebp
c0101b2d:	83 ec 04             	sub    $0x4,%esp
c0101b30:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b33:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101b37:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101b3c:	77 24                	ja     c0101b62 <ide_device_valid+0x38>
c0101b3e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b42:	c1 e0 03             	shl    $0x3,%eax
c0101b45:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b4c:	29 c2                	sub    %eax,%edx
c0101b4e:	8d 82 80 1a 1c c0    	lea    -0x3fe3e580(%edx),%eax
c0101b54:	0f b6 00             	movzbl (%eax),%eax
c0101b57:	84 c0                	test   %al,%al
c0101b59:	74 07                	je     c0101b62 <ide_device_valid+0x38>
c0101b5b:	b8 01 00 00 00       	mov    $0x1,%eax
c0101b60:	eb 05                	jmp    c0101b67 <ide_device_valid+0x3d>
c0101b62:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101b67:	c9                   	leave  
c0101b68:	c3                   	ret    

c0101b69 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101b69:	55                   	push   %ebp
c0101b6a:	89 e5                	mov    %esp,%ebp
c0101b6c:	83 ec 08             	sub    $0x8,%esp
c0101b6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b72:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101b76:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b7a:	89 04 24             	mov    %eax,(%esp)
c0101b7d:	e8 a8 ff ff ff       	call   c0101b2a <ide_device_valid>
c0101b82:	85 c0                	test   %eax,%eax
c0101b84:	74 1b                	je     c0101ba1 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101b86:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b8a:	c1 e0 03             	shl    $0x3,%eax
c0101b8d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b94:	29 c2                	sub    %eax,%edx
c0101b96:	8d 82 80 1a 1c c0    	lea    -0x3fe3e580(%edx),%eax
c0101b9c:	8b 40 08             	mov    0x8(%eax),%eax
c0101b9f:	eb 05                	jmp    c0101ba6 <ide_device_size+0x3d>
    }
    return 0;
c0101ba1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101ba6:	c9                   	leave  
c0101ba7:	c3                   	ret    

c0101ba8 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101ba8:	55                   	push   %ebp
c0101ba9:	89 e5                	mov    %esp,%ebp
c0101bab:	57                   	push   %edi
c0101bac:	53                   	push   %ebx
c0101bad:	83 ec 50             	sub    $0x50,%esp
c0101bb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0101bb3:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101bb7:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101bbe:	77 24                	ja     c0101be4 <ide_read_secs+0x3c>
c0101bc0:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101bc5:	77 1d                	ja     c0101be4 <ide_read_secs+0x3c>
c0101bc7:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101bcb:	c1 e0 03             	shl    $0x3,%eax
c0101bce:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bd5:	29 c2                	sub    %eax,%edx
c0101bd7:	8d 82 80 1a 1c c0    	lea    -0x3fe3e580(%edx),%eax
c0101bdd:	0f b6 00             	movzbl (%eax),%eax
c0101be0:	84 c0                	test   %al,%al
c0101be2:	75 24                	jne    c0101c08 <ide_read_secs+0x60>
c0101be4:	c7 44 24 0c 38 d6 10 	movl   $0xc010d638,0xc(%esp)
c0101beb:	c0 
c0101bec:	c7 44 24 08 f3 d5 10 	movl   $0xc010d5f3,0x8(%esp)
c0101bf3:	c0 
c0101bf4:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101bfb:	00 
c0101bfc:	c7 04 24 08 d6 10 c0 	movl   $0xc010d608,(%esp)
c0101c03:	e8 d2 f1 ff ff       	call   c0100dda <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101c08:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101c0f:	77 0f                	ja     c0101c20 <ide_read_secs+0x78>
c0101c11:	8b 45 14             	mov    0x14(%ebp),%eax
c0101c14:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101c17:	01 d0                	add    %edx,%eax
c0101c19:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101c1e:	76 24                	jbe    c0101c44 <ide_read_secs+0x9c>
c0101c20:	c7 44 24 0c 60 d6 10 	movl   $0xc010d660,0xc(%esp)
c0101c27:	c0 
c0101c28:	c7 44 24 08 f3 d5 10 	movl   $0xc010d5f3,0x8(%esp)
c0101c2f:	c0 
c0101c30:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101c37:	00 
c0101c38:	c7 04 24 08 d6 10 c0 	movl   $0xc010d608,(%esp)
c0101c3f:	e8 96 f1 ff ff       	call   c0100dda <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101c44:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c48:	66 d1 e8             	shr    %ax
c0101c4b:	0f b7 c0             	movzwl %ax,%eax
c0101c4e:	0f b7 04 85 a8 d5 10 	movzwl -0x3fef2a58(,%eax,4),%eax
c0101c55:	c0 
c0101c56:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101c5a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c5e:	66 d1 e8             	shr    %ax
c0101c61:	0f b7 c0             	movzwl %ax,%eax
c0101c64:	0f b7 04 85 aa d5 10 	movzwl -0x3fef2a56(,%eax,4),%eax
c0101c6b:	c0 
c0101c6c:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101c70:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101c74:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101c7b:	00 
c0101c7c:	89 04 24             	mov    %eax,(%esp)
c0101c7f:	e8 33 fb ff ff       	call   c01017b7 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101c84:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101c88:	83 c0 02             	add    $0x2,%eax
c0101c8b:	0f b7 c0             	movzwl %ax,%eax
c0101c8e:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101c92:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c96:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101c9a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101c9e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101c9f:	8b 45 14             	mov    0x14(%ebp),%eax
c0101ca2:	0f b6 c0             	movzbl %al,%eax
c0101ca5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ca9:	83 c2 02             	add    $0x2,%edx
c0101cac:	0f b7 d2             	movzwl %dx,%edx
c0101caf:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101cb3:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101cb6:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101cba:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101cbe:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cc2:	0f b6 c0             	movzbl %al,%eax
c0101cc5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cc9:	83 c2 03             	add    $0x3,%edx
c0101ccc:	0f b7 d2             	movzwl %dx,%edx
c0101ccf:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101cd3:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101cd6:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101cda:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101cde:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101cdf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ce2:	c1 e8 08             	shr    $0x8,%eax
c0101ce5:	0f b6 c0             	movzbl %al,%eax
c0101ce8:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cec:	83 c2 04             	add    $0x4,%edx
c0101cef:	0f b7 d2             	movzwl %dx,%edx
c0101cf2:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101cf6:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101cf9:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101cfd:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101d01:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101d02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d05:	c1 e8 10             	shr    $0x10,%eax
c0101d08:	0f b6 c0             	movzbl %al,%eax
c0101d0b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d0f:	83 c2 05             	add    $0x5,%edx
c0101d12:	0f b7 d2             	movzwl %dx,%edx
c0101d15:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101d19:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101d1c:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101d20:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101d24:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101d25:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d29:	83 e0 01             	and    $0x1,%eax
c0101d2c:	c1 e0 04             	shl    $0x4,%eax
c0101d2f:	89 c2                	mov    %eax,%edx
c0101d31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d34:	c1 e8 18             	shr    $0x18,%eax
c0101d37:	83 e0 0f             	and    $0xf,%eax
c0101d3a:	09 d0                	or     %edx,%eax
c0101d3c:	83 c8 e0             	or     $0xffffffe0,%eax
c0101d3f:	0f b6 c0             	movzbl %al,%eax
c0101d42:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d46:	83 c2 06             	add    $0x6,%edx
c0101d49:	0f b7 d2             	movzwl %dx,%edx
c0101d4c:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101d50:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101d53:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101d57:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101d5b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101d5c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d60:	83 c0 07             	add    $0x7,%eax
c0101d63:	0f b7 c0             	movzwl %ax,%eax
c0101d66:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101d6a:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101d6e:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101d72:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101d76:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101d77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101d7e:	eb 5a                	jmp    c0101dda <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101d80:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d84:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101d8b:	00 
c0101d8c:	89 04 24             	mov    %eax,(%esp)
c0101d8f:	e8 23 fa ff ff       	call   c01017b7 <ide_wait_ready>
c0101d94:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101d97:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101d9b:	74 02                	je     c0101d9f <ide_read_secs+0x1f7>
            goto out;
c0101d9d:	eb 41                	jmp    c0101de0 <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101d9f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101da3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101da6:	8b 45 10             	mov    0x10(%ebp),%eax
c0101da9:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101dac:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101db3:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101db6:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101db9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101dbc:	89 cb                	mov    %ecx,%ebx
c0101dbe:	89 df                	mov    %ebx,%edi
c0101dc0:	89 c1                	mov    %eax,%ecx
c0101dc2:	fc                   	cld    
c0101dc3:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101dc5:	89 c8                	mov    %ecx,%eax
c0101dc7:	89 fb                	mov    %edi,%ebx
c0101dc9:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101dcc:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101dcf:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101dd3:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101dda:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101dde:	75 a0                	jne    c0101d80 <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101de0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101de3:	83 c4 50             	add    $0x50,%esp
c0101de6:	5b                   	pop    %ebx
c0101de7:	5f                   	pop    %edi
c0101de8:	5d                   	pop    %ebp
c0101de9:	c3                   	ret    

c0101dea <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101dea:	55                   	push   %ebp
c0101deb:	89 e5                	mov    %esp,%ebp
c0101ded:	56                   	push   %esi
c0101dee:	53                   	push   %ebx
c0101def:	83 ec 50             	sub    $0x50,%esp
c0101df2:	8b 45 08             	mov    0x8(%ebp),%eax
c0101df5:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101df9:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101e00:	77 24                	ja     c0101e26 <ide_write_secs+0x3c>
c0101e02:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101e07:	77 1d                	ja     c0101e26 <ide_write_secs+0x3c>
c0101e09:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e0d:	c1 e0 03             	shl    $0x3,%eax
c0101e10:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101e17:	29 c2                	sub    %eax,%edx
c0101e19:	8d 82 80 1a 1c c0    	lea    -0x3fe3e580(%edx),%eax
c0101e1f:	0f b6 00             	movzbl (%eax),%eax
c0101e22:	84 c0                	test   %al,%al
c0101e24:	75 24                	jne    c0101e4a <ide_write_secs+0x60>
c0101e26:	c7 44 24 0c 38 d6 10 	movl   $0xc010d638,0xc(%esp)
c0101e2d:	c0 
c0101e2e:	c7 44 24 08 f3 d5 10 	movl   $0xc010d5f3,0x8(%esp)
c0101e35:	c0 
c0101e36:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101e3d:	00 
c0101e3e:	c7 04 24 08 d6 10 c0 	movl   $0xc010d608,(%esp)
c0101e45:	e8 90 ef ff ff       	call   c0100dda <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101e4a:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101e51:	77 0f                	ja     c0101e62 <ide_write_secs+0x78>
c0101e53:	8b 45 14             	mov    0x14(%ebp),%eax
c0101e56:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101e59:	01 d0                	add    %edx,%eax
c0101e5b:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101e60:	76 24                	jbe    c0101e86 <ide_write_secs+0x9c>
c0101e62:	c7 44 24 0c 60 d6 10 	movl   $0xc010d660,0xc(%esp)
c0101e69:	c0 
c0101e6a:	c7 44 24 08 f3 d5 10 	movl   $0xc010d5f3,0x8(%esp)
c0101e71:	c0 
c0101e72:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101e79:	00 
c0101e7a:	c7 04 24 08 d6 10 c0 	movl   $0xc010d608,(%esp)
c0101e81:	e8 54 ef ff ff       	call   c0100dda <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101e86:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e8a:	66 d1 e8             	shr    %ax
c0101e8d:	0f b7 c0             	movzwl %ax,%eax
c0101e90:	0f b7 04 85 a8 d5 10 	movzwl -0x3fef2a58(,%eax,4),%eax
c0101e97:	c0 
c0101e98:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101e9c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101ea0:	66 d1 e8             	shr    %ax
c0101ea3:	0f b7 c0             	movzwl %ax,%eax
c0101ea6:	0f b7 04 85 aa d5 10 	movzwl -0x3fef2a56(,%eax,4),%eax
c0101ead:	c0 
c0101eae:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101eb2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101eb6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101ebd:	00 
c0101ebe:	89 04 24             	mov    %eax,(%esp)
c0101ec1:	e8 f1 f8 ff ff       	call   c01017b7 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101ec6:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101eca:	83 c0 02             	add    $0x2,%eax
c0101ecd:	0f b7 c0             	movzwl %ax,%eax
c0101ed0:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101ed4:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ed8:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101edc:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ee0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101ee1:	8b 45 14             	mov    0x14(%ebp),%eax
c0101ee4:	0f b6 c0             	movzbl %al,%eax
c0101ee7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101eeb:	83 c2 02             	add    $0x2,%edx
c0101eee:	0f b7 d2             	movzwl %dx,%edx
c0101ef1:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101ef5:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101ef8:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101efc:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101f00:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101f01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f04:	0f b6 c0             	movzbl %al,%eax
c0101f07:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f0b:	83 c2 03             	add    $0x3,%edx
c0101f0e:	0f b7 d2             	movzwl %dx,%edx
c0101f11:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101f15:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101f18:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101f1c:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101f20:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101f21:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f24:	c1 e8 08             	shr    $0x8,%eax
c0101f27:	0f b6 c0             	movzbl %al,%eax
c0101f2a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f2e:	83 c2 04             	add    $0x4,%edx
c0101f31:	0f b7 d2             	movzwl %dx,%edx
c0101f34:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101f38:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101f3b:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101f3f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101f43:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101f44:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f47:	c1 e8 10             	shr    $0x10,%eax
c0101f4a:	0f b6 c0             	movzbl %al,%eax
c0101f4d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f51:	83 c2 05             	add    $0x5,%edx
c0101f54:	0f b7 d2             	movzwl %dx,%edx
c0101f57:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101f5b:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101f5e:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101f62:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101f66:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101f67:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f6b:	83 e0 01             	and    $0x1,%eax
c0101f6e:	c1 e0 04             	shl    $0x4,%eax
c0101f71:	89 c2                	mov    %eax,%edx
c0101f73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f76:	c1 e8 18             	shr    $0x18,%eax
c0101f79:	83 e0 0f             	and    $0xf,%eax
c0101f7c:	09 d0                	or     %edx,%eax
c0101f7e:	83 c8 e0             	or     $0xffffffe0,%eax
c0101f81:	0f b6 c0             	movzbl %al,%eax
c0101f84:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f88:	83 c2 06             	add    $0x6,%edx
c0101f8b:	0f b7 d2             	movzwl %dx,%edx
c0101f8e:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101f92:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101f95:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101f99:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101f9d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101f9e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fa2:	83 c0 07             	add    $0x7,%eax
c0101fa5:	0f b7 c0             	movzwl %ax,%eax
c0101fa8:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101fac:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c0101fb0:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101fb4:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101fb8:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101fb9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101fc0:	eb 5a                	jmp    c010201c <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101fc2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fc6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101fcd:	00 
c0101fce:	89 04 24             	mov    %eax,(%esp)
c0101fd1:	e8 e1 f7 ff ff       	call   c01017b7 <ide_wait_ready>
c0101fd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101fd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101fdd:	74 02                	je     c0101fe1 <ide_write_secs+0x1f7>
            goto out;
c0101fdf:	eb 41                	jmp    c0102022 <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0101fe1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fe5:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101fe8:	8b 45 10             	mov    0x10(%ebp),%eax
c0101feb:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101fee:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0101ff5:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101ff8:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101ffb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101ffe:	89 cb                	mov    %ecx,%ebx
c0102000:	89 de                	mov    %ebx,%esi
c0102002:	89 c1                	mov    %eax,%ecx
c0102004:	fc                   	cld    
c0102005:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0102007:	89 c8                	mov    %ecx,%eax
c0102009:	89 f3                	mov    %esi,%ebx
c010200b:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010200e:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102011:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0102015:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010201c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102020:	75 a0                	jne    c0101fc2 <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0102022:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102025:	83 c4 50             	add    $0x50,%esp
c0102028:	5b                   	pop    %ebx
c0102029:	5e                   	pop    %esi
c010202a:	5d                   	pop    %ebp
c010202b:	c3                   	ret    

c010202c <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c010202c:	55                   	push   %ebp
c010202d:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c010202f:	fb                   	sti    
    sti();
}
c0102030:	5d                   	pop    %ebp
c0102031:	c3                   	ret    

c0102032 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c0102032:	55                   	push   %ebp
c0102033:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c0102035:	fa                   	cli    
    cli();
}
c0102036:	5d                   	pop    %ebp
c0102037:	c3                   	ret    

c0102038 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102038:	55                   	push   %ebp
c0102039:	89 e5                	mov    %esp,%ebp
c010203b:	83 ec 14             	sub    $0x14,%esp
c010203e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102041:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0102045:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102049:	66 a3 70 05 13 c0    	mov    %ax,0xc0130570
    if (did_init) {
c010204f:	a1 60 1b 1c c0       	mov    0xc01c1b60,%eax
c0102054:	85 c0                	test   %eax,%eax
c0102056:	74 36                	je     c010208e <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102058:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010205c:	0f b6 c0             	movzbl %al,%eax
c010205f:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102065:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102068:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c010206c:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102070:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102071:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102075:	66 c1 e8 08          	shr    $0x8,%ax
c0102079:	0f b6 c0             	movzbl %al,%eax
c010207c:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0102082:	88 45 f9             	mov    %al,-0x7(%ebp)
c0102085:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102089:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c010208d:	ee                   	out    %al,(%dx)
    }
}
c010208e:	c9                   	leave  
c010208f:	c3                   	ret    

c0102090 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102090:	55                   	push   %ebp
c0102091:	89 e5                	mov    %esp,%ebp
c0102093:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c0102096:	8b 45 08             	mov    0x8(%ebp),%eax
c0102099:	ba 01 00 00 00       	mov    $0x1,%edx
c010209e:	89 c1                	mov    %eax,%ecx
c01020a0:	d3 e2                	shl    %cl,%edx
c01020a2:	89 d0                	mov    %edx,%eax
c01020a4:	f7 d0                	not    %eax
c01020a6:	89 c2                	mov    %eax,%edx
c01020a8:	0f b7 05 70 05 13 c0 	movzwl 0xc0130570,%eax
c01020af:	21 d0                	and    %edx,%eax
c01020b1:	0f b7 c0             	movzwl %ax,%eax
c01020b4:	89 04 24             	mov    %eax,(%esp)
c01020b7:	e8 7c ff ff ff       	call   c0102038 <pic_setmask>
}
c01020bc:	c9                   	leave  
c01020bd:	c3                   	ret    

c01020be <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01020be:	55                   	push   %ebp
c01020bf:	89 e5                	mov    %esp,%ebp
c01020c1:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01020c4:	c7 05 60 1b 1c c0 01 	movl   $0x1,0xc01c1b60
c01020cb:	00 00 00 
c01020ce:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01020d4:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01020d8:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01020dc:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01020e0:	ee                   	out    %al,(%dx)
c01020e1:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01020e7:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01020eb:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01020ef:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020f3:	ee                   	out    %al,(%dx)
c01020f4:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01020fa:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01020fe:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102102:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102106:	ee                   	out    %al,(%dx)
c0102107:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c010210d:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0102111:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102115:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102119:	ee                   	out    %al,(%dx)
c010211a:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c0102120:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c0102124:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102128:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010212c:	ee                   	out    %al,(%dx)
c010212d:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c0102133:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c0102137:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010213b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010213f:	ee                   	out    %al,(%dx)
c0102140:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102146:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c010214a:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010214e:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102152:	ee                   	out    %al,(%dx)
c0102153:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102159:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c010215d:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102161:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102165:	ee                   	out    %al,(%dx)
c0102166:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c010216c:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c0102170:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102174:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102178:	ee                   	out    %al,(%dx)
c0102179:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c010217f:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c0102183:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102187:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010218b:	ee                   	out    %al,(%dx)
c010218c:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c0102192:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c0102196:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c010219a:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010219e:	ee                   	out    %al,(%dx)
c010219f:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c01021a5:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01021a9:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01021ad:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01021b1:	ee                   	out    %al,(%dx)
c01021b2:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01021b8:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01021bc:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01021c0:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01021c4:	ee                   	out    %al,(%dx)
c01021c5:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01021cb:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01021cf:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01021d3:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01021d7:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01021d8:	0f b7 05 70 05 13 c0 	movzwl 0xc0130570,%eax
c01021df:	66 83 f8 ff          	cmp    $0xffff,%ax
c01021e3:	74 12                	je     c01021f7 <pic_init+0x139>
        pic_setmask(irq_mask);
c01021e5:	0f b7 05 70 05 13 c0 	movzwl 0xc0130570,%eax
c01021ec:	0f b7 c0             	movzwl %ax,%eax
c01021ef:	89 04 24             	mov    %eax,(%esp)
c01021f2:	e8 41 fe ff ff       	call   c0102038 <pic_setmask>
    }
}
c01021f7:	c9                   	leave  
c01021f8:	c3                   	ret    

c01021f9 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01021f9:	55                   	push   %ebp
c01021fa:	89 e5                	mov    %esp,%ebp
c01021fc:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01021ff:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0102206:	00 
c0102207:	c7 04 24 a0 d6 10 c0 	movl   $0xc010d6a0,(%esp)
c010220e:	e8 45 e1 ff ff       	call   c0100358 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c0102213:	c7 04 24 aa d6 10 c0 	movl   $0xc010d6aa,(%esp)
c010221a:	e8 39 e1 ff ff       	call   c0100358 <cprintf>
    panic("EOT: kernel seems ok.");
c010221f:	c7 44 24 08 b8 d6 10 	movl   $0xc010d6b8,0x8(%esp)
c0102226:	c0 
c0102227:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c010222e:	00 
c010222f:	c7 04 24 ce d6 10 c0 	movl   $0xc010d6ce,(%esp)
c0102236:	e8 9f eb ff ff       	call   c0100dda <__panic>

c010223b <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c010223b:	55                   	push   %ebp
c010223c:	89 e5                	mov    %esp,%ebp
c010223e:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 2013011303 */
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < 256; i++)
c0102241:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102248:	e9 e2 00 00 00       	jmp    c010232f <idt_init+0xf4>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], i == T_SYSCALL ? DPL_USER : DPL_KERNEL);
c010224d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102250:	8b 04 85 00 06 13 c0 	mov    -0x3fecfa00(,%eax,4),%eax
c0102257:	89 c2                	mov    %eax,%edx
c0102259:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010225c:	66 89 14 c5 80 1b 1c 	mov    %dx,-0x3fe3e480(,%eax,8)
c0102263:	c0 
c0102264:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102267:	66 c7 04 c5 82 1b 1c 	movw   $0x8,-0x3fe3e47e(,%eax,8)
c010226e:	c0 08 00 
c0102271:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102274:	0f b6 14 c5 84 1b 1c 	movzbl -0x3fe3e47c(,%eax,8),%edx
c010227b:	c0 
c010227c:	83 e2 e0             	and    $0xffffffe0,%edx
c010227f:	88 14 c5 84 1b 1c c0 	mov    %dl,-0x3fe3e47c(,%eax,8)
c0102286:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102289:	0f b6 14 c5 84 1b 1c 	movzbl -0x3fe3e47c(,%eax,8),%edx
c0102290:	c0 
c0102291:	83 e2 1f             	and    $0x1f,%edx
c0102294:	88 14 c5 84 1b 1c c0 	mov    %dl,-0x3fe3e47c(,%eax,8)
c010229b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010229e:	0f b6 14 c5 85 1b 1c 	movzbl -0x3fe3e47b(,%eax,8),%edx
c01022a5:	c0 
c01022a6:	83 e2 f0             	and    $0xfffffff0,%edx
c01022a9:	83 ca 0e             	or     $0xe,%edx
c01022ac:	88 14 c5 85 1b 1c c0 	mov    %dl,-0x3fe3e47b(,%eax,8)
c01022b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022b6:	0f b6 14 c5 85 1b 1c 	movzbl -0x3fe3e47b(,%eax,8),%edx
c01022bd:	c0 
c01022be:	83 e2 ef             	and    $0xffffffef,%edx
c01022c1:	88 14 c5 85 1b 1c c0 	mov    %dl,-0x3fe3e47b(,%eax,8)
c01022c8:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%ebp)
c01022cf:	75 07                	jne    c01022d8 <idt_init+0x9d>
c01022d1:	ba 03 00 00 00       	mov    $0x3,%edx
c01022d6:	eb 05                	jmp    c01022dd <idt_init+0xa2>
c01022d8:	ba 00 00 00 00       	mov    $0x0,%edx
c01022dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022e0:	83 e2 03             	and    $0x3,%edx
c01022e3:	89 d1                	mov    %edx,%ecx
c01022e5:	c1 e1 05             	shl    $0x5,%ecx
c01022e8:	0f b6 14 c5 85 1b 1c 	movzbl -0x3fe3e47b(,%eax,8),%edx
c01022ef:	c0 
c01022f0:	83 e2 9f             	and    $0xffffff9f,%edx
c01022f3:	09 ca                	or     %ecx,%edx
c01022f5:	88 14 c5 85 1b 1c c0 	mov    %dl,-0x3fe3e47b(,%eax,8)
c01022fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022ff:	0f b6 14 c5 85 1b 1c 	movzbl -0x3fe3e47b(,%eax,8),%edx
c0102306:	c0 
c0102307:	83 ca 80             	or     $0xffffff80,%edx
c010230a:	88 14 c5 85 1b 1c c0 	mov    %dl,-0x3fe3e47b(,%eax,8)
c0102311:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102314:	8b 04 85 00 06 13 c0 	mov    -0x3fecfa00(,%eax,4),%eax
c010231b:	c1 e8 10             	shr    $0x10,%eax
c010231e:	89 c2                	mov    %eax,%edx
c0102320:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102323:	66 89 14 c5 86 1b 1c 	mov    %dx,-0x3fe3e47a(,%eax,8)
c010232a:	c0 
     /* LAB5 2013011303 */
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < 256; i++)
c010232b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010232f:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c0102336:	0f 8e 11 ff ff ff    	jle    c010224d <idt_init+0x12>
c010233c:	c7 45 f8 80 05 13 c0 	movl   $0xc0130580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c0102343:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102346:	0f 01 18             	lidtl  (%eax)
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], i == T_SYSCALL ? DPL_USER : DPL_KERNEL);
    lidt(&idt_pd);
}
c0102349:	c9                   	leave  
c010234a:	c3                   	ret    

c010234b <trapname>:

static const char *
trapname(int trapno) {
c010234b:	55                   	push   %ebp
c010234c:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c010234e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102351:	83 f8 13             	cmp    $0x13,%eax
c0102354:	77 0c                	ja     c0102362 <trapname+0x17>
        return excnames[trapno];
c0102356:	8b 45 08             	mov    0x8(%ebp),%eax
c0102359:	8b 04 85 40 db 10 c0 	mov    -0x3fef24c0(,%eax,4),%eax
c0102360:	eb 18                	jmp    c010237a <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c0102362:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0102366:	7e 0d                	jle    c0102375 <trapname+0x2a>
c0102368:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c010236c:	7f 07                	jg     c0102375 <trapname+0x2a>
        return "Hardware Interrupt";
c010236e:	b8 df d6 10 c0       	mov    $0xc010d6df,%eax
c0102373:	eb 05                	jmp    c010237a <trapname+0x2f>
    }
    return "(unknown trap)";
c0102375:	b8 f2 d6 10 c0       	mov    $0xc010d6f2,%eax
}
c010237a:	5d                   	pop    %ebp
c010237b:	c3                   	ret    

c010237c <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c010237c:	55                   	push   %ebp
c010237d:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c010237f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102382:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102386:	66 83 f8 08          	cmp    $0x8,%ax
c010238a:	0f 94 c0             	sete   %al
c010238d:	0f b6 c0             	movzbl %al,%eax
}
c0102390:	5d                   	pop    %ebp
c0102391:	c3                   	ret    

c0102392 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0102392:	55                   	push   %ebp
c0102393:	89 e5                	mov    %esp,%ebp
c0102395:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c0102398:	8b 45 08             	mov    0x8(%ebp),%eax
c010239b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010239f:	c7 04 24 33 d7 10 c0 	movl   $0xc010d733,(%esp)
c01023a6:	e8 ad df ff ff       	call   c0100358 <cprintf>
    print_regs(&tf->tf_regs);
c01023ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01023ae:	89 04 24             	mov    %eax,(%esp)
c01023b1:	e8 a1 01 00 00       	call   c0102557 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01023b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01023b9:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01023bd:	0f b7 c0             	movzwl %ax,%eax
c01023c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01023c4:	c7 04 24 44 d7 10 c0 	movl   $0xc010d744,(%esp)
c01023cb:	e8 88 df ff ff       	call   c0100358 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c01023d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01023d3:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c01023d7:	0f b7 c0             	movzwl %ax,%eax
c01023da:	89 44 24 04          	mov    %eax,0x4(%esp)
c01023de:	c7 04 24 57 d7 10 c0 	movl   $0xc010d757,(%esp)
c01023e5:	e8 6e df ff ff       	call   c0100358 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c01023ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01023ed:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c01023f1:	0f b7 c0             	movzwl %ax,%eax
c01023f4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01023f8:	c7 04 24 6a d7 10 c0 	movl   $0xc010d76a,(%esp)
c01023ff:	e8 54 df ff ff       	call   c0100358 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102404:	8b 45 08             	mov    0x8(%ebp),%eax
c0102407:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c010240b:	0f b7 c0             	movzwl %ax,%eax
c010240e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102412:	c7 04 24 7d d7 10 c0 	movl   $0xc010d77d,(%esp)
c0102419:	e8 3a df ff ff       	call   c0100358 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c010241e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102421:	8b 40 30             	mov    0x30(%eax),%eax
c0102424:	89 04 24             	mov    %eax,(%esp)
c0102427:	e8 1f ff ff ff       	call   c010234b <trapname>
c010242c:	8b 55 08             	mov    0x8(%ebp),%edx
c010242f:	8b 52 30             	mov    0x30(%edx),%edx
c0102432:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102436:	89 54 24 04          	mov    %edx,0x4(%esp)
c010243a:	c7 04 24 90 d7 10 c0 	movl   $0xc010d790,(%esp)
c0102441:	e8 12 df ff ff       	call   c0100358 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c0102446:	8b 45 08             	mov    0x8(%ebp),%eax
c0102449:	8b 40 34             	mov    0x34(%eax),%eax
c010244c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102450:	c7 04 24 a2 d7 10 c0 	movl   $0xc010d7a2,(%esp)
c0102457:	e8 fc de ff ff       	call   c0100358 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c010245c:	8b 45 08             	mov    0x8(%ebp),%eax
c010245f:	8b 40 38             	mov    0x38(%eax),%eax
c0102462:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102466:	c7 04 24 b1 d7 10 c0 	movl   $0xc010d7b1,(%esp)
c010246d:	e8 e6 de ff ff       	call   c0100358 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c0102472:	8b 45 08             	mov    0x8(%ebp),%eax
c0102475:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102479:	0f b7 c0             	movzwl %ax,%eax
c010247c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102480:	c7 04 24 c0 d7 10 c0 	movl   $0xc010d7c0,(%esp)
c0102487:	e8 cc de ff ff       	call   c0100358 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c010248c:	8b 45 08             	mov    0x8(%ebp),%eax
c010248f:	8b 40 40             	mov    0x40(%eax),%eax
c0102492:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102496:	c7 04 24 d3 d7 10 c0 	movl   $0xc010d7d3,(%esp)
c010249d:	e8 b6 de ff ff       	call   c0100358 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01024a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01024a9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01024b0:	eb 3e                	jmp    c01024f0 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01024b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01024b5:	8b 50 40             	mov    0x40(%eax),%edx
c01024b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01024bb:	21 d0                	and    %edx,%eax
c01024bd:	85 c0                	test   %eax,%eax
c01024bf:	74 28                	je     c01024e9 <print_trapframe+0x157>
c01024c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01024c4:	8b 04 85 a0 05 13 c0 	mov    -0x3fecfa60(,%eax,4),%eax
c01024cb:	85 c0                	test   %eax,%eax
c01024cd:	74 1a                	je     c01024e9 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c01024cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01024d2:	8b 04 85 a0 05 13 c0 	mov    -0x3fecfa60(,%eax,4),%eax
c01024d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024dd:	c7 04 24 e2 d7 10 c0 	movl   $0xc010d7e2,(%esp)
c01024e4:	e8 6f de ff ff       	call   c0100358 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01024e9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01024ed:	d1 65 f0             	shll   -0x10(%ebp)
c01024f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01024f3:	83 f8 17             	cmp    $0x17,%eax
c01024f6:	76 ba                	jbe    c01024b2 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c01024f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01024fb:	8b 40 40             	mov    0x40(%eax),%eax
c01024fe:	25 00 30 00 00       	and    $0x3000,%eax
c0102503:	c1 e8 0c             	shr    $0xc,%eax
c0102506:	89 44 24 04          	mov    %eax,0x4(%esp)
c010250a:	c7 04 24 e6 d7 10 c0 	movl   $0xc010d7e6,(%esp)
c0102511:	e8 42 de ff ff       	call   c0100358 <cprintf>

    if (!trap_in_kernel(tf)) {
c0102516:	8b 45 08             	mov    0x8(%ebp),%eax
c0102519:	89 04 24             	mov    %eax,(%esp)
c010251c:	e8 5b fe ff ff       	call   c010237c <trap_in_kernel>
c0102521:	85 c0                	test   %eax,%eax
c0102523:	75 30                	jne    c0102555 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102525:	8b 45 08             	mov    0x8(%ebp),%eax
c0102528:	8b 40 44             	mov    0x44(%eax),%eax
c010252b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010252f:	c7 04 24 ef d7 10 c0 	movl   $0xc010d7ef,(%esp)
c0102536:	e8 1d de ff ff       	call   c0100358 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c010253b:	8b 45 08             	mov    0x8(%ebp),%eax
c010253e:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0102542:	0f b7 c0             	movzwl %ax,%eax
c0102545:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102549:	c7 04 24 fe d7 10 c0 	movl   $0xc010d7fe,(%esp)
c0102550:	e8 03 de ff ff       	call   c0100358 <cprintf>
    }
}
c0102555:	c9                   	leave  
c0102556:	c3                   	ret    

c0102557 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0102557:	55                   	push   %ebp
c0102558:	89 e5                	mov    %esp,%ebp
c010255a:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c010255d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102560:	8b 00                	mov    (%eax),%eax
c0102562:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102566:	c7 04 24 11 d8 10 c0 	movl   $0xc010d811,(%esp)
c010256d:	e8 e6 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c0102572:	8b 45 08             	mov    0x8(%ebp),%eax
c0102575:	8b 40 04             	mov    0x4(%eax),%eax
c0102578:	89 44 24 04          	mov    %eax,0x4(%esp)
c010257c:	c7 04 24 20 d8 10 c0 	movl   $0xc010d820,(%esp)
c0102583:	e8 d0 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0102588:	8b 45 08             	mov    0x8(%ebp),%eax
c010258b:	8b 40 08             	mov    0x8(%eax),%eax
c010258e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102592:	c7 04 24 2f d8 10 c0 	movl   $0xc010d82f,(%esp)
c0102599:	e8 ba dd ff ff       	call   c0100358 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c010259e:	8b 45 08             	mov    0x8(%ebp),%eax
c01025a1:	8b 40 0c             	mov    0xc(%eax),%eax
c01025a4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025a8:	c7 04 24 3e d8 10 c0 	movl   $0xc010d83e,(%esp)
c01025af:	e8 a4 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01025b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01025b7:	8b 40 10             	mov    0x10(%eax),%eax
c01025ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025be:	c7 04 24 4d d8 10 c0 	movl   $0xc010d84d,(%esp)
c01025c5:	e8 8e dd ff ff       	call   c0100358 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c01025ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01025cd:	8b 40 14             	mov    0x14(%eax),%eax
c01025d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025d4:	c7 04 24 5c d8 10 c0 	movl   $0xc010d85c,(%esp)
c01025db:	e8 78 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c01025e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01025e3:	8b 40 18             	mov    0x18(%eax),%eax
c01025e6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025ea:	c7 04 24 6b d8 10 c0 	movl   $0xc010d86b,(%esp)
c01025f1:	e8 62 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c01025f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01025f9:	8b 40 1c             	mov    0x1c(%eax),%eax
c01025fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102600:	c7 04 24 7a d8 10 c0 	movl   $0xc010d87a,(%esp)
c0102607:	e8 4c dd ff ff       	call   c0100358 <cprintf>
}
c010260c:	c9                   	leave  
c010260d:	c3                   	ret    

c010260e <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c010260e:	55                   	push   %ebp
c010260f:	89 e5                	mov    %esp,%ebp
c0102611:	53                   	push   %ebx
c0102612:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102615:	8b 45 08             	mov    0x8(%ebp),%eax
c0102618:	8b 40 34             	mov    0x34(%eax),%eax
c010261b:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010261e:	85 c0                	test   %eax,%eax
c0102620:	74 07                	je     c0102629 <print_pgfault+0x1b>
c0102622:	b9 89 d8 10 c0       	mov    $0xc010d889,%ecx
c0102627:	eb 05                	jmp    c010262e <print_pgfault+0x20>
c0102629:	b9 9a d8 10 c0       	mov    $0xc010d89a,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c010262e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102631:	8b 40 34             	mov    0x34(%eax),%eax
c0102634:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102637:	85 c0                	test   %eax,%eax
c0102639:	74 07                	je     c0102642 <print_pgfault+0x34>
c010263b:	ba 57 00 00 00       	mov    $0x57,%edx
c0102640:	eb 05                	jmp    c0102647 <print_pgfault+0x39>
c0102642:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102647:	8b 45 08             	mov    0x8(%ebp),%eax
c010264a:	8b 40 34             	mov    0x34(%eax),%eax
c010264d:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102650:	85 c0                	test   %eax,%eax
c0102652:	74 07                	je     c010265b <print_pgfault+0x4d>
c0102654:	b8 55 00 00 00       	mov    $0x55,%eax
c0102659:	eb 05                	jmp    c0102660 <print_pgfault+0x52>
c010265b:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102660:	0f 20 d3             	mov    %cr2,%ebx
c0102663:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c0102666:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0102669:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c010266d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0102671:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102675:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0102679:	c7 04 24 a8 d8 10 c0 	movl   $0xc010d8a8,(%esp)
c0102680:	e8 d3 dc ff ff       	call   c0100358 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c0102685:	83 c4 34             	add    $0x34,%esp
c0102688:	5b                   	pop    %ebx
c0102689:	5d                   	pop    %ebp
c010268a:	c3                   	ret    

c010268b <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c010268b:	55                   	push   %ebp
c010268c:	89 e5                	mov    %esp,%ebp
c010268e:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0102691:	a1 cc 45 1c c0       	mov    0xc01c45cc,%eax
c0102696:	85 c0                	test   %eax,%eax
c0102698:	74 0b                	je     c01026a5 <pgfault_handler+0x1a>
            print_pgfault(tf);
c010269a:	8b 45 08             	mov    0x8(%ebp),%eax
c010269d:	89 04 24             	mov    %eax,(%esp)
c01026a0:	e8 69 ff ff ff       	call   c010260e <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01026a5:	a1 cc 45 1c c0       	mov    0xc01c45cc,%eax
c01026aa:	85 c0                	test   %eax,%eax
c01026ac:	74 3d                	je     c01026eb <pgfault_handler+0x60>
        assert(current == idleproc);
c01026ae:	8b 15 48 24 1c c0    	mov    0xc01c2448,%edx
c01026b4:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c01026b9:	39 c2                	cmp    %eax,%edx
c01026bb:	74 24                	je     c01026e1 <pgfault_handler+0x56>
c01026bd:	c7 44 24 0c cb d8 10 	movl   $0xc010d8cb,0xc(%esp)
c01026c4:	c0 
c01026c5:	c7 44 24 08 df d8 10 	movl   $0xc010d8df,0x8(%esp)
c01026cc:	c0 
c01026cd:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c01026d4:	00 
c01026d5:	c7 04 24 ce d6 10 c0 	movl   $0xc010d6ce,(%esp)
c01026dc:	e8 f9 e6 ff ff       	call   c0100dda <__panic>
        mm = check_mm_struct;
c01026e1:	a1 cc 45 1c c0       	mov    0xc01c45cc,%eax
c01026e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01026e9:	eb 46                	jmp    c0102731 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c01026eb:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c01026f0:	85 c0                	test   %eax,%eax
c01026f2:	75 32                	jne    c0102726 <pgfault_handler+0x9b>
            print_trapframe(tf);
c01026f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01026f7:	89 04 24             	mov    %eax,(%esp)
c01026fa:	e8 93 fc ff ff       	call   c0102392 <print_trapframe>
            print_pgfault(tf);
c01026ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0102702:	89 04 24             	mov    %eax,(%esp)
c0102705:	e8 04 ff ff ff       	call   c010260e <print_pgfault>
            panic("unhandled page fault.\n");
c010270a:	c7 44 24 08 f4 d8 10 	movl   $0xc010d8f4,0x8(%esp)
c0102711:	c0 
c0102712:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c0102719:	00 
c010271a:	c7 04 24 ce d6 10 c0 	movl   $0xc010d6ce,(%esp)
c0102721:	e8 b4 e6 ff ff       	call   c0100dda <__panic>
        }
        mm = current->mm;
c0102726:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010272b:	8b 40 18             	mov    0x18(%eax),%eax
c010272e:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102731:	0f 20 d0             	mov    %cr2,%eax
c0102734:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0102737:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c010273a:	89 c2                	mov    %eax,%edx
c010273c:	8b 45 08             	mov    0x8(%ebp),%eax
c010273f:	8b 40 34             	mov    0x34(%eax),%eax
c0102742:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102746:	89 44 24 04          	mov    %eax,0x4(%esp)
c010274a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010274d:	89 04 24             	mov    %eax,(%esp)
c0102750:	e8 e3 62 00 00       	call   c0108a38 <do_pgfault>
}
c0102755:	c9                   	leave  
c0102756:	c3                   	ret    

c0102757 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102757:	55                   	push   %ebp
c0102758:	89 e5                	mov    %esp,%ebp
c010275a:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c010275d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c0102764:	8b 45 08             	mov    0x8(%ebp),%eax
c0102767:	8b 40 30             	mov    0x30(%eax),%eax
c010276a:	83 f8 2f             	cmp    $0x2f,%eax
c010276d:	77 38                	ja     c01027a7 <trap_dispatch+0x50>
c010276f:	83 f8 2e             	cmp    $0x2e,%eax
c0102772:	0f 83 da 01 00 00    	jae    c0102952 <trap_dispatch+0x1fb>
c0102778:	83 f8 20             	cmp    $0x20,%eax
c010277b:	0f 84 07 01 00 00    	je     c0102888 <trap_dispatch+0x131>
c0102781:	83 f8 20             	cmp    $0x20,%eax
c0102784:	77 0a                	ja     c0102790 <trap_dispatch+0x39>
c0102786:	83 f8 0e             	cmp    $0xe,%eax
c0102789:	74 3e                	je     c01027c9 <trap_dispatch+0x72>
c010278b:	e9 7a 01 00 00       	jmp    c010290a <trap_dispatch+0x1b3>
c0102790:	83 f8 21             	cmp    $0x21,%eax
c0102793:	0f 84 2f 01 00 00    	je     c01028c8 <trap_dispatch+0x171>
c0102799:	83 f8 24             	cmp    $0x24,%eax
c010279c:	0f 84 fd 00 00 00    	je     c010289f <trap_dispatch+0x148>
c01027a2:	e9 63 01 00 00       	jmp    c010290a <trap_dispatch+0x1b3>
c01027a7:	83 f8 78             	cmp    $0x78,%eax
c01027aa:	0f 82 5a 01 00 00    	jb     c010290a <trap_dispatch+0x1b3>
c01027b0:	83 f8 79             	cmp    $0x79,%eax
c01027b3:	0f 86 35 01 00 00    	jbe    c01028ee <trap_dispatch+0x197>
c01027b9:	3d 80 00 00 00       	cmp    $0x80,%eax
c01027be:	0f 84 ba 00 00 00    	je     c010287e <trap_dispatch+0x127>
c01027c4:	e9 41 01 00 00       	jmp    c010290a <trap_dispatch+0x1b3>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c01027c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01027cc:	89 04 24             	mov    %eax,(%esp)
c01027cf:	e8 b7 fe ff ff       	call   c010268b <pgfault_handler>
c01027d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01027d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01027db:	0f 84 98 00 00 00    	je     c0102879 <trap_dispatch+0x122>
            print_trapframe(tf);
c01027e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01027e4:	89 04 24             	mov    %eax,(%esp)
c01027e7:	e8 a6 fb ff ff       	call   c0102392 <print_trapframe>
            if (current == NULL) {
c01027ec:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c01027f1:	85 c0                	test   %eax,%eax
c01027f3:	75 23                	jne    c0102818 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c01027f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01027f8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01027fc:	c7 44 24 08 0c d9 10 	movl   $0xc010d90c,0x8(%esp)
c0102803:	c0 
c0102804:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c010280b:	00 
c010280c:	c7 04 24 ce d6 10 c0 	movl   $0xc010d6ce,(%esp)
c0102813:	e8 c2 e5 ff ff       	call   c0100dda <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102818:	8b 45 08             	mov    0x8(%ebp),%eax
c010281b:	89 04 24             	mov    %eax,(%esp)
c010281e:	e8 59 fb ff ff       	call   c010237c <trap_in_kernel>
c0102823:	85 c0                	test   %eax,%eax
c0102825:	74 23                	je     c010284a <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102827:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010282a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010282e:	c7 44 24 08 2c d9 10 	movl   $0xc010d92c,0x8(%esp)
c0102835:	c0 
c0102836:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c010283d:	00 
c010283e:	c7 04 24 ce d6 10 c0 	movl   $0xc010d6ce,(%esp)
c0102845:	e8 90 e5 ff ff       	call   c0100dda <__panic>
                }
                cprintf("killed by kernel.\n");
c010284a:	c7 04 24 5a d9 10 c0 	movl   $0xc010d95a,(%esp)
c0102851:	e8 02 db ff ff       	call   c0100358 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0102856:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102859:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010285d:	c7 44 24 08 70 d9 10 	movl   $0xc010d970,0x8(%esp)
c0102864:	c0 
c0102865:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c010286c:	00 
c010286d:	c7 04 24 ce d6 10 c0 	movl   $0xc010d6ce,(%esp)
c0102874:	e8 61 e5 ff ff       	call   c0100dda <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c0102879:	e9 d5 00 00 00       	jmp    c0102953 <trap_dispatch+0x1fc>
    case T_SYSCALL:
        syscall();
c010287e:	e8 df 9c 00 00       	call   c010c562 <syscall>
        break;
c0102883:	e9 cb 00 00 00       	jmp    c0102953 <trap_dispatch+0x1fc>
        /* LAB7 2013011303 */
        /* you should upate you lab6 code
         * IMPORTANT FUNCTIONS:
	     * run_timer_list
         */
        ticks++;
c0102888:	a1 d8 44 1c c0       	mov    0xc01c44d8,%eax
c010288d:	83 c0 01             	add    $0x1,%eax
c0102890:	a3 d8 44 1c c0       	mov    %eax,0xc01c44d8
        run_timer_list();
c0102895:	e8 11 9a 00 00       	call   c010c2ab <run_timer_list>
        break;
c010289a:	e9 b4 00 00 00       	jmp    c0102953 <trap_dispatch+0x1fc>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c010289f:	e8 a4 ee ff ff       	call   c0101748 <cons_getc>
c01028a4:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c01028a7:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c01028ab:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c01028af:	89 54 24 08          	mov    %edx,0x8(%esp)
c01028b3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01028b7:	c7 04 24 99 d9 10 c0 	movl   $0xc010d999,(%esp)
c01028be:	e8 95 da ff ff       	call   c0100358 <cprintf>
        break;
c01028c3:	e9 8b 00 00 00       	jmp    c0102953 <trap_dispatch+0x1fc>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c01028c8:	e8 7b ee ff ff       	call   c0101748 <cons_getc>
c01028cd:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c01028d0:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c01028d4:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c01028d8:	89 54 24 08          	mov    %edx,0x8(%esp)
c01028dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01028e0:	c7 04 24 ab d9 10 c0 	movl   $0xc010d9ab,(%esp)
c01028e7:	e8 6c da ff ff       	call   c0100358 <cprintf>
        break;
c01028ec:	eb 65                	jmp    c0102953 <trap_dispatch+0x1fc>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c01028ee:	c7 44 24 08 ba d9 10 	movl   $0xc010d9ba,0x8(%esp)
c01028f5:	c0 
c01028f6:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c01028fd:	00 
c01028fe:	c7 04 24 ce d6 10 c0 	movl   $0xc010d6ce,(%esp)
c0102905:	e8 d0 e4 ff ff       	call   c0100dda <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c010290a:	8b 45 08             	mov    0x8(%ebp),%eax
c010290d:	89 04 24             	mov    %eax,(%esp)
c0102910:	e8 7d fa ff ff       	call   c0102392 <print_trapframe>
        if (current != NULL) {
c0102915:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010291a:	85 c0                	test   %eax,%eax
c010291c:	74 18                	je     c0102936 <trap_dispatch+0x1df>
            cprintf("unhandled trap.\n");
c010291e:	c7 04 24 ca d9 10 c0 	movl   $0xc010d9ca,(%esp)
c0102925:	e8 2e da ff ff       	call   c0100358 <cprintf>
            do_exit(-E_KILLED);
c010292a:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102931:	e8 4b 81 00 00       	call   c010aa81 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102936:	c7 44 24 08 db d9 10 	movl   $0xc010d9db,0x8(%esp)
c010293d:	c0 
c010293e:	c7 44 24 04 0d 01 00 	movl   $0x10d,0x4(%esp)
c0102945:	00 
c0102946:	c7 04 24 ce d6 10 c0 	movl   $0xc010d6ce,(%esp)
c010294d:	e8 88 e4 ff ff       	call   c0100dda <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102952:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102953:	c9                   	leave  
c0102954:	c3                   	ret    

c0102955 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102955:	55                   	push   %ebp
c0102956:	89 e5                	mov    %esp,%ebp
c0102958:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c010295b:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c0102960:	85 c0                	test   %eax,%eax
c0102962:	75 0d                	jne    c0102971 <trap+0x1c>
        trap_dispatch(tf);
c0102964:	8b 45 08             	mov    0x8(%ebp),%eax
c0102967:	89 04 24             	mov    %eax,(%esp)
c010296a:	e8 e8 fd ff ff       	call   c0102757 <trap_dispatch>
c010296f:	eb 6c                	jmp    c01029dd <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102971:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c0102976:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102979:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c010297c:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c0102981:	8b 55 08             	mov    0x8(%ebp),%edx
c0102984:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102987:	8b 45 08             	mov    0x8(%ebp),%eax
c010298a:	89 04 24             	mov    %eax,(%esp)
c010298d:	e8 ea f9 ff ff       	call   c010237c <trap_in_kernel>
c0102992:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102995:	8b 45 08             	mov    0x8(%ebp),%eax
c0102998:	89 04 24             	mov    %eax,(%esp)
c010299b:	e8 b7 fd ff ff       	call   c0102757 <trap_dispatch>
    
        current->tf = otf;
c01029a0:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c01029a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01029a8:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c01029ab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01029af:	75 2c                	jne    c01029dd <trap+0x88>
            if (current->flags & PF_EXITING) {
c01029b1:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c01029b6:	8b 40 44             	mov    0x44(%eax),%eax
c01029b9:	83 e0 01             	and    $0x1,%eax
c01029bc:	85 c0                	test   %eax,%eax
c01029be:	74 0c                	je     c01029cc <trap+0x77>
                do_exit(-E_KILLED);
c01029c0:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c01029c7:	e8 b5 80 00 00       	call   c010aa81 <do_exit>
            }
            if (current->need_resched) {
c01029cc:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c01029d1:	8b 40 10             	mov    0x10(%eax),%eax
c01029d4:	85 c0                	test   %eax,%eax
c01029d6:	74 05                	je     c01029dd <trap+0x88>
                schedule();
c01029d8:	e8 41 96 00 00       	call   c010c01e <schedule>
            }
        }
    }
}
c01029dd:	c9                   	leave  
c01029de:	c3                   	ret    

c01029df <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c01029df:	1e                   	push   %ds
    pushl %es
c01029e0:	06                   	push   %es
    pushl %fs
c01029e1:	0f a0                	push   %fs
    pushl %gs
c01029e3:	0f a8                	push   %gs
    pushal
c01029e5:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c01029e6:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c01029eb:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c01029ed:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c01029ef:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c01029f0:	e8 60 ff ff ff       	call   c0102955 <trap>

    # pop the pushed stack pointer
    popl %esp
c01029f5:	5c                   	pop    %esp

c01029f6 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c01029f6:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c01029f7:	0f a9                	pop    %gs
    popl %fs
c01029f9:	0f a1                	pop    %fs
    popl %es
c01029fb:	07                   	pop    %es
    popl %ds
c01029fc:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c01029fd:	83 c4 08             	add    $0x8,%esp
    iret
c0102a00:	cf                   	iret   

c0102a01 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102a01:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102a05:	e9 ec ff ff ff       	jmp    c01029f6 <__trapret>

c0102a0a <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102a0a:	6a 00                	push   $0x0
  pushl $0
c0102a0c:	6a 00                	push   $0x0
  jmp __alltraps
c0102a0e:	e9 cc ff ff ff       	jmp    c01029df <__alltraps>

c0102a13 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102a13:	6a 00                	push   $0x0
  pushl $1
c0102a15:	6a 01                	push   $0x1
  jmp __alltraps
c0102a17:	e9 c3 ff ff ff       	jmp    c01029df <__alltraps>

c0102a1c <vector2>:
.globl vector2
vector2:
  pushl $0
c0102a1c:	6a 00                	push   $0x0
  pushl $2
c0102a1e:	6a 02                	push   $0x2
  jmp __alltraps
c0102a20:	e9 ba ff ff ff       	jmp    c01029df <__alltraps>

c0102a25 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102a25:	6a 00                	push   $0x0
  pushl $3
c0102a27:	6a 03                	push   $0x3
  jmp __alltraps
c0102a29:	e9 b1 ff ff ff       	jmp    c01029df <__alltraps>

c0102a2e <vector4>:
.globl vector4
vector4:
  pushl $0
c0102a2e:	6a 00                	push   $0x0
  pushl $4
c0102a30:	6a 04                	push   $0x4
  jmp __alltraps
c0102a32:	e9 a8 ff ff ff       	jmp    c01029df <__alltraps>

c0102a37 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102a37:	6a 00                	push   $0x0
  pushl $5
c0102a39:	6a 05                	push   $0x5
  jmp __alltraps
c0102a3b:	e9 9f ff ff ff       	jmp    c01029df <__alltraps>

c0102a40 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102a40:	6a 00                	push   $0x0
  pushl $6
c0102a42:	6a 06                	push   $0x6
  jmp __alltraps
c0102a44:	e9 96 ff ff ff       	jmp    c01029df <__alltraps>

c0102a49 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102a49:	6a 00                	push   $0x0
  pushl $7
c0102a4b:	6a 07                	push   $0x7
  jmp __alltraps
c0102a4d:	e9 8d ff ff ff       	jmp    c01029df <__alltraps>

c0102a52 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102a52:	6a 08                	push   $0x8
  jmp __alltraps
c0102a54:	e9 86 ff ff ff       	jmp    c01029df <__alltraps>

c0102a59 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102a59:	6a 09                	push   $0x9
  jmp __alltraps
c0102a5b:	e9 7f ff ff ff       	jmp    c01029df <__alltraps>

c0102a60 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102a60:	6a 0a                	push   $0xa
  jmp __alltraps
c0102a62:	e9 78 ff ff ff       	jmp    c01029df <__alltraps>

c0102a67 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102a67:	6a 0b                	push   $0xb
  jmp __alltraps
c0102a69:	e9 71 ff ff ff       	jmp    c01029df <__alltraps>

c0102a6e <vector12>:
.globl vector12
vector12:
  pushl $12
c0102a6e:	6a 0c                	push   $0xc
  jmp __alltraps
c0102a70:	e9 6a ff ff ff       	jmp    c01029df <__alltraps>

c0102a75 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102a75:	6a 0d                	push   $0xd
  jmp __alltraps
c0102a77:	e9 63 ff ff ff       	jmp    c01029df <__alltraps>

c0102a7c <vector14>:
.globl vector14
vector14:
  pushl $14
c0102a7c:	6a 0e                	push   $0xe
  jmp __alltraps
c0102a7e:	e9 5c ff ff ff       	jmp    c01029df <__alltraps>

c0102a83 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102a83:	6a 00                	push   $0x0
  pushl $15
c0102a85:	6a 0f                	push   $0xf
  jmp __alltraps
c0102a87:	e9 53 ff ff ff       	jmp    c01029df <__alltraps>

c0102a8c <vector16>:
.globl vector16
vector16:
  pushl $0
c0102a8c:	6a 00                	push   $0x0
  pushl $16
c0102a8e:	6a 10                	push   $0x10
  jmp __alltraps
c0102a90:	e9 4a ff ff ff       	jmp    c01029df <__alltraps>

c0102a95 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102a95:	6a 11                	push   $0x11
  jmp __alltraps
c0102a97:	e9 43 ff ff ff       	jmp    c01029df <__alltraps>

c0102a9c <vector18>:
.globl vector18
vector18:
  pushl $0
c0102a9c:	6a 00                	push   $0x0
  pushl $18
c0102a9e:	6a 12                	push   $0x12
  jmp __alltraps
c0102aa0:	e9 3a ff ff ff       	jmp    c01029df <__alltraps>

c0102aa5 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102aa5:	6a 00                	push   $0x0
  pushl $19
c0102aa7:	6a 13                	push   $0x13
  jmp __alltraps
c0102aa9:	e9 31 ff ff ff       	jmp    c01029df <__alltraps>

c0102aae <vector20>:
.globl vector20
vector20:
  pushl $0
c0102aae:	6a 00                	push   $0x0
  pushl $20
c0102ab0:	6a 14                	push   $0x14
  jmp __alltraps
c0102ab2:	e9 28 ff ff ff       	jmp    c01029df <__alltraps>

c0102ab7 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102ab7:	6a 00                	push   $0x0
  pushl $21
c0102ab9:	6a 15                	push   $0x15
  jmp __alltraps
c0102abb:	e9 1f ff ff ff       	jmp    c01029df <__alltraps>

c0102ac0 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102ac0:	6a 00                	push   $0x0
  pushl $22
c0102ac2:	6a 16                	push   $0x16
  jmp __alltraps
c0102ac4:	e9 16 ff ff ff       	jmp    c01029df <__alltraps>

c0102ac9 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102ac9:	6a 00                	push   $0x0
  pushl $23
c0102acb:	6a 17                	push   $0x17
  jmp __alltraps
c0102acd:	e9 0d ff ff ff       	jmp    c01029df <__alltraps>

c0102ad2 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102ad2:	6a 00                	push   $0x0
  pushl $24
c0102ad4:	6a 18                	push   $0x18
  jmp __alltraps
c0102ad6:	e9 04 ff ff ff       	jmp    c01029df <__alltraps>

c0102adb <vector25>:
.globl vector25
vector25:
  pushl $0
c0102adb:	6a 00                	push   $0x0
  pushl $25
c0102add:	6a 19                	push   $0x19
  jmp __alltraps
c0102adf:	e9 fb fe ff ff       	jmp    c01029df <__alltraps>

c0102ae4 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102ae4:	6a 00                	push   $0x0
  pushl $26
c0102ae6:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102ae8:	e9 f2 fe ff ff       	jmp    c01029df <__alltraps>

c0102aed <vector27>:
.globl vector27
vector27:
  pushl $0
c0102aed:	6a 00                	push   $0x0
  pushl $27
c0102aef:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102af1:	e9 e9 fe ff ff       	jmp    c01029df <__alltraps>

c0102af6 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102af6:	6a 00                	push   $0x0
  pushl $28
c0102af8:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102afa:	e9 e0 fe ff ff       	jmp    c01029df <__alltraps>

c0102aff <vector29>:
.globl vector29
vector29:
  pushl $0
c0102aff:	6a 00                	push   $0x0
  pushl $29
c0102b01:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102b03:	e9 d7 fe ff ff       	jmp    c01029df <__alltraps>

c0102b08 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102b08:	6a 00                	push   $0x0
  pushl $30
c0102b0a:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102b0c:	e9 ce fe ff ff       	jmp    c01029df <__alltraps>

c0102b11 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102b11:	6a 00                	push   $0x0
  pushl $31
c0102b13:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102b15:	e9 c5 fe ff ff       	jmp    c01029df <__alltraps>

c0102b1a <vector32>:
.globl vector32
vector32:
  pushl $0
c0102b1a:	6a 00                	push   $0x0
  pushl $32
c0102b1c:	6a 20                	push   $0x20
  jmp __alltraps
c0102b1e:	e9 bc fe ff ff       	jmp    c01029df <__alltraps>

c0102b23 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102b23:	6a 00                	push   $0x0
  pushl $33
c0102b25:	6a 21                	push   $0x21
  jmp __alltraps
c0102b27:	e9 b3 fe ff ff       	jmp    c01029df <__alltraps>

c0102b2c <vector34>:
.globl vector34
vector34:
  pushl $0
c0102b2c:	6a 00                	push   $0x0
  pushl $34
c0102b2e:	6a 22                	push   $0x22
  jmp __alltraps
c0102b30:	e9 aa fe ff ff       	jmp    c01029df <__alltraps>

c0102b35 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102b35:	6a 00                	push   $0x0
  pushl $35
c0102b37:	6a 23                	push   $0x23
  jmp __alltraps
c0102b39:	e9 a1 fe ff ff       	jmp    c01029df <__alltraps>

c0102b3e <vector36>:
.globl vector36
vector36:
  pushl $0
c0102b3e:	6a 00                	push   $0x0
  pushl $36
c0102b40:	6a 24                	push   $0x24
  jmp __alltraps
c0102b42:	e9 98 fe ff ff       	jmp    c01029df <__alltraps>

c0102b47 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102b47:	6a 00                	push   $0x0
  pushl $37
c0102b49:	6a 25                	push   $0x25
  jmp __alltraps
c0102b4b:	e9 8f fe ff ff       	jmp    c01029df <__alltraps>

c0102b50 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102b50:	6a 00                	push   $0x0
  pushl $38
c0102b52:	6a 26                	push   $0x26
  jmp __alltraps
c0102b54:	e9 86 fe ff ff       	jmp    c01029df <__alltraps>

c0102b59 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102b59:	6a 00                	push   $0x0
  pushl $39
c0102b5b:	6a 27                	push   $0x27
  jmp __alltraps
c0102b5d:	e9 7d fe ff ff       	jmp    c01029df <__alltraps>

c0102b62 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102b62:	6a 00                	push   $0x0
  pushl $40
c0102b64:	6a 28                	push   $0x28
  jmp __alltraps
c0102b66:	e9 74 fe ff ff       	jmp    c01029df <__alltraps>

c0102b6b <vector41>:
.globl vector41
vector41:
  pushl $0
c0102b6b:	6a 00                	push   $0x0
  pushl $41
c0102b6d:	6a 29                	push   $0x29
  jmp __alltraps
c0102b6f:	e9 6b fe ff ff       	jmp    c01029df <__alltraps>

c0102b74 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102b74:	6a 00                	push   $0x0
  pushl $42
c0102b76:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102b78:	e9 62 fe ff ff       	jmp    c01029df <__alltraps>

c0102b7d <vector43>:
.globl vector43
vector43:
  pushl $0
c0102b7d:	6a 00                	push   $0x0
  pushl $43
c0102b7f:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102b81:	e9 59 fe ff ff       	jmp    c01029df <__alltraps>

c0102b86 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102b86:	6a 00                	push   $0x0
  pushl $44
c0102b88:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102b8a:	e9 50 fe ff ff       	jmp    c01029df <__alltraps>

c0102b8f <vector45>:
.globl vector45
vector45:
  pushl $0
c0102b8f:	6a 00                	push   $0x0
  pushl $45
c0102b91:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102b93:	e9 47 fe ff ff       	jmp    c01029df <__alltraps>

c0102b98 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102b98:	6a 00                	push   $0x0
  pushl $46
c0102b9a:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102b9c:	e9 3e fe ff ff       	jmp    c01029df <__alltraps>

c0102ba1 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102ba1:	6a 00                	push   $0x0
  pushl $47
c0102ba3:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102ba5:	e9 35 fe ff ff       	jmp    c01029df <__alltraps>

c0102baa <vector48>:
.globl vector48
vector48:
  pushl $0
c0102baa:	6a 00                	push   $0x0
  pushl $48
c0102bac:	6a 30                	push   $0x30
  jmp __alltraps
c0102bae:	e9 2c fe ff ff       	jmp    c01029df <__alltraps>

c0102bb3 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102bb3:	6a 00                	push   $0x0
  pushl $49
c0102bb5:	6a 31                	push   $0x31
  jmp __alltraps
c0102bb7:	e9 23 fe ff ff       	jmp    c01029df <__alltraps>

c0102bbc <vector50>:
.globl vector50
vector50:
  pushl $0
c0102bbc:	6a 00                	push   $0x0
  pushl $50
c0102bbe:	6a 32                	push   $0x32
  jmp __alltraps
c0102bc0:	e9 1a fe ff ff       	jmp    c01029df <__alltraps>

c0102bc5 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102bc5:	6a 00                	push   $0x0
  pushl $51
c0102bc7:	6a 33                	push   $0x33
  jmp __alltraps
c0102bc9:	e9 11 fe ff ff       	jmp    c01029df <__alltraps>

c0102bce <vector52>:
.globl vector52
vector52:
  pushl $0
c0102bce:	6a 00                	push   $0x0
  pushl $52
c0102bd0:	6a 34                	push   $0x34
  jmp __alltraps
c0102bd2:	e9 08 fe ff ff       	jmp    c01029df <__alltraps>

c0102bd7 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102bd7:	6a 00                	push   $0x0
  pushl $53
c0102bd9:	6a 35                	push   $0x35
  jmp __alltraps
c0102bdb:	e9 ff fd ff ff       	jmp    c01029df <__alltraps>

c0102be0 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102be0:	6a 00                	push   $0x0
  pushl $54
c0102be2:	6a 36                	push   $0x36
  jmp __alltraps
c0102be4:	e9 f6 fd ff ff       	jmp    c01029df <__alltraps>

c0102be9 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102be9:	6a 00                	push   $0x0
  pushl $55
c0102beb:	6a 37                	push   $0x37
  jmp __alltraps
c0102bed:	e9 ed fd ff ff       	jmp    c01029df <__alltraps>

c0102bf2 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102bf2:	6a 00                	push   $0x0
  pushl $56
c0102bf4:	6a 38                	push   $0x38
  jmp __alltraps
c0102bf6:	e9 e4 fd ff ff       	jmp    c01029df <__alltraps>

c0102bfb <vector57>:
.globl vector57
vector57:
  pushl $0
c0102bfb:	6a 00                	push   $0x0
  pushl $57
c0102bfd:	6a 39                	push   $0x39
  jmp __alltraps
c0102bff:	e9 db fd ff ff       	jmp    c01029df <__alltraps>

c0102c04 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102c04:	6a 00                	push   $0x0
  pushl $58
c0102c06:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102c08:	e9 d2 fd ff ff       	jmp    c01029df <__alltraps>

c0102c0d <vector59>:
.globl vector59
vector59:
  pushl $0
c0102c0d:	6a 00                	push   $0x0
  pushl $59
c0102c0f:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102c11:	e9 c9 fd ff ff       	jmp    c01029df <__alltraps>

c0102c16 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102c16:	6a 00                	push   $0x0
  pushl $60
c0102c18:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102c1a:	e9 c0 fd ff ff       	jmp    c01029df <__alltraps>

c0102c1f <vector61>:
.globl vector61
vector61:
  pushl $0
c0102c1f:	6a 00                	push   $0x0
  pushl $61
c0102c21:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102c23:	e9 b7 fd ff ff       	jmp    c01029df <__alltraps>

c0102c28 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102c28:	6a 00                	push   $0x0
  pushl $62
c0102c2a:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102c2c:	e9 ae fd ff ff       	jmp    c01029df <__alltraps>

c0102c31 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102c31:	6a 00                	push   $0x0
  pushl $63
c0102c33:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102c35:	e9 a5 fd ff ff       	jmp    c01029df <__alltraps>

c0102c3a <vector64>:
.globl vector64
vector64:
  pushl $0
c0102c3a:	6a 00                	push   $0x0
  pushl $64
c0102c3c:	6a 40                	push   $0x40
  jmp __alltraps
c0102c3e:	e9 9c fd ff ff       	jmp    c01029df <__alltraps>

c0102c43 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102c43:	6a 00                	push   $0x0
  pushl $65
c0102c45:	6a 41                	push   $0x41
  jmp __alltraps
c0102c47:	e9 93 fd ff ff       	jmp    c01029df <__alltraps>

c0102c4c <vector66>:
.globl vector66
vector66:
  pushl $0
c0102c4c:	6a 00                	push   $0x0
  pushl $66
c0102c4e:	6a 42                	push   $0x42
  jmp __alltraps
c0102c50:	e9 8a fd ff ff       	jmp    c01029df <__alltraps>

c0102c55 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102c55:	6a 00                	push   $0x0
  pushl $67
c0102c57:	6a 43                	push   $0x43
  jmp __alltraps
c0102c59:	e9 81 fd ff ff       	jmp    c01029df <__alltraps>

c0102c5e <vector68>:
.globl vector68
vector68:
  pushl $0
c0102c5e:	6a 00                	push   $0x0
  pushl $68
c0102c60:	6a 44                	push   $0x44
  jmp __alltraps
c0102c62:	e9 78 fd ff ff       	jmp    c01029df <__alltraps>

c0102c67 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102c67:	6a 00                	push   $0x0
  pushl $69
c0102c69:	6a 45                	push   $0x45
  jmp __alltraps
c0102c6b:	e9 6f fd ff ff       	jmp    c01029df <__alltraps>

c0102c70 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102c70:	6a 00                	push   $0x0
  pushl $70
c0102c72:	6a 46                	push   $0x46
  jmp __alltraps
c0102c74:	e9 66 fd ff ff       	jmp    c01029df <__alltraps>

c0102c79 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102c79:	6a 00                	push   $0x0
  pushl $71
c0102c7b:	6a 47                	push   $0x47
  jmp __alltraps
c0102c7d:	e9 5d fd ff ff       	jmp    c01029df <__alltraps>

c0102c82 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102c82:	6a 00                	push   $0x0
  pushl $72
c0102c84:	6a 48                	push   $0x48
  jmp __alltraps
c0102c86:	e9 54 fd ff ff       	jmp    c01029df <__alltraps>

c0102c8b <vector73>:
.globl vector73
vector73:
  pushl $0
c0102c8b:	6a 00                	push   $0x0
  pushl $73
c0102c8d:	6a 49                	push   $0x49
  jmp __alltraps
c0102c8f:	e9 4b fd ff ff       	jmp    c01029df <__alltraps>

c0102c94 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102c94:	6a 00                	push   $0x0
  pushl $74
c0102c96:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102c98:	e9 42 fd ff ff       	jmp    c01029df <__alltraps>

c0102c9d <vector75>:
.globl vector75
vector75:
  pushl $0
c0102c9d:	6a 00                	push   $0x0
  pushl $75
c0102c9f:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102ca1:	e9 39 fd ff ff       	jmp    c01029df <__alltraps>

c0102ca6 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102ca6:	6a 00                	push   $0x0
  pushl $76
c0102ca8:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102caa:	e9 30 fd ff ff       	jmp    c01029df <__alltraps>

c0102caf <vector77>:
.globl vector77
vector77:
  pushl $0
c0102caf:	6a 00                	push   $0x0
  pushl $77
c0102cb1:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102cb3:	e9 27 fd ff ff       	jmp    c01029df <__alltraps>

c0102cb8 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102cb8:	6a 00                	push   $0x0
  pushl $78
c0102cba:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102cbc:	e9 1e fd ff ff       	jmp    c01029df <__alltraps>

c0102cc1 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102cc1:	6a 00                	push   $0x0
  pushl $79
c0102cc3:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102cc5:	e9 15 fd ff ff       	jmp    c01029df <__alltraps>

c0102cca <vector80>:
.globl vector80
vector80:
  pushl $0
c0102cca:	6a 00                	push   $0x0
  pushl $80
c0102ccc:	6a 50                	push   $0x50
  jmp __alltraps
c0102cce:	e9 0c fd ff ff       	jmp    c01029df <__alltraps>

c0102cd3 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102cd3:	6a 00                	push   $0x0
  pushl $81
c0102cd5:	6a 51                	push   $0x51
  jmp __alltraps
c0102cd7:	e9 03 fd ff ff       	jmp    c01029df <__alltraps>

c0102cdc <vector82>:
.globl vector82
vector82:
  pushl $0
c0102cdc:	6a 00                	push   $0x0
  pushl $82
c0102cde:	6a 52                	push   $0x52
  jmp __alltraps
c0102ce0:	e9 fa fc ff ff       	jmp    c01029df <__alltraps>

c0102ce5 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102ce5:	6a 00                	push   $0x0
  pushl $83
c0102ce7:	6a 53                	push   $0x53
  jmp __alltraps
c0102ce9:	e9 f1 fc ff ff       	jmp    c01029df <__alltraps>

c0102cee <vector84>:
.globl vector84
vector84:
  pushl $0
c0102cee:	6a 00                	push   $0x0
  pushl $84
c0102cf0:	6a 54                	push   $0x54
  jmp __alltraps
c0102cf2:	e9 e8 fc ff ff       	jmp    c01029df <__alltraps>

c0102cf7 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102cf7:	6a 00                	push   $0x0
  pushl $85
c0102cf9:	6a 55                	push   $0x55
  jmp __alltraps
c0102cfb:	e9 df fc ff ff       	jmp    c01029df <__alltraps>

c0102d00 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102d00:	6a 00                	push   $0x0
  pushl $86
c0102d02:	6a 56                	push   $0x56
  jmp __alltraps
c0102d04:	e9 d6 fc ff ff       	jmp    c01029df <__alltraps>

c0102d09 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102d09:	6a 00                	push   $0x0
  pushl $87
c0102d0b:	6a 57                	push   $0x57
  jmp __alltraps
c0102d0d:	e9 cd fc ff ff       	jmp    c01029df <__alltraps>

c0102d12 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102d12:	6a 00                	push   $0x0
  pushl $88
c0102d14:	6a 58                	push   $0x58
  jmp __alltraps
c0102d16:	e9 c4 fc ff ff       	jmp    c01029df <__alltraps>

c0102d1b <vector89>:
.globl vector89
vector89:
  pushl $0
c0102d1b:	6a 00                	push   $0x0
  pushl $89
c0102d1d:	6a 59                	push   $0x59
  jmp __alltraps
c0102d1f:	e9 bb fc ff ff       	jmp    c01029df <__alltraps>

c0102d24 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102d24:	6a 00                	push   $0x0
  pushl $90
c0102d26:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102d28:	e9 b2 fc ff ff       	jmp    c01029df <__alltraps>

c0102d2d <vector91>:
.globl vector91
vector91:
  pushl $0
c0102d2d:	6a 00                	push   $0x0
  pushl $91
c0102d2f:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102d31:	e9 a9 fc ff ff       	jmp    c01029df <__alltraps>

c0102d36 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102d36:	6a 00                	push   $0x0
  pushl $92
c0102d38:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102d3a:	e9 a0 fc ff ff       	jmp    c01029df <__alltraps>

c0102d3f <vector93>:
.globl vector93
vector93:
  pushl $0
c0102d3f:	6a 00                	push   $0x0
  pushl $93
c0102d41:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102d43:	e9 97 fc ff ff       	jmp    c01029df <__alltraps>

c0102d48 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102d48:	6a 00                	push   $0x0
  pushl $94
c0102d4a:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102d4c:	e9 8e fc ff ff       	jmp    c01029df <__alltraps>

c0102d51 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102d51:	6a 00                	push   $0x0
  pushl $95
c0102d53:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102d55:	e9 85 fc ff ff       	jmp    c01029df <__alltraps>

c0102d5a <vector96>:
.globl vector96
vector96:
  pushl $0
c0102d5a:	6a 00                	push   $0x0
  pushl $96
c0102d5c:	6a 60                	push   $0x60
  jmp __alltraps
c0102d5e:	e9 7c fc ff ff       	jmp    c01029df <__alltraps>

c0102d63 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102d63:	6a 00                	push   $0x0
  pushl $97
c0102d65:	6a 61                	push   $0x61
  jmp __alltraps
c0102d67:	e9 73 fc ff ff       	jmp    c01029df <__alltraps>

c0102d6c <vector98>:
.globl vector98
vector98:
  pushl $0
c0102d6c:	6a 00                	push   $0x0
  pushl $98
c0102d6e:	6a 62                	push   $0x62
  jmp __alltraps
c0102d70:	e9 6a fc ff ff       	jmp    c01029df <__alltraps>

c0102d75 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102d75:	6a 00                	push   $0x0
  pushl $99
c0102d77:	6a 63                	push   $0x63
  jmp __alltraps
c0102d79:	e9 61 fc ff ff       	jmp    c01029df <__alltraps>

c0102d7e <vector100>:
.globl vector100
vector100:
  pushl $0
c0102d7e:	6a 00                	push   $0x0
  pushl $100
c0102d80:	6a 64                	push   $0x64
  jmp __alltraps
c0102d82:	e9 58 fc ff ff       	jmp    c01029df <__alltraps>

c0102d87 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102d87:	6a 00                	push   $0x0
  pushl $101
c0102d89:	6a 65                	push   $0x65
  jmp __alltraps
c0102d8b:	e9 4f fc ff ff       	jmp    c01029df <__alltraps>

c0102d90 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102d90:	6a 00                	push   $0x0
  pushl $102
c0102d92:	6a 66                	push   $0x66
  jmp __alltraps
c0102d94:	e9 46 fc ff ff       	jmp    c01029df <__alltraps>

c0102d99 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102d99:	6a 00                	push   $0x0
  pushl $103
c0102d9b:	6a 67                	push   $0x67
  jmp __alltraps
c0102d9d:	e9 3d fc ff ff       	jmp    c01029df <__alltraps>

c0102da2 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102da2:	6a 00                	push   $0x0
  pushl $104
c0102da4:	6a 68                	push   $0x68
  jmp __alltraps
c0102da6:	e9 34 fc ff ff       	jmp    c01029df <__alltraps>

c0102dab <vector105>:
.globl vector105
vector105:
  pushl $0
c0102dab:	6a 00                	push   $0x0
  pushl $105
c0102dad:	6a 69                	push   $0x69
  jmp __alltraps
c0102daf:	e9 2b fc ff ff       	jmp    c01029df <__alltraps>

c0102db4 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102db4:	6a 00                	push   $0x0
  pushl $106
c0102db6:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102db8:	e9 22 fc ff ff       	jmp    c01029df <__alltraps>

c0102dbd <vector107>:
.globl vector107
vector107:
  pushl $0
c0102dbd:	6a 00                	push   $0x0
  pushl $107
c0102dbf:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102dc1:	e9 19 fc ff ff       	jmp    c01029df <__alltraps>

c0102dc6 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102dc6:	6a 00                	push   $0x0
  pushl $108
c0102dc8:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102dca:	e9 10 fc ff ff       	jmp    c01029df <__alltraps>

c0102dcf <vector109>:
.globl vector109
vector109:
  pushl $0
c0102dcf:	6a 00                	push   $0x0
  pushl $109
c0102dd1:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102dd3:	e9 07 fc ff ff       	jmp    c01029df <__alltraps>

c0102dd8 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102dd8:	6a 00                	push   $0x0
  pushl $110
c0102dda:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102ddc:	e9 fe fb ff ff       	jmp    c01029df <__alltraps>

c0102de1 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102de1:	6a 00                	push   $0x0
  pushl $111
c0102de3:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102de5:	e9 f5 fb ff ff       	jmp    c01029df <__alltraps>

c0102dea <vector112>:
.globl vector112
vector112:
  pushl $0
c0102dea:	6a 00                	push   $0x0
  pushl $112
c0102dec:	6a 70                	push   $0x70
  jmp __alltraps
c0102dee:	e9 ec fb ff ff       	jmp    c01029df <__alltraps>

c0102df3 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102df3:	6a 00                	push   $0x0
  pushl $113
c0102df5:	6a 71                	push   $0x71
  jmp __alltraps
c0102df7:	e9 e3 fb ff ff       	jmp    c01029df <__alltraps>

c0102dfc <vector114>:
.globl vector114
vector114:
  pushl $0
c0102dfc:	6a 00                	push   $0x0
  pushl $114
c0102dfe:	6a 72                	push   $0x72
  jmp __alltraps
c0102e00:	e9 da fb ff ff       	jmp    c01029df <__alltraps>

c0102e05 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102e05:	6a 00                	push   $0x0
  pushl $115
c0102e07:	6a 73                	push   $0x73
  jmp __alltraps
c0102e09:	e9 d1 fb ff ff       	jmp    c01029df <__alltraps>

c0102e0e <vector116>:
.globl vector116
vector116:
  pushl $0
c0102e0e:	6a 00                	push   $0x0
  pushl $116
c0102e10:	6a 74                	push   $0x74
  jmp __alltraps
c0102e12:	e9 c8 fb ff ff       	jmp    c01029df <__alltraps>

c0102e17 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102e17:	6a 00                	push   $0x0
  pushl $117
c0102e19:	6a 75                	push   $0x75
  jmp __alltraps
c0102e1b:	e9 bf fb ff ff       	jmp    c01029df <__alltraps>

c0102e20 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102e20:	6a 00                	push   $0x0
  pushl $118
c0102e22:	6a 76                	push   $0x76
  jmp __alltraps
c0102e24:	e9 b6 fb ff ff       	jmp    c01029df <__alltraps>

c0102e29 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102e29:	6a 00                	push   $0x0
  pushl $119
c0102e2b:	6a 77                	push   $0x77
  jmp __alltraps
c0102e2d:	e9 ad fb ff ff       	jmp    c01029df <__alltraps>

c0102e32 <vector120>:
.globl vector120
vector120:
  pushl $0
c0102e32:	6a 00                	push   $0x0
  pushl $120
c0102e34:	6a 78                	push   $0x78
  jmp __alltraps
c0102e36:	e9 a4 fb ff ff       	jmp    c01029df <__alltraps>

c0102e3b <vector121>:
.globl vector121
vector121:
  pushl $0
c0102e3b:	6a 00                	push   $0x0
  pushl $121
c0102e3d:	6a 79                	push   $0x79
  jmp __alltraps
c0102e3f:	e9 9b fb ff ff       	jmp    c01029df <__alltraps>

c0102e44 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102e44:	6a 00                	push   $0x0
  pushl $122
c0102e46:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102e48:	e9 92 fb ff ff       	jmp    c01029df <__alltraps>

c0102e4d <vector123>:
.globl vector123
vector123:
  pushl $0
c0102e4d:	6a 00                	push   $0x0
  pushl $123
c0102e4f:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102e51:	e9 89 fb ff ff       	jmp    c01029df <__alltraps>

c0102e56 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102e56:	6a 00                	push   $0x0
  pushl $124
c0102e58:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102e5a:	e9 80 fb ff ff       	jmp    c01029df <__alltraps>

c0102e5f <vector125>:
.globl vector125
vector125:
  pushl $0
c0102e5f:	6a 00                	push   $0x0
  pushl $125
c0102e61:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102e63:	e9 77 fb ff ff       	jmp    c01029df <__alltraps>

c0102e68 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102e68:	6a 00                	push   $0x0
  pushl $126
c0102e6a:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102e6c:	e9 6e fb ff ff       	jmp    c01029df <__alltraps>

c0102e71 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102e71:	6a 00                	push   $0x0
  pushl $127
c0102e73:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102e75:	e9 65 fb ff ff       	jmp    c01029df <__alltraps>

c0102e7a <vector128>:
.globl vector128
vector128:
  pushl $0
c0102e7a:	6a 00                	push   $0x0
  pushl $128
c0102e7c:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102e81:	e9 59 fb ff ff       	jmp    c01029df <__alltraps>

c0102e86 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102e86:	6a 00                	push   $0x0
  pushl $129
c0102e88:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102e8d:	e9 4d fb ff ff       	jmp    c01029df <__alltraps>

c0102e92 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102e92:	6a 00                	push   $0x0
  pushl $130
c0102e94:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102e99:	e9 41 fb ff ff       	jmp    c01029df <__alltraps>

c0102e9e <vector131>:
.globl vector131
vector131:
  pushl $0
c0102e9e:	6a 00                	push   $0x0
  pushl $131
c0102ea0:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102ea5:	e9 35 fb ff ff       	jmp    c01029df <__alltraps>

c0102eaa <vector132>:
.globl vector132
vector132:
  pushl $0
c0102eaa:	6a 00                	push   $0x0
  pushl $132
c0102eac:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102eb1:	e9 29 fb ff ff       	jmp    c01029df <__alltraps>

c0102eb6 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102eb6:	6a 00                	push   $0x0
  pushl $133
c0102eb8:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102ebd:	e9 1d fb ff ff       	jmp    c01029df <__alltraps>

c0102ec2 <vector134>:
.globl vector134
vector134:
  pushl $0
c0102ec2:	6a 00                	push   $0x0
  pushl $134
c0102ec4:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102ec9:	e9 11 fb ff ff       	jmp    c01029df <__alltraps>

c0102ece <vector135>:
.globl vector135
vector135:
  pushl $0
c0102ece:	6a 00                	push   $0x0
  pushl $135
c0102ed0:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102ed5:	e9 05 fb ff ff       	jmp    c01029df <__alltraps>

c0102eda <vector136>:
.globl vector136
vector136:
  pushl $0
c0102eda:	6a 00                	push   $0x0
  pushl $136
c0102edc:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0102ee1:	e9 f9 fa ff ff       	jmp    c01029df <__alltraps>

c0102ee6 <vector137>:
.globl vector137
vector137:
  pushl $0
c0102ee6:	6a 00                	push   $0x0
  pushl $137
c0102ee8:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0102eed:	e9 ed fa ff ff       	jmp    c01029df <__alltraps>

c0102ef2 <vector138>:
.globl vector138
vector138:
  pushl $0
c0102ef2:	6a 00                	push   $0x0
  pushl $138
c0102ef4:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0102ef9:	e9 e1 fa ff ff       	jmp    c01029df <__alltraps>

c0102efe <vector139>:
.globl vector139
vector139:
  pushl $0
c0102efe:	6a 00                	push   $0x0
  pushl $139
c0102f00:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0102f05:	e9 d5 fa ff ff       	jmp    c01029df <__alltraps>

c0102f0a <vector140>:
.globl vector140
vector140:
  pushl $0
c0102f0a:	6a 00                	push   $0x0
  pushl $140
c0102f0c:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0102f11:	e9 c9 fa ff ff       	jmp    c01029df <__alltraps>

c0102f16 <vector141>:
.globl vector141
vector141:
  pushl $0
c0102f16:	6a 00                	push   $0x0
  pushl $141
c0102f18:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0102f1d:	e9 bd fa ff ff       	jmp    c01029df <__alltraps>

c0102f22 <vector142>:
.globl vector142
vector142:
  pushl $0
c0102f22:	6a 00                	push   $0x0
  pushl $142
c0102f24:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0102f29:	e9 b1 fa ff ff       	jmp    c01029df <__alltraps>

c0102f2e <vector143>:
.globl vector143
vector143:
  pushl $0
c0102f2e:	6a 00                	push   $0x0
  pushl $143
c0102f30:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0102f35:	e9 a5 fa ff ff       	jmp    c01029df <__alltraps>

c0102f3a <vector144>:
.globl vector144
vector144:
  pushl $0
c0102f3a:	6a 00                	push   $0x0
  pushl $144
c0102f3c:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0102f41:	e9 99 fa ff ff       	jmp    c01029df <__alltraps>

c0102f46 <vector145>:
.globl vector145
vector145:
  pushl $0
c0102f46:	6a 00                	push   $0x0
  pushl $145
c0102f48:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0102f4d:	e9 8d fa ff ff       	jmp    c01029df <__alltraps>

c0102f52 <vector146>:
.globl vector146
vector146:
  pushl $0
c0102f52:	6a 00                	push   $0x0
  pushl $146
c0102f54:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0102f59:	e9 81 fa ff ff       	jmp    c01029df <__alltraps>

c0102f5e <vector147>:
.globl vector147
vector147:
  pushl $0
c0102f5e:	6a 00                	push   $0x0
  pushl $147
c0102f60:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0102f65:	e9 75 fa ff ff       	jmp    c01029df <__alltraps>

c0102f6a <vector148>:
.globl vector148
vector148:
  pushl $0
c0102f6a:	6a 00                	push   $0x0
  pushl $148
c0102f6c:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0102f71:	e9 69 fa ff ff       	jmp    c01029df <__alltraps>

c0102f76 <vector149>:
.globl vector149
vector149:
  pushl $0
c0102f76:	6a 00                	push   $0x0
  pushl $149
c0102f78:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0102f7d:	e9 5d fa ff ff       	jmp    c01029df <__alltraps>

c0102f82 <vector150>:
.globl vector150
vector150:
  pushl $0
c0102f82:	6a 00                	push   $0x0
  pushl $150
c0102f84:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0102f89:	e9 51 fa ff ff       	jmp    c01029df <__alltraps>

c0102f8e <vector151>:
.globl vector151
vector151:
  pushl $0
c0102f8e:	6a 00                	push   $0x0
  pushl $151
c0102f90:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c0102f95:	e9 45 fa ff ff       	jmp    c01029df <__alltraps>

c0102f9a <vector152>:
.globl vector152
vector152:
  pushl $0
c0102f9a:	6a 00                	push   $0x0
  pushl $152
c0102f9c:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c0102fa1:	e9 39 fa ff ff       	jmp    c01029df <__alltraps>

c0102fa6 <vector153>:
.globl vector153
vector153:
  pushl $0
c0102fa6:	6a 00                	push   $0x0
  pushl $153
c0102fa8:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c0102fad:	e9 2d fa ff ff       	jmp    c01029df <__alltraps>

c0102fb2 <vector154>:
.globl vector154
vector154:
  pushl $0
c0102fb2:	6a 00                	push   $0x0
  pushl $154
c0102fb4:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c0102fb9:	e9 21 fa ff ff       	jmp    c01029df <__alltraps>

c0102fbe <vector155>:
.globl vector155
vector155:
  pushl $0
c0102fbe:	6a 00                	push   $0x0
  pushl $155
c0102fc0:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c0102fc5:	e9 15 fa ff ff       	jmp    c01029df <__alltraps>

c0102fca <vector156>:
.globl vector156
vector156:
  pushl $0
c0102fca:	6a 00                	push   $0x0
  pushl $156
c0102fcc:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0102fd1:	e9 09 fa ff ff       	jmp    c01029df <__alltraps>

c0102fd6 <vector157>:
.globl vector157
vector157:
  pushl $0
c0102fd6:	6a 00                	push   $0x0
  pushl $157
c0102fd8:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0102fdd:	e9 fd f9 ff ff       	jmp    c01029df <__alltraps>

c0102fe2 <vector158>:
.globl vector158
vector158:
  pushl $0
c0102fe2:	6a 00                	push   $0x0
  pushl $158
c0102fe4:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0102fe9:	e9 f1 f9 ff ff       	jmp    c01029df <__alltraps>

c0102fee <vector159>:
.globl vector159
vector159:
  pushl $0
c0102fee:	6a 00                	push   $0x0
  pushl $159
c0102ff0:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0102ff5:	e9 e5 f9 ff ff       	jmp    c01029df <__alltraps>

c0102ffa <vector160>:
.globl vector160
vector160:
  pushl $0
c0102ffa:	6a 00                	push   $0x0
  pushl $160
c0102ffc:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103001:	e9 d9 f9 ff ff       	jmp    c01029df <__alltraps>

c0103006 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103006:	6a 00                	push   $0x0
  pushl $161
c0103008:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c010300d:	e9 cd f9 ff ff       	jmp    c01029df <__alltraps>

c0103012 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103012:	6a 00                	push   $0x0
  pushl $162
c0103014:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103019:	e9 c1 f9 ff ff       	jmp    c01029df <__alltraps>

c010301e <vector163>:
.globl vector163
vector163:
  pushl $0
c010301e:	6a 00                	push   $0x0
  pushl $163
c0103020:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0103025:	e9 b5 f9 ff ff       	jmp    c01029df <__alltraps>

c010302a <vector164>:
.globl vector164
vector164:
  pushl $0
c010302a:	6a 00                	push   $0x0
  pushl $164
c010302c:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0103031:	e9 a9 f9 ff ff       	jmp    c01029df <__alltraps>

c0103036 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103036:	6a 00                	push   $0x0
  pushl $165
c0103038:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c010303d:	e9 9d f9 ff ff       	jmp    c01029df <__alltraps>

c0103042 <vector166>:
.globl vector166
vector166:
  pushl $0
c0103042:	6a 00                	push   $0x0
  pushl $166
c0103044:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103049:	e9 91 f9 ff ff       	jmp    c01029df <__alltraps>

c010304e <vector167>:
.globl vector167
vector167:
  pushl $0
c010304e:	6a 00                	push   $0x0
  pushl $167
c0103050:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0103055:	e9 85 f9 ff ff       	jmp    c01029df <__alltraps>

c010305a <vector168>:
.globl vector168
vector168:
  pushl $0
c010305a:	6a 00                	push   $0x0
  pushl $168
c010305c:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c0103061:	e9 79 f9 ff ff       	jmp    c01029df <__alltraps>

c0103066 <vector169>:
.globl vector169
vector169:
  pushl $0
c0103066:	6a 00                	push   $0x0
  pushl $169
c0103068:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c010306d:	e9 6d f9 ff ff       	jmp    c01029df <__alltraps>

c0103072 <vector170>:
.globl vector170
vector170:
  pushl $0
c0103072:	6a 00                	push   $0x0
  pushl $170
c0103074:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c0103079:	e9 61 f9 ff ff       	jmp    c01029df <__alltraps>

c010307e <vector171>:
.globl vector171
vector171:
  pushl $0
c010307e:	6a 00                	push   $0x0
  pushl $171
c0103080:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c0103085:	e9 55 f9 ff ff       	jmp    c01029df <__alltraps>

c010308a <vector172>:
.globl vector172
vector172:
  pushl $0
c010308a:	6a 00                	push   $0x0
  pushl $172
c010308c:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c0103091:	e9 49 f9 ff ff       	jmp    c01029df <__alltraps>

c0103096 <vector173>:
.globl vector173
vector173:
  pushl $0
c0103096:	6a 00                	push   $0x0
  pushl $173
c0103098:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c010309d:	e9 3d f9 ff ff       	jmp    c01029df <__alltraps>

c01030a2 <vector174>:
.globl vector174
vector174:
  pushl $0
c01030a2:	6a 00                	push   $0x0
  pushl $174
c01030a4:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01030a9:	e9 31 f9 ff ff       	jmp    c01029df <__alltraps>

c01030ae <vector175>:
.globl vector175
vector175:
  pushl $0
c01030ae:	6a 00                	push   $0x0
  pushl $175
c01030b0:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01030b5:	e9 25 f9 ff ff       	jmp    c01029df <__alltraps>

c01030ba <vector176>:
.globl vector176
vector176:
  pushl $0
c01030ba:	6a 00                	push   $0x0
  pushl $176
c01030bc:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01030c1:	e9 19 f9 ff ff       	jmp    c01029df <__alltraps>

c01030c6 <vector177>:
.globl vector177
vector177:
  pushl $0
c01030c6:	6a 00                	push   $0x0
  pushl $177
c01030c8:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01030cd:	e9 0d f9 ff ff       	jmp    c01029df <__alltraps>

c01030d2 <vector178>:
.globl vector178
vector178:
  pushl $0
c01030d2:	6a 00                	push   $0x0
  pushl $178
c01030d4:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c01030d9:	e9 01 f9 ff ff       	jmp    c01029df <__alltraps>

c01030de <vector179>:
.globl vector179
vector179:
  pushl $0
c01030de:	6a 00                	push   $0x0
  pushl $179
c01030e0:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c01030e5:	e9 f5 f8 ff ff       	jmp    c01029df <__alltraps>

c01030ea <vector180>:
.globl vector180
vector180:
  pushl $0
c01030ea:	6a 00                	push   $0x0
  pushl $180
c01030ec:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c01030f1:	e9 e9 f8 ff ff       	jmp    c01029df <__alltraps>

c01030f6 <vector181>:
.globl vector181
vector181:
  pushl $0
c01030f6:	6a 00                	push   $0x0
  pushl $181
c01030f8:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c01030fd:	e9 dd f8 ff ff       	jmp    c01029df <__alltraps>

c0103102 <vector182>:
.globl vector182
vector182:
  pushl $0
c0103102:	6a 00                	push   $0x0
  pushl $182
c0103104:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103109:	e9 d1 f8 ff ff       	jmp    c01029df <__alltraps>

c010310e <vector183>:
.globl vector183
vector183:
  pushl $0
c010310e:	6a 00                	push   $0x0
  pushl $183
c0103110:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0103115:	e9 c5 f8 ff ff       	jmp    c01029df <__alltraps>

c010311a <vector184>:
.globl vector184
vector184:
  pushl $0
c010311a:	6a 00                	push   $0x0
  pushl $184
c010311c:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103121:	e9 b9 f8 ff ff       	jmp    c01029df <__alltraps>

c0103126 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103126:	6a 00                	push   $0x0
  pushl $185
c0103128:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c010312d:	e9 ad f8 ff ff       	jmp    c01029df <__alltraps>

c0103132 <vector186>:
.globl vector186
vector186:
  pushl $0
c0103132:	6a 00                	push   $0x0
  pushl $186
c0103134:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103139:	e9 a1 f8 ff ff       	jmp    c01029df <__alltraps>

c010313e <vector187>:
.globl vector187
vector187:
  pushl $0
c010313e:	6a 00                	push   $0x0
  pushl $187
c0103140:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0103145:	e9 95 f8 ff ff       	jmp    c01029df <__alltraps>

c010314a <vector188>:
.globl vector188
vector188:
  pushl $0
c010314a:	6a 00                	push   $0x0
  pushl $188
c010314c:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0103151:	e9 89 f8 ff ff       	jmp    c01029df <__alltraps>

c0103156 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103156:	6a 00                	push   $0x0
  pushl $189
c0103158:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c010315d:	e9 7d f8 ff ff       	jmp    c01029df <__alltraps>

c0103162 <vector190>:
.globl vector190
vector190:
  pushl $0
c0103162:	6a 00                	push   $0x0
  pushl $190
c0103164:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c0103169:	e9 71 f8 ff ff       	jmp    c01029df <__alltraps>

c010316e <vector191>:
.globl vector191
vector191:
  pushl $0
c010316e:	6a 00                	push   $0x0
  pushl $191
c0103170:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c0103175:	e9 65 f8 ff ff       	jmp    c01029df <__alltraps>

c010317a <vector192>:
.globl vector192
vector192:
  pushl $0
c010317a:	6a 00                	push   $0x0
  pushl $192
c010317c:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c0103181:	e9 59 f8 ff ff       	jmp    c01029df <__alltraps>

c0103186 <vector193>:
.globl vector193
vector193:
  pushl $0
c0103186:	6a 00                	push   $0x0
  pushl $193
c0103188:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c010318d:	e9 4d f8 ff ff       	jmp    c01029df <__alltraps>

c0103192 <vector194>:
.globl vector194
vector194:
  pushl $0
c0103192:	6a 00                	push   $0x0
  pushl $194
c0103194:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c0103199:	e9 41 f8 ff ff       	jmp    c01029df <__alltraps>

c010319e <vector195>:
.globl vector195
vector195:
  pushl $0
c010319e:	6a 00                	push   $0x0
  pushl $195
c01031a0:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01031a5:	e9 35 f8 ff ff       	jmp    c01029df <__alltraps>

c01031aa <vector196>:
.globl vector196
vector196:
  pushl $0
c01031aa:	6a 00                	push   $0x0
  pushl $196
c01031ac:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01031b1:	e9 29 f8 ff ff       	jmp    c01029df <__alltraps>

c01031b6 <vector197>:
.globl vector197
vector197:
  pushl $0
c01031b6:	6a 00                	push   $0x0
  pushl $197
c01031b8:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01031bd:	e9 1d f8 ff ff       	jmp    c01029df <__alltraps>

c01031c2 <vector198>:
.globl vector198
vector198:
  pushl $0
c01031c2:	6a 00                	push   $0x0
  pushl $198
c01031c4:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01031c9:	e9 11 f8 ff ff       	jmp    c01029df <__alltraps>

c01031ce <vector199>:
.globl vector199
vector199:
  pushl $0
c01031ce:	6a 00                	push   $0x0
  pushl $199
c01031d0:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c01031d5:	e9 05 f8 ff ff       	jmp    c01029df <__alltraps>

c01031da <vector200>:
.globl vector200
vector200:
  pushl $0
c01031da:	6a 00                	push   $0x0
  pushl $200
c01031dc:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c01031e1:	e9 f9 f7 ff ff       	jmp    c01029df <__alltraps>

c01031e6 <vector201>:
.globl vector201
vector201:
  pushl $0
c01031e6:	6a 00                	push   $0x0
  pushl $201
c01031e8:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c01031ed:	e9 ed f7 ff ff       	jmp    c01029df <__alltraps>

c01031f2 <vector202>:
.globl vector202
vector202:
  pushl $0
c01031f2:	6a 00                	push   $0x0
  pushl $202
c01031f4:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c01031f9:	e9 e1 f7 ff ff       	jmp    c01029df <__alltraps>

c01031fe <vector203>:
.globl vector203
vector203:
  pushl $0
c01031fe:	6a 00                	push   $0x0
  pushl $203
c0103200:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103205:	e9 d5 f7 ff ff       	jmp    c01029df <__alltraps>

c010320a <vector204>:
.globl vector204
vector204:
  pushl $0
c010320a:	6a 00                	push   $0x0
  pushl $204
c010320c:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103211:	e9 c9 f7 ff ff       	jmp    c01029df <__alltraps>

c0103216 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103216:	6a 00                	push   $0x0
  pushl $205
c0103218:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c010321d:	e9 bd f7 ff ff       	jmp    c01029df <__alltraps>

c0103222 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103222:	6a 00                	push   $0x0
  pushl $206
c0103224:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103229:	e9 b1 f7 ff ff       	jmp    c01029df <__alltraps>

c010322e <vector207>:
.globl vector207
vector207:
  pushl $0
c010322e:	6a 00                	push   $0x0
  pushl $207
c0103230:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0103235:	e9 a5 f7 ff ff       	jmp    c01029df <__alltraps>

c010323a <vector208>:
.globl vector208
vector208:
  pushl $0
c010323a:	6a 00                	push   $0x0
  pushl $208
c010323c:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0103241:	e9 99 f7 ff ff       	jmp    c01029df <__alltraps>

c0103246 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103246:	6a 00                	push   $0x0
  pushl $209
c0103248:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c010324d:	e9 8d f7 ff ff       	jmp    c01029df <__alltraps>

c0103252 <vector210>:
.globl vector210
vector210:
  pushl $0
c0103252:	6a 00                	push   $0x0
  pushl $210
c0103254:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103259:	e9 81 f7 ff ff       	jmp    c01029df <__alltraps>

c010325e <vector211>:
.globl vector211
vector211:
  pushl $0
c010325e:	6a 00                	push   $0x0
  pushl $211
c0103260:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0103265:	e9 75 f7 ff ff       	jmp    c01029df <__alltraps>

c010326a <vector212>:
.globl vector212
vector212:
  pushl $0
c010326a:	6a 00                	push   $0x0
  pushl $212
c010326c:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c0103271:	e9 69 f7 ff ff       	jmp    c01029df <__alltraps>

c0103276 <vector213>:
.globl vector213
vector213:
  pushl $0
c0103276:	6a 00                	push   $0x0
  pushl $213
c0103278:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c010327d:	e9 5d f7 ff ff       	jmp    c01029df <__alltraps>

c0103282 <vector214>:
.globl vector214
vector214:
  pushl $0
c0103282:	6a 00                	push   $0x0
  pushl $214
c0103284:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c0103289:	e9 51 f7 ff ff       	jmp    c01029df <__alltraps>

c010328e <vector215>:
.globl vector215
vector215:
  pushl $0
c010328e:	6a 00                	push   $0x0
  pushl $215
c0103290:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c0103295:	e9 45 f7 ff ff       	jmp    c01029df <__alltraps>

c010329a <vector216>:
.globl vector216
vector216:
  pushl $0
c010329a:	6a 00                	push   $0x0
  pushl $216
c010329c:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01032a1:	e9 39 f7 ff ff       	jmp    c01029df <__alltraps>

c01032a6 <vector217>:
.globl vector217
vector217:
  pushl $0
c01032a6:	6a 00                	push   $0x0
  pushl $217
c01032a8:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01032ad:	e9 2d f7 ff ff       	jmp    c01029df <__alltraps>

c01032b2 <vector218>:
.globl vector218
vector218:
  pushl $0
c01032b2:	6a 00                	push   $0x0
  pushl $218
c01032b4:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01032b9:	e9 21 f7 ff ff       	jmp    c01029df <__alltraps>

c01032be <vector219>:
.globl vector219
vector219:
  pushl $0
c01032be:	6a 00                	push   $0x0
  pushl $219
c01032c0:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01032c5:	e9 15 f7 ff ff       	jmp    c01029df <__alltraps>

c01032ca <vector220>:
.globl vector220
vector220:
  pushl $0
c01032ca:	6a 00                	push   $0x0
  pushl $220
c01032cc:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c01032d1:	e9 09 f7 ff ff       	jmp    c01029df <__alltraps>

c01032d6 <vector221>:
.globl vector221
vector221:
  pushl $0
c01032d6:	6a 00                	push   $0x0
  pushl $221
c01032d8:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c01032dd:	e9 fd f6 ff ff       	jmp    c01029df <__alltraps>

c01032e2 <vector222>:
.globl vector222
vector222:
  pushl $0
c01032e2:	6a 00                	push   $0x0
  pushl $222
c01032e4:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c01032e9:	e9 f1 f6 ff ff       	jmp    c01029df <__alltraps>

c01032ee <vector223>:
.globl vector223
vector223:
  pushl $0
c01032ee:	6a 00                	push   $0x0
  pushl $223
c01032f0:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c01032f5:	e9 e5 f6 ff ff       	jmp    c01029df <__alltraps>

c01032fa <vector224>:
.globl vector224
vector224:
  pushl $0
c01032fa:	6a 00                	push   $0x0
  pushl $224
c01032fc:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103301:	e9 d9 f6 ff ff       	jmp    c01029df <__alltraps>

c0103306 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103306:	6a 00                	push   $0x0
  pushl $225
c0103308:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c010330d:	e9 cd f6 ff ff       	jmp    c01029df <__alltraps>

c0103312 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103312:	6a 00                	push   $0x0
  pushl $226
c0103314:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103319:	e9 c1 f6 ff ff       	jmp    c01029df <__alltraps>

c010331e <vector227>:
.globl vector227
vector227:
  pushl $0
c010331e:	6a 00                	push   $0x0
  pushl $227
c0103320:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0103325:	e9 b5 f6 ff ff       	jmp    c01029df <__alltraps>

c010332a <vector228>:
.globl vector228
vector228:
  pushl $0
c010332a:	6a 00                	push   $0x0
  pushl $228
c010332c:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0103331:	e9 a9 f6 ff ff       	jmp    c01029df <__alltraps>

c0103336 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103336:	6a 00                	push   $0x0
  pushl $229
c0103338:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c010333d:	e9 9d f6 ff ff       	jmp    c01029df <__alltraps>

c0103342 <vector230>:
.globl vector230
vector230:
  pushl $0
c0103342:	6a 00                	push   $0x0
  pushl $230
c0103344:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103349:	e9 91 f6 ff ff       	jmp    c01029df <__alltraps>

c010334e <vector231>:
.globl vector231
vector231:
  pushl $0
c010334e:	6a 00                	push   $0x0
  pushl $231
c0103350:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0103355:	e9 85 f6 ff ff       	jmp    c01029df <__alltraps>

c010335a <vector232>:
.globl vector232
vector232:
  pushl $0
c010335a:	6a 00                	push   $0x0
  pushl $232
c010335c:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c0103361:	e9 79 f6 ff ff       	jmp    c01029df <__alltraps>

c0103366 <vector233>:
.globl vector233
vector233:
  pushl $0
c0103366:	6a 00                	push   $0x0
  pushl $233
c0103368:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c010336d:	e9 6d f6 ff ff       	jmp    c01029df <__alltraps>

c0103372 <vector234>:
.globl vector234
vector234:
  pushl $0
c0103372:	6a 00                	push   $0x0
  pushl $234
c0103374:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c0103379:	e9 61 f6 ff ff       	jmp    c01029df <__alltraps>

c010337e <vector235>:
.globl vector235
vector235:
  pushl $0
c010337e:	6a 00                	push   $0x0
  pushl $235
c0103380:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c0103385:	e9 55 f6 ff ff       	jmp    c01029df <__alltraps>

c010338a <vector236>:
.globl vector236
vector236:
  pushl $0
c010338a:	6a 00                	push   $0x0
  pushl $236
c010338c:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c0103391:	e9 49 f6 ff ff       	jmp    c01029df <__alltraps>

c0103396 <vector237>:
.globl vector237
vector237:
  pushl $0
c0103396:	6a 00                	push   $0x0
  pushl $237
c0103398:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c010339d:	e9 3d f6 ff ff       	jmp    c01029df <__alltraps>

c01033a2 <vector238>:
.globl vector238
vector238:
  pushl $0
c01033a2:	6a 00                	push   $0x0
  pushl $238
c01033a4:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01033a9:	e9 31 f6 ff ff       	jmp    c01029df <__alltraps>

c01033ae <vector239>:
.globl vector239
vector239:
  pushl $0
c01033ae:	6a 00                	push   $0x0
  pushl $239
c01033b0:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01033b5:	e9 25 f6 ff ff       	jmp    c01029df <__alltraps>

c01033ba <vector240>:
.globl vector240
vector240:
  pushl $0
c01033ba:	6a 00                	push   $0x0
  pushl $240
c01033bc:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01033c1:	e9 19 f6 ff ff       	jmp    c01029df <__alltraps>

c01033c6 <vector241>:
.globl vector241
vector241:
  pushl $0
c01033c6:	6a 00                	push   $0x0
  pushl $241
c01033c8:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01033cd:	e9 0d f6 ff ff       	jmp    c01029df <__alltraps>

c01033d2 <vector242>:
.globl vector242
vector242:
  pushl $0
c01033d2:	6a 00                	push   $0x0
  pushl $242
c01033d4:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c01033d9:	e9 01 f6 ff ff       	jmp    c01029df <__alltraps>

c01033de <vector243>:
.globl vector243
vector243:
  pushl $0
c01033de:	6a 00                	push   $0x0
  pushl $243
c01033e0:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c01033e5:	e9 f5 f5 ff ff       	jmp    c01029df <__alltraps>

c01033ea <vector244>:
.globl vector244
vector244:
  pushl $0
c01033ea:	6a 00                	push   $0x0
  pushl $244
c01033ec:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c01033f1:	e9 e9 f5 ff ff       	jmp    c01029df <__alltraps>

c01033f6 <vector245>:
.globl vector245
vector245:
  pushl $0
c01033f6:	6a 00                	push   $0x0
  pushl $245
c01033f8:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c01033fd:	e9 dd f5 ff ff       	jmp    c01029df <__alltraps>

c0103402 <vector246>:
.globl vector246
vector246:
  pushl $0
c0103402:	6a 00                	push   $0x0
  pushl $246
c0103404:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103409:	e9 d1 f5 ff ff       	jmp    c01029df <__alltraps>

c010340e <vector247>:
.globl vector247
vector247:
  pushl $0
c010340e:	6a 00                	push   $0x0
  pushl $247
c0103410:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103415:	e9 c5 f5 ff ff       	jmp    c01029df <__alltraps>

c010341a <vector248>:
.globl vector248
vector248:
  pushl $0
c010341a:	6a 00                	push   $0x0
  pushl $248
c010341c:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103421:	e9 b9 f5 ff ff       	jmp    c01029df <__alltraps>

c0103426 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103426:	6a 00                	push   $0x0
  pushl $249
c0103428:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c010342d:	e9 ad f5 ff ff       	jmp    c01029df <__alltraps>

c0103432 <vector250>:
.globl vector250
vector250:
  pushl $0
c0103432:	6a 00                	push   $0x0
  pushl $250
c0103434:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103439:	e9 a1 f5 ff ff       	jmp    c01029df <__alltraps>

c010343e <vector251>:
.globl vector251
vector251:
  pushl $0
c010343e:	6a 00                	push   $0x0
  pushl $251
c0103440:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0103445:	e9 95 f5 ff ff       	jmp    c01029df <__alltraps>

c010344a <vector252>:
.globl vector252
vector252:
  pushl $0
c010344a:	6a 00                	push   $0x0
  pushl $252
c010344c:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0103451:	e9 89 f5 ff ff       	jmp    c01029df <__alltraps>

c0103456 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103456:	6a 00                	push   $0x0
  pushl $253
c0103458:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c010345d:	e9 7d f5 ff ff       	jmp    c01029df <__alltraps>

c0103462 <vector254>:
.globl vector254
vector254:
  pushl $0
c0103462:	6a 00                	push   $0x0
  pushl $254
c0103464:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c0103469:	e9 71 f5 ff ff       	jmp    c01029df <__alltraps>

c010346e <vector255>:
.globl vector255
vector255:
  pushl $0
c010346e:	6a 00                	push   $0x0
  pushl $255
c0103470:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c0103475:	e9 65 f5 ff ff       	jmp    c01029df <__alltraps>

c010347a <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010347a:	55                   	push   %ebp
c010347b:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010347d:	8b 55 08             	mov    0x8(%ebp),%edx
c0103480:	a1 f0 44 1c c0       	mov    0xc01c44f0,%eax
c0103485:	29 c2                	sub    %eax,%edx
c0103487:	89 d0                	mov    %edx,%eax
c0103489:	c1 f8 05             	sar    $0x5,%eax
}
c010348c:	5d                   	pop    %ebp
c010348d:	c3                   	ret    

c010348e <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010348e:	55                   	push   %ebp
c010348f:	89 e5                	mov    %esp,%ebp
c0103491:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0103494:	8b 45 08             	mov    0x8(%ebp),%eax
c0103497:	89 04 24             	mov    %eax,(%esp)
c010349a:	e8 db ff ff ff       	call   c010347a <page2ppn>
c010349f:	c1 e0 0c             	shl    $0xc,%eax
}
c01034a2:	c9                   	leave  
c01034a3:	c3                   	ret    

c01034a4 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01034a4:	55                   	push   %ebp
c01034a5:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01034a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01034aa:	8b 00                	mov    (%eax),%eax
}
c01034ac:	5d                   	pop    %ebp
c01034ad:	c3                   	ret    

c01034ae <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01034ae:	55                   	push   %ebp
c01034af:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01034b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01034b4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01034b7:	89 10                	mov    %edx,(%eax)
}
c01034b9:	5d                   	pop    %ebp
c01034ba:	c3                   	ret    

c01034bb <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01034bb:	55                   	push   %ebp
c01034bc:	89 e5                	mov    %esp,%ebp
c01034be:	83 ec 10             	sub    $0x10,%esp
c01034c1:	c7 45 fc dc 44 1c c0 	movl   $0xc01c44dc,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01034c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01034cb:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01034ce:	89 50 04             	mov    %edx,0x4(%eax)
c01034d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01034d4:	8b 50 04             	mov    0x4(%eax),%edx
c01034d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01034da:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c01034dc:	c7 05 e4 44 1c c0 00 	movl   $0x0,0xc01c44e4
c01034e3:	00 00 00 
}
c01034e6:	c9                   	leave  
c01034e7:	c3                   	ret    

c01034e8 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c01034e8:	55                   	push   %ebp
c01034e9:	89 e5                	mov    %esp,%ebp
c01034eb:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c01034ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01034f2:	75 24                	jne    c0103518 <default_alloc_pages+0x30>
c01034f4:	c7 44 24 0c 90 db 10 	movl   $0xc010db90,0xc(%esp)
c01034fb:	c0 
c01034fc:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103503:	c0 
c0103504:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c010350b:	00 
c010350c:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103513:	e8 c2 d8 ff ff       	call   c0100dda <__panic>
    if (n > nr_free) {
c0103518:	a1 e4 44 1c c0       	mov    0xc01c44e4,%eax
c010351d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103520:	73 0a                	jae    c010352c <default_alloc_pages+0x44>
        return NULL;
c0103522:	b8 00 00 00 00       	mov    $0x0,%eax
c0103527:	e9 0d 01 00 00       	jmp    c0103639 <default_alloc_pages+0x151>
    }
    struct Page *page = NULL;
c010352c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    list_entry_t *le = &free_list;
c0103533:	c7 45 f4 dc 44 1c c0 	movl   $0xc01c44dc,-0xc(%ebp)
    list_entry_t *temp;
    while ((le = list_next(le)) != &free_list) {
c010353a:	e9 d9 00 00 00       	jmp    c0103618 <default_alloc_pages+0x130>
        page = le2page(le, page_link);
c010353f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103542:	83 e8 0c             	sub    $0xc,%eax
c0103545:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (page->property >= n) {
c0103548:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010354b:	8b 40 08             	mov    0x8(%eax),%eax
c010354e:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103551:	0f 82 c1 00 00 00    	jb     c0103618 <default_alloc_pages+0x130>
            int i;
            for (i=0; i<n; i++) {
c0103557:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010355e:	eb 7c                	jmp    c01035dc <default_alloc_pages+0xf4>
                 struct Page* tempp = le2page(le, page_link);
c0103560:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103563:	83 e8 0c             	sub    $0xc,%eax
c0103566:	89 45 e8             	mov    %eax,-0x18(%ebp)
                 SetPageReserved(tempp);
c0103569:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010356c:	83 c0 04             	add    $0x4,%eax
c010356f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0103576:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103579:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010357c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010357f:	0f ab 10             	bts    %edx,(%eax)
                 ClearPageProperty(tempp);
c0103582:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103585:	83 c0 04             	add    $0x4,%eax
c0103588:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c010358f:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103592:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103595:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103598:	0f b3 10             	btr    %edx,(%eax)
c010359b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010359e:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01035a1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01035a4:	8b 40 04             	mov    0x4(%eax),%eax
                 temp = list_next(le);
c01035a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01035aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035ad:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01035b0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01035b3:	8b 40 04             	mov    0x4(%eax),%eax
c01035b6:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01035b9:	8b 12                	mov    (%edx),%edx
c01035bb:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c01035be:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01035c1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01035c4:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01035c7:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01035ca:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01035cd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01035d0:	89 10                	mov    %edx,(%eax)
                 list_del(le);
                 le = temp;
c01035d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01035d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *temp;
    while ((le = list_next(le)) != &free_list) {
        page = le2page(le, page_link);
        if (page->property >= n) {
            int i;
            for (i=0; i<n; i++) {
c01035d8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01035dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01035df:	3b 45 08             	cmp    0x8(%ebp),%eax
c01035e2:	0f 82 78 ff ff ff    	jb     c0103560 <default_alloc_pages+0x78>
                 ClearPageProperty(tempp);
                 temp = list_next(le);
                 list_del(le);
                 le = temp;
            }
            size_t rest = page->property - n;
c01035e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01035eb:	8b 40 08             	mov    0x8(%eax),%eax
c01035ee:	2b 45 08             	sub    0x8(%ebp),%eax
c01035f1:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if (rest > 0) {
c01035f4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01035f8:	74 0c                	je     c0103606 <default_alloc_pages+0x11e>
                (le2page(le, page_link))->property = rest;
c01035fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035fd:	8d 50 f4             	lea    -0xc(%eax),%edx
c0103600:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103603:	89 42 08             	mov    %eax,0x8(%edx)
            }
            nr_free -= n;
c0103606:	a1 e4 44 1c c0       	mov    0xc01c44e4,%eax
c010360b:	2b 45 08             	sub    0x8(%ebp),%eax
c010360e:	a3 e4 44 1c c0       	mov    %eax,0xc01c44e4
            return page;
c0103613:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103616:	eb 21                	jmp    c0103639 <default_alloc_pages+0x151>
c0103618:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010361b:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010361e:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103621:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    list_entry_t *temp;
    while ((le = list_next(le)) != &free_list) {
c0103624:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103627:	81 7d f4 dc 44 1c c0 	cmpl   $0xc01c44dc,-0xc(%ebp)
c010362e:	0f 85 0b ff ff ff    	jne    c010353f <default_alloc_pages+0x57>
            }
            nr_free -= n;
            return page;
        }
    }
    return NULL;
c0103634:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103639:	c9                   	leave  
c010363a:	c3                   	ret    

c010363b <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c010363b:	55                   	push   %ebp
c010363c:	89 e5                	mov    %esp,%ebp
c010363e:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0103641:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103645:	75 24                	jne    c010366b <default_free_pages+0x30>
c0103647:	c7 44 24 0c 90 db 10 	movl   $0xc010db90,0xc(%esp)
c010364e:	c0 
c010364f:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103656:	c0 
c0103657:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c010365e:	00 
c010365f:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103666:	e8 6f d7 ff ff       	call   c0100dda <__panic>
    struct Page *p = base;
c010366b:	8b 45 08             	mov    0x8(%ebp),%eax
c010366e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *le = &free_list;
c0103671:	c7 45 f0 dc 44 1c c0 	movl   $0xc01c44dc,-0x10(%ebp)
    while ((le=list_next(le)) != &free_list) {
c0103678:	eb 0d                	jmp    c0103687 <default_free_pages+0x4c>
        if ((le2page(le, page_link)) > base)
c010367a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010367d:	83 e8 0c             	sub    $0xc,%eax
c0103680:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103683:	76 02                	jbe    c0103687 <default_free_pages+0x4c>
            break;
c0103685:	eb 18                	jmp    c010369f <default_free_pages+0x64>
c0103687:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010368a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010368d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103690:	8b 40 04             	mov    0x4(%eax),%eax
static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    list_entry_t *le = &free_list;
    while ((le=list_next(le)) != &free_list) {
c0103693:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103696:	81 7d f0 dc 44 1c c0 	cmpl   $0xc01c44dc,-0x10(%ebp)
c010369d:	75 db                	jne    c010367a <default_free_pages+0x3f>
        if ((le2page(le, page_link)) > base)
            break;
    }
    for (; p != base + n; p++) {
c010369f:	e9 8d 00 00 00       	jmp    c0103731 <default_free_pages+0xf6>
        p->flags = p->property = 0;
c01036a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036a7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c01036ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036b1:	8b 50 08             	mov    0x8(%eax),%edx
c01036b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036b7:	89 50 04             	mov    %edx,0x4(%eax)
        SetPageProperty(p);
c01036ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036bd:	83 c0 04             	add    $0x4,%eax
c01036c0:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c01036c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01036ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01036cd:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01036d0:	0f ab 10             	bts    %edx,(%eax)
        set_page_ref(p, 0);
c01036d3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01036da:	00 
c01036db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036de:	89 04 24             	mov    %eax,(%esp)
c01036e1:	e8 c8 fd ff ff       	call   c01034ae <set_page_ref>
        list_add_before(le, &(p->page_link));
c01036e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036e9:	8d 50 0c             	lea    0xc(%eax),%edx
c01036ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01036ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01036f2:	89 55 dc             	mov    %edx,-0x24(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01036f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01036f8:	8b 00                	mov    (%eax),%eax
c01036fa:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01036fd:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0103700:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0103703:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103706:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103709:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010370c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010370f:	89 10                	mov    %edx,(%eax)
c0103711:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103714:	8b 10                	mov    (%eax),%edx
c0103716:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103719:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010371c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010371f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103722:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103725:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103728:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010372b:	89 10                	mov    %edx,(%eax)
    list_entry_t *le = &free_list;
    while ((le=list_next(le)) != &free_list) {
        if ((le2page(le, page_link)) > base)
            break;
    }
    for (; p != base + n; p++) {
c010372d:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103731:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103734:	c1 e0 05             	shl    $0x5,%eax
c0103737:	89 c2                	mov    %eax,%edx
c0103739:	8b 45 08             	mov    0x8(%ebp),%eax
c010373c:	01 d0                	add    %edx,%eax
c010373e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103741:	0f 85 5d ff ff ff    	jne    c01036a4 <default_free_pages+0x69>
        p->flags = p->property = 0;
        SetPageProperty(p);
        set_page_ref(p, 0);
        list_add_before(le, &(p->page_link));
    }
    base->property = n;
c0103747:	8b 45 08             	mov    0x8(%ebp),%eax
c010374a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010374d:	89 50 08             	mov    %edx,0x8(%eax)
    p = le2page(le, page_link);
c0103750:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103753:	83 e8 0c             	sub    $0xc,%eax
c0103756:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (base + n == p) {
c0103759:	8b 45 0c             	mov    0xc(%ebp),%eax
c010375c:	c1 e0 05             	shl    $0x5,%eax
c010375f:	89 c2                	mov    %eax,%edx
c0103761:	8b 45 08             	mov    0x8(%ebp),%eax
c0103764:	01 d0                	add    %edx,%eax
c0103766:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103769:	75 1e                	jne    c0103789 <default_free_pages+0x14e>
        base->property += p->property;
c010376b:	8b 45 08             	mov    0x8(%ebp),%eax
c010376e:	8b 50 08             	mov    0x8(%eax),%edx
c0103771:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103774:	8b 40 08             	mov    0x8(%eax),%eax
c0103777:	01 c2                	add    %eax,%edx
c0103779:	8b 45 08             	mov    0x8(%ebp),%eax
c010377c:	89 50 08             	mov    %edx,0x8(%eax)
        p->property = 0;
c010377f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103782:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    le = list_prev(&base->page_link);
c0103789:	8b 45 08             	mov    0x8(%ebp),%eax
c010378c:	83 c0 0c             	add    $0xc,%eax
c010378f:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103792:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103795:	8b 00                	mov    (%eax),%eax
c0103797:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((le != &free_list) && (le2page(le, page_link) + 1 == base)) {
c010379a:	81 7d f0 dc 44 1c c0 	cmpl   $0xc01c44dc,-0x10(%ebp)
c01037a1:	74 57                	je     c01037fa <default_free_pages+0x1bf>
c01037a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037a6:	83 c0 14             	add    $0x14,%eax
c01037a9:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037ac:	75 4c                	jne    c01037fa <default_free_pages+0x1bf>
        while (le != &free_list) {
c01037ae:	eb 41                	jmp    c01037f1 <default_free_pages+0x1b6>
            p = le2page(le, page_link);
c01037b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037b3:	83 e8 0c             	sub    $0xc,%eax
c01037b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (p->property > 0) {
c01037b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037bc:	8b 40 08             	mov    0x8(%eax),%eax
c01037bf:	85 c0                	test   %eax,%eax
c01037c1:	74 20                	je     c01037e3 <default_free_pages+0x1a8>
                p->property += base->property;
c01037c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037c6:	8b 50 08             	mov    0x8(%eax),%edx
c01037c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01037cc:	8b 40 08             	mov    0x8(%eax),%eax
c01037cf:	01 c2                	add    %eax,%edx
c01037d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037d4:	89 50 08             	mov    %edx,0x8(%eax)
                base->property = 0;
c01037d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01037da:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                break;
c01037e1:	eb 17                	jmp    c01037fa <default_free_pages+0x1bf>
c01037e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037e6:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01037e9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01037ec:	8b 00                	mov    (%eax),%eax
            }
            le = list_prev(le);
c01037ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
        base->property += p->property;
        p->property = 0;
    }
    le = list_prev(&base->page_link);
    if ((le != &free_list) && (le2page(le, page_link) + 1 == base)) {
        while (le != &free_list) {
c01037f1:	81 7d f0 dc 44 1c c0 	cmpl   $0xc01c44dc,-0x10(%ebp)
c01037f8:	75 b6                	jne    c01037b0 <default_free_pages+0x175>
                break;
            }
            le = list_prev(le);
        }
    }
    nr_free += n;
c01037fa:	8b 15 e4 44 1c c0    	mov    0xc01c44e4,%edx
c0103800:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103803:	01 d0                	add    %edx,%eax
c0103805:	a3 e4 44 1c c0       	mov    %eax,0xc01c44e4
}
c010380a:	c9                   	leave  
c010380b:	c3                   	ret    

c010380c <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c010380c:	55                   	push   %ebp
c010380d:	89 e5                	mov    %esp,%ebp
    return nr_free;
c010380f:	a1 e4 44 1c c0       	mov    0xc01c44e4,%eax
}
c0103814:	5d                   	pop    %ebp
c0103815:	c3                   	ret    

c0103816 <basic_check>:

static void
basic_check(void) {
c0103816:	55                   	push   %ebp
c0103817:	89 e5                	mov    %esp,%ebp
c0103819:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c010381c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103823:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103826:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103829:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010382c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c010382f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103836:	e8 dc 15 00 00       	call   c0104e17 <alloc_pages>
c010383b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010383e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103842:	75 24                	jne    c0103868 <basic_check+0x52>
c0103844:	c7 44 24 0c c1 db 10 	movl   $0xc010dbc1,0xc(%esp)
c010384b:	c0 
c010384c:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103853:	c0 
c0103854:	c7 44 24 04 91 00 00 	movl   $0x91,0x4(%esp)
c010385b:	00 
c010385c:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103863:	e8 72 d5 ff ff       	call   c0100dda <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103868:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010386f:	e8 a3 15 00 00       	call   c0104e17 <alloc_pages>
c0103874:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103877:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010387b:	75 24                	jne    c01038a1 <basic_check+0x8b>
c010387d:	c7 44 24 0c dd db 10 	movl   $0xc010dbdd,0xc(%esp)
c0103884:	c0 
c0103885:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c010388c:	c0 
c010388d:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c0103894:	00 
c0103895:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c010389c:	e8 39 d5 ff ff       	call   c0100dda <__panic>
    assert((p2 = alloc_page()) != NULL);
c01038a1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01038a8:	e8 6a 15 00 00       	call   c0104e17 <alloc_pages>
c01038ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01038b4:	75 24                	jne    c01038da <basic_check+0xc4>
c01038b6:	c7 44 24 0c f9 db 10 	movl   $0xc010dbf9,0xc(%esp)
c01038bd:	c0 
c01038be:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c01038c5:	c0 
c01038c6:	c7 44 24 04 93 00 00 	movl   $0x93,0x4(%esp)
c01038cd:	00 
c01038ce:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c01038d5:	e8 00 d5 ff ff       	call   c0100dda <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c01038da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038dd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01038e0:	74 10                	je     c01038f2 <basic_check+0xdc>
c01038e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038e5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01038e8:	74 08                	je     c01038f2 <basic_check+0xdc>
c01038ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038ed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01038f0:	75 24                	jne    c0103916 <basic_check+0x100>
c01038f2:	c7 44 24 0c 18 dc 10 	movl   $0xc010dc18,0xc(%esp)
c01038f9:	c0 
c01038fa:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103901:	c0 
c0103902:	c7 44 24 04 95 00 00 	movl   $0x95,0x4(%esp)
c0103909:	00 
c010390a:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103911:	e8 c4 d4 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103916:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103919:	89 04 24             	mov    %eax,(%esp)
c010391c:	e8 83 fb ff ff       	call   c01034a4 <page_ref>
c0103921:	85 c0                	test   %eax,%eax
c0103923:	75 1e                	jne    c0103943 <basic_check+0x12d>
c0103925:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103928:	89 04 24             	mov    %eax,(%esp)
c010392b:	e8 74 fb ff ff       	call   c01034a4 <page_ref>
c0103930:	85 c0                	test   %eax,%eax
c0103932:	75 0f                	jne    c0103943 <basic_check+0x12d>
c0103934:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103937:	89 04 24             	mov    %eax,(%esp)
c010393a:	e8 65 fb ff ff       	call   c01034a4 <page_ref>
c010393f:	85 c0                	test   %eax,%eax
c0103941:	74 24                	je     c0103967 <basic_check+0x151>
c0103943:	c7 44 24 0c 3c dc 10 	movl   $0xc010dc3c,0xc(%esp)
c010394a:	c0 
c010394b:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103952:	c0 
c0103953:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c010395a:	00 
c010395b:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103962:	e8 73 d4 ff ff       	call   c0100dda <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103967:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010396a:	89 04 24             	mov    %eax,(%esp)
c010396d:	e8 1c fb ff ff       	call   c010348e <page2pa>
c0103972:	8b 15 a0 23 1c c0    	mov    0xc01c23a0,%edx
c0103978:	c1 e2 0c             	shl    $0xc,%edx
c010397b:	39 d0                	cmp    %edx,%eax
c010397d:	72 24                	jb     c01039a3 <basic_check+0x18d>
c010397f:	c7 44 24 0c 78 dc 10 	movl   $0xc010dc78,0xc(%esp)
c0103986:	c0 
c0103987:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c010398e:	c0 
c010398f:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0103996:	00 
c0103997:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c010399e:	e8 37 d4 ff ff       	call   c0100dda <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c01039a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039a6:	89 04 24             	mov    %eax,(%esp)
c01039a9:	e8 e0 fa ff ff       	call   c010348e <page2pa>
c01039ae:	8b 15 a0 23 1c c0    	mov    0xc01c23a0,%edx
c01039b4:	c1 e2 0c             	shl    $0xc,%edx
c01039b7:	39 d0                	cmp    %edx,%eax
c01039b9:	72 24                	jb     c01039df <basic_check+0x1c9>
c01039bb:	c7 44 24 0c 95 dc 10 	movl   $0xc010dc95,0xc(%esp)
c01039c2:	c0 
c01039c3:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c01039ca:	c0 
c01039cb:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
c01039d2:	00 
c01039d3:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c01039da:	e8 fb d3 ff ff       	call   c0100dda <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c01039df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039e2:	89 04 24             	mov    %eax,(%esp)
c01039e5:	e8 a4 fa ff ff       	call   c010348e <page2pa>
c01039ea:	8b 15 a0 23 1c c0    	mov    0xc01c23a0,%edx
c01039f0:	c1 e2 0c             	shl    $0xc,%edx
c01039f3:	39 d0                	cmp    %edx,%eax
c01039f5:	72 24                	jb     c0103a1b <basic_check+0x205>
c01039f7:	c7 44 24 0c b2 dc 10 	movl   $0xc010dcb2,0xc(%esp)
c01039fe:	c0 
c01039ff:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103a06:	c0 
c0103a07:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c0103a0e:	00 
c0103a0f:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103a16:	e8 bf d3 ff ff       	call   c0100dda <__panic>

    list_entry_t free_list_store = free_list;
c0103a1b:	a1 dc 44 1c c0       	mov    0xc01c44dc,%eax
c0103a20:	8b 15 e0 44 1c c0    	mov    0xc01c44e0,%edx
c0103a26:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103a29:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103a2c:	c7 45 e0 dc 44 1c c0 	movl   $0xc01c44dc,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103a33:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103a36:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103a39:	89 50 04             	mov    %edx,0x4(%eax)
c0103a3c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103a3f:	8b 50 04             	mov    0x4(%eax),%edx
c0103a42:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103a45:	89 10                	mov    %edx,(%eax)
c0103a47:	c7 45 dc dc 44 1c c0 	movl   $0xc01c44dc,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103a4e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103a51:	8b 40 04             	mov    0x4(%eax),%eax
c0103a54:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103a57:	0f 94 c0             	sete   %al
c0103a5a:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103a5d:	85 c0                	test   %eax,%eax
c0103a5f:	75 24                	jne    c0103a85 <basic_check+0x26f>
c0103a61:	c7 44 24 0c cf dc 10 	movl   $0xc010dccf,0xc(%esp)
c0103a68:	c0 
c0103a69:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103a70:	c0 
c0103a71:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c0103a78:	00 
c0103a79:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103a80:	e8 55 d3 ff ff       	call   c0100dda <__panic>

    unsigned int nr_free_store = nr_free;
c0103a85:	a1 e4 44 1c c0       	mov    0xc01c44e4,%eax
c0103a8a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103a8d:	c7 05 e4 44 1c c0 00 	movl   $0x0,0xc01c44e4
c0103a94:	00 00 00 

    assert(alloc_page() == NULL);
c0103a97:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103a9e:	e8 74 13 00 00       	call   c0104e17 <alloc_pages>
c0103aa3:	85 c0                	test   %eax,%eax
c0103aa5:	74 24                	je     c0103acb <basic_check+0x2b5>
c0103aa7:	c7 44 24 0c e6 dc 10 	movl   $0xc010dce6,0xc(%esp)
c0103aae:	c0 
c0103aaf:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103ab6:	c0 
c0103ab7:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c0103abe:	00 
c0103abf:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103ac6:	e8 0f d3 ff ff       	call   c0100dda <__panic>

    free_page(p0);
c0103acb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103ad2:	00 
c0103ad3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ad6:	89 04 24             	mov    %eax,(%esp)
c0103ad9:	e8 a4 13 00 00       	call   c0104e82 <free_pages>
    free_page(p1);
c0103ade:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103ae5:	00 
c0103ae6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ae9:	89 04 24             	mov    %eax,(%esp)
c0103aec:	e8 91 13 00 00       	call   c0104e82 <free_pages>
    free_page(p2);
c0103af1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103af8:	00 
c0103af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103afc:	89 04 24             	mov    %eax,(%esp)
c0103aff:	e8 7e 13 00 00       	call   c0104e82 <free_pages>
    assert(nr_free == 3);
c0103b04:	a1 e4 44 1c c0       	mov    0xc01c44e4,%eax
c0103b09:	83 f8 03             	cmp    $0x3,%eax
c0103b0c:	74 24                	je     c0103b32 <basic_check+0x31c>
c0103b0e:	c7 44 24 0c fb dc 10 	movl   $0xc010dcfb,0xc(%esp)
c0103b15:	c0 
c0103b16:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103b1d:	c0 
c0103b1e:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c0103b25:	00 
c0103b26:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103b2d:	e8 a8 d2 ff ff       	call   c0100dda <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103b32:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b39:	e8 d9 12 00 00       	call   c0104e17 <alloc_pages>
c0103b3e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103b41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103b45:	75 24                	jne    c0103b6b <basic_check+0x355>
c0103b47:	c7 44 24 0c c1 db 10 	movl   $0xc010dbc1,0xc(%esp)
c0103b4e:	c0 
c0103b4f:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103b56:	c0 
c0103b57:	c7 44 24 04 aa 00 00 	movl   $0xaa,0x4(%esp)
c0103b5e:	00 
c0103b5f:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103b66:	e8 6f d2 ff ff       	call   c0100dda <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103b6b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b72:	e8 a0 12 00 00       	call   c0104e17 <alloc_pages>
c0103b77:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b7a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103b7e:	75 24                	jne    c0103ba4 <basic_check+0x38e>
c0103b80:	c7 44 24 0c dd db 10 	movl   $0xc010dbdd,0xc(%esp)
c0103b87:	c0 
c0103b88:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103b8f:	c0 
c0103b90:	c7 44 24 04 ab 00 00 	movl   $0xab,0x4(%esp)
c0103b97:	00 
c0103b98:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103b9f:	e8 36 d2 ff ff       	call   c0100dda <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103ba4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103bab:	e8 67 12 00 00       	call   c0104e17 <alloc_pages>
c0103bb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103bb3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103bb7:	75 24                	jne    c0103bdd <basic_check+0x3c7>
c0103bb9:	c7 44 24 0c f9 db 10 	movl   $0xc010dbf9,0xc(%esp)
c0103bc0:	c0 
c0103bc1:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103bc8:	c0 
c0103bc9:	c7 44 24 04 ac 00 00 	movl   $0xac,0x4(%esp)
c0103bd0:	00 
c0103bd1:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103bd8:	e8 fd d1 ff ff       	call   c0100dda <__panic>

    assert(alloc_page() == NULL);
c0103bdd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103be4:	e8 2e 12 00 00       	call   c0104e17 <alloc_pages>
c0103be9:	85 c0                	test   %eax,%eax
c0103beb:	74 24                	je     c0103c11 <basic_check+0x3fb>
c0103bed:	c7 44 24 0c e6 dc 10 	movl   $0xc010dce6,0xc(%esp)
c0103bf4:	c0 
c0103bf5:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103bfc:	c0 
c0103bfd:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c0103c04:	00 
c0103c05:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103c0c:	e8 c9 d1 ff ff       	call   c0100dda <__panic>

    free_page(p0);
c0103c11:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103c18:	00 
c0103c19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c1c:	89 04 24             	mov    %eax,(%esp)
c0103c1f:	e8 5e 12 00 00       	call   c0104e82 <free_pages>
c0103c24:	c7 45 d8 dc 44 1c c0 	movl   $0xc01c44dc,-0x28(%ebp)
c0103c2b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103c2e:	8b 40 04             	mov    0x4(%eax),%eax
c0103c31:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103c34:	0f 94 c0             	sete   %al
c0103c37:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103c3a:	85 c0                	test   %eax,%eax
c0103c3c:	74 24                	je     c0103c62 <basic_check+0x44c>
c0103c3e:	c7 44 24 0c 08 dd 10 	movl   $0xc010dd08,0xc(%esp)
c0103c45:	c0 
c0103c46:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103c4d:	c0 
c0103c4e:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0103c55:	00 
c0103c56:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103c5d:	e8 78 d1 ff ff       	call   c0100dda <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103c62:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103c69:	e8 a9 11 00 00       	call   c0104e17 <alloc_pages>
c0103c6e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103c71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103c74:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103c77:	74 24                	je     c0103c9d <basic_check+0x487>
c0103c79:	c7 44 24 0c 20 dd 10 	movl   $0xc010dd20,0xc(%esp)
c0103c80:	c0 
c0103c81:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103c88:	c0 
c0103c89:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c0103c90:	00 
c0103c91:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103c98:	e8 3d d1 ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c0103c9d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ca4:	e8 6e 11 00 00       	call   c0104e17 <alloc_pages>
c0103ca9:	85 c0                	test   %eax,%eax
c0103cab:	74 24                	je     c0103cd1 <basic_check+0x4bb>
c0103cad:	c7 44 24 0c e6 dc 10 	movl   $0xc010dce6,0xc(%esp)
c0103cb4:	c0 
c0103cb5:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103cbc:	c0 
c0103cbd:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c0103cc4:	00 
c0103cc5:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103ccc:	e8 09 d1 ff ff       	call   c0100dda <__panic>

    assert(nr_free == 0);
c0103cd1:	a1 e4 44 1c c0       	mov    0xc01c44e4,%eax
c0103cd6:	85 c0                	test   %eax,%eax
c0103cd8:	74 24                	je     c0103cfe <basic_check+0x4e8>
c0103cda:	c7 44 24 0c 39 dd 10 	movl   $0xc010dd39,0xc(%esp)
c0103ce1:	c0 
c0103ce2:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103ce9:	c0 
c0103cea:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0103cf1:	00 
c0103cf2:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103cf9:	e8 dc d0 ff ff       	call   c0100dda <__panic>
    free_list = free_list_store;
c0103cfe:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103d01:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103d04:	a3 dc 44 1c c0       	mov    %eax,0xc01c44dc
c0103d09:	89 15 e0 44 1c c0    	mov    %edx,0xc01c44e0
    nr_free = nr_free_store;
c0103d0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103d12:	a3 e4 44 1c c0       	mov    %eax,0xc01c44e4

    free_page(p);
c0103d17:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103d1e:	00 
c0103d1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103d22:	89 04 24             	mov    %eax,(%esp)
c0103d25:	e8 58 11 00 00       	call   c0104e82 <free_pages>
    free_page(p1);
c0103d2a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103d31:	00 
c0103d32:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d35:	89 04 24             	mov    %eax,(%esp)
c0103d38:	e8 45 11 00 00       	call   c0104e82 <free_pages>
    free_page(p2);
c0103d3d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103d44:	00 
c0103d45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d48:	89 04 24             	mov    %eax,(%esp)
c0103d4b:	e8 32 11 00 00       	call   c0104e82 <free_pages>
}
c0103d50:	c9                   	leave  
c0103d51:	c3                   	ret    

c0103d52 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0103d52:	55                   	push   %ebp
c0103d53:	89 e5                	mov    %esp,%ebp
c0103d55:	53                   	push   %ebx
c0103d56:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0103d5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103d63:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0103d6a:	c7 45 ec dc 44 1c c0 	movl   $0xc01c44dc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0103d71:	eb 6b                	jmp    c0103dde <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0103d73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d76:	83 e8 0c             	sub    $0xc,%eax
c0103d79:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0103d7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103d7f:	83 c0 04             	add    $0x4,%eax
c0103d82:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0103d89:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103d8c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103d8f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103d92:	0f a3 10             	bt     %edx,(%eax)
c0103d95:	19 c0                	sbb    %eax,%eax
c0103d97:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c0103d9a:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0103d9e:	0f 95 c0             	setne  %al
c0103da1:	0f b6 c0             	movzbl %al,%eax
c0103da4:	85 c0                	test   %eax,%eax
c0103da6:	75 24                	jne    c0103dcc <default_check+0x7a>
c0103da8:	c7 44 24 0c 46 dd 10 	movl   $0xc010dd46,0xc(%esp)
c0103daf:	c0 
c0103db0:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103db7:	c0 
c0103db8:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0103dbf:	00 
c0103dc0:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103dc7:	e8 0e d0 ff ff       	call   c0100dda <__panic>
        count ++, total += p->property;
c0103dcc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103dd0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103dd3:	8b 50 08             	mov    0x8(%eax),%edx
c0103dd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103dd9:	01 d0                	add    %edx,%eax
c0103ddb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103dde:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103de1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103de4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103de7:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0103dea:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103ded:	81 7d ec dc 44 1c c0 	cmpl   $0xc01c44dc,-0x14(%ebp)
c0103df4:	0f 85 79 ff ff ff    	jne    c0103d73 <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0103dfa:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0103dfd:	e8 b2 10 00 00       	call   c0104eb4 <nr_free_pages>
c0103e02:	39 c3                	cmp    %eax,%ebx
c0103e04:	74 24                	je     c0103e2a <default_check+0xd8>
c0103e06:	c7 44 24 0c 56 dd 10 	movl   $0xc010dd56,0xc(%esp)
c0103e0d:	c0 
c0103e0e:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103e15:	c0 
c0103e16:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0103e1d:	00 
c0103e1e:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103e25:	e8 b0 cf ff ff       	call   c0100dda <__panic>

    basic_check();
c0103e2a:	e8 e7 f9 ff ff       	call   c0103816 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0103e2f:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0103e36:	e8 dc 0f 00 00       	call   c0104e17 <alloc_pages>
c0103e3b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0103e3e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0103e42:	75 24                	jne    c0103e68 <default_check+0x116>
c0103e44:	c7 44 24 0c 6f dd 10 	movl   $0xc010dd6f,0xc(%esp)
c0103e4b:	c0 
c0103e4c:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103e53:	c0 
c0103e54:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103e5b:	00 
c0103e5c:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103e63:	e8 72 cf ff ff       	call   c0100dda <__panic>
    assert(!PageProperty(p0));
c0103e68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103e6b:	83 c0 04             	add    $0x4,%eax
c0103e6e:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103e75:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103e78:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103e7b:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103e7e:	0f a3 10             	bt     %edx,(%eax)
c0103e81:	19 c0                	sbb    %eax,%eax
c0103e83:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0103e86:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0103e8a:	0f 95 c0             	setne  %al
c0103e8d:	0f b6 c0             	movzbl %al,%eax
c0103e90:	85 c0                	test   %eax,%eax
c0103e92:	74 24                	je     c0103eb8 <default_check+0x166>
c0103e94:	c7 44 24 0c 7a dd 10 	movl   $0xc010dd7a,0xc(%esp)
c0103e9b:	c0 
c0103e9c:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103ea3:	c0 
c0103ea4:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0103eab:	00 
c0103eac:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103eb3:	e8 22 cf ff ff       	call   c0100dda <__panic>

    list_entry_t free_list_store = free_list;
c0103eb8:	a1 dc 44 1c c0       	mov    0xc01c44dc,%eax
c0103ebd:	8b 15 e0 44 1c c0    	mov    0xc01c44e0,%edx
c0103ec3:	89 45 80             	mov    %eax,-0x80(%ebp)
c0103ec6:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0103ec9:	c7 45 b4 dc 44 1c c0 	movl   $0xc01c44dc,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103ed0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103ed3:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0103ed6:	89 50 04             	mov    %edx,0x4(%eax)
c0103ed9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103edc:	8b 50 04             	mov    0x4(%eax),%edx
c0103edf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103ee2:	89 10                	mov    %edx,(%eax)
c0103ee4:	c7 45 b0 dc 44 1c c0 	movl   $0xc01c44dc,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103eeb:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0103eee:	8b 40 04             	mov    0x4(%eax),%eax
c0103ef1:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c0103ef4:	0f 94 c0             	sete   %al
c0103ef7:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103efa:	85 c0                	test   %eax,%eax
c0103efc:	75 24                	jne    c0103f22 <default_check+0x1d0>
c0103efe:	c7 44 24 0c cf dc 10 	movl   $0xc010dccf,0xc(%esp)
c0103f05:	c0 
c0103f06:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103f0d:	c0 
c0103f0e:	c7 44 24 04 d5 00 00 	movl   $0xd5,0x4(%esp)
c0103f15:	00 
c0103f16:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103f1d:	e8 b8 ce ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c0103f22:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f29:	e8 e9 0e 00 00       	call   c0104e17 <alloc_pages>
c0103f2e:	85 c0                	test   %eax,%eax
c0103f30:	74 24                	je     c0103f56 <default_check+0x204>
c0103f32:	c7 44 24 0c e6 dc 10 	movl   $0xc010dce6,0xc(%esp)
c0103f39:	c0 
c0103f3a:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103f41:	c0 
c0103f42:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0103f49:	00 
c0103f4a:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103f51:	e8 84 ce ff ff       	call   c0100dda <__panic>

    unsigned int nr_free_store = nr_free;
c0103f56:	a1 e4 44 1c c0       	mov    0xc01c44e4,%eax
c0103f5b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0103f5e:	c7 05 e4 44 1c c0 00 	movl   $0x0,0xc01c44e4
c0103f65:	00 00 00 

    free_pages(p0 + 2, 3);
c0103f68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f6b:	83 c0 40             	add    $0x40,%eax
c0103f6e:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0103f75:	00 
c0103f76:	89 04 24             	mov    %eax,(%esp)
c0103f79:	e8 04 0f 00 00       	call   c0104e82 <free_pages>
    assert(alloc_pages(4) == NULL);
c0103f7e:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0103f85:	e8 8d 0e 00 00       	call   c0104e17 <alloc_pages>
c0103f8a:	85 c0                	test   %eax,%eax
c0103f8c:	74 24                	je     c0103fb2 <default_check+0x260>
c0103f8e:	c7 44 24 0c 8c dd 10 	movl   $0xc010dd8c,0xc(%esp)
c0103f95:	c0 
c0103f96:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103f9d:	c0 
c0103f9e:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0103fa5:	00 
c0103fa6:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0103fad:	e8 28 ce ff ff       	call   c0100dda <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0103fb2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103fb5:	83 c0 40             	add    $0x40,%eax
c0103fb8:	83 c0 04             	add    $0x4,%eax
c0103fbb:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c0103fc2:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103fc5:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103fc8:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0103fcb:	0f a3 10             	bt     %edx,(%eax)
c0103fce:	19 c0                	sbb    %eax,%eax
c0103fd0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c0103fd3:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c0103fd7:	0f 95 c0             	setne  %al
c0103fda:	0f b6 c0             	movzbl %al,%eax
c0103fdd:	85 c0                	test   %eax,%eax
c0103fdf:	74 0e                	je     c0103fef <default_check+0x29d>
c0103fe1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103fe4:	83 c0 40             	add    $0x40,%eax
c0103fe7:	8b 40 08             	mov    0x8(%eax),%eax
c0103fea:	83 f8 03             	cmp    $0x3,%eax
c0103fed:	74 24                	je     c0104013 <default_check+0x2c1>
c0103fef:	c7 44 24 0c a4 dd 10 	movl   $0xc010dda4,0xc(%esp)
c0103ff6:	c0 
c0103ff7:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0103ffe:	c0 
c0103fff:	c7 44 24 04 dd 00 00 	movl   $0xdd,0x4(%esp)
c0104006:	00 
c0104007:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c010400e:	e8 c7 cd ff ff       	call   c0100dda <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0104013:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010401a:	e8 f8 0d 00 00       	call   c0104e17 <alloc_pages>
c010401f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104022:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0104026:	75 24                	jne    c010404c <default_check+0x2fa>
c0104028:	c7 44 24 0c d0 dd 10 	movl   $0xc010ddd0,0xc(%esp)
c010402f:	c0 
c0104030:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0104037:	c0 
c0104038:	c7 44 24 04 de 00 00 	movl   $0xde,0x4(%esp)
c010403f:	00 
c0104040:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0104047:	e8 8e cd ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c010404c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104053:	e8 bf 0d 00 00       	call   c0104e17 <alloc_pages>
c0104058:	85 c0                	test   %eax,%eax
c010405a:	74 24                	je     c0104080 <default_check+0x32e>
c010405c:	c7 44 24 0c e6 dc 10 	movl   $0xc010dce6,0xc(%esp)
c0104063:	c0 
c0104064:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c010406b:	c0 
c010406c:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
c0104073:	00 
c0104074:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c010407b:	e8 5a cd ff ff       	call   c0100dda <__panic>
    assert(p0 + 2 == p1);
c0104080:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104083:	83 c0 40             	add    $0x40,%eax
c0104086:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0104089:	74 24                	je     c01040af <default_check+0x35d>
c010408b:	c7 44 24 0c ee dd 10 	movl   $0xc010ddee,0xc(%esp)
c0104092:	c0 
c0104093:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c010409a:	c0 
c010409b:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01040a2:	00 
c01040a3:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c01040aa:	e8 2b cd ff ff       	call   c0100dda <__panic>

    p2 = p0 + 1;
c01040af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01040b2:	83 c0 20             	add    $0x20,%eax
c01040b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01040b8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01040bf:	00 
c01040c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01040c3:	89 04 24             	mov    %eax,(%esp)
c01040c6:	e8 b7 0d 00 00       	call   c0104e82 <free_pages>
    free_pages(p1, 3);
c01040cb:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01040d2:	00 
c01040d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01040d6:	89 04 24             	mov    %eax,(%esp)
c01040d9:	e8 a4 0d 00 00       	call   c0104e82 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01040de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01040e1:	83 c0 04             	add    $0x4,%eax
c01040e4:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01040eb:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01040ee:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01040f1:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01040f4:	0f a3 10             	bt     %edx,(%eax)
c01040f7:	19 c0                	sbb    %eax,%eax
c01040f9:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c01040fc:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0104100:	0f 95 c0             	setne  %al
c0104103:	0f b6 c0             	movzbl %al,%eax
c0104106:	85 c0                	test   %eax,%eax
c0104108:	74 0b                	je     c0104115 <default_check+0x3c3>
c010410a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010410d:	8b 40 08             	mov    0x8(%eax),%eax
c0104110:	83 f8 01             	cmp    $0x1,%eax
c0104113:	74 24                	je     c0104139 <default_check+0x3e7>
c0104115:	c7 44 24 0c fc dd 10 	movl   $0xc010ddfc,0xc(%esp)
c010411c:	c0 
c010411d:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0104124:	c0 
c0104125:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
c010412c:	00 
c010412d:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0104134:	e8 a1 cc ff ff       	call   c0100dda <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0104139:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010413c:	83 c0 04             	add    $0x4,%eax
c010413f:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c0104146:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104149:	8b 45 90             	mov    -0x70(%ebp),%eax
c010414c:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010414f:	0f a3 10             	bt     %edx,(%eax)
c0104152:	19 c0                	sbb    %eax,%eax
c0104154:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c0104157:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c010415b:	0f 95 c0             	setne  %al
c010415e:	0f b6 c0             	movzbl %al,%eax
c0104161:	85 c0                	test   %eax,%eax
c0104163:	74 0b                	je     c0104170 <default_check+0x41e>
c0104165:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104168:	8b 40 08             	mov    0x8(%eax),%eax
c010416b:	83 f8 03             	cmp    $0x3,%eax
c010416e:	74 24                	je     c0104194 <default_check+0x442>
c0104170:	c7 44 24 0c 24 de 10 	movl   $0xc010de24,0xc(%esp)
c0104177:	c0 
c0104178:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c010417f:	c0 
c0104180:	c7 44 24 04 e6 00 00 	movl   $0xe6,0x4(%esp)
c0104187:	00 
c0104188:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c010418f:	e8 46 cc ff ff       	call   c0100dda <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0104194:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010419b:	e8 77 0c 00 00       	call   c0104e17 <alloc_pages>
c01041a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01041a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01041a6:	83 e8 20             	sub    $0x20,%eax
c01041a9:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01041ac:	74 24                	je     c01041d2 <default_check+0x480>
c01041ae:	c7 44 24 0c 4a de 10 	movl   $0xc010de4a,0xc(%esp)
c01041b5:	c0 
c01041b6:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c01041bd:	c0 
c01041be:	c7 44 24 04 e8 00 00 	movl   $0xe8,0x4(%esp)
c01041c5:	00 
c01041c6:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c01041cd:	e8 08 cc ff ff       	call   c0100dda <__panic>
    free_page(p0);
c01041d2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01041d9:	00 
c01041da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01041dd:	89 04 24             	mov    %eax,(%esp)
c01041e0:	e8 9d 0c 00 00       	call   c0104e82 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01041e5:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01041ec:	e8 26 0c 00 00       	call   c0104e17 <alloc_pages>
c01041f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01041f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01041f7:	83 c0 20             	add    $0x20,%eax
c01041fa:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01041fd:	74 24                	je     c0104223 <default_check+0x4d1>
c01041ff:	c7 44 24 0c 68 de 10 	movl   $0xc010de68,0xc(%esp)
c0104206:	c0 
c0104207:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c010420e:	c0 
c010420f:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c0104216:	00 
c0104217:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c010421e:	e8 b7 cb ff ff       	call   c0100dda <__panic>

    free_pages(p0, 2);
c0104223:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010422a:	00 
c010422b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010422e:	89 04 24             	mov    %eax,(%esp)
c0104231:	e8 4c 0c 00 00       	call   c0104e82 <free_pages>
    free_page(p2);
c0104236:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010423d:	00 
c010423e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104241:	89 04 24             	mov    %eax,(%esp)
c0104244:	e8 39 0c 00 00       	call   c0104e82 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c0104249:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104250:	e8 c2 0b 00 00       	call   c0104e17 <alloc_pages>
c0104255:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104258:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010425c:	75 24                	jne    c0104282 <default_check+0x530>
c010425e:	c7 44 24 0c 88 de 10 	movl   $0xc010de88,0xc(%esp)
c0104265:	c0 
c0104266:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c010426d:	c0 
c010426e:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c0104275:	00 
c0104276:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c010427d:	e8 58 cb ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c0104282:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104289:	e8 89 0b 00 00       	call   c0104e17 <alloc_pages>
c010428e:	85 c0                	test   %eax,%eax
c0104290:	74 24                	je     c01042b6 <default_check+0x564>
c0104292:	c7 44 24 0c e6 dc 10 	movl   $0xc010dce6,0xc(%esp)
c0104299:	c0 
c010429a:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c01042a1:	c0 
c01042a2:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
c01042a9:	00 
c01042aa:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c01042b1:	e8 24 cb ff ff       	call   c0100dda <__panic>

    assert(nr_free == 0);
c01042b6:	a1 e4 44 1c c0       	mov    0xc01c44e4,%eax
c01042bb:	85 c0                	test   %eax,%eax
c01042bd:	74 24                	je     c01042e3 <default_check+0x591>
c01042bf:	c7 44 24 0c 39 dd 10 	movl   $0xc010dd39,0xc(%esp)
c01042c6:	c0 
c01042c7:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c01042ce:	c0 
c01042cf:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c01042d6:	00 
c01042d7:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c01042de:	e8 f7 ca ff ff       	call   c0100dda <__panic>
    nr_free = nr_free_store;
c01042e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01042e6:	a3 e4 44 1c c0       	mov    %eax,0xc01c44e4

    free_list = free_list_store;
c01042eb:	8b 45 80             	mov    -0x80(%ebp),%eax
c01042ee:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01042f1:	a3 dc 44 1c c0       	mov    %eax,0xc01c44dc
c01042f6:	89 15 e0 44 1c c0    	mov    %edx,0xc01c44e0
    free_pages(p0, 5);
c01042fc:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0104303:	00 
c0104304:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104307:	89 04 24             	mov    %eax,(%esp)
c010430a:	e8 73 0b 00 00       	call   c0104e82 <free_pages>

    le = &free_list;
c010430f:	c7 45 ec dc 44 1c c0 	movl   $0xc01c44dc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104316:	eb 1d                	jmp    c0104335 <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c0104318:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010431b:	83 e8 0c             	sub    $0xc,%eax
c010431e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0104321:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104325:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104328:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010432b:	8b 40 08             	mov    0x8(%eax),%eax
c010432e:	29 c2                	sub    %eax,%edx
c0104330:	89 d0                	mov    %edx,%eax
c0104332:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104335:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104338:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010433b:	8b 45 88             	mov    -0x78(%ebp),%eax
c010433e:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104341:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104344:	81 7d ec dc 44 1c c0 	cmpl   $0xc01c44dc,-0x14(%ebp)
c010434b:	75 cb                	jne    c0104318 <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c010434d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104351:	74 24                	je     c0104377 <default_check+0x625>
c0104353:	c7 44 24 0c a6 de 10 	movl   $0xc010dea6,0xc(%esp)
c010435a:	c0 
c010435b:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c0104362:	c0 
c0104363:	c7 44 24 04 fd 00 00 	movl   $0xfd,0x4(%esp)
c010436a:	00 
c010436b:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c0104372:	e8 63 ca ff ff       	call   c0100dda <__panic>
    assert(total == 0);
c0104377:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010437b:	74 24                	je     c01043a1 <default_check+0x64f>
c010437d:	c7 44 24 0c b1 de 10 	movl   $0xc010deb1,0xc(%esp)
c0104384:	c0 
c0104385:	c7 44 24 08 96 db 10 	movl   $0xc010db96,0x8(%esp)
c010438c:	c0 
c010438d:	c7 44 24 04 fe 00 00 	movl   $0xfe,0x4(%esp)
c0104394:	00 
c0104395:	c7 04 24 ab db 10 c0 	movl   $0xc010dbab,(%esp)
c010439c:	e8 39 ca ff ff       	call   c0100dda <__panic>
}
c01043a1:	81 c4 94 00 00 00    	add    $0x94,%esp
c01043a7:	5b                   	pop    %ebx
c01043a8:	5d                   	pop    %ebp
c01043a9:	c3                   	ret    

c01043aa <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01043aa:	55                   	push   %ebp
c01043ab:	89 e5                	mov    %esp,%ebp
c01043ad:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01043b0:	9c                   	pushf  
c01043b1:	58                   	pop    %eax
c01043b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01043b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01043b8:	25 00 02 00 00       	and    $0x200,%eax
c01043bd:	85 c0                	test   %eax,%eax
c01043bf:	74 0c                	je     c01043cd <__intr_save+0x23>
        intr_disable();
c01043c1:	e8 6c dc ff ff       	call   c0102032 <intr_disable>
        return 1;
c01043c6:	b8 01 00 00 00       	mov    $0x1,%eax
c01043cb:	eb 05                	jmp    c01043d2 <__intr_save+0x28>
    }
    return 0;
c01043cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01043d2:	c9                   	leave  
c01043d3:	c3                   	ret    

c01043d4 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01043d4:	55                   	push   %ebp
c01043d5:	89 e5                	mov    %esp,%ebp
c01043d7:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01043da:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01043de:	74 05                	je     c01043e5 <__intr_restore+0x11>
        intr_enable();
c01043e0:	e8 47 dc ff ff       	call   c010202c <intr_enable>
    }
}
c01043e5:	c9                   	leave  
c01043e6:	c3                   	ret    

c01043e7 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01043e7:	55                   	push   %ebp
c01043e8:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01043ea:	8b 55 08             	mov    0x8(%ebp),%edx
c01043ed:	a1 f0 44 1c c0       	mov    0xc01c44f0,%eax
c01043f2:	29 c2                	sub    %eax,%edx
c01043f4:	89 d0                	mov    %edx,%eax
c01043f6:	c1 f8 05             	sar    $0x5,%eax
}
c01043f9:	5d                   	pop    %ebp
c01043fa:	c3                   	ret    

c01043fb <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01043fb:	55                   	push   %ebp
c01043fc:	89 e5                	mov    %esp,%ebp
c01043fe:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104401:	8b 45 08             	mov    0x8(%ebp),%eax
c0104404:	89 04 24             	mov    %eax,(%esp)
c0104407:	e8 db ff ff ff       	call   c01043e7 <page2ppn>
c010440c:	c1 e0 0c             	shl    $0xc,%eax
}
c010440f:	c9                   	leave  
c0104410:	c3                   	ret    

c0104411 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104411:	55                   	push   %ebp
c0104412:	89 e5                	mov    %esp,%ebp
c0104414:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104417:	8b 45 08             	mov    0x8(%ebp),%eax
c010441a:	c1 e8 0c             	shr    $0xc,%eax
c010441d:	89 c2                	mov    %eax,%edx
c010441f:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c0104424:	39 c2                	cmp    %eax,%edx
c0104426:	72 1c                	jb     c0104444 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104428:	c7 44 24 08 ec de 10 	movl   $0xc010deec,0x8(%esp)
c010442f:	c0 
c0104430:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104437:	00 
c0104438:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c010443f:	e8 96 c9 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0104444:	a1 f0 44 1c c0       	mov    0xc01c44f0,%eax
c0104449:	8b 55 08             	mov    0x8(%ebp),%edx
c010444c:	c1 ea 0c             	shr    $0xc,%edx
c010444f:	c1 e2 05             	shl    $0x5,%edx
c0104452:	01 d0                	add    %edx,%eax
}
c0104454:	c9                   	leave  
c0104455:	c3                   	ret    

c0104456 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104456:	55                   	push   %ebp
c0104457:	89 e5                	mov    %esp,%ebp
c0104459:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010445c:	8b 45 08             	mov    0x8(%ebp),%eax
c010445f:	89 04 24             	mov    %eax,(%esp)
c0104462:	e8 94 ff ff ff       	call   c01043fb <page2pa>
c0104467:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010446a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010446d:	c1 e8 0c             	shr    $0xc,%eax
c0104470:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104473:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c0104478:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010447b:	72 23                	jb     c01044a0 <page2kva+0x4a>
c010447d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104480:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104484:	c7 44 24 08 1c df 10 	movl   $0xc010df1c,0x8(%esp)
c010448b:	c0 
c010448c:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104493:	00 
c0104494:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c010449b:	e8 3a c9 ff ff       	call   c0100dda <__panic>
c01044a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01044a3:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01044a8:	c9                   	leave  
c01044a9:	c3                   	ret    

c01044aa <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c01044aa:	55                   	push   %ebp
c01044ab:	89 e5                	mov    %esp,%ebp
c01044ad:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01044b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01044b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01044b6:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01044bd:	77 23                	ja     c01044e2 <kva2page+0x38>
c01044bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01044c2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01044c6:	c7 44 24 08 40 df 10 	movl   $0xc010df40,0x8(%esp)
c01044cd:	c0 
c01044ce:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01044d5:	00 
c01044d6:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c01044dd:	e8 f8 c8 ff ff       	call   c0100dda <__panic>
c01044e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01044e5:	05 00 00 00 40       	add    $0x40000000,%eax
c01044ea:	89 04 24             	mov    %eax,(%esp)
c01044ed:	e8 1f ff ff ff       	call   c0104411 <pa2page>
}
c01044f2:	c9                   	leave  
c01044f3:	c3                   	ret    

c01044f4 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c01044f4:	55                   	push   %ebp
c01044f5:	89 e5                	mov    %esp,%ebp
c01044f7:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c01044fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01044fd:	ba 01 00 00 00       	mov    $0x1,%edx
c0104502:	89 c1                	mov    %eax,%ecx
c0104504:	d3 e2                	shl    %cl,%edx
c0104506:	89 d0                	mov    %edx,%eax
c0104508:	89 04 24             	mov    %eax,(%esp)
c010450b:	e8 07 09 00 00       	call   c0104e17 <alloc_pages>
c0104510:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104513:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104517:	75 07                	jne    c0104520 <__slob_get_free_pages+0x2c>
    return NULL;
c0104519:	b8 00 00 00 00       	mov    $0x0,%eax
c010451e:	eb 0b                	jmp    c010452b <__slob_get_free_pages+0x37>
  return page2kva(page);
c0104520:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104523:	89 04 24             	mov    %eax,(%esp)
c0104526:	e8 2b ff ff ff       	call   c0104456 <page2kva>
}
c010452b:	c9                   	leave  
c010452c:	c3                   	ret    

c010452d <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c010452d:	55                   	push   %ebp
c010452e:	89 e5                	mov    %esp,%ebp
c0104530:	53                   	push   %ebx
c0104531:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104534:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104537:	ba 01 00 00 00       	mov    $0x1,%edx
c010453c:	89 c1                	mov    %eax,%ecx
c010453e:	d3 e2                	shl    %cl,%edx
c0104540:	89 d0                	mov    %edx,%eax
c0104542:	89 c3                	mov    %eax,%ebx
c0104544:	8b 45 08             	mov    0x8(%ebp),%eax
c0104547:	89 04 24             	mov    %eax,(%esp)
c010454a:	e8 5b ff ff ff       	call   c01044aa <kva2page>
c010454f:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0104553:	89 04 24             	mov    %eax,(%esp)
c0104556:	e8 27 09 00 00       	call   c0104e82 <free_pages>
}
c010455b:	83 c4 14             	add    $0x14,%esp
c010455e:	5b                   	pop    %ebx
c010455f:	5d                   	pop    %ebp
c0104560:	c3                   	ret    

c0104561 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104561:	55                   	push   %ebp
c0104562:	89 e5                	mov    %esp,%ebp
c0104564:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104567:	8b 45 08             	mov    0x8(%ebp),%eax
c010456a:	83 c0 08             	add    $0x8,%eax
c010456d:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104572:	76 24                	jbe    c0104598 <slob_alloc+0x37>
c0104574:	c7 44 24 0c 64 df 10 	movl   $0xc010df64,0xc(%esp)
c010457b:	c0 
c010457c:	c7 44 24 08 83 df 10 	movl   $0xc010df83,0x8(%esp)
c0104583:	c0 
c0104584:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c010458b:	00 
c010458c:	c7 04 24 98 df 10 c0 	movl   $0xc010df98,(%esp)
c0104593:	e8 42 c8 ff ff       	call   c0100dda <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0104598:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c010459f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01045a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01045a9:	83 c0 07             	add    $0x7,%eax
c01045ac:	c1 e8 03             	shr    $0x3,%eax
c01045af:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01045b2:	e8 f3 fd ff ff       	call   c01043aa <__intr_save>
c01045b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c01045ba:	a1 08 0a 13 c0       	mov    0xc0130a08,%eax
c01045bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01045c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01045c5:	8b 40 04             	mov    0x4(%eax),%eax
c01045c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c01045cb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01045cf:	74 25                	je     c01045f6 <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c01045d1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01045d4:	8b 45 10             	mov    0x10(%ebp),%eax
c01045d7:	01 d0                	add    %edx,%eax
c01045d9:	8d 50 ff             	lea    -0x1(%eax),%edx
c01045dc:	8b 45 10             	mov    0x10(%ebp),%eax
c01045df:	f7 d8                	neg    %eax
c01045e1:	21 d0                	and    %edx,%eax
c01045e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c01045e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01045e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01045ec:	29 c2                	sub    %eax,%edx
c01045ee:	89 d0                	mov    %edx,%eax
c01045f0:	c1 f8 03             	sar    $0x3,%eax
c01045f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c01045f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01045f9:	8b 00                	mov    (%eax),%eax
c01045fb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01045fe:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104601:	01 ca                	add    %ecx,%edx
c0104603:	39 d0                	cmp    %edx,%eax
c0104605:	0f 8c aa 00 00 00    	jl     c01046b5 <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c010460b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010460f:	74 38                	je     c0104649 <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0104611:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104614:	8b 00                	mov    (%eax),%eax
c0104616:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104619:	89 c2                	mov    %eax,%edx
c010461b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010461e:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104620:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104623:	8b 50 04             	mov    0x4(%eax),%edx
c0104626:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104629:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c010462c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010462f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104632:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104635:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104638:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010463b:	89 10                	mov    %edx,(%eax)
				prev = cur;
c010463d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104640:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104643:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104646:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104649:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010464c:	8b 00                	mov    (%eax),%eax
c010464e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104651:	75 0e                	jne    c0104661 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c0104653:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104656:	8b 50 04             	mov    0x4(%eax),%edx
c0104659:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010465c:	89 50 04             	mov    %edx,0x4(%eax)
c010465f:	eb 3c                	jmp    c010469d <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c0104661:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104664:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010466b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010466e:	01 c2                	add    %eax,%edx
c0104670:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104673:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104676:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104679:	8b 40 04             	mov    0x4(%eax),%eax
c010467c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010467f:	8b 12                	mov    (%edx),%edx
c0104681:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104684:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104686:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104689:	8b 40 04             	mov    0x4(%eax),%eax
c010468c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010468f:	8b 52 04             	mov    0x4(%edx),%edx
c0104692:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104695:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104698:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010469b:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c010469d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046a0:	a3 08 0a 13 c0       	mov    %eax,0xc0130a08
			spin_unlock_irqrestore(&slob_lock, flags);
c01046a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01046a8:	89 04 24             	mov    %eax,(%esp)
c01046ab:	e8 24 fd ff ff       	call   c01043d4 <__intr_restore>
			return cur;
c01046b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01046b3:	eb 7f                	jmp    c0104734 <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c01046b5:	a1 08 0a 13 c0       	mov    0xc0130a08,%eax
c01046ba:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01046bd:	75 61                	jne    c0104720 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c01046bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01046c2:	89 04 24             	mov    %eax,(%esp)
c01046c5:	e8 0a fd ff ff       	call   c01043d4 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c01046ca:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c01046d1:	75 07                	jne    c01046da <slob_alloc+0x179>
				return 0;
c01046d3:	b8 00 00 00 00       	mov    $0x0,%eax
c01046d8:	eb 5a                	jmp    c0104734 <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c01046da:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01046e1:	00 
c01046e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01046e5:	89 04 24             	mov    %eax,(%esp)
c01046e8:	e8 07 fe ff ff       	call   c01044f4 <__slob_get_free_pages>
c01046ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c01046f0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01046f4:	75 07                	jne    c01046fd <slob_alloc+0x19c>
				return 0;
c01046f6:	b8 00 00 00 00       	mov    $0x0,%eax
c01046fb:	eb 37                	jmp    c0104734 <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c01046fd:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104704:	00 
c0104705:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104708:	89 04 24             	mov    %eax,(%esp)
c010470b:	e8 26 00 00 00       	call   c0104736 <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104710:	e8 95 fc ff ff       	call   c01043aa <__intr_save>
c0104715:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104718:	a1 08 0a 13 c0       	mov    0xc0130a08,%eax
c010471d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104720:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104723:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104726:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104729:	8b 40 04             	mov    0x4(%eax),%eax
c010472c:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c010472f:	e9 97 fe ff ff       	jmp    c01045cb <slob_alloc+0x6a>
}
c0104734:	c9                   	leave  
c0104735:	c3                   	ret    

c0104736 <slob_free>:

static void slob_free(void *block, int size)
{
c0104736:	55                   	push   %ebp
c0104737:	89 e5                	mov    %esp,%ebp
c0104739:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c010473c:	8b 45 08             	mov    0x8(%ebp),%eax
c010473f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104742:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104746:	75 05                	jne    c010474d <slob_free+0x17>
		return;
c0104748:	e9 ff 00 00 00       	jmp    c010484c <slob_free+0x116>

	if (size)
c010474d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104751:	74 10                	je     c0104763 <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0104753:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104756:	83 c0 07             	add    $0x7,%eax
c0104759:	c1 e8 03             	shr    $0x3,%eax
c010475c:	89 c2                	mov    %eax,%edx
c010475e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104761:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104763:	e8 42 fc ff ff       	call   c01043aa <__intr_save>
c0104768:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c010476b:	a1 08 0a 13 c0       	mov    0xc0130a08,%eax
c0104770:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104773:	eb 27                	jmp    c010479c <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104775:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104778:	8b 40 04             	mov    0x4(%eax),%eax
c010477b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010477e:	77 13                	ja     c0104793 <slob_free+0x5d>
c0104780:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104783:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104786:	77 27                	ja     c01047af <slob_free+0x79>
c0104788:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010478b:	8b 40 04             	mov    0x4(%eax),%eax
c010478e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104791:	77 1c                	ja     c01047af <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104793:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104796:	8b 40 04             	mov    0x4(%eax),%eax
c0104799:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010479c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010479f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01047a2:	76 d1                	jbe    c0104775 <slob_free+0x3f>
c01047a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047a7:	8b 40 04             	mov    0x4(%eax),%eax
c01047aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01047ad:	76 c6                	jbe    c0104775 <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c01047af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01047b2:	8b 00                	mov    (%eax),%eax
c01047b4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01047bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01047be:	01 c2                	add    %eax,%edx
c01047c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047c3:	8b 40 04             	mov    0x4(%eax),%eax
c01047c6:	39 c2                	cmp    %eax,%edx
c01047c8:	75 25                	jne    c01047ef <slob_free+0xb9>
		b->units += cur->next->units;
c01047ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01047cd:	8b 10                	mov    (%eax),%edx
c01047cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047d2:	8b 40 04             	mov    0x4(%eax),%eax
c01047d5:	8b 00                	mov    (%eax),%eax
c01047d7:	01 c2                	add    %eax,%edx
c01047d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01047dc:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c01047de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047e1:	8b 40 04             	mov    0x4(%eax),%eax
c01047e4:	8b 50 04             	mov    0x4(%eax),%edx
c01047e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01047ea:	89 50 04             	mov    %edx,0x4(%eax)
c01047ed:	eb 0c                	jmp    c01047fb <slob_free+0xc5>
	} else
		b->next = cur->next;
c01047ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047f2:	8b 50 04             	mov    0x4(%eax),%edx
c01047f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01047f8:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c01047fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047fe:	8b 00                	mov    (%eax),%eax
c0104800:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104807:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010480a:	01 d0                	add    %edx,%eax
c010480c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010480f:	75 1f                	jne    c0104830 <slob_free+0xfa>
		cur->units += b->units;
c0104811:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104814:	8b 10                	mov    (%eax),%edx
c0104816:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104819:	8b 00                	mov    (%eax),%eax
c010481b:	01 c2                	add    %eax,%edx
c010481d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104820:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104822:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104825:	8b 50 04             	mov    0x4(%eax),%edx
c0104828:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010482b:	89 50 04             	mov    %edx,0x4(%eax)
c010482e:	eb 09                	jmp    c0104839 <slob_free+0x103>
	} else
		cur->next = b;
c0104830:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104833:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104836:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104839:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010483c:	a3 08 0a 13 c0       	mov    %eax,0xc0130a08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104841:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104844:	89 04 24             	mov    %eax,(%esp)
c0104847:	e8 88 fb ff ff       	call   c01043d4 <__intr_restore>
}
c010484c:	c9                   	leave  
c010484d:	c3                   	ret    

c010484e <slob_init>:



void
slob_init(void) {
c010484e:	55                   	push   %ebp
c010484f:	89 e5                	mov    %esp,%ebp
c0104851:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104854:	c7 04 24 aa df 10 c0 	movl   $0xc010dfaa,(%esp)
c010485b:	e8 f8 ba ff ff       	call   c0100358 <cprintf>
}
c0104860:	c9                   	leave  
c0104861:	c3                   	ret    

c0104862 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104862:	55                   	push   %ebp
c0104863:	89 e5                	mov    %esp,%ebp
c0104865:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104868:	e8 e1 ff ff ff       	call   c010484e <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c010486d:	c7 04 24 be df 10 c0 	movl   $0xc010dfbe,(%esp)
c0104874:	e8 df ba ff ff       	call   c0100358 <cprintf>
}
c0104879:	c9                   	leave  
c010487a:	c3                   	ret    

c010487b <slob_allocated>:

size_t
slob_allocated(void) {
c010487b:	55                   	push   %ebp
c010487c:	89 e5                	mov    %esp,%ebp
  return 0;
c010487e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104883:	5d                   	pop    %ebp
c0104884:	c3                   	ret    

c0104885 <kallocated>:

size_t
kallocated(void) {
c0104885:	55                   	push   %ebp
c0104886:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104888:	e8 ee ff ff ff       	call   c010487b <slob_allocated>
}
c010488d:	5d                   	pop    %ebp
c010488e:	c3                   	ret    

c010488f <find_order>:

static int find_order(int size)
{
c010488f:	55                   	push   %ebp
c0104890:	89 e5                	mov    %esp,%ebp
c0104892:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104895:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c010489c:	eb 07                	jmp    c01048a5 <find_order+0x16>
		order++;
c010489e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c01048a2:	d1 7d 08             	sarl   0x8(%ebp)
c01048a5:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c01048ac:	7f f0                	jg     c010489e <find_order+0xf>
		order++;
	return order;
c01048ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01048b1:	c9                   	leave  
c01048b2:	c3                   	ret    

c01048b3 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c01048b3:	55                   	push   %ebp
c01048b4:	89 e5                	mov    %esp,%ebp
c01048b6:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c01048b9:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c01048c0:	77 38                	ja     c01048fa <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c01048c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01048c5:	8d 50 08             	lea    0x8(%eax),%edx
c01048c8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01048cf:	00 
c01048d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01048d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01048d7:	89 14 24             	mov    %edx,(%esp)
c01048da:	e8 82 fc ff ff       	call   c0104561 <slob_alloc>
c01048df:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c01048e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01048e6:	74 08                	je     c01048f0 <__kmalloc+0x3d>
c01048e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048eb:	83 c0 08             	add    $0x8,%eax
c01048ee:	eb 05                	jmp    c01048f5 <__kmalloc+0x42>
c01048f0:	b8 00 00 00 00       	mov    $0x0,%eax
c01048f5:	e9 a6 00 00 00       	jmp    c01049a0 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c01048fa:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104901:	00 
c0104902:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104905:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104909:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104910:	e8 4c fc ff ff       	call   c0104561 <slob_alloc>
c0104915:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104918:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010491c:	75 07                	jne    c0104925 <__kmalloc+0x72>
		return 0;
c010491e:	b8 00 00 00 00       	mov    $0x0,%eax
c0104923:	eb 7b                	jmp    c01049a0 <__kmalloc+0xed>

	bb->order = find_order(size);
c0104925:	8b 45 08             	mov    0x8(%ebp),%eax
c0104928:	89 04 24             	mov    %eax,(%esp)
c010492b:	e8 5f ff ff ff       	call   c010488f <find_order>
c0104930:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104933:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104935:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104938:	8b 00                	mov    (%eax),%eax
c010493a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010493e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104941:	89 04 24             	mov    %eax,(%esp)
c0104944:	e8 ab fb ff ff       	call   c01044f4 <__slob_get_free_pages>
c0104949:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010494c:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c010494f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104952:	8b 40 04             	mov    0x4(%eax),%eax
c0104955:	85 c0                	test   %eax,%eax
c0104957:	74 2f                	je     c0104988 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104959:	e8 4c fa ff ff       	call   c01043aa <__intr_save>
c010495e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104961:	8b 15 84 23 1c c0    	mov    0xc01c2384,%edx
c0104967:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010496a:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c010496d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104970:	a3 84 23 1c c0       	mov    %eax,0xc01c2384
		spin_unlock_irqrestore(&block_lock, flags);
c0104975:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104978:	89 04 24             	mov    %eax,(%esp)
c010497b:	e8 54 fa ff ff       	call   c01043d4 <__intr_restore>
		return bb->pages;
c0104980:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104983:	8b 40 04             	mov    0x4(%eax),%eax
c0104986:	eb 18                	jmp    c01049a0 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104988:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c010498f:	00 
c0104990:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104993:	89 04 24             	mov    %eax,(%esp)
c0104996:	e8 9b fd ff ff       	call   c0104736 <slob_free>
	return 0;
c010499b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01049a0:	c9                   	leave  
c01049a1:	c3                   	ret    

c01049a2 <kmalloc>:

void *
kmalloc(size_t size)
{
c01049a2:	55                   	push   %ebp
c01049a3:	89 e5                	mov    %esp,%ebp
c01049a5:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c01049a8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01049af:	00 
c01049b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01049b3:	89 04 24             	mov    %eax,(%esp)
c01049b6:	e8 f8 fe ff ff       	call   c01048b3 <__kmalloc>
}
c01049bb:	c9                   	leave  
c01049bc:	c3                   	ret    

c01049bd <kfree>:


void kfree(void *block)
{
c01049bd:	55                   	push   %ebp
c01049be:	89 e5                	mov    %esp,%ebp
c01049c0:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c01049c3:	c7 45 f0 84 23 1c c0 	movl   $0xc01c2384,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c01049ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01049ce:	75 05                	jne    c01049d5 <kfree+0x18>
		return;
c01049d0:	e9 a2 00 00 00       	jmp    c0104a77 <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c01049d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01049d8:	25 ff 0f 00 00       	and    $0xfff,%eax
c01049dd:	85 c0                	test   %eax,%eax
c01049df:	75 7f                	jne    c0104a60 <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c01049e1:	e8 c4 f9 ff ff       	call   c01043aa <__intr_save>
c01049e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c01049e9:	a1 84 23 1c c0       	mov    0xc01c2384,%eax
c01049ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01049f1:	eb 5c                	jmp    c0104a4f <kfree+0x92>
			if (bb->pages == block) {
c01049f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049f6:	8b 40 04             	mov    0x4(%eax),%eax
c01049f9:	3b 45 08             	cmp    0x8(%ebp),%eax
c01049fc:	75 3f                	jne    c0104a3d <kfree+0x80>
				*last = bb->next;
c01049fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a01:	8b 50 08             	mov    0x8(%eax),%edx
c0104a04:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a07:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104a09:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a0c:	89 04 24             	mov    %eax,(%esp)
c0104a0f:	e8 c0 f9 ff ff       	call   c01043d4 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104a14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a17:	8b 10                	mov    (%eax),%edx
c0104a19:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a1c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104a20:	89 04 24             	mov    %eax,(%esp)
c0104a23:	e8 05 fb ff ff       	call   c010452d <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104a28:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104a2f:	00 
c0104a30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a33:	89 04 24             	mov    %eax,(%esp)
c0104a36:	e8 fb fc ff ff       	call   c0104736 <slob_free>
				return;
c0104a3b:	eb 3a                	jmp    c0104a77 <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104a3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a40:	83 c0 08             	add    $0x8,%eax
c0104a43:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a49:	8b 40 08             	mov    0x8(%eax),%eax
c0104a4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104a53:	75 9e                	jne    c01049f3 <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104a55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a58:	89 04 24             	mov    %eax,(%esp)
c0104a5b:	e8 74 f9 ff ff       	call   c01043d4 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104a60:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a63:	83 e8 08             	sub    $0x8,%eax
c0104a66:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104a6d:	00 
c0104a6e:	89 04 24             	mov    %eax,(%esp)
c0104a71:	e8 c0 fc ff ff       	call   c0104736 <slob_free>
	return;
c0104a76:	90                   	nop
}
c0104a77:	c9                   	leave  
c0104a78:	c3                   	ret    

c0104a79 <ksize>:


unsigned int ksize(const void *block)
{
c0104a79:	55                   	push   %ebp
c0104a7a:	89 e5                	mov    %esp,%ebp
c0104a7c:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104a7f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104a83:	75 07                	jne    c0104a8c <ksize+0x13>
		return 0;
c0104a85:	b8 00 00 00 00       	mov    $0x0,%eax
c0104a8a:	eb 6b                	jmp    c0104af7 <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104a8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a8f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104a94:	85 c0                	test   %eax,%eax
c0104a96:	75 54                	jne    c0104aec <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104a98:	e8 0d f9 ff ff       	call   c01043aa <__intr_save>
c0104a9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104aa0:	a1 84 23 1c c0       	mov    0xc01c2384,%eax
c0104aa5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104aa8:	eb 31                	jmp    c0104adb <ksize+0x62>
			if (bb->pages == block) {
c0104aaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aad:	8b 40 04             	mov    0x4(%eax),%eax
c0104ab0:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104ab3:	75 1d                	jne    c0104ad2 <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104ab5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ab8:	89 04 24             	mov    %eax,(%esp)
c0104abb:	e8 14 f9 ff ff       	call   c01043d4 <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104ac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ac3:	8b 00                	mov    (%eax),%eax
c0104ac5:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104aca:	89 c1                	mov    %eax,%ecx
c0104acc:	d3 e2                	shl    %cl,%edx
c0104ace:	89 d0                	mov    %edx,%eax
c0104ad0:	eb 25                	jmp    c0104af7 <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104ad2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ad5:	8b 40 08             	mov    0x8(%eax),%eax
c0104ad8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104adb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104adf:	75 c9                	jne    c0104aaa <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104ae1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ae4:	89 04 24             	mov    %eax,(%esp)
c0104ae7:	e8 e8 f8 ff ff       	call   c01043d4 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104aec:	8b 45 08             	mov    0x8(%ebp),%eax
c0104aef:	83 e8 08             	sub    $0x8,%eax
c0104af2:	8b 00                	mov    (%eax),%eax
c0104af4:	c1 e0 03             	shl    $0x3,%eax
}
c0104af7:	c9                   	leave  
c0104af8:	c3                   	ret    

c0104af9 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104af9:	55                   	push   %ebp
c0104afa:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104afc:	8b 55 08             	mov    0x8(%ebp),%edx
c0104aff:	a1 f0 44 1c c0       	mov    0xc01c44f0,%eax
c0104b04:	29 c2                	sub    %eax,%edx
c0104b06:	89 d0                	mov    %edx,%eax
c0104b08:	c1 f8 05             	sar    $0x5,%eax
}
c0104b0b:	5d                   	pop    %ebp
c0104b0c:	c3                   	ret    

c0104b0d <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104b0d:	55                   	push   %ebp
c0104b0e:	89 e5                	mov    %esp,%ebp
c0104b10:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104b13:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b16:	89 04 24             	mov    %eax,(%esp)
c0104b19:	e8 db ff ff ff       	call   c0104af9 <page2ppn>
c0104b1e:	c1 e0 0c             	shl    $0xc,%eax
}
c0104b21:	c9                   	leave  
c0104b22:	c3                   	ret    

c0104b23 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104b23:	55                   	push   %ebp
c0104b24:	89 e5                	mov    %esp,%ebp
c0104b26:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104b29:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b2c:	c1 e8 0c             	shr    $0xc,%eax
c0104b2f:	89 c2                	mov    %eax,%edx
c0104b31:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c0104b36:	39 c2                	cmp    %eax,%edx
c0104b38:	72 1c                	jb     c0104b56 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104b3a:	c7 44 24 08 dc df 10 	movl   $0xc010dfdc,0x8(%esp)
c0104b41:	c0 
c0104b42:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104b49:	00 
c0104b4a:	c7 04 24 fb df 10 c0 	movl   $0xc010dffb,(%esp)
c0104b51:	e8 84 c2 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0104b56:	a1 f0 44 1c c0       	mov    0xc01c44f0,%eax
c0104b5b:	8b 55 08             	mov    0x8(%ebp),%edx
c0104b5e:	c1 ea 0c             	shr    $0xc,%edx
c0104b61:	c1 e2 05             	shl    $0x5,%edx
c0104b64:	01 d0                	add    %edx,%eax
}
c0104b66:	c9                   	leave  
c0104b67:	c3                   	ret    

c0104b68 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104b68:	55                   	push   %ebp
c0104b69:	89 e5                	mov    %esp,%ebp
c0104b6b:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104b6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b71:	89 04 24             	mov    %eax,(%esp)
c0104b74:	e8 94 ff ff ff       	call   c0104b0d <page2pa>
c0104b79:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104b7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b7f:	c1 e8 0c             	shr    $0xc,%eax
c0104b82:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104b85:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c0104b8a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104b8d:	72 23                	jb     c0104bb2 <page2kva+0x4a>
c0104b8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b92:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104b96:	c7 44 24 08 0c e0 10 	movl   $0xc010e00c,0x8(%esp)
c0104b9d:	c0 
c0104b9e:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104ba5:	00 
c0104ba6:	c7 04 24 fb df 10 c0 	movl   $0xc010dffb,(%esp)
c0104bad:	e8 28 c2 ff ff       	call   c0100dda <__panic>
c0104bb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bb5:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104bba:	c9                   	leave  
c0104bbb:	c3                   	ret    

c0104bbc <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104bbc:	55                   	push   %ebp
c0104bbd:	89 e5                	mov    %esp,%ebp
c0104bbf:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104bc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bc5:	83 e0 01             	and    $0x1,%eax
c0104bc8:	85 c0                	test   %eax,%eax
c0104bca:	75 1c                	jne    c0104be8 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104bcc:	c7 44 24 08 30 e0 10 	movl   $0xc010e030,0x8(%esp)
c0104bd3:	c0 
c0104bd4:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104bdb:	00 
c0104bdc:	c7 04 24 fb df 10 c0 	movl   $0xc010dffb,(%esp)
c0104be3:	e8 f2 c1 ff ff       	call   c0100dda <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104be8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104beb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104bf0:	89 04 24             	mov    %eax,(%esp)
c0104bf3:	e8 2b ff ff ff       	call   c0104b23 <pa2page>
}
c0104bf8:	c9                   	leave  
c0104bf9:	c3                   	ret    

c0104bfa <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104bfa:	55                   	push   %ebp
c0104bfb:	89 e5                	mov    %esp,%ebp
c0104bfd:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104c00:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104c08:	89 04 24             	mov    %eax,(%esp)
c0104c0b:	e8 13 ff ff ff       	call   c0104b23 <pa2page>
}
c0104c10:	c9                   	leave  
c0104c11:	c3                   	ret    

c0104c12 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104c12:	55                   	push   %ebp
c0104c13:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104c15:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c18:	8b 00                	mov    (%eax),%eax
}
c0104c1a:	5d                   	pop    %ebp
c0104c1b:	c3                   	ret    

c0104c1c <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104c1c:	55                   	push   %ebp
c0104c1d:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104c1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c22:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104c25:	89 10                	mov    %edx,(%eax)
}
c0104c27:	5d                   	pop    %ebp
c0104c28:	c3                   	ret    

c0104c29 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104c29:	55                   	push   %ebp
c0104c2a:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104c2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c2f:	8b 00                	mov    (%eax),%eax
c0104c31:	8d 50 01             	lea    0x1(%eax),%edx
c0104c34:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c37:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104c39:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c3c:	8b 00                	mov    (%eax),%eax
}
c0104c3e:	5d                   	pop    %ebp
c0104c3f:	c3                   	ret    

c0104c40 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104c40:	55                   	push   %ebp
c0104c41:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104c43:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c46:	8b 00                	mov    (%eax),%eax
c0104c48:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104c4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c4e:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104c50:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c53:	8b 00                	mov    (%eax),%eax
}
c0104c55:	5d                   	pop    %ebp
c0104c56:	c3                   	ret    

c0104c57 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104c57:	55                   	push   %ebp
c0104c58:	89 e5                	mov    %esp,%ebp
c0104c5a:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104c5d:	9c                   	pushf  
c0104c5e:	58                   	pop    %eax
c0104c5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104c62:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104c65:	25 00 02 00 00       	and    $0x200,%eax
c0104c6a:	85 c0                	test   %eax,%eax
c0104c6c:	74 0c                	je     c0104c7a <__intr_save+0x23>
        intr_disable();
c0104c6e:	e8 bf d3 ff ff       	call   c0102032 <intr_disable>
        return 1;
c0104c73:	b8 01 00 00 00       	mov    $0x1,%eax
c0104c78:	eb 05                	jmp    c0104c7f <__intr_save+0x28>
    }
    return 0;
c0104c7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104c7f:	c9                   	leave  
c0104c80:	c3                   	ret    

c0104c81 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104c81:	55                   	push   %ebp
c0104c82:	89 e5                	mov    %esp,%ebp
c0104c84:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104c87:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104c8b:	74 05                	je     c0104c92 <__intr_restore+0x11>
        intr_enable();
c0104c8d:	e8 9a d3 ff ff       	call   c010202c <intr_enable>
    }
}
c0104c92:	c9                   	leave  
c0104c93:	c3                   	ret    

c0104c94 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104c94:	55                   	push   %ebp
c0104c95:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104c97:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c9a:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104c9d:	b8 23 00 00 00       	mov    $0x23,%eax
c0104ca2:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0104ca4:	b8 23 00 00 00       	mov    $0x23,%eax
c0104ca9:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104cab:	b8 10 00 00 00       	mov    $0x10,%eax
c0104cb0:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0104cb2:	b8 10 00 00 00       	mov    $0x10,%eax
c0104cb7:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0104cb9:	b8 10 00 00 00       	mov    $0x10,%eax
c0104cbe:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0104cc0:	ea c7 4c 10 c0 08 00 	ljmp   $0x8,$0xc0104cc7
}
c0104cc7:	5d                   	pop    %ebp
c0104cc8:	c3                   	ret    

c0104cc9 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0104cc9:	55                   	push   %ebp
c0104cca:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0104ccc:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ccf:	a3 c4 23 1c c0       	mov    %eax,0xc01c23c4
}
c0104cd4:	5d                   	pop    %ebp
c0104cd5:	c3                   	ret    

c0104cd6 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0104cd6:	55                   	push   %ebp
c0104cd7:	89 e5                	mov    %esp,%ebp
c0104cd9:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0104cdc:	b8 00 00 13 c0       	mov    $0xc0130000,%eax
c0104ce1:	89 04 24             	mov    %eax,(%esp)
c0104ce4:	e8 e0 ff ff ff       	call   c0104cc9 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0104ce9:	66 c7 05 c8 23 1c c0 	movw   $0x10,0xc01c23c8
c0104cf0:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0104cf2:	66 c7 05 48 0a 13 c0 	movw   $0x68,0xc0130a48
c0104cf9:	68 00 
c0104cfb:	b8 c0 23 1c c0       	mov    $0xc01c23c0,%eax
c0104d00:	66 a3 4a 0a 13 c0    	mov    %ax,0xc0130a4a
c0104d06:	b8 c0 23 1c c0       	mov    $0xc01c23c0,%eax
c0104d0b:	c1 e8 10             	shr    $0x10,%eax
c0104d0e:	a2 4c 0a 13 c0       	mov    %al,0xc0130a4c
c0104d13:	0f b6 05 4d 0a 13 c0 	movzbl 0xc0130a4d,%eax
c0104d1a:	83 e0 f0             	and    $0xfffffff0,%eax
c0104d1d:	83 c8 09             	or     $0x9,%eax
c0104d20:	a2 4d 0a 13 c0       	mov    %al,0xc0130a4d
c0104d25:	0f b6 05 4d 0a 13 c0 	movzbl 0xc0130a4d,%eax
c0104d2c:	83 e0 ef             	and    $0xffffffef,%eax
c0104d2f:	a2 4d 0a 13 c0       	mov    %al,0xc0130a4d
c0104d34:	0f b6 05 4d 0a 13 c0 	movzbl 0xc0130a4d,%eax
c0104d3b:	83 e0 9f             	and    $0xffffff9f,%eax
c0104d3e:	a2 4d 0a 13 c0       	mov    %al,0xc0130a4d
c0104d43:	0f b6 05 4d 0a 13 c0 	movzbl 0xc0130a4d,%eax
c0104d4a:	83 c8 80             	or     $0xffffff80,%eax
c0104d4d:	a2 4d 0a 13 c0       	mov    %al,0xc0130a4d
c0104d52:	0f b6 05 4e 0a 13 c0 	movzbl 0xc0130a4e,%eax
c0104d59:	83 e0 f0             	and    $0xfffffff0,%eax
c0104d5c:	a2 4e 0a 13 c0       	mov    %al,0xc0130a4e
c0104d61:	0f b6 05 4e 0a 13 c0 	movzbl 0xc0130a4e,%eax
c0104d68:	83 e0 ef             	and    $0xffffffef,%eax
c0104d6b:	a2 4e 0a 13 c0       	mov    %al,0xc0130a4e
c0104d70:	0f b6 05 4e 0a 13 c0 	movzbl 0xc0130a4e,%eax
c0104d77:	83 e0 df             	and    $0xffffffdf,%eax
c0104d7a:	a2 4e 0a 13 c0       	mov    %al,0xc0130a4e
c0104d7f:	0f b6 05 4e 0a 13 c0 	movzbl 0xc0130a4e,%eax
c0104d86:	83 c8 40             	or     $0x40,%eax
c0104d89:	a2 4e 0a 13 c0       	mov    %al,0xc0130a4e
c0104d8e:	0f b6 05 4e 0a 13 c0 	movzbl 0xc0130a4e,%eax
c0104d95:	83 e0 7f             	and    $0x7f,%eax
c0104d98:	a2 4e 0a 13 c0       	mov    %al,0xc0130a4e
c0104d9d:	b8 c0 23 1c c0       	mov    $0xc01c23c0,%eax
c0104da2:	c1 e8 18             	shr    $0x18,%eax
c0104da5:	a2 4f 0a 13 c0       	mov    %al,0xc0130a4f

    // reload all segment registers
    lgdt(&gdt_pd);
c0104daa:	c7 04 24 50 0a 13 c0 	movl   $0xc0130a50,(%esp)
c0104db1:	e8 de fe ff ff       	call   c0104c94 <lgdt>
c0104db6:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0104dbc:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0104dc0:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0104dc3:	c9                   	leave  
c0104dc4:	c3                   	ret    

c0104dc5 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0104dc5:	55                   	push   %ebp
c0104dc6:	89 e5                	mov    %esp,%ebp
c0104dc8:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c0104dcb:	c7 05 e8 44 1c c0 d0 	movl   $0xc010ded0,0xc01c44e8
c0104dd2:	de 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0104dd5:	a1 e8 44 1c c0       	mov    0xc01c44e8,%eax
c0104dda:	8b 00                	mov    (%eax),%eax
c0104ddc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104de0:	c7 04 24 5c e0 10 c0 	movl   $0xc010e05c,(%esp)
c0104de7:	e8 6c b5 ff ff       	call   c0100358 <cprintf>
    pmm_manager->init();
c0104dec:	a1 e8 44 1c c0       	mov    0xc01c44e8,%eax
c0104df1:	8b 40 04             	mov    0x4(%eax),%eax
c0104df4:	ff d0                	call   *%eax
}
c0104df6:	c9                   	leave  
c0104df7:	c3                   	ret    

c0104df8 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0104df8:	55                   	push   %ebp
c0104df9:	89 e5                	mov    %esp,%ebp
c0104dfb:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0104dfe:	a1 e8 44 1c c0       	mov    0xc01c44e8,%eax
c0104e03:	8b 40 08             	mov    0x8(%eax),%eax
c0104e06:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104e09:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104e0d:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e10:	89 14 24             	mov    %edx,(%esp)
c0104e13:	ff d0                	call   *%eax
}
c0104e15:	c9                   	leave  
c0104e16:	c3                   	ret    

c0104e17 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0104e17:	55                   	push   %ebp
c0104e18:	89 e5                	mov    %esp,%ebp
c0104e1a:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0104e1d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0104e24:	e8 2e fe ff ff       	call   c0104c57 <__intr_save>
c0104e29:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0104e2c:	a1 e8 44 1c c0       	mov    0xc01c44e8,%eax
c0104e31:	8b 40 0c             	mov    0xc(%eax),%eax
c0104e34:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e37:	89 14 24             	mov    %edx,(%esp)
c0104e3a:	ff d0                	call   *%eax
c0104e3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0104e3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e42:	89 04 24             	mov    %eax,(%esp)
c0104e45:	e8 37 fe ff ff       	call   c0104c81 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0104e4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104e4e:	75 2d                	jne    c0104e7d <alloc_pages+0x66>
c0104e50:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0104e54:	77 27                	ja     c0104e7d <alloc_pages+0x66>
c0104e56:	a1 2c 24 1c c0       	mov    0xc01c242c,%eax
c0104e5b:	85 c0                	test   %eax,%eax
c0104e5d:	74 1e                	je     c0104e7d <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0104e5f:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e62:	a1 cc 45 1c c0       	mov    0xc01c45cc,%eax
c0104e67:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104e6e:	00 
c0104e6f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104e73:	89 04 24             	mov    %eax,(%esp)
c0104e76:	e8 a6 1d 00 00       	call   c0106c21 <swap_out>
    }
c0104e7b:	eb a7                	jmp    c0104e24 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0104e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104e80:	c9                   	leave  
c0104e81:	c3                   	ret    

c0104e82 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0104e82:	55                   	push   %ebp
c0104e83:	89 e5                	mov    %esp,%ebp
c0104e85:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0104e88:	e8 ca fd ff ff       	call   c0104c57 <__intr_save>
c0104e8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0104e90:	a1 e8 44 1c c0       	mov    0xc01c44e8,%eax
c0104e95:	8b 40 10             	mov    0x10(%eax),%eax
c0104e98:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104e9b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104e9f:	8b 55 08             	mov    0x8(%ebp),%edx
c0104ea2:	89 14 24             	mov    %edx,(%esp)
c0104ea5:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c0104ea7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eaa:	89 04 24             	mov    %eax,(%esp)
c0104ead:	e8 cf fd ff ff       	call   c0104c81 <__intr_restore>
}
c0104eb2:	c9                   	leave  
c0104eb3:	c3                   	ret    

c0104eb4 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0104eb4:	55                   	push   %ebp
c0104eb5:	89 e5                	mov    %esp,%ebp
c0104eb7:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0104eba:	e8 98 fd ff ff       	call   c0104c57 <__intr_save>
c0104ebf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0104ec2:	a1 e8 44 1c c0       	mov    0xc01c44e8,%eax
c0104ec7:	8b 40 14             	mov    0x14(%eax),%eax
c0104eca:	ff d0                	call   *%eax
c0104ecc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0104ecf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ed2:	89 04 24             	mov    %eax,(%esp)
c0104ed5:	e8 a7 fd ff ff       	call   c0104c81 <__intr_restore>
    return ret;
c0104eda:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0104edd:	c9                   	leave  
c0104ede:	c3                   	ret    

c0104edf <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0104edf:	55                   	push   %ebp
c0104ee0:	89 e5                	mov    %esp,%ebp
c0104ee2:	57                   	push   %edi
c0104ee3:	56                   	push   %esi
c0104ee4:	53                   	push   %ebx
c0104ee5:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0104eeb:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0104ef2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0104ef9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0104f00:	c7 04 24 73 e0 10 c0 	movl   $0xc010e073,(%esp)
c0104f07:	e8 4c b4 ff ff       	call   c0100358 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0104f0c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0104f13:	e9 15 01 00 00       	jmp    c010502d <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0104f18:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104f1b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104f1e:	89 d0                	mov    %edx,%eax
c0104f20:	c1 e0 02             	shl    $0x2,%eax
c0104f23:	01 d0                	add    %edx,%eax
c0104f25:	c1 e0 02             	shl    $0x2,%eax
c0104f28:	01 c8                	add    %ecx,%eax
c0104f2a:	8b 50 08             	mov    0x8(%eax),%edx
c0104f2d:	8b 40 04             	mov    0x4(%eax),%eax
c0104f30:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0104f33:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0104f36:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104f39:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104f3c:	89 d0                	mov    %edx,%eax
c0104f3e:	c1 e0 02             	shl    $0x2,%eax
c0104f41:	01 d0                	add    %edx,%eax
c0104f43:	c1 e0 02             	shl    $0x2,%eax
c0104f46:	01 c8                	add    %ecx,%eax
c0104f48:	8b 48 0c             	mov    0xc(%eax),%ecx
c0104f4b:	8b 58 10             	mov    0x10(%eax),%ebx
c0104f4e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0104f51:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0104f54:	01 c8                	add    %ecx,%eax
c0104f56:	11 da                	adc    %ebx,%edx
c0104f58:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0104f5b:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0104f5e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104f61:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104f64:	89 d0                	mov    %edx,%eax
c0104f66:	c1 e0 02             	shl    $0x2,%eax
c0104f69:	01 d0                	add    %edx,%eax
c0104f6b:	c1 e0 02             	shl    $0x2,%eax
c0104f6e:	01 c8                	add    %ecx,%eax
c0104f70:	83 c0 14             	add    $0x14,%eax
c0104f73:	8b 00                	mov    (%eax),%eax
c0104f75:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c0104f7b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0104f7e:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0104f81:	83 c0 ff             	add    $0xffffffff,%eax
c0104f84:	83 d2 ff             	adc    $0xffffffff,%edx
c0104f87:	89 c6                	mov    %eax,%esi
c0104f89:	89 d7                	mov    %edx,%edi
c0104f8b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104f8e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104f91:	89 d0                	mov    %edx,%eax
c0104f93:	c1 e0 02             	shl    $0x2,%eax
c0104f96:	01 d0                	add    %edx,%eax
c0104f98:	c1 e0 02             	shl    $0x2,%eax
c0104f9b:	01 c8                	add    %ecx,%eax
c0104f9d:	8b 48 0c             	mov    0xc(%eax),%ecx
c0104fa0:	8b 58 10             	mov    0x10(%eax),%ebx
c0104fa3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0104fa9:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0104fad:	89 74 24 14          	mov    %esi,0x14(%esp)
c0104fb1:	89 7c 24 18          	mov    %edi,0x18(%esp)
c0104fb5:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0104fb8:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0104fbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104fbf:	89 54 24 10          	mov    %edx,0x10(%esp)
c0104fc3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0104fc7:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0104fcb:	c7 04 24 80 e0 10 c0 	movl   $0xc010e080,(%esp)
c0104fd2:	e8 81 b3 ff ff       	call   c0100358 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0104fd7:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104fda:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104fdd:	89 d0                	mov    %edx,%eax
c0104fdf:	c1 e0 02             	shl    $0x2,%eax
c0104fe2:	01 d0                	add    %edx,%eax
c0104fe4:	c1 e0 02             	shl    $0x2,%eax
c0104fe7:	01 c8                	add    %ecx,%eax
c0104fe9:	83 c0 14             	add    $0x14,%eax
c0104fec:	8b 00                	mov    (%eax),%eax
c0104fee:	83 f8 01             	cmp    $0x1,%eax
c0104ff1:	75 36                	jne    c0105029 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c0104ff3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104ff6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104ff9:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0104ffc:	77 2b                	ja     c0105029 <page_init+0x14a>
c0104ffe:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105001:	72 05                	jb     c0105008 <page_init+0x129>
c0105003:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0105006:	73 21                	jae    c0105029 <page_init+0x14a>
c0105008:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010500c:	77 1b                	ja     c0105029 <page_init+0x14a>
c010500e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105012:	72 09                	jb     c010501d <page_init+0x13e>
c0105014:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c010501b:	77 0c                	ja     c0105029 <page_init+0x14a>
                maxpa = end;
c010501d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105020:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105023:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105026:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105029:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010502d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105030:	8b 00                	mov    (%eax),%eax
c0105032:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105035:	0f 8f dd fe ff ff    	jg     c0104f18 <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c010503b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010503f:	72 1d                	jb     c010505e <page_init+0x17f>
c0105041:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105045:	77 09                	ja     c0105050 <page_init+0x171>
c0105047:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c010504e:	76 0e                	jbe    c010505e <page_init+0x17f>
        maxpa = KMEMSIZE;
c0105050:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0105057:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c010505e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105061:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105064:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105068:	c1 ea 0c             	shr    $0xc,%edx
c010506b:	a3 a0 23 1c c0       	mov    %eax,0xc01c23a0
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0105070:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c0105077:	b8 c4 46 1c c0       	mov    $0xc01c46c4,%eax
c010507c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010507f:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0105082:	01 d0                	add    %edx,%eax
c0105084:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0105087:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010508a:	ba 00 00 00 00       	mov    $0x0,%edx
c010508f:	f7 75 ac             	divl   -0x54(%ebp)
c0105092:	89 d0                	mov    %edx,%eax
c0105094:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0105097:	29 c2                	sub    %eax,%edx
c0105099:	89 d0                	mov    %edx,%eax
c010509b:	a3 f0 44 1c c0       	mov    %eax,0xc01c44f0

    for (i = 0; i < npage; i ++) {
c01050a0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01050a7:	eb 27                	jmp    c01050d0 <page_init+0x1f1>
        SetPageReserved(pages + i);
c01050a9:	a1 f0 44 1c c0       	mov    0xc01c44f0,%eax
c01050ae:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01050b1:	c1 e2 05             	shl    $0x5,%edx
c01050b4:	01 d0                	add    %edx,%eax
c01050b6:	83 c0 04             	add    $0x4,%eax
c01050b9:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01050c0:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01050c3:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01050c6:	8b 55 90             	mov    -0x70(%ebp),%edx
c01050c9:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01050cc:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01050d0:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01050d3:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c01050d8:	39 c2                	cmp    %eax,%edx
c01050da:	72 cd                	jb     c01050a9 <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c01050dc:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c01050e1:	c1 e0 05             	shl    $0x5,%eax
c01050e4:	89 c2                	mov    %eax,%edx
c01050e6:	a1 f0 44 1c c0       	mov    0xc01c44f0,%eax
c01050eb:	01 d0                	add    %edx,%eax
c01050ed:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c01050f0:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c01050f7:	77 23                	ja     c010511c <page_init+0x23d>
c01050f9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01050fc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105100:	c7 44 24 08 b0 e0 10 	movl   $0xc010e0b0,0x8(%esp)
c0105107:	c0 
c0105108:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c010510f:	00 
c0105110:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105117:	e8 be bc ff ff       	call   c0100dda <__panic>
c010511c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010511f:	05 00 00 00 40       	add    $0x40000000,%eax
c0105124:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0105127:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010512e:	e9 74 01 00 00       	jmp    c01052a7 <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105133:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105136:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105139:	89 d0                	mov    %edx,%eax
c010513b:	c1 e0 02             	shl    $0x2,%eax
c010513e:	01 d0                	add    %edx,%eax
c0105140:	c1 e0 02             	shl    $0x2,%eax
c0105143:	01 c8                	add    %ecx,%eax
c0105145:	8b 50 08             	mov    0x8(%eax),%edx
c0105148:	8b 40 04             	mov    0x4(%eax),%eax
c010514b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010514e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0105151:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105154:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105157:	89 d0                	mov    %edx,%eax
c0105159:	c1 e0 02             	shl    $0x2,%eax
c010515c:	01 d0                	add    %edx,%eax
c010515e:	c1 e0 02             	shl    $0x2,%eax
c0105161:	01 c8                	add    %ecx,%eax
c0105163:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105166:	8b 58 10             	mov    0x10(%eax),%ebx
c0105169:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010516c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010516f:	01 c8                	add    %ecx,%eax
c0105171:	11 da                	adc    %ebx,%edx
c0105173:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105176:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0105179:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010517c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010517f:	89 d0                	mov    %edx,%eax
c0105181:	c1 e0 02             	shl    $0x2,%eax
c0105184:	01 d0                	add    %edx,%eax
c0105186:	c1 e0 02             	shl    $0x2,%eax
c0105189:	01 c8                	add    %ecx,%eax
c010518b:	83 c0 14             	add    $0x14,%eax
c010518e:	8b 00                	mov    (%eax),%eax
c0105190:	83 f8 01             	cmp    $0x1,%eax
c0105193:	0f 85 0a 01 00 00    	jne    c01052a3 <page_init+0x3c4>
            if (begin < freemem) {
c0105199:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010519c:	ba 00 00 00 00       	mov    $0x0,%edx
c01051a1:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01051a4:	72 17                	jb     c01051bd <page_init+0x2de>
c01051a6:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01051a9:	77 05                	ja     c01051b0 <page_init+0x2d1>
c01051ab:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01051ae:	76 0d                	jbe    c01051bd <page_init+0x2de>
                begin = freemem;
c01051b0:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01051b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01051b6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01051bd:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01051c1:	72 1d                	jb     c01051e0 <page_init+0x301>
c01051c3:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01051c7:	77 09                	ja     c01051d2 <page_init+0x2f3>
c01051c9:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c01051d0:	76 0e                	jbe    c01051e0 <page_init+0x301>
                end = KMEMSIZE;
c01051d2:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c01051d9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c01051e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01051e3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01051e6:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01051e9:	0f 87 b4 00 00 00    	ja     c01052a3 <page_init+0x3c4>
c01051ef:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01051f2:	72 09                	jb     c01051fd <page_init+0x31e>
c01051f4:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01051f7:	0f 83 a6 00 00 00    	jae    c01052a3 <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c01051fd:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0105204:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105207:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010520a:	01 d0                	add    %edx,%eax
c010520c:	83 e8 01             	sub    $0x1,%eax
c010520f:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105212:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105215:	ba 00 00 00 00       	mov    $0x0,%edx
c010521a:	f7 75 9c             	divl   -0x64(%ebp)
c010521d:	89 d0                	mov    %edx,%eax
c010521f:	8b 55 98             	mov    -0x68(%ebp),%edx
c0105222:	29 c2                	sub    %eax,%edx
c0105224:	89 d0                	mov    %edx,%eax
c0105226:	ba 00 00 00 00       	mov    $0x0,%edx
c010522b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010522e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0105231:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105234:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0105237:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010523a:	ba 00 00 00 00       	mov    $0x0,%edx
c010523f:	89 c7                	mov    %eax,%edi
c0105241:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c0105247:	89 7d 80             	mov    %edi,-0x80(%ebp)
c010524a:	89 d0                	mov    %edx,%eax
c010524c:	83 e0 00             	and    $0x0,%eax
c010524f:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0105252:	8b 45 80             	mov    -0x80(%ebp),%eax
c0105255:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0105258:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010525b:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c010525e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105261:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105264:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105267:	77 3a                	ja     c01052a3 <page_init+0x3c4>
c0105269:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010526c:	72 05                	jb     c0105273 <page_init+0x394>
c010526e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105271:	73 30                	jae    c01052a3 <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0105273:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0105276:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c0105279:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010527c:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010527f:	29 c8                	sub    %ecx,%eax
c0105281:	19 da                	sbb    %ebx,%edx
c0105283:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105287:	c1 ea 0c             	shr    $0xc,%edx
c010528a:	89 c3                	mov    %eax,%ebx
c010528c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010528f:	89 04 24             	mov    %eax,(%esp)
c0105292:	e8 8c f8 ff ff       	call   c0104b23 <pa2page>
c0105297:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010529b:	89 04 24             	mov    %eax,(%esp)
c010529e:	e8 55 fb ff ff       	call   c0104df8 <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01052a3:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01052a7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01052aa:	8b 00                	mov    (%eax),%eax
c01052ac:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01052af:	0f 8f 7e fe ff ff    	jg     c0105133 <page_init+0x254>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01052b5:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c01052bb:	5b                   	pop    %ebx
c01052bc:	5e                   	pop    %esi
c01052bd:	5f                   	pop    %edi
c01052be:	5d                   	pop    %ebp
c01052bf:	c3                   	ret    

c01052c0 <enable_paging>:

static void
enable_paging(void) {
c01052c0:	55                   	push   %ebp
c01052c1:	89 e5                	mov    %esp,%ebp
c01052c3:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c01052c6:	a1 ec 44 1c c0       	mov    0xc01c44ec,%eax
c01052cb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01052ce:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01052d1:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c01052d4:	0f 20 c0             	mov    %cr0,%eax
c01052d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c01052da:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c01052dd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c01052e0:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c01052e7:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c01052eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01052ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c01052f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01052f4:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c01052f7:	c9                   	leave  
c01052f8:	c3                   	ret    

c01052f9 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01052f9:	55                   	push   %ebp
c01052fa:	89 e5                	mov    %esp,%ebp
c01052fc:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c01052ff:	8b 45 14             	mov    0x14(%ebp),%eax
c0105302:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105305:	31 d0                	xor    %edx,%eax
c0105307:	25 ff 0f 00 00       	and    $0xfff,%eax
c010530c:	85 c0                	test   %eax,%eax
c010530e:	74 24                	je     c0105334 <boot_map_segment+0x3b>
c0105310:	c7 44 24 0c e2 e0 10 	movl   $0xc010e0e2,0xc(%esp)
c0105317:	c0 
c0105318:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c010531f:	c0 
c0105320:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0105327:	00 
c0105328:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c010532f:	e8 a6 ba ff ff       	call   c0100dda <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0105334:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c010533b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010533e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105343:	89 c2                	mov    %eax,%edx
c0105345:	8b 45 10             	mov    0x10(%ebp),%eax
c0105348:	01 c2                	add    %eax,%edx
c010534a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010534d:	01 d0                	add    %edx,%eax
c010534f:	83 e8 01             	sub    $0x1,%eax
c0105352:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105355:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105358:	ba 00 00 00 00       	mov    $0x0,%edx
c010535d:	f7 75 f0             	divl   -0x10(%ebp)
c0105360:	89 d0                	mov    %edx,%eax
c0105362:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105365:	29 c2                	sub    %eax,%edx
c0105367:	89 d0                	mov    %edx,%eax
c0105369:	c1 e8 0c             	shr    $0xc,%eax
c010536c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c010536f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105372:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105375:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105378:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010537d:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0105380:	8b 45 14             	mov    0x14(%ebp),%eax
c0105383:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105386:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105389:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010538e:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105391:	eb 6b                	jmp    c01053fe <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0105393:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010539a:	00 
c010539b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010539e:	89 44 24 04          	mov    %eax,0x4(%esp)
c01053a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01053a5:	89 04 24             	mov    %eax,(%esp)
c01053a8:	e8 d1 01 00 00       	call   c010557e <get_pte>
c01053ad:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01053b0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01053b4:	75 24                	jne    c01053da <boot_map_segment+0xe1>
c01053b6:	c7 44 24 0c 0e e1 10 	movl   $0xc010e10e,0xc(%esp)
c01053bd:	c0 
c01053be:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01053c5:	c0 
c01053c6:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c01053cd:	00 
c01053ce:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01053d5:	e8 00 ba ff ff       	call   c0100dda <__panic>
        *ptep = pa | PTE_P | perm;
c01053da:	8b 45 18             	mov    0x18(%ebp),%eax
c01053dd:	8b 55 14             	mov    0x14(%ebp),%edx
c01053e0:	09 d0                	or     %edx,%eax
c01053e2:	83 c8 01             	or     $0x1,%eax
c01053e5:	89 c2                	mov    %eax,%edx
c01053e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01053ea:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01053ec:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01053f0:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01053f7:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c01053fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105402:	75 8f                	jne    c0105393 <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0105404:	c9                   	leave  
c0105405:	c3                   	ret    

c0105406 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0105406:	55                   	push   %ebp
c0105407:	89 e5                	mov    %esp,%ebp
c0105409:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c010540c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105413:	e8 ff f9 ff ff       	call   c0104e17 <alloc_pages>
c0105418:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c010541b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010541f:	75 1c                	jne    c010543d <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0105421:	c7 44 24 08 1b e1 10 	movl   $0xc010e11b,0x8(%esp)
c0105428:	c0 
c0105429:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0105430:	00 
c0105431:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105438:	e8 9d b9 ff ff       	call   c0100dda <__panic>
    }
    return page2kva(p);
c010543d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105440:	89 04 24             	mov    %eax,(%esp)
c0105443:	e8 20 f7 ff ff       	call   c0104b68 <page2kva>
}
c0105448:	c9                   	leave  
c0105449:	c3                   	ret    

c010544a <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c010544a:	55                   	push   %ebp
c010544b:	89 e5                	mov    %esp,%ebp
c010544d:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0105450:	e8 70 f9 ff ff       	call   c0104dc5 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0105455:	e8 85 fa ff ff       	call   c0104edf <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c010545a:	e8 67 09 00 00       	call   c0105dc6 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c010545f:	e8 a2 ff ff ff       	call   c0105406 <boot_alloc_page>
c0105464:	a3 a4 23 1c c0       	mov    %eax,0xc01c23a4
    memset(boot_pgdir, 0, PGSIZE);
c0105469:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c010546e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105475:	00 
c0105476:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010547d:	00 
c010547e:	89 04 24             	mov    %eax,(%esp)
c0105481:	e8 51 7c 00 00       	call   c010d0d7 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c0105486:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c010548b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010548e:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105495:	77 23                	ja     c01054ba <pmm_init+0x70>
c0105497:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010549a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010549e:	c7 44 24 08 b0 e0 10 	movl   $0xc010e0b0,0x8(%esp)
c01054a5:	c0 
c01054a6:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c01054ad:	00 
c01054ae:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01054b5:	e8 20 b9 ff ff       	call   c0100dda <__panic>
c01054ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054bd:	05 00 00 00 40       	add    $0x40000000,%eax
c01054c2:	a3 ec 44 1c c0       	mov    %eax,0xc01c44ec

    check_pgdir();
c01054c7:	e8 18 09 00 00       	call   c0105de4 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c01054cc:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c01054d1:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c01054d7:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c01054dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01054df:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01054e6:	77 23                	ja     c010550b <pmm_init+0xc1>
c01054e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01054ef:	c7 44 24 08 b0 e0 10 	movl   $0xc010e0b0,0x8(%esp)
c01054f6:	c0 
c01054f7:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c01054fe:	00 
c01054ff:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105506:	e8 cf b8 ff ff       	call   c0100dda <__panic>
c010550b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010550e:	05 00 00 00 40       	add    $0x40000000,%eax
c0105513:	83 c8 03             	or     $0x3,%eax
c0105516:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0105518:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c010551d:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0105524:	00 
c0105525:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010552c:	00 
c010552d:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0105534:	38 
c0105535:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c010553c:	c0 
c010553d:	89 04 24             	mov    %eax,(%esp)
c0105540:	e8 b4 fd ff ff       	call   c01052f9 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c0105545:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c010554a:	8b 15 a4 23 1c c0    	mov    0xc01c23a4,%edx
c0105550:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c0105556:	89 10                	mov    %edx,(%eax)

    enable_paging();
c0105558:	e8 63 fd ff ff       	call   c01052c0 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c010555d:	e8 74 f7 ff ff       	call   c0104cd6 <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c0105562:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0105567:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c010556d:	e8 0d 0f 00 00       	call   c010647f <check_boot_pgdir>

    print_pgdir();
c0105572:	e8 95 13 00 00       	call   c010690c <print_pgdir>
    
    kmalloc_init();
c0105577:	e8 e6 f2 ff ff       	call   c0104862 <kmalloc_init>

}
c010557c:	c9                   	leave  
c010557d:	c3                   	ret    

c010557e <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c010557e:	55                   	push   %ebp
c010557f:	89 e5                	mov    %esp,%ebp
c0105581:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c0105584:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105587:	c1 e8 16             	shr    $0x16,%eax
c010558a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105591:	8b 45 08             	mov    0x8(%ebp),%eax
c0105594:	01 d0                	add    %edx,%eax
c0105596:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c0105599:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010559c:	8b 00                	mov    (%eax),%eax
c010559e:	83 e0 01             	and    $0x1,%eax
c01055a1:	85 c0                	test   %eax,%eax
c01055a3:	0f 85 b9 00 00 00    	jne    c0105662 <get_pte+0xe4>
        if (!create) return 0;
c01055a9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01055ad:	75 0a                	jne    c01055b9 <get_pte+0x3b>
c01055af:	b8 00 00 00 00       	mov    $0x0,%eax
c01055b4:	e9 05 01 00 00       	jmp    c01056be <get_pte+0x140>
        struct Page *new_page = alloc_page();
c01055b9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01055c0:	e8 52 f8 ff ff       	call   c0104e17 <alloc_pages>
c01055c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (!new_page) return 0;
c01055c8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01055cc:	75 0a                	jne    c01055d8 <get_pte+0x5a>
c01055ce:	b8 00 00 00 00       	mov    $0x0,%eax
c01055d3:	e9 e6 00 00 00       	jmp    c01056be <get_pte+0x140>
        set_page_ref(new_page, 1);
c01055d8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01055df:	00 
c01055e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055e3:	89 04 24             	mov    %eax,(%esp)
c01055e6:	e8 31 f6 ff ff       	call   c0104c1c <set_page_ref>
        uintptr_t pa = page2pa(new_page);
c01055eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055ee:	89 04 24             	mov    %eax,(%esp)
c01055f1:	e8 17 f5 ff ff       	call   c0104b0d <page2pa>
c01055f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c01055f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01055fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01055ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105602:	c1 e8 0c             	shr    $0xc,%eax
c0105605:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105608:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c010560d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0105610:	72 23                	jb     c0105635 <get_pte+0xb7>
c0105612:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105615:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105619:	c7 44 24 08 0c e0 10 	movl   $0xc010e00c,0x8(%esp)
c0105620:	c0 
c0105621:	c7 44 24 04 96 01 00 	movl   $0x196,0x4(%esp)
c0105628:	00 
c0105629:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105630:	e8 a5 b7 ff ff       	call   c0100dda <__panic>
c0105635:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105638:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010563d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105644:	00 
c0105645:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010564c:	00 
c010564d:	89 04 24             	mov    %eax,(%esp)
c0105650:	e8 82 7a 00 00       	call   c010d0d7 <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c0105655:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105658:	83 c8 07             	or     $0x7,%eax
c010565b:	89 c2                	mov    %eax,%edx
c010565d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105660:	89 10                	mov    %edx,(%eax)
    }
    return (pte_t *)KADDR(PDE_ADDR(*pdep)) + PTX(la);
c0105662:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105665:	8b 00                	mov    (%eax),%eax
c0105667:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010566c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010566f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105672:	c1 e8 0c             	shr    $0xc,%eax
c0105675:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105678:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c010567d:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0105680:	72 23                	jb     c01056a5 <get_pte+0x127>
c0105682:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105685:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105689:	c7 44 24 08 0c e0 10 	movl   $0xc010e00c,0x8(%esp)
c0105690:	c0 
c0105691:	c7 44 24 04 99 01 00 	movl   $0x199,0x4(%esp)
c0105698:	00 
c0105699:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01056a0:	e8 35 b7 ff ff       	call   c0100dda <__panic>
c01056a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01056a8:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01056ad:	8b 55 0c             	mov    0xc(%ebp),%edx
c01056b0:	c1 ea 0c             	shr    $0xc,%edx
c01056b3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c01056b9:	c1 e2 02             	shl    $0x2,%edx
c01056bc:	01 d0                	add    %edx,%eax
}
c01056be:	c9                   	leave  
c01056bf:	c3                   	ret    

c01056c0 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c01056c0:	55                   	push   %ebp
c01056c1:	89 e5                	mov    %esp,%ebp
c01056c3:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01056c6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01056cd:	00 
c01056ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01056d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01056d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01056d8:	89 04 24             	mov    %eax,(%esp)
c01056db:	e8 9e fe ff ff       	call   c010557e <get_pte>
c01056e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c01056e3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01056e7:	74 08                	je     c01056f1 <get_page+0x31>
        *ptep_store = ptep;
c01056e9:	8b 45 10             	mov    0x10(%ebp),%eax
c01056ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01056ef:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c01056f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01056f5:	74 1b                	je     c0105712 <get_page+0x52>
c01056f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056fa:	8b 00                	mov    (%eax),%eax
c01056fc:	83 e0 01             	and    $0x1,%eax
c01056ff:	85 c0                	test   %eax,%eax
c0105701:	74 0f                	je     c0105712 <get_page+0x52>
        return pte2page(*ptep);
c0105703:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105706:	8b 00                	mov    (%eax),%eax
c0105708:	89 04 24             	mov    %eax,(%esp)
c010570b:	e8 ac f4 ff ff       	call   c0104bbc <pte2page>
c0105710:	eb 05                	jmp    c0105717 <get_page+0x57>
    }
    return NULL;
c0105712:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105717:	c9                   	leave  
c0105718:	c3                   	ret    

c0105719 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105719:	55                   	push   %ebp
c010571a:	89 e5                	mov    %esp,%ebp
c010571c:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c010571f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105722:	8b 00                	mov    (%eax),%eax
c0105724:	83 e0 01             	and    $0x1,%eax
c0105727:	85 c0                	test   %eax,%eax
c0105729:	74 4d                	je     c0105778 <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c010572b:	8b 45 10             	mov    0x10(%ebp),%eax
c010572e:	8b 00                	mov    (%eax),%eax
c0105730:	89 04 24             	mov    %eax,(%esp)
c0105733:	e8 84 f4 ff ff       	call   c0104bbc <pte2page>
c0105738:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (!page_ref_dec(page))
c010573b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010573e:	89 04 24             	mov    %eax,(%esp)
c0105741:	e8 fa f4 ff ff       	call   c0104c40 <page_ref_dec>
c0105746:	85 c0                	test   %eax,%eax
c0105748:	75 13                	jne    c010575d <page_remove_pte+0x44>
            free_page(page);
c010574a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105751:	00 
c0105752:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105755:	89 04 24             	mov    %eax,(%esp)
c0105758:	e8 25 f7 ff ff       	call   c0104e82 <free_pages>
        *ptep = 0;
c010575d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105760:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0105766:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105769:	89 44 24 04          	mov    %eax,0x4(%esp)
c010576d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105770:	89 04 24             	mov    %eax,(%esp)
c0105773:	e8 1d 05 00 00       	call   c0105c95 <tlb_invalidate>
    }
}
c0105778:	c9                   	leave  
c0105779:	c3                   	ret    

c010577a <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c010577a:	55                   	push   %ebp
c010577b:	89 e5                	mov    %esp,%ebp
c010577d:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105780:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105783:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105788:	85 c0                	test   %eax,%eax
c010578a:	75 0c                	jne    c0105798 <unmap_range+0x1e>
c010578c:	8b 45 10             	mov    0x10(%ebp),%eax
c010578f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105794:	85 c0                	test   %eax,%eax
c0105796:	74 24                	je     c01057bc <unmap_range+0x42>
c0105798:	c7 44 24 0c 34 e1 10 	movl   $0xc010e134,0xc(%esp)
c010579f:	c0 
c01057a0:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01057a7:	c0 
c01057a8:	c7 44 24 04 d2 01 00 	movl   $0x1d2,0x4(%esp)
c01057af:	00 
c01057b0:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01057b7:	e8 1e b6 ff ff       	call   c0100dda <__panic>
    assert(USER_ACCESS(start, end));
c01057bc:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01057c3:	76 11                	jbe    c01057d6 <unmap_range+0x5c>
c01057c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01057c8:	3b 45 10             	cmp    0x10(%ebp),%eax
c01057cb:	73 09                	jae    c01057d6 <unmap_range+0x5c>
c01057cd:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c01057d4:	76 24                	jbe    c01057fa <unmap_range+0x80>
c01057d6:	c7 44 24 0c 5d e1 10 	movl   $0xc010e15d,0xc(%esp)
c01057dd:	c0 
c01057de:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01057e5:	c0 
c01057e6:	c7 44 24 04 d3 01 00 	movl   $0x1d3,0x4(%esp)
c01057ed:	00 
c01057ee:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01057f5:	e8 e0 b5 ff ff       	call   c0100dda <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c01057fa:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105801:	00 
c0105802:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105805:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105809:	8b 45 08             	mov    0x8(%ebp),%eax
c010580c:	89 04 24             	mov    %eax,(%esp)
c010580f:	e8 6a fd ff ff       	call   c010557e <get_pte>
c0105814:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105817:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010581b:	75 18                	jne    c0105835 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c010581d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105820:	05 00 00 40 00       	add    $0x400000,%eax
c0105825:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105828:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010582b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105830:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105833:	eb 29                	jmp    c010585e <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105835:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105838:	8b 00                	mov    (%eax),%eax
c010583a:	85 c0                	test   %eax,%eax
c010583c:	74 19                	je     c0105857 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c010583e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105841:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105845:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105848:	89 44 24 04          	mov    %eax,0x4(%esp)
c010584c:	8b 45 08             	mov    0x8(%ebp),%eax
c010584f:	89 04 24             	mov    %eax,(%esp)
c0105852:	e8 c2 fe ff ff       	call   c0105719 <page_remove_pte>
        }
        start += PGSIZE;
c0105857:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c010585e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105862:	74 08                	je     c010586c <unmap_range+0xf2>
c0105864:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105867:	3b 45 10             	cmp    0x10(%ebp),%eax
c010586a:	72 8e                	jb     c01057fa <unmap_range+0x80>
}
c010586c:	c9                   	leave  
c010586d:	c3                   	ret    

c010586e <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c010586e:	55                   	push   %ebp
c010586f:	89 e5                	mov    %esp,%ebp
c0105871:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105874:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105877:	25 ff 0f 00 00       	and    $0xfff,%eax
c010587c:	85 c0                	test   %eax,%eax
c010587e:	75 0c                	jne    c010588c <exit_range+0x1e>
c0105880:	8b 45 10             	mov    0x10(%ebp),%eax
c0105883:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105888:	85 c0                	test   %eax,%eax
c010588a:	74 24                	je     c01058b0 <exit_range+0x42>
c010588c:	c7 44 24 0c 34 e1 10 	movl   $0xc010e134,0xc(%esp)
c0105893:	c0 
c0105894:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c010589b:	c0 
c010589c:	c7 44 24 04 e4 01 00 	movl   $0x1e4,0x4(%esp)
c01058a3:	00 
c01058a4:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01058ab:	e8 2a b5 ff ff       	call   c0100dda <__panic>
    assert(USER_ACCESS(start, end));
c01058b0:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01058b7:	76 11                	jbe    c01058ca <exit_range+0x5c>
c01058b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01058bc:	3b 45 10             	cmp    0x10(%ebp),%eax
c01058bf:	73 09                	jae    c01058ca <exit_range+0x5c>
c01058c1:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c01058c8:	76 24                	jbe    c01058ee <exit_range+0x80>
c01058ca:	c7 44 24 0c 5d e1 10 	movl   $0xc010e15d,0xc(%esp)
c01058d1:	c0 
c01058d2:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01058d9:	c0 
c01058da:	c7 44 24 04 e5 01 00 	movl   $0x1e5,0x4(%esp)
c01058e1:	00 
c01058e2:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01058e9:	e8 ec b4 ff ff       	call   c0100dda <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c01058ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c01058f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01058f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058f7:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c01058fc:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c01058ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105902:	c1 e8 16             	shr    $0x16,%eax
c0105905:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105908:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010590b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105912:	8b 45 08             	mov    0x8(%ebp),%eax
c0105915:	01 d0                	add    %edx,%eax
c0105917:	8b 00                	mov    (%eax),%eax
c0105919:	83 e0 01             	and    $0x1,%eax
c010591c:	85 c0                	test   %eax,%eax
c010591e:	74 3e                	je     c010595e <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105920:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105923:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010592a:	8b 45 08             	mov    0x8(%ebp),%eax
c010592d:	01 d0                	add    %edx,%eax
c010592f:	8b 00                	mov    (%eax),%eax
c0105931:	89 04 24             	mov    %eax,(%esp)
c0105934:	e8 c1 f2 ff ff       	call   c0104bfa <pde2page>
c0105939:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105940:	00 
c0105941:	89 04 24             	mov    %eax,(%esp)
c0105944:	e8 39 f5 ff ff       	call   c0104e82 <free_pages>
            pgdir[pde_idx] = 0;
c0105949:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010594c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105953:	8b 45 08             	mov    0x8(%ebp),%eax
c0105956:	01 d0                	add    %edx,%eax
c0105958:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c010595e:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105965:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105969:	74 08                	je     c0105973 <exit_range+0x105>
c010596b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010596e:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105971:	72 8c                	jb     c01058ff <exit_range+0x91>
}
c0105973:	c9                   	leave  
c0105974:	c3                   	ret    

c0105975 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105975:	55                   	push   %ebp
c0105976:	89 e5                	mov    %esp,%ebp
c0105978:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c010597b:	8b 45 10             	mov    0x10(%ebp),%eax
c010597e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105983:	85 c0                	test   %eax,%eax
c0105985:	75 0c                	jne    c0105993 <copy_range+0x1e>
c0105987:	8b 45 14             	mov    0x14(%ebp),%eax
c010598a:	25 ff 0f 00 00       	and    $0xfff,%eax
c010598f:	85 c0                	test   %eax,%eax
c0105991:	74 24                	je     c01059b7 <copy_range+0x42>
c0105993:	c7 44 24 0c 34 e1 10 	movl   $0xc010e134,0xc(%esp)
c010599a:	c0 
c010599b:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01059a2:	c0 
c01059a3:	c7 44 24 04 fa 01 00 	movl   $0x1fa,0x4(%esp)
c01059aa:	00 
c01059ab:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01059b2:	e8 23 b4 ff ff       	call   c0100dda <__panic>
    assert(USER_ACCESS(start, end));
c01059b7:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c01059be:	76 11                	jbe    c01059d1 <copy_range+0x5c>
c01059c0:	8b 45 10             	mov    0x10(%ebp),%eax
c01059c3:	3b 45 14             	cmp    0x14(%ebp),%eax
c01059c6:	73 09                	jae    c01059d1 <copy_range+0x5c>
c01059c8:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c01059cf:	76 24                	jbe    c01059f5 <copy_range+0x80>
c01059d1:	c7 44 24 0c 5d e1 10 	movl   $0xc010e15d,0xc(%esp)
c01059d8:	c0 
c01059d9:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01059e0:	c0 
c01059e1:	c7 44 24 04 fb 01 00 	movl   $0x1fb,0x4(%esp)
c01059e8:	00 
c01059e9:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01059f0:	e8 e5 b3 ff ff       	call   c0100dda <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c01059f5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01059fc:	00 
c01059fd:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a00:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a04:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a07:	89 04 24             	mov    %eax,(%esp)
c0105a0a:	e8 6f fb ff ff       	call   c010557e <get_pte>
c0105a0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105a12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a16:	75 1b                	jne    c0105a33 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105a18:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a1b:	05 00 00 40 00       	add    $0x400000,%eax
c0105a20:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105a23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a26:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105a2b:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105a2e:	e9 4c 01 00 00       	jmp    c0105b7f <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105a33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a36:	8b 00                	mov    (%eax),%eax
c0105a38:	83 e0 01             	and    $0x1,%eax
c0105a3b:	85 c0                	test   %eax,%eax
c0105a3d:	0f 84 35 01 00 00    	je     c0105b78 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105a43:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105a4a:	00 
c0105a4b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a4e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a52:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a55:	89 04 24             	mov    %eax,(%esp)
c0105a58:	e8 21 fb ff ff       	call   c010557e <get_pte>
c0105a5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105a60:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105a64:	75 0a                	jne    c0105a70 <copy_range+0xfb>
                return -E_NO_MEM;
c0105a66:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105a6b:	e9 26 01 00 00       	jmp    c0105b96 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105a70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a73:	8b 00                	mov    (%eax),%eax
c0105a75:	83 e0 07             	and    $0x7,%eax
c0105a78:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a7e:	8b 00                	mov    (%eax),%eax
c0105a80:	89 04 24             	mov    %eax,(%esp)
c0105a83:	e8 34 f1 ff ff       	call   c0104bbc <pte2page>
c0105a88:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105a8b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105a92:	e8 80 f3 ff ff       	call   c0104e17 <alloc_pages>
c0105a97:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105a9a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105a9e:	75 24                	jne    c0105ac4 <copy_range+0x14f>
c0105aa0:	c7 44 24 0c 75 e1 10 	movl   $0xc010e175,0xc(%esp)
c0105aa7:	c0 
c0105aa8:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0105aaf:	c0 
c0105ab0:	c7 44 24 04 0e 02 00 	movl   $0x20e,0x4(%esp)
c0105ab7:	00 
c0105ab8:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105abf:	e8 16 b3 ff ff       	call   c0100dda <__panic>
        assert(npage!=NULL);
c0105ac4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105ac8:	75 24                	jne    c0105aee <copy_range+0x179>
c0105aca:	c7 44 24 0c 80 e1 10 	movl   $0xc010e180,0xc(%esp)
c0105ad1:	c0 
c0105ad2:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0105ad9:	c0 
c0105ada:	c7 44 24 04 0f 02 00 	movl   $0x20f,0x4(%esp)
c0105ae1:	00 
c0105ae2:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105ae9:	e8 ec b2 ff ff       	call   c0100dda <__panic>
        int ret=0;
c0105aee:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void *src_kvaddr = page2kva(page);
c0105af5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105af8:	89 04 24             	mov    %eax,(%esp)
c0105afb:	e8 68 f0 ff ff       	call   c0104b68 <page2kva>
c0105b00:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void *dst_kvaddr = page2kva(npage);
c0105b03:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105b06:	89 04 24             	mov    %eax,(%esp)
c0105b09:	e8 5a f0 ff ff       	call   c0104b68 <page2kva>
c0105b0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0105b11:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105b18:	00 
c0105b19:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105b1c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b20:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105b23:	89 04 24             	mov    %eax,(%esp)
c0105b26:	e8 8e 76 00 00       	call   c010d1b9 <memcpy>
        ret = page_insert(to, npage, start, perm);
c0105b2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105b2e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105b32:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b35:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105b39:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105b3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b40:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b43:	89 04 24             	mov    %eax,(%esp)
c0105b46:	e8 91 00 00 00       	call   c0105bdc <page_insert>
c0105b4b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0105b4e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105b52:	74 24                	je     c0105b78 <copy_range+0x203>
c0105b54:	c7 44 24 0c 8c e1 10 	movl   $0xc010e18c,0xc(%esp)
c0105b5b:	c0 
c0105b5c:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0105b63:	c0 
c0105b64:	c7 44 24 04 23 02 00 	movl   $0x223,0x4(%esp)
c0105b6b:	00 
c0105b6c:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105b73:	e8 62 b2 ff ff       	call   c0100dda <__panic>
        }
        start += PGSIZE;
c0105b78:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105b7f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105b83:	74 0c                	je     c0105b91 <copy_range+0x21c>
c0105b85:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b88:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105b8b:	0f 82 64 fe ff ff    	jb     c01059f5 <copy_range+0x80>
    return 0;
c0105b91:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105b96:	c9                   	leave  
c0105b97:	c3                   	ret    

c0105b98 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105b98:	55                   	push   %ebp
c0105b99:	89 e5                	mov    %esp,%ebp
c0105b9b:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105b9e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105ba5:	00 
c0105ba6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ba9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105bad:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bb0:	89 04 24             	mov    %eax,(%esp)
c0105bb3:	e8 c6 f9 ff ff       	call   c010557e <get_pte>
c0105bb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105bbb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105bbf:	74 19                	je     c0105bda <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105bc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bc4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105bc8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bcb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105bcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bd2:	89 04 24             	mov    %eax,(%esp)
c0105bd5:	e8 3f fb ff ff       	call   c0105719 <page_remove_pte>
    }
}
c0105bda:	c9                   	leave  
c0105bdb:	c3                   	ret    

c0105bdc <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105bdc:	55                   	push   %ebp
c0105bdd:	89 e5                	mov    %esp,%ebp
c0105bdf:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105be2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105be9:	00 
c0105bea:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bed:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105bf1:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bf4:	89 04 24             	mov    %eax,(%esp)
c0105bf7:	e8 82 f9 ff ff       	call   c010557e <get_pte>
c0105bfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105bff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105c03:	75 0a                	jne    c0105c0f <page_insert+0x33>
        return -E_NO_MEM;
c0105c05:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105c0a:	e9 84 00 00 00       	jmp    c0105c93 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105c0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c12:	89 04 24             	mov    %eax,(%esp)
c0105c15:	e8 0f f0 ff ff       	call   c0104c29 <page_ref_inc>
    if (*ptep & PTE_P) {
c0105c1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c1d:	8b 00                	mov    (%eax),%eax
c0105c1f:	83 e0 01             	and    $0x1,%eax
c0105c22:	85 c0                	test   %eax,%eax
c0105c24:	74 3e                	je     c0105c64 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105c26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c29:	8b 00                	mov    (%eax),%eax
c0105c2b:	89 04 24             	mov    %eax,(%esp)
c0105c2e:	e8 89 ef ff ff       	call   c0104bbc <pte2page>
c0105c33:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105c36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c39:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105c3c:	75 0d                	jne    c0105c4b <page_insert+0x6f>
            page_ref_dec(page);
c0105c3e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c41:	89 04 24             	mov    %eax,(%esp)
c0105c44:	e8 f7 ef ff ff       	call   c0104c40 <page_ref_dec>
c0105c49:	eb 19                	jmp    c0105c64 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105c4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c4e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105c52:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c55:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c59:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c5c:	89 04 24             	mov    %eax,(%esp)
c0105c5f:	e8 b5 fa ff ff       	call   c0105719 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105c64:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c67:	89 04 24             	mov    %eax,(%esp)
c0105c6a:	e8 9e ee ff ff       	call   c0104b0d <page2pa>
c0105c6f:	0b 45 14             	or     0x14(%ebp),%eax
c0105c72:	83 c8 01             	or     $0x1,%eax
c0105c75:	89 c2                	mov    %eax,%edx
c0105c77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c7a:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105c7c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c83:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c86:	89 04 24             	mov    %eax,(%esp)
c0105c89:	e8 07 00 00 00       	call   c0105c95 <tlb_invalidate>
    return 0;
c0105c8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105c93:	c9                   	leave  
c0105c94:	c3                   	ret    

c0105c95 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105c95:	55                   	push   %ebp
c0105c96:	89 e5                	mov    %esp,%ebp
c0105c98:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105c9b:	0f 20 d8             	mov    %cr3,%eax
c0105c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0105ca1:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0105ca4:	89 c2                	mov    %eax,%edx
c0105ca6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ca9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105cac:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105cb3:	77 23                	ja     c0105cd8 <tlb_invalidate+0x43>
c0105cb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105cb8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105cbc:	c7 44 24 08 b0 e0 10 	movl   $0xc010e0b0,0x8(%esp)
c0105cc3:	c0 
c0105cc4:	c7 44 24 04 54 02 00 	movl   $0x254,0x4(%esp)
c0105ccb:	00 
c0105ccc:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105cd3:	e8 02 b1 ff ff       	call   c0100dda <__panic>
c0105cd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105cdb:	05 00 00 00 40       	add    $0x40000000,%eax
c0105ce0:	39 c2                	cmp    %eax,%edx
c0105ce2:	75 0c                	jne    c0105cf0 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c0105ce4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ce7:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0105cea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105ced:	0f 01 38             	invlpg (%eax)
    }
}
c0105cf0:	c9                   	leave  
c0105cf1:	c3                   	ret    

c0105cf2 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0105cf2:	55                   	push   %ebp
c0105cf3:	89 e5                	mov    %esp,%ebp
c0105cf5:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0105cf8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105cff:	e8 13 f1 ff ff       	call   c0104e17 <alloc_pages>
c0105d04:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0105d07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d0b:	0f 84 b0 00 00 00    	je     c0105dc1 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0105d11:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d14:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105d18:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d1b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105d1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d22:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d26:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d29:	89 04 24             	mov    %eax,(%esp)
c0105d2c:	e8 ab fe ff ff       	call   c0105bdc <page_insert>
c0105d31:	85 c0                	test   %eax,%eax
c0105d33:	74 1a                	je     c0105d4f <pgdir_alloc_page+0x5d>
            free_page(page);
c0105d35:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105d3c:	00 
c0105d3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d40:	89 04 24             	mov    %eax,(%esp)
c0105d43:	e8 3a f1 ff ff       	call   c0104e82 <free_pages>
            return NULL;
c0105d48:	b8 00 00 00 00       	mov    $0x0,%eax
c0105d4d:	eb 75                	jmp    c0105dc4 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c0105d4f:	a1 2c 24 1c c0       	mov    0xc01c242c,%eax
c0105d54:	85 c0                	test   %eax,%eax
c0105d56:	74 69                	je     c0105dc1 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c0105d58:	a1 cc 45 1c c0       	mov    0xc01c45cc,%eax
c0105d5d:	85 c0                	test   %eax,%eax
c0105d5f:	74 60                	je     c0105dc1 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0105d61:	a1 cc 45 1c c0       	mov    0xc01c45cc,%eax
c0105d66:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105d6d:	00 
c0105d6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105d71:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105d75:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105d78:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105d7c:	89 04 24             	mov    %eax,(%esp)
c0105d7f:	e8 51 0e 00 00       	call   c0106bd5 <swap_map_swappable>
                page->pra_vaddr=la;
c0105d84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d87:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105d8a:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0105d8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d90:	89 04 24             	mov    %eax,(%esp)
c0105d93:	e8 7a ee ff ff       	call   c0104c12 <page_ref>
c0105d98:	83 f8 01             	cmp    $0x1,%eax
c0105d9b:	74 24                	je     c0105dc1 <pgdir_alloc_page+0xcf>
c0105d9d:	c7 44 24 0c 95 e1 10 	movl   $0xc010e195,0xc(%esp)
c0105da4:	c0 
c0105da5:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0105dac:	c0 
c0105dad:	c7 44 24 04 68 02 00 	movl   $0x268,0x4(%esp)
c0105db4:	00 
c0105db5:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105dbc:	e8 19 b0 ff ff       	call   c0100dda <__panic>
            }
        }

    }

    return page;
c0105dc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105dc4:	c9                   	leave  
c0105dc5:	c3                   	ret    

c0105dc6 <check_alloc_page>:

static void
check_alloc_page(void) {
c0105dc6:	55                   	push   %ebp
c0105dc7:	89 e5                	mov    %esp,%ebp
c0105dc9:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c0105dcc:	a1 e8 44 1c c0       	mov    0xc01c44e8,%eax
c0105dd1:	8b 40 18             	mov    0x18(%eax),%eax
c0105dd4:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0105dd6:	c7 04 24 ac e1 10 c0 	movl   $0xc010e1ac,(%esp)
c0105ddd:	e8 76 a5 ff ff       	call   c0100358 <cprintf>
}
c0105de2:	c9                   	leave  
c0105de3:	c3                   	ret    

c0105de4 <check_pgdir>:

static void
check_pgdir(void) {
c0105de4:	55                   	push   %ebp
c0105de5:	89 e5                	mov    %esp,%ebp
c0105de7:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0105dea:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c0105def:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0105df4:	76 24                	jbe    c0105e1a <check_pgdir+0x36>
c0105df6:	c7 44 24 0c cb e1 10 	movl   $0xc010e1cb,0xc(%esp)
c0105dfd:	c0 
c0105dfe:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0105e05:	c0 
c0105e06:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c0105e0d:	00 
c0105e0e:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105e15:	e8 c0 af ff ff       	call   c0100dda <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0105e1a:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0105e1f:	85 c0                	test   %eax,%eax
c0105e21:	74 0e                	je     c0105e31 <check_pgdir+0x4d>
c0105e23:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0105e28:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105e2d:	85 c0                	test   %eax,%eax
c0105e2f:	74 24                	je     c0105e55 <check_pgdir+0x71>
c0105e31:	c7 44 24 0c e8 e1 10 	movl   $0xc010e1e8,0xc(%esp)
c0105e38:	c0 
c0105e39:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0105e40:	c0 
c0105e41:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c0105e48:	00 
c0105e49:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105e50:	e8 85 af ff ff       	call   c0100dda <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0105e55:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0105e5a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105e61:	00 
c0105e62:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105e69:	00 
c0105e6a:	89 04 24             	mov    %eax,(%esp)
c0105e6d:	e8 4e f8 ff ff       	call   c01056c0 <get_page>
c0105e72:	85 c0                	test   %eax,%eax
c0105e74:	74 24                	je     c0105e9a <check_pgdir+0xb6>
c0105e76:	c7 44 24 0c 20 e2 10 	movl   $0xc010e220,0xc(%esp)
c0105e7d:	c0 
c0105e7e:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0105e85:	c0 
c0105e86:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c0105e8d:	00 
c0105e8e:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105e95:	e8 40 af ff ff       	call   c0100dda <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c0105e9a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105ea1:	e8 71 ef ff ff       	call   c0104e17 <alloc_pages>
c0105ea6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c0105ea9:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0105eae:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105eb5:	00 
c0105eb6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105ebd:	00 
c0105ebe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105ec1:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105ec5:	89 04 24             	mov    %eax,(%esp)
c0105ec8:	e8 0f fd ff ff       	call   c0105bdc <page_insert>
c0105ecd:	85 c0                	test   %eax,%eax
c0105ecf:	74 24                	je     c0105ef5 <check_pgdir+0x111>
c0105ed1:	c7 44 24 0c 48 e2 10 	movl   $0xc010e248,0xc(%esp)
c0105ed8:	c0 
c0105ed9:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0105ee0:	c0 
c0105ee1:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c0105ee8:	00 
c0105ee9:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105ef0:	e8 e5 ae ff ff       	call   c0100dda <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0105ef5:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0105efa:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105f01:	00 
c0105f02:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105f09:	00 
c0105f0a:	89 04 24             	mov    %eax,(%esp)
c0105f0d:	e8 6c f6 ff ff       	call   c010557e <get_pte>
c0105f12:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105f15:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105f19:	75 24                	jne    c0105f3f <check_pgdir+0x15b>
c0105f1b:	c7 44 24 0c 74 e2 10 	movl   $0xc010e274,0xc(%esp)
c0105f22:	c0 
c0105f23:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0105f2a:	c0 
c0105f2b:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c0105f32:	00 
c0105f33:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105f3a:	e8 9b ae ff ff       	call   c0100dda <__panic>
    assert(pte2page(*ptep) == p1);
c0105f3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f42:	8b 00                	mov    (%eax),%eax
c0105f44:	89 04 24             	mov    %eax,(%esp)
c0105f47:	e8 70 ec ff ff       	call   c0104bbc <pte2page>
c0105f4c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105f4f:	74 24                	je     c0105f75 <check_pgdir+0x191>
c0105f51:	c7 44 24 0c a1 e2 10 	movl   $0xc010e2a1,0xc(%esp)
c0105f58:	c0 
c0105f59:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0105f60:	c0 
c0105f61:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c0105f68:	00 
c0105f69:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105f70:	e8 65 ae ff ff       	call   c0100dda <__panic>
    assert(page_ref(p1) == 1);
c0105f75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f78:	89 04 24             	mov    %eax,(%esp)
c0105f7b:	e8 92 ec ff ff       	call   c0104c12 <page_ref>
c0105f80:	83 f8 01             	cmp    $0x1,%eax
c0105f83:	74 24                	je     c0105fa9 <check_pgdir+0x1c5>
c0105f85:	c7 44 24 0c b7 e2 10 	movl   $0xc010e2b7,0xc(%esp)
c0105f8c:	c0 
c0105f8d:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0105f94:	c0 
c0105f95:	c7 44 24 04 8b 02 00 	movl   $0x28b,0x4(%esp)
c0105f9c:	00 
c0105f9d:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105fa4:	e8 31 ae ff ff       	call   c0100dda <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c0105fa9:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0105fae:	8b 00                	mov    (%eax),%eax
c0105fb0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105fb5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105fb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105fbb:	c1 e8 0c             	shr    $0xc,%eax
c0105fbe:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105fc1:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c0105fc6:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0105fc9:	72 23                	jb     c0105fee <check_pgdir+0x20a>
c0105fcb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105fce:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105fd2:	c7 44 24 08 0c e0 10 	movl   $0xc010e00c,0x8(%esp)
c0105fd9:	c0 
c0105fda:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c0105fe1:	00 
c0105fe2:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0105fe9:	e8 ec ad ff ff       	call   c0100dda <__panic>
c0105fee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105ff1:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105ff6:	83 c0 04             	add    $0x4,%eax
c0105ff9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c0105ffc:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0106001:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106008:	00 
c0106009:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106010:	00 
c0106011:	89 04 24             	mov    %eax,(%esp)
c0106014:	e8 65 f5 ff ff       	call   c010557e <get_pte>
c0106019:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010601c:	74 24                	je     c0106042 <check_pgdir+0x25e>
c010601e:	c7 44 24 0c cc e2 10 	movl   $0xc010e2cc,0xc(%esp)
c0106025:	c0 
c0106026:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c010602d:	c0 
c010602e:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c0106035:	00 
c0106036:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c010603d:	e8 98 ad ff ff       	call   c0100dda <__panic>

    p2 = alloc_page();
c0106042:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106049:	e8 c9 ed ff ff       	call   c0104e17 <alloc_pages>
c010604e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0106051:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0106056:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c010605d:	00 
c010605e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106065:	00 
c0106066:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106069:	89 54 24 04          	mov    %edx,0x4(%esp)
c010606d:	89 04 24             	mov    %eax,(%esp)
c0106070:	e8 67 fb ff ff       	call   c0105bdc <page_insert>
c0106075:	85 c0                	test   %eax,%eax
c0106077:	74 24                	je     c010609d <check_pgdir+0x2b9>
c0106079:	c7 44 24 0c f4 e2 10 	movl   $0xc010e2f4,0xc(%esp)
c0106080:	c0 
c0106081:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0106088:	c0 
c0106089:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c0106090:	00 
c0106091:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0106098:	e8 3d ad ff ff       	call   c0100dda <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010609d:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c01060a2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01060a9:	00 
c01060aa:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01060b1:	00 
c01060b2:	89 04 24             	mov    %eax,(%esp)
c01060b5:	e8 c4 f4 ff ff       	call   c010557e <get_pte>
c01060ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01060bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01060c1:	75 24                	jne    c01060e7 <check_pgdir+0x303>
c01060c3:	c7 44 24 0c 2c e3 10 	movl   $0xc010e32c,0xc(%esp)
c01060ca:	c0 
c01060cb:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01060d2:	c0 
c01060d3:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c01060da:	00 
c01060db:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01060e2:	e8 f3 ac ff ff       	call   c0100dda <__panic>
    assert(*ptep & PTE_U);
c01060e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060ea:	8b 00                	mov    (%eax),%eax
c01060ec:	83 e0 04             	and    $0x4,%eax
c01060ef:	85 c0                	test   %eax,%eax
c01060f1:	75 24                	jne    c0106117 <check_pgdir+0x333>
c01060f3:	c7 44 24 0c 5c e3 10 	movl   $0xc010e35c,0xc(%esp)
c01060fa:	c0 
c01060fb:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0106102:	c0 
c0106103:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
c010610a:	00 
c010610b:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0106112:	e8 c3 ac ff ff       	call   c0100dda <__panic>
    assert(*ptep & PTE_W);
c0106117:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010611a:	8b 00                	mov    (%eax),%eax
c010611c:	83 e0 02             	and    $0x2,%eax
c010611f:	85 c0                	test   %eax,%eax
c0106121:	75 24                	jne    c0106147 <check_pgdir+0x363>
c0106123:	c7 44 24 0c 6a e3 10 	movl   $0xc010e36a,0xc(%esp)
c010612a:	c0 
c010612b:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0106132:	c0 
c0106133:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c010613a:	00 
c010613b:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0106142:	e8 93 ac ff ff       	call   c0100dda <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0106147:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c010614c:	8b 00                	mov    (%eax),%eax
c010614e:	83 e0 04             	and    $0x4,%eax
c0106151:	85 c0                	test   %eax,%eax
c0106153:	75 24                	jne    c0106179 <check_pgdir+0x395>
c0106155:	c7 44 24 0c 78 e3 10 	movl   $0xc010e378,0xc(%esp)
c010615c:	c0 
c010615d:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0106164:	c0 
c0106165:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c010616c:	00 
c010616d:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0106174:	e8 61 ac ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 1);
c0106179:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010617c:	89 04 24             	mov    %eax,(%esp)
c010617f:	e8 8e ea ff ff       	call   c0104c12 <page_ref>
c0106184:	83 f8 01             	cmp    $0x1,%eax
c0106187:	74 24                	je     c01061ad <check_pgdir+0x3c9>
c0106189:	c7 44 24 0c 8e e3 10 	movl   $0xc010e38e,0xc(%esp)
c0106190:	c0 
c0106191:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0106198:	c0 
c0106199:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c01061a0:	00 
c01061a1:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01061a8:	e8 2d ac ff ff       	call   c0100dda <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01061ad:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c01061b2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01061b9:	00 
c01061ba:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01061c1:	00 
c01061c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01061c5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01061c9:	89 04 24             	mov    %eax,(%esp)
c01061cc:	e8 0b fa ff ff       	call   c0105bdc <page_insert>
c01061d1:	85 c0                	test   %eax,%eax
c01061d3:	74 24                	je     c01061f9 <check_pgdir+0x415>
c01061d5:	c7 44 24 0c a0 e3 10 	movl   $0xc010e3a0,0xc(%esp)
c01061dc:	c0 
c01061dd:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01061e4:	c0 
c01061e5:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c01061ec:	00 
c01061ed:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01061f4:	e8 e1 ab ff ff       	call   c0100dda <__panic>
    assert(page_ref(p1) == 2);
c01061f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061fc:	89 04 24             	mov    %eax,(%esp)
c01061ff:	e8 0e ea ff ff       	call   c0104c12 <page_ref>
c0106204:	83 f8 02             	cmp    $0x2,%eax
c0106207:	74 24                	je     c010622d <check_pgdir+0x449>
c0106209:	c7 44 24 0c cc e3 10 	movl   $0xc010e3cc,0xc(%esp)
c0106210:	c0 
c0106211:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0106218:	c0 
c0106219:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c0106220:	00 
c0106221:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0106228:	e8 ad ab ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 0);
c010622d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106230:	89 04 24             	mov    %eax,(%esp)
c0106233:	e8 da e9 ff ff       	call   c0104c12 <page_ref>
c0106238:	85 c0                	test   %eax,%eax
c010623a:	74 24                	je     c0106260 <check_pgdir+0x47c>
c010623c:	c7 44 24 0c de e3 10 	movl   $0xc010e3de,0xc(%esp)
c0106243:	c0 
c0106244:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c010624b:	c0 
c010624c:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c0106253:	00 
c0106254:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c010625b:	e8 7a ab ff ff       	call   c0100dda <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106260:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0106265:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010626c:	00 
c010626d:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106274:	00 
c0106275:	89 04 24             	mov    %eax,(%esp)
c0106278:	e8 01 f3 ff ff       	call   c010557e <get_pte>
c010627d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106280:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106284:	75 24                	jne    c01062aa <check_pgdir+0x4c6>
c0106286:	c7 44 24 0c 2c e3 10 	movl   $0xc010e32c,0xc(%esp)
c010628d:	c0 
c010628e:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0106295:	c0 
c0106296:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
c010629d:	00 
c010629e:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01062a5:	e8 30 ab ff ff       	call   c0100dda <__panic>
    assert(pte2page(*ptep) == p1);
c01062aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01062ad:	8b 00                	mov    (%eax),%eax
c01062af:	89 04 24             	mov    %eax,(%esp)
c01062b2:	e8 05 e9 ff ff       	call   c0104bbc <pte2page>
c01062b7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01062ba:	74 24                	je     c01062e0 <check_pgdir+0x4fc>
c01062bc:	c7 44 24 0c a1 e2 10 	movl   $0xc010e2a1,0xc(%esp)
c01062c3:	c0 
c01062c4:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01062cb:	c0 
c01062cc:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c01062d3:	00 
c01062d4:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01062db:	e8 fa aa ff ff       	call   c0100dda <__panic>
    assert((*ptep & PTE_U) == 0);
c01062e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01062e3:	8b 00                	mov    (%eax),%eax
c01062e5:	83 e0 04             	and    $0x4,%eax
c01062e8:	85 c0                	test   %eax,%eax
c01062ea:	74 24                	je     c0106310 <check_pgdir+0x52c>
c01062ec:	c7 44 24 0c f0 e3 10 	movl   $0xc010e3f0,0xc(%esp)
c01062f3:	c0 
c01062f4:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01062fb:	c0 
c01062fc:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c0106303:	00 
c0106304:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c010630b:	e8 ca aa ff ff       	call   c0100dda <__panic>

    page_remove(boot_pgdir, 0x0);
c0106310:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0106315:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010631c:	00 
c010631d:	89 04 24             	mov    %eax,(%esp)
c0106320:	e8 73 f8 ff ff       	call   c0105b98 <page_remove>
    assert(page_ref(p1) == 1);
c0106325:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106328:	89 04 24             	mov    %eax,(%esp)
c010632b:	e8 e2 e8 ff ff       	call   c0104c12 <page_ref>
c0106330:	83 f8 01             	cmp    $0x1,%eax
c0106333:	74 24                	je     c0106359 <check_pgdir+0x575>
c0106335:	c7 44 24 0c b7 e2 10 	movl   $0xc010e2b7,0xc(%esp)
c010633c:	c0 
c010633d:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0106344:	c0 
c0106345:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c010634c:	00 
c010634d:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0106354:	e8 81 aa ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 0);
c0106359:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010635c:	89 04 24             	mov    %eax,(%esp)
c010635f:	e8 ae e8 ff ff       	call   c0104c12 <page_ref>
c0106364:	85 c0                	test   %eax,%eax
c0106366:	74 24                	je     c010638c <check_pgdir+0x5a8>
c0106368:	c7 44 24 0c de e3 10 	movl   $0xc010e3de,0xc(%esp)
c010636f:	c0 
c0106370:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0106377:	c0 
c0106378:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c010637f:	00 
c0106380:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0106387:	e8 4e aa ff ff       	call   c0100dda <__panic>

    page_remove(boot_pgdir, PGSIZE);
c010638c:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0106391:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106398:	00 
c0106399:	89 04 24             	mov    %eax,(%esp)
c010639c:	e8 f7 f7 ff ff       	call   c0105b98 <page_remove>
    assert(page_ref(p1) == 0);
c01063a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063a4:	89 04 24             	mov    %eax,(%esp)
c01063a7:	e8 66 e8 ff ff       	call   c0104c12 <page_ref>
c01063ac:	85 c0                	test   %eax,%eax
c01063ae:	74 24                	je     c01063d4 <check_pgdir+0x5f0>
c01063b0:	c7 44 24 0c 05 e4 10 	movl   $0xc010e405,0xc(%esp)
c01063b7:	c0 
c01063b8:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01063bf:	c0 
c01063c0:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c01063c7:	00 
c01063c8:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01063cf:	e8 06 aa ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 0);
c01063d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063d7:	89 04 24             	mov    %eax,(%esp)
c01063da:	e8 33 e8 ff ff       	call   c0104c12 <page_ref>
c01063df:	85 c0                	test   %eax,%eax
c01063e1:	74 24                	je     c0106407 <check_pgdir+0x623>
c01063e3:	c7 44 24 0c de e3 10 	movl   $0xc010e3de,0xc(%esp)
c01063ea:	c0 
c01063eb:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01063f2:	c0 
c01063f3:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
c01063fa:	00 
c01063fb:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0106402:	e8 d3 a9 ff ff       	call   c0100dda <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0106407:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c010640c:	8b 00                	mov    (%eax),%eax
c010640e:	89 04 24             	mov    %eax,(%esp)
c0106411:	e8 e4 e7 ff ff       	call   c0104bfa <pde2page>
c0106416:	89 04 24             	mov    %eax,(%esp)
c0106419:	e8 f4 e7 ff ff       	call   c0104c12 <page_ref>
c010641e:	83 f8 01             	cmp    $0x1,%eax
c0106421:	74 24                	je     c0106447 <check_pgdir+0x663>
c0106423:	c7 44 24 0c 18 e4 10 	movl   $0xc010e418,0xc(%esp)
c010642a:	c0 
c010642b:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0106432:	c0 
c0106433:	c7 44 24 04 a7 02 00 	movl   $0x2a7,0x4(%esp)
c010643a:	00 
c010643b:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0106442:	e8 93 a9 ff ff       	call   c0100dda <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0106447:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c010644c:	8b 00                	mov    (%eax),%eax
c010644e:	89 04 24             	mov    %eax,(%esp)
c0106451:	e8 a4 e7 ff ff       	call   c0104bfa <pde2page>
c0106456:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010645d:	00 
c010645e:	89 04 24             	mov    %eax,(%esp)
c0106461:	e8 1c ea ff ff       	call   c0104e82 <free_pages>
    boot_pgdir[0] = 0;
c0106466:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c010646b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0106471:	c7 04 24 3f e4 10 c0 	movl   $0xc010e43f,(%esp)
c0106478:	e8 db 9e ff ff       	call   c0100358 <cprintf>
}
c010647d:	c9                   	leave  
c010647e:	c3                   	ret    

c010647f <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c010647f:	55                   	push   %ebp
c0106480:	89 e5                	mov    %esp,%ebp
c0106482:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106485:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010648c:	e9 ca 00 00 00       	jmp    c010655b <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0106491:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106494:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106497:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010649a:	c1 e8 0c             	shr    $0xc,%eax
c010649d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01064a0:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c01064a5:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01064a8:	72 23                	jb     c01064cd <check_boot_pgdir+0x4e>
c01064aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064ad:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01064b1:	c7 44 24 08 0c e0 10 	movl   $0xc010e00c,0x8(%esp)
c01064b8:	c0 
c01064b9:	c7 44 24 04 b3 02 00 	movl   $0x2b3,0x4(%esp)
c01064c0:	00 
c01064c1:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01064c8:	e8 0d a9 ff ff       	call   c0100dda <__panic>
c01064cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064d0:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01064d5:	89 c2                	mov    %eax,%edx
c01064d7:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c01064dc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01064e3:	00 
c01064e4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01064e8:	89 04 24             	mov    %eax,(%esp)
c01064eb:	e8 8e f0 ff ff       	call   c010557e <get_pte>
c01064f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01064f3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01064f7:	75 24                	jne    c010651d <check_boot_pgdir+0x9e>
c01064f9:	c7 44 24 0c 5c e4 10 	movl   $0xc010e45c,0xc(%esp)
c0106500:	c0 
c0106501:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0106508:	c0 
c0106509:	c7 44 24 04 b3 02 00 	movl   $0x2b3,0x4(%esp)
c0106510:	00 
c0106511:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0106518:	e8 bd a8 ff ff       	call   c0100dda <__panic>
        assert(PTE_ADDR(*ptep) == i);
c010651d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106520:	8b 00                	mov    (%eax),%eax
c0106522:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106527:	89 c2                	mov    %eax,%edx
c0106529:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010652c:	39 c2                	cmp    %eax,%edx
c010652e:	74 24                	je     c0106554 <check_boot_pgdir+0xd5>
c0106530:	c7 44 24 0c 99 e4 10 	movl   $0xc010e499,0xc(%esp)
c0106537:	c0 
c0106538:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c010653f:	c0 
c0106540:	c7 44 24 04 b4 02 00 	movl   $0x2b4,0x4(%esp)
c0106547:	00 
c0106548:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c010654f:	e8 86 a8 ff ff       	call   c0100dda <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106554:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c010655b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010655e:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c0106563:	39 c2                	cmp    %eax,%edx
c0106565:	0f 82 26 ff ff ff    	jb     c0106491 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c010656b:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0106570:	05 ac 0f 00 00       	add    $0xfac,%eax
c0106575:	8b 00                	mov    (%eax),%eax
c0106577:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010657c:	89 c2                	mov    %eax,%edx
c010657e:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0106583:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106586:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c010658d:	77 23                	ja     c01065b2 <check_boot_pgdir+0x133>
c010658f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106592:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106596:	c7 44 24 08 b0 e0 10 	movl   $0xc010e0b0,0x8(%esp)
c010659d:	c0 
c010659e:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c01065a5:	00 
c01065a6:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01065ad:	e8 28 a8 ff ff       	call   c0100dda <__panic>
c01065b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065b5:	05 00 00 00 40       	add    $0x40000000,%eax
c01065ba:	39 c2                	cmp    %eax,%edx
c01065bc:	74 24                	je     c01065e2 <check_boot_pgdir+0x163>
c01065be:	c7 44 24 0c b0 e4 10 	movl   $0xc010e4b0,0xc(%esp)
c01065c5:	c0 
c01065c6:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01065cd:	c0 
c01065ce:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c01065d5:	00 
c01065d6:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01065dd:	e8 f8 a7 ff ff       	call   c0100dda <__panic>

    assert(boot_pgdir[0] == 0);
c01065e2:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c01065e7:	8b 00                	mov    (%eax),%eax
c01065e9:	85 c0                	test   %eax,%eax
c01065eb:	74 24                	je     c0106611 <check_boot_pgdir+0x192>
c01065ed:	c7 44 24 0c e4 e4 10 	movl   $0xc010e4e4,0xc(%esp)
c01065f4:	c0 
c01065f5:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01065fc:	c0 
c01065fd:	c7 44 24 04 b9 02 00 	movl   $0x2b9,0x4(%esp)
c0106604:	00 
c0106605:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c010660c:	e8 c9 a7 ff ff       	call   c0100dda <__panic>

    struct Page *p;
    p = alloc_page();
c0106611:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106618:	e8 fa e7 ff ff       	call   c0104e17 <alloc_pages>
c010661d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0106620:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c0106625:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010662c:	00 
c010662d:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106634:	00 
c0106635:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106638:	89 54 24 04          	mov    %edx,0x4(%esp)
c010663c:	89 04 24             	mov    %eax,(%esp)
c010663f:	e8 98 f5 ff ff       	call   c0105bdc <page_insert>
c0106644:	85 c0                	test   %eax,%eax
c0106646:	74 24                	je     c010666c <check_boot_pgdir+0x1ed>
c0106648:	c7 44 24 0c f8 e4 10 	movl   $0xc010e4f8,0xc(%esp)
c010664f:	c0 
c0106650:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0106657:	c0 
c0106658:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c010665f:	00 
c0106660:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0106667:	e8 6e a7 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p) == 1);
c010666c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010666f:	89 04 24             	mov    %eax,(%esp)
c0106672:	e8 9b e5 ff ff       	call   c0104c12 <page_ref>
c0106677:	83 f8 01             	cmp    $0x1,%eax
c010667a:	74 24                	je     c01066a0 <check_boot_pgdir+0x221>
c010667c:	c7 44 24 0c 26 e5 10 	movl   $0xc010e526,0xc(%esp)
c0106683:	c0 
c0106684:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c010668b:	c0 
c010668c:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
c0106693:	00 
c0106694:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c010669b:	e8 3a a7 ff ff       	call   c0100dda <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01066a0:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c01066a5:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c01066ac:	00 
c01066ad:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c01066b4:	00 
c01066b5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01066b8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01066bc:	89 04 24             	mov    %eax,(%esp)
c01066bf:	e8 18 f5 ff ff       	call   c0105bdc <page_insert>
c01066c4:	85 c0                	test   %eax,%eax
c01066c6:	74 24                	je     c01066ec <check_boot_pgdir+0x26d>
c01066c8:	c7 44 24 0c 38 e5 10 	movl   $0xc010e538,0xc(%esp)
c01066cf:	c0 
c01066d0:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01066d7:	c0 
c01066d8:	c7 44 24 04 bf 02 00 	movl   $0x2bf,0x4(%esp)
c01066df:	00 
c01066e0:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01066e7:	e8 ee a6 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p) == 2);
c01066ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01066ef:	89 04 24             	mov    %eax,(%esp)
c01066f2:	e8 1b e5 ff ff       	call   c0104c12 <page_ref>
c01066f7:	83 f8 02             	cmp    $0x2,%eax
c01066fa:	74 24                	je     c0106720 <check_boot_pgdir+0x2a1>
c01066fc:	c7 44 24 0c 6f e5 10 	movl   $0xc010e56f,0xc(%esp)
c0106703:	c0 
c0106704:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c010670b:	c0 
c010670c:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c0106713:	00 
c0106714:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c010671b:	e8 ba a6 ff ff       	call   c0100dda <__panic>

    const char *str = "ucore: Hello world!!";
c0106720:	c7 45 dc 80 e5 10 c0 	movl   $0xc010e580,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106727:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010672a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010672e:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106735:	e8 c6 66 00 00       	call   c010ce00 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c010673a:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106741:	00 
c0106742:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106749:	e8 2b 67 00 00       	call   c010ce79 <strcmp>
c010674e:	85 c0                	test   %eax,%eax
c0106750:	74 24                	je     c0106776 <check_boot_pgdir+0x2f7>
c0106752:	c7 44 24 0c 98 e5 10 	movl   $0xc010e598,0xc(%esp)
c0106759:	c0 
c010675a:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c0106761:	c0 
c0106762:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c0106769:	00 
c010676a:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0106771:	e8 64 a6 ff ff       	call   c0100dda <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106776:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106779:	89 04 24             	mov    %eax,(%esp)
c010677c:	e8 e7 e3 ff ff       	call   c0104b68 <page2kva>
c0106781:	05 00 01 00 00       	add    $0x100,%eax
c0106786:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106789:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106790:	e8 13 66 00 00       	call   c010cda8 <strlen>
c0106795:	85 c0                	test   %eax,%eax
c0106797:	74 24                	je     c01067bd <check_boot_pgdir+0x33e>
c0106799:	c7 44 24 0c d0 e5 10 	movl   $0xc010e5d0,0xc(%esp)
c01067a0:	c0 
c01067a1:	c7 44 24 08 f9 e0 10 	movl   $0xc010e0f9,0x8(%esp)
c01067a8:	c0 
c01067a9:	c7 44 24 04 c7 02 00 	movl   $0x2c7,0x4(%esp)
c01067b0:	00 
c01067b1:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c01067b8:	e8 1d a6 ff ff       	call   c0100dda <__panic>

    free_page(p);
c01067bd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01067c4:	00 
c01067c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01067c8:	89 04 24             	mov    %eax,(%esp)
c01067cb:	e8 b2 e6 ff ff       	call   c0104e82 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c01067d0:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c01067d5:	8b 00                	mov    (%eax),%eax
c01067d7:	89 04 24             	mov    %eax,(%esp)
c01067da:	e8 1b e4 ff ff       	call   c0104bfa <pde2page>
c01067df:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01067e6:	00 
c01067e7:	89 04 24             	mov    %eax,(%esp)
c01067ea:	e8 93 e6 ff ff       	call   c0104e82 <free_pages>
    boot_pgdir[0] = 0;
c01067ef:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c01067f4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c01067fa:	c7 04 24 f4 e5 10 c0 	movl   $0xc010e5f4,(%esp)
c0106801:	e8 52 9b ff ff       	call   c0100358 <cprintf>
}
c0106806:	c9                   	leave  
c0106807:	c3                   	ret    

c0106808 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106808:	55                   	push   %ebp
c0106809:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c010680b:	8b 45 08             	mov    0x8(%ebp),%eax
c010680e:	83 e0 04             	and    $0x4,%eax
c0106811:	85 c0                	test   %eax,%eax
c0106813:	74 07                	je     c010681c <perm2str+0x14>
c0106815:	b8 75 00 00 00       	mov    $0x75,%eax
c010681a:	eb 05                	jmp    c0106821 <perm2str+0x19>
c010681c:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106821:	a2 28 24 1c c0       	mov    %al,0xc01c2428
    str[1] = 'r';
c0106826:	c6 05 29 24 1c c0 72 	movb   $0x72,0xc01c2429
    str[2] = (perm & PTE_W) ? 'w' : '-';
c010682d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106830:	83 e0 02             	and    $0x2,%eax
c0106833:	85 c0                	test   %eax,%eax
c0106835:	74 07                	je     c010683e <perm2str+0x36>
c0106837:	b8 77 00 00 00       	mov    $0x77,%eax
c010683c:	eb 05                	jmp    c0106843 <perm2str+0x3b>
c010683e:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106843:	a2 2a 24 1c c0       	mov    %al,0xc01c242a
    str[3] = '\0';
c0106848:	c6 05 2b 24 1c c0 00 	movb   $0x0,0xc01c242b
    return str;
c010684f:	b8 28 24 1c c0       	mov    $0xc01c2428,%eax
}
c0106854:	5d                   	pop    %ebp
c0106855:	c3                   	ret    

c0106856 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106856:	55                   	push   %ebp
c0106857:	89 e5                	mov    %esp,%ebp
c0106859:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c010685c:	8b 45 10             	mov    0x10(%ebp),%eax
c010685f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106862:	72 0a                	jb     c010686e <get_pgtable_items+0x18>
        return 0;
c0106864:	b8 00 00 00 00       	mov    $0x0,%eax
c0106869:	e9 9c 00 00 00       	jmp    c010690a <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c010686e:	eb 04                	jmp    c0106874 <get_pgtable_items+0x1e>
        start ++;
c0106870:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106874:	8b 45 10             	mov    0x10(%ebp),%eax
c0106877:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010687a:	73 18                	jae    c0106894 <get_pgtable_items+0x3e>
c010687c:	8b 45 10             	mov    0x10(%ebp),%eax
c010687f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106886:	8b 45 14             	mov    0x14(%ebp),%eax
c0106889:	01 d0                	add    %edx,%eax
c010688b:	8b 00                	mov    (%eax),%eax
c010688d:	83 e0 01             	and    $0x1,%eax
c0106890:	85 c0                	test   %eax,%eax
c0106892:	74 dc                	je     c0106870 <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106894:	8b 45 10             	mov    0x10(%ebp),%eax
c0106897:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010689a:	73 69                	jae    c0106905 <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c010689c:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01068a0:	74 08                	je     c01068aa <get_pgtable_items+0x54>
            *left_store = start;
c01068a2:	8b 45 18             	mov    0x18(%ebp),%eax
c01068a5:	8b 55 10             	mov    0x10(%ebp),%edx
c01068a8:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c01068aa:	8b 45 10             	mov    0x10(%ebp),%eax
c01068ad:	8d 50 01             	lea    0x1(%eax),%edx
c01068b0:	89 55 10             	mov    %edx,0x10(%ebp)
c01068b3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01068ba:	8b 45 14             	mov    0x14(%ebp),%eax
c01068bd:	01 d0                	add    %edx,%eax
c01068bf:	8b 00                	mov    (%eax),%eax
c01068c1:	83 e0 07             	and    $0x7,%eax
c01068c4:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c01068c7:	eb 04                	jmp    c01068cd <get_pgtable_items+0x77>
            start ++;
c01068c9:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c01068cd:	8b 45 10             	mov    0x10(%ebp),%eax
c01068d0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01068d3:	73 1d                	jae    c01068f2 <get_pgtable_items+0x9c>
c01068d5:	8b 45 10             	mov    0x10(%ebp),%eax
c01068d8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01068df:	8b 45 14             	mov    0x14(%ebp),%eax
c01068e2:	01 d0                	add    %edx,%eax
c01068e4:	8b 00                	mov    (%eax),%eax
c01068e6:	83 e0 07             	and    $0x7,%eax
c01068e9:	89 c2                	mov    %eax,%edx
c01068eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01068ee:	39 c2                	cmp    %eax,%edx
c01068f0:	74 d7                	je     c01068c9 <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c01068f2:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01068f6:	74 08                	je     c0106900 <get_pgtable_items+0xaa>
            *right_store = start;
c01068f8:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01068fb:	8b 55 10             	mov    0x10(%ebp),%edx
c01068fe:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106900:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106903:	eb 05                	jmp    c010690a <get_pgtable_items+0xb4>
    }
    return 0;
c0106905:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010690a:	c9                   	leave  
c010690b:	c3                   	ret    

c010690c <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c010690c:	55                   	push   %ebp
c010690d:	89 e5                	mov    %esp,%ebp
c010690f:	57                   	push   %edi
c0106910:	56                   	push   %esi
c0106911:	53                   	push   %ebx
c0106912:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106915:	c7 04 24 14 e6 10 c0 	movl   $0xc010e614,(%esp)
c010691c:	e8 37 9a ff ff       	call   c0100358 <cprintf>
    size_t left, right = 0, perm;
c0106921:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106928:	e9 fa 00 00 00       	jmp    c0106a27 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c010692d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106930:	89 04 24             	mov    %eax,(%esp)
c0106933:	e8 d0 fe ff ff       	call   c0106808 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106938:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010693b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010693e:	29 d1                	sub    %edx,%ecx
c0106940:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106942:	89 d6                	mov    %edx,%esi
c0106944:	c1 e6 16             	shl    $0x16,%esi
c0106947:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010694a:	89 d3                	mov    %edx,%ebx
c010694c:	c1 e3 16             	shl    $0x16,%ebx
c010694f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106952:	89 d1                	mov    %edx,%ecx
c0106954:	c1 e1 16             	shl    $0x16,%ecx
c0106957:	8b 7d dc             	mov    -0x24(%ebp),%edi
c010695a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010695d:	29 d7                	sub    %edx,%edi
c010695f:	89 fa                	mov    %edi,%edx
c0106961:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106965:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106969:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010696d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106971:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106975:	c7 04 24 45 e6 10 c0 	movl   $0xc010e645,(%esp)
c010697c:	e8 d7 99 ff ff       	call   c0100358 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106981:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106984:	c1 e0 0a             	shl    $0xa,%eax
c0106987:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c010698a:	eb 54                	jmp    c01069e0 <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c010698c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010698f:	89 04 24             	mov    %eax,(%esp)
c0106992:	e8 71 fe ff ff       	call   c0106808 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106997:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010699a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010699d:	29 d1                	sub    %edx,%ecx
c010699f:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01069a1:	89 d6                	mov    %edx,%esi
c01069a3:	c1 e6 0c             	shl    $0xc,%esi
c01069a6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01069a9:	89 d3                	mov    %edx,%ebx
c01069ab:	c1 e3 0c             	shl    $0xc,%ebx
c01069ae:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01069b1:	c1 e2 0c             	shl    $0xc,%edx
c01069b4:	89 d1                	mov    %edx,%ecx
c01069b6:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c01069b9:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01069bc:	29 d7                	sub    %edx,%edi
c01069be:	89 fa                	mov    %edi,%edx
c01069c0:	89 44 24 14          	mov    %eax,0x14(%esp)
c01069c4:	89 74 24 10          	mov    %esi,0x10(%esp)
c01069c8:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01069cc:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01069d0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01069d4:	c7 04 24 64 e6 10 c0 	movl   $0xc010e664,(%esp)
c01069db:	e8 78 99 ff ff       	call   c0100358 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c01069e0:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c01069e5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01069e8:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01069eb:	89 ce                	mov    %ecx,%esi
c01069ed:	c1 e6 0a             	shl    $0xa,%esi
c01069f0:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01069f3:	89 cb                	mov    %ecx,%ebx
c01069f5:	c1 e3 0a             	shl    $0xa,%ebx
c01069f8:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c01069fb:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c01069ff:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106a02:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106a06:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106a0a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106a0e:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106a12:	89 1c 24             	mov    %ebx,(%esp)
c0106a15:	e8 3c fe ff ff       	call   c0106856 <get_pgtable_items>
c0106a1a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106a1d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106a21:	0f 85 65 ff ff ff    	jne    c010698c <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106a27:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106a2c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a2f:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106a32:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106a36:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106a39:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106a3d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106a41:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106a45:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106a4c:	00 
c0106a4d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106a54:	e8 fd fd ff ff       	call   c0106856 <get_pgtable_items>
c0106a59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106a5c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106a60:	0f 85 c7 fe ff ff    	jne    c010692d <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106a66:	c7 04 24 88 e6 10 c0 	movl   $0xc010e688,(%esp)
c0106a6d:	e8 e6 98 ff ff       	call   c0100358 <cprintf>
}
c0106a72:	83 c4 4c             	add    $0x4c,%esp
c0106a75:	5b                   	pop    %ebx
c0106a76:	5e                   	pop    %esi
c0106a77:	5f                   	pop    %edi
c0106a78:	5d                   	pop    %ebp
c0106a79:	c3                   	ret    

c0106a7a <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106a7a:	55                   	push   %ebp
c0106a7b:	89 e5                	mov    %esp,%ebp
c0106a7d:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106a80:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a83:	c1 e8 0c             	shr    $0xc,%eax
c0106a86:	89 c2                	mov    %eax,%edx
c0106a88:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c0106a8d:	39 c2                	cmp    %eax,%edx
c0106a8f:	72 1c                	jb     c0106aad <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106a91:	c7 44 24 08 bc e6 10 	movl   $0xc010e6bc,0x8(%esp)
c0106a98:	c0 
c0106a99:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106aa0:	00 
c0106aa1:	c7 04 24 db e6 10 c0 	movl   $0xc010e6db,(%esp)
c0106aa8:	e8 2d a3 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0106aad:	a1 f0 44 1c c0       	mov    0xc01c44f0,%eax
c0106ab2:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ab5:	c1 ea 0c             	shr    $0xc,%edx
c0106ab8:	c1 e2 05             	shl    $0x5,%edx
c0106abb:	01 d0                	add    %edx,%eax
}
c0106abd:	c9                   	leave  
c0106abe:	c3                   	ret    

c0106abf <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106abf:	55                   	push   %ebp
c0106ac0:	89 e5                	mov    %esp,%ebp
c0106ac2:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106ac5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ac8:	83 e0 01             	and    $0x1,%eax
c0106acb:	85 c0                	test   %eax,%eax
c0106acd:	75 1c                	jne    c0106aeb <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106acf:	c7 44 24 08 ec e6 10 	movl   $0xc010e6ec,0x8(%esp)
c0106ad6:	c0 
c0106ad7:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106ade:	00 
c0106adf:	c7 04 24 db e6 10 c0 	movl   $0xc010e6db,(%esp)
c0106ae6:	e8 ef a2 ff ff       	call   c0100dda <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106aeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106aee:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106af3:	89 04 24             	mov    %eax,(%esp)
c0106af6:	e8 7f ff ff ff       	call   c0106a7a <pa2page>
}
c0106afb:	c9                   	leave  
c0106afc:	c3                   	ret    

c0106afd <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106afd:	55                   	push   %ebp
c0106afe:	89 e5                	mov    %esp,%ebp
c0106b00:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0106b03:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b06:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106b0b:	89 04 24             	mov    %eax,(%esp)
c0106b0e:	e8 67 ff ff ff       	call   c0106a7a <pa2page>
}
c0106b13:	c9                   	leave  
c0106b14:	c3                   	ret    

c0106b15 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106b15:	55                   	push   %ebp
c0106b16:	89 e5                	mov    %esp,%ebp
c0106b18:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106b1b:	e8 79 32 00 00       	call   c0109d99 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106b20:	a1 9c 45 1c c0       	mov    0xc01c459c,%eax
c0106b25:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106b2a:	76 0c                	jbe    c0106b38 <swap_init+0x23>
c0106b2c:	a1 9c 45 1c c0       	mov    0xc01c459c,%eax
c0106b31:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106b36:	76 25                	jbe    c0106b5d <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106b38:	a1 9c 45 1c c0       	mov    0xc01c459c,%eax
c0106b3d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106b41:	c7 44 24 08 0d e7 10 	movl   $0xc010e70d,0x8(%esp)
c0106b48:	c0 
c0106b49:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106b50:	00 
c0106b51:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0106b58:	e8 7d a2 ff ff       	call   c0100dda <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106b5d:	c7 05 34 24 1c c0 60 	movl   $0xc0130a60,0xc01c2434
c0106b64:	0a 13 c0 
     int r = sm->init();
c0106b67:	a1 34 24 1c c0       	mov    0xc01c2434,%eax
c0106b6c:	8b 40 04             	mov    0x4(%eax),%eax
c0106b6f:	ff d0                	call   *%eax
c0106b71:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106b74:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106b78:	75 26                	jne    c0106ba0 <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106b7a:	c7 05 2c 24 1c c0 01 	movl   $0x1,0xc01c242c
c0106b81:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106b84:	a1 34 24 1c c0       	mov    0xc01c2434,%eax
c0106b89:	8b 00                	mov    (%eax),%eax
c0106b8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106b8f:	c7 04 24 37 e7 10 c0 	movl   $0xc010e737,(%esp)
c0106b96:	e8 bd 97 ff ff       	call   c0100358 <cprintf>
          check_swap();
c0106b9b:	e8 a4 04 00 00       	call   c0107044 <check_swap>
     }

     return r;
c0106ba0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106ba3:	c9                   	leave  
c0106ba4:	c3                   	ret    

c0106ba5 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106ba5:	55                   	push   %ebp
c0106ba6:	89 e5                	mov    %esp,%ebp
c0106ba8:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106bab:	a1 34 24 1c c0       	mov    0xc01c2434,%eax
c0106bb0:	8b 40 08             	mov    0x8(%eax),%eax
c0106bb3:	8b 55 08             	mov    0x8(%ebp),%edx
c0106bb6:	89 14 24             	mov    %edx,(%esp)
c0106bb9:	ff d0                	call   *%eax
}
c0106bbb:	c9                   	leave  
c0106bbc:	c3                   	ret    

c0106bbd <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106bbd:	55                   	push   %ebp
c0106bbe:	89 e5                	mov    %esp,%ebp
c0106bc0:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106bc3:	a1 34 24 1c c0       	mov    0xc01c2434,%eax
c0106bc8:	8b 40 0c             	mov    0xc(%eax),%eax
c0106bcb:	8b 55 08             	mov    0x8(%ebp),%edx
c0106bce:	89 14 24             	mov    %edx,(%esp)
c0106bd1:	ff d0                	call   *%eax
}
c0106bd3:	c9                   	leave  
c0106bd4:	c3                   	ret    

c0106bd5 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106bd5:	55                   	push   %ebp
c0106bd6:	89 e5                	mov    %esp,%ebp
c0106bd8:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106bdb:	a1 34 24 1c c0       	mov    0xc01c2434,%eax
c0106be0:	8b 40 10             	mov    0x10(%eax),%eax
c0106be3:	8b 55 14             	mov    0x14(%ebp),%edx
c0106be6:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106bea:	8b 55 10             	mov    0x10(%ebp),%edx
c0106bed:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106bf1:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106bf4:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106bf8:	8b 55 08             	mov    0x8(%ebp),%edx
c0106bfb:	89 14 24             	mov    %edx,(%esp)
c0106bfe:	ff d0                	call   *%eax
}
c0106c00:	c9                   	leave  
c0106c01:	c3                   	ret    

c0106c02 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106c02:	55                   	push   %ebp
c0106c03:	89 e5                	mov    %esp,%ebp
c0106c05:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106c08:	a1 34 24 1c c0       	mov    0xc01c2434,%eax
c0106c0d:	8b 40 14             	mov    0x14(%eax),%eax
c0106c10:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106c13:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106c17:	8b 55 08             	mov    0x8(%ebp),%edx
c0106c1a:	89 14 24             	mov    %edx,(%esp)
c0106c1d:	ff d0                	call   *%eax
}
c0106c1f:	c9                   	leave  
c0106c20:	c3                   	ret    

c0106c21 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106c21:	55                   	push   %ebp
c0106c22:	89 e5                	mov    %esp,%ebp
c0106c24:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106c27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106c2e:	e9 5a 01 00 00       	jmp    c0106d8d <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106c33:	a1 34 24 1c c0       	mov    0xc01c2434,%eax
c0106c38:	8b 40 18             	mov    0x18(%eax),%eax
c0106c3b:	8b 55 10             	mov    0x10(%ebp),%edx
c0106c3e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106c42:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0106c45:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106c49:	8b 55 08             	mov    0x8(%ebp),%edx
c0106c4c:	89 14 24             	mov    %edx,(%esp)
c0106c4f:	ff d0                	call   *%eax
c0106c51:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106c54:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106c58:	74 18                	je     c0106c72 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106c5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c5d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106c61:	c7 04 24 4c e7 10 c0 	movl   $0xc010e74c,(%esp)
c0106c68:	e8 eb 96 ff ff       	call   c0100358 <cprintf>
c0106c6d:	e9 27 01 00 00       	jmp    c0106d99 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106c72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c75:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106c78:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106c7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c7e:	8b 40 0c             	mov    0xc(%eax),%eax
c0106c81:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106c88:	00 
c0106c89:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106c8c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106c90:	89 04 24             	mov    %eax,(%esp)
c0106c93:	e8 e6 e8 ff ff       	call   c010557e <get_pte>
c0106c98:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0106c9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106c9e:	8b 00                	mov    (%eax),%eax
c0106ca0:	83 e0 01             	and    $0x1,%eax
c0106ca3:	85 c0                	test   %eax,%eax
c0106ca5:	75 24                	jne    c0106ccb <swap_out+0xaa>
c0106ca7:	c7 44 24 0c 79 e7 10 	movl   $0xc010e779,0xc(%esp)
c0106cae:	c0 
c0106caf:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0106cb6:	c0 
c0106cb7:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0106cbe:	00 
c0106cbf:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0106cc6:	e8 0f a1 ff ff       	call   c0100dda <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0106ccb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106cce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106cd1:	8b 52 1c             	mov    0x1c(%edx),%edx
c0106cd4:	c1 ea 0c             	shr    $0xc,%edx
c0106cd7:	83 c2 01             	add    $0x1,%edx
c0106cda:	c1 e2 08             	shl    $0x8,%edx
c0106cdd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106ce1:	89 14 24             	mov    %edx,(%esp)
c0106ce4:	e8 6a 31 00 00       	call   c0109e53 <swapfs_write>
c0106ce9:	85 c0                	test   %eax,%eax
c0106ceb:	74 34                	je     c0106d21 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0106ced:	c7 04 24 a3 e7 10 c0 	movl   $0xc010e7a3,(%esp)
c0106cf4:	e8 5f 96 ff ff       	call   c0100358 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0106cf9:	a1 34 24 1c c0       	mov    0xc01c2434,%eax
c0106cfe:	8b 40 10             	mov    0x10(%eax),%eax
c0106d01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106d04:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106d0b:	00 
c0106d0c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106d10:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106d13:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106d17:	8b 55 08             	mov    0x8(%ebp),%edx
c0106d1a:	89 14 24             	mov    %edx,(%esp)
c0106d1d:	ff d0                	call   *%eax
c0106d1f:	eb 68                	jmp    c0106d89 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0106d21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d24:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106d27:	c1 e8 0c             	shr    $0xc,%eax
c0106d2a:	83 c0 01             	add    $0x1,%eax
c0106d2d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106d31:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106d34:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106d3b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106d3f:	c7 04 24 bc e7 10 c0 	movl   $0xc010e7bc,(%esp)
c0106d46:	e8 0d 96 ff ff       	call   c0100358 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0106d4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d4e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106d51:	c1 e8 0c             	shr    $0xc,%eax
c0106d54:	83 c0 01             	add    $0x1,%eax
c0106d57:	c1 e0 08             	shl    $0x8,%eax
c0106d5a:	89 c2                	mov    %eax,%edx
c0106d5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106d5f:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0106d61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d64:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106d6b:	00 
c0106d6c:	89 04 24             	mov    %eax,(%esp)
c0106d6f:	e8 0e e1 ff ff       	call   c0104e82 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0106d74:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d77:	8b 40 0c             	mov    0xc(%eax),%eax
c0106d7a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106d7d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106d81:	89 04 24             	mov    %eax,(%esp)
c0106d84:	e8 0c ef ff ff       	call   c0105c95 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0106d89:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106d8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106d90:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106d93:	0f 85 9a fe ff ff    	jne    c0106c33 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0106d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106d9c:	c9                   	leave  
c0106d9d:	c3                   	ret    

c0106d9e <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0106d9e:	55                   	push   %ebp
c0106d9f:	89 e5                	mov    %esp,%ebp
c0106da1:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c0106da4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106dab:	e8 67 e0 ff ff       	call   c0104e17 <alloc_pages>
c0106db0:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0106db3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106db7:	75 24                	jne    c0106ddd <swap_in+0x3f>
c0106db9:	c7 44 24 0c fc e7 10 	movl   $0xc010e7fc,0xc(%esp)
c0106dc0:	c0 
c0106dc1:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0106dc8:	c0 
c0106dc9:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0106dd0:	00 
c0106dd1:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0106dd8:	e8 fd 9f ff ff       	call   c0100dda <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0106ddd:	8b 45 08             	mov    0x8(%ebp),%eax
c0106de0:	8b 40 0c             	mov    0xc(%eax),%eax
c0106de3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106dea:	00 
c0106deb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106dee:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106df2:	89 04 24             	mov    %eax,(%esp)
c0106df5:	e8 84 e7 ff ff       	call   c010557e <get_pte>
c0106dfa:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0106dfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106e00:	8b 00                	mov    (%eax),%eax
c0106e02:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106e05:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e09:	89 04 24             	mov    %eax,(%esp)
c0106e0c:	e8 d0 2f 00 00       	call   c0109de1 <swapfs_read>
c0106e11:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106e14:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106e18:	74 2a                	je     c0106e44 <swap_in+0xa6>
     {
        assert(r!=0);
c0106e1a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106e1e:	75 24                	jne    c0106e44 <swap_in+0xa6>
c0106e20:	c7 44 24 0c 09 e8 10 	movl   $0xc010e809,0xc(%esp)
c0106e27:	c0 
c0106e28:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0106e2f:	c0 
c0106e30:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0106e37:	00 
c0106e38:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0106e3f:	e8 96 9f ff ff       	call   c0100dda <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0106e44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106e47:	8b 00                	mov    (%eax),%eax
c0106e49:	c1 e8 08             	shr    $0x8,%eax
c0106e4c:	89 c2                	mov    %eax,%edx
c0106e4e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106e51:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106e55:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e59:	c7 04 24 10 e8 10 c0 	movl   $0xc010e810,(%esp)
c0106e60:	e8 f3 94 ff ff       	call   c0100358 <cprintf>
     *ptr_result=result;
c0106e65:	8b 45 10             	mov    0x10(%ebp),%eax
c0106e68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106e6b:	89 10                	mov    %edx,(%eax)
     return 0;
c0106e6d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106e72:	c9                   	leave  
c0106e73:	c3                   	ret    

c0106e74 <check_content_set>:



static inline void
check_content_set(void)
{
c0106e74:	55                   	push   %ebp
c0106e75:	89 e5                	mov    %esp,%ebp
c0106e77:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0106e7a:	b8 00 10 00 00       	mov    $0x1000,%eax
c0106e7f:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0106e82:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c0106e87:	83 f8 01             	cmp    $0x1,%eax
c0106e8a:	74 24                	je     c0106eb0 <check_content_set+0x3c>
c0106e8c:	c7 44 24 0c 4e e8 10 	movl   $0xc010e84e,0xc(%esp)
c0106e93:	c0 
c0106e94:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0106e9b:	c0 
c0106e9c:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c0106ea3:	00 
c0106ea4:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0106eab:	e8 2a 9f ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0106eb0:	b8 10 10 00 00       	mov    $0x1010,%eax
c0106eb5:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0106eb8:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c0106ebd:	83 f8 01             	cmp    $0x1,%eax
c0106ec0:	74 24                	je     c0106ee6 <check_content_set+0x72>
c0106ec2:	c7 44 24 0c 4e e8 10 	movl   $0xc010e84e,0xc(%esp)
c0106ec9:	c0 
c0106eca:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0106ed1:	c0 
c0106ed2:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0106ed9:	00 
c0106eda:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0106ee1:	e8 f4 9e ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0106ee6:	b8 00 20 00 00       	mov    $0x2000,%eax
c0106eeb:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0106eee:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c0106ef3:	83 f8 02             	cmp    $0x2,%eax
c0106ef6:	74 24                	je     c0106f1c <check_content_set+0xa8>
c0106ef8:	c7 44 24 0c 5d e8 10 	movl   $0xc010e85d,0xc(%esp)
c0106eff:	c0 
c0106f00:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0106f07:	c0 
c0106f08:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c0106f0f:	00 
c0106f10:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0106f17:	e8 be 9e ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0106f1c:	b8 10 20 00 00       	mov    $0x2010,%eax
c0106f21:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0106f24:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c0106f29:	83 f8 02             	cmp    $0x2,%eax
c0106f2c:	74 24                	je     c0106f52 <check_content_set+0xde>
c0106f2e:	c7 44 24 0c 5d e8 10 	movl   $0xc010e85d,0xc(%esp)
c0106f35:	c0 
c0106f36:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0106f3d:	c0 
c0106f3e:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0106f45:	00 
c0106f46:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0106f4d:	e8 88 9e ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0106f52:	b8 00 30 00 00       	mov    $0x3000,%eax
c0106f57:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0106f5a:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c0106f5f:	83 f8 03             	cmp    $0x3,%eax
c0106f62:	74 24                	je     c0106f88 <check_content_set+0x114>
c0106f64:	c7 44 24 0c 6c e8 10 	movl   $0xc010e86c,0xc(%esp)
c0106f6b:	c0 
c0106f6c:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0106f73:	c0 
c0106f74:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c0106f7b:	00 
c0106f7c:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0106f83:	e8 52 9e ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0106f88:	b8 10 30 00 00       	mov    $0x3010,%eax
c0106f8d:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0106f90:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c0106f95:	83 f8 03             	cmp    $0x3,%eax
c0106f98:	74 24                	je     c0106fbe <check_content_set+0x14a>
c0106f9a:	c7 44 24 0c 6c e8 10 	movl   $0xc010e86c,0xc(%esp)
c0106fa1:	c0 
c0106fa2:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0106fa9:	c0 
c0106faa:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c0106fb1:	00 
c0106fb2:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0106fb9:	e8 1c 9e ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0106fbe:	b8 00 40 00 00       	mov    $0x4000,%eax
c0106fc3:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0106fc6:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c0106fcb:	83 f8 04             	cmp    $0x4,%eax
c0106fce:	74 24                	je     c0106ff4 <check_content_set+0x180>
c0106fd0:	c7 44 24 0c 7b e8 10 	movl   $0xc010e87b,0xc(%esp)
c0106fd7:	c0 
c0106fd8:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0106fdf:	c0 
c0106fe0:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c0106fe7:	00 
c0106fe8:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0106fef:	e8 e6 9d ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0106ff4:	b8 10 40 00 00       	mov    $0x4010,%eax
c0106ff9:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0106ffc:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c0107001:	83 f8 04             	cmp    $0x4,%eax
c0107004:	74 24                	je     c010702a <check_content_set+0x1b6>
c0107006:	c7 44 24 0c 7b e8 10 	movl   $0xc010e87b,0xc(%esp)
c010700d:	c0 
c010700e:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0107015:	c0 
c0107016:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010701d:	00 
c010701e:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0107025:	e8 b0 9d ff ff       	call   c0100dda <__panic>
}
c010702a:	c9                   	leave  
c010702b:	c3                   	ret    

c010702c <check_content_access>:

static inline int
check_content_access(void)
{
c010702c:	55                   	push   %ebp
c010702d:	89 e5                	mov    %esp,%ebp
c010702f:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0107032:	a1 34 24 1c c0       	mov    0xc01c2434,%eax
c0107037:	8b 40 1c             	mov    0x1c(%eax),%eax
c010703a:	ff d0                	call   *%eax
c010703c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c010703f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107042:	c9                   	leave  
c0107043:	c3                   	ret    

c0107044 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0107044:	55                   	push   %ebp
c0107045:	89 e5                	mov    %esp,%ebp
c0107047:	53                   	push   %ebx
c0107048:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c010704b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107052:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0107059:	c7 45 e8 dc 44 1c c0 	movl   $0xc01c44dc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107060:	eb 6b                	jmp    c01070cd <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c0107062:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107065:	83 e8 0c             	sub    $0xc,%eax
c0107068:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c010706b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010706e:	83 c0 04             	add    $0x4,%eax
c0107071:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0107078:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010707b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010707e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0107081:	0f a3 10             	bt     %edx,(%eax)
c0107084:	19 c0                	sbb    %eax,%eax
c0107086:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c0107089:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010708d:	0f 95 c0             	setne  %al
c0107090:	0f b6 c0             	movzbl %al,%eax
c0107093:	85 c0                	test   %eax,%eax
c0107095:	75 24                	jne    c01070bb <check_swap+0x77>
c0107097:	c7 44 24 0c 8a e8 10 	movl   $0xc010e88a,0xc(%esp)
c010709e:	c0 
c010709f:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c01070a6:	c0 
c01070a7:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c01070ae:	00 
c01070af:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c01070b6:	e8 1f 9d ff ff       	call   c0100dda <__panic>
        count ++, total += p->property;
c01070bb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01070bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070c2:	8b 50 08             	mov    0x8(%eax),%edx
c01070c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01070c8:	01 d0                	add    %edx,%eax
c01070ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01070cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01070d0:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01070d3:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01070d6:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01070d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01070dc:	81 7d e8 dc 44 1c c0 	cmpl   $0xc01c44dc,-0x18(%ebp)
c01070e3:	0f 85 79 ff ff ff    	jne    c0107062 <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c01070e9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01070ec:	e8 c3 dd ff ff       	call   c0104eb4 <nr_free_pages>
c01070f1:	39 c3                	cmp    %eax,%ebx
c01070f3:	74 24                	je     c0107119 <check_swap+0xd5>
c01070f5:	c7 44 24 0c 9a e8 10 	movl   $0xc010e89a,0xc(%esp)
c01070fc:	c0 
c01070fd:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0107104:	c0 
c0107105:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c010710c:	00 
c010710d:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0107114:	e8 c1 9c ff ff       	call   c0100dda <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0107119:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010711c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107120:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107123:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107127:	c7 04 24 b4 e8 10 c0 	movl   $0xc010e8b4,(%esp)
c010712e:	e8 25 92 ff ff       	call   c0100358 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0107133:	e8 50 0a 00 00       	call   c0107b88 <mm_create>
c0107138:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c010713b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010713f:	75 24                	jne    c0107165 <check_swap+0x121>
c0107141:	c7 44 24 0c da e8 10 	movl   $0xc010e8da,0xc(%esp)
c0107148:	c0 
c0107149:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0107150:	c0 
c0107151:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0107158:	00 
c0107159:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0107160:	e8 75 9c ff ff       	call   c0100dda <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107165:	a1 cc 45 1c c0       	mov    0xc01c45cc,%eax
c010716a:	85 c0                	test   %eax,%eax
c010716c:	74 24                	je     c0107192 <check_swap+0x14e>
c010716e:	c7 44 24 0c e5 e8 10 	movl   $0xc010e8e5,0xc(%esp)
c0107175:	c0 
c0107176:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c010717d:	c0 
c010717e:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0107185:	00 
c0107186:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c010718d:	e8 48 9c ff ff       	call   c0100dda <__panic>

     check_mm_struct = mm;
c0107192:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107195:	a3 cc 45 1c c0       	mov    %eax,0xc01c45cc

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c010719a:	8b 15 a4 23 1c c0    	mov    0xc01c23a4,%edx
c01071a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01071a3:	89 50 0c             	mov    %edx,0xc(%eax)
c01071a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01071a9:	8b 40 0c             	mov    0xc(%eax),%eax
c01071ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c01071af:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01071b2:	8b 00                	mov    (%eax),%eax
c01071b4:	85 c0                	test   %eax,%eax
c01071b6:	74 24                	je     c01071dc <check_swap+0x198>
c01071b8:	c7 44 24 0c fd e8 10 	movl   $0xc010e8fd,0xc(%esp)
c01071bf:	c0 
c01071c0:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c01071c7:	c0 
c01071c8:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c01071cf:	00 
c01071d0:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c01071d7:	e8 fe 9b ff ff       	call   c0100dda <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c01071dc:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c01071e3:	00 
c01071e4:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c01071eb:	00 
c01071ec:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01071f3:	e8 35 0a 00 00       	call   c0107c2d <vma_create>
c01071f8:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c01071fb:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01071ff:	75 24                	jne    c0107225 <check_swap+0x1e1>
c0107201:	c7 44 24 0c 0b e9 10 	movl   $0xc010e90b,0xc(%esp)
c0107208:	c0 
c0107209:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0107210:	c0 
c0107211:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0107218:	00 
c0107219:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0107220:	e8 b5 9b ff ff       	call   c0100dda <__panic>

     insert_vma_struct(mm, vma);
c0107225:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107228:	89 44 24 04          	mov    %eax,0x4(%esp)
c010722c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010722f:	89 04 24             	mov    %eax,(%esp)
c0107232:	e8 86 0b 00 00       	call   c0107dbd <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107237:	c7 04 24 18 e9 10 c0 	movl   $0xc010e918,(%esp)
c010723e:	e8 15 91 ff ff       	call   c0100358 <cprintf>
     pte_t *temp_ptep=NULL;
c0107243:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c010724a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010724d:	8b 40 0c             	mov    0xc(%eax),%eax
c0107250:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107257:	00 
c0107258:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010725f:	00 
c0107260:	89 04 24             	mov    %eax,(%esp)
c0107263:	e8 16 e3 ff ff       	call   c010557e <get_pte>
c0107268:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c010726b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c010726f:	75 24                	jne    c0107295 <check_swap+0x251>
c0107271:	c7 44 24 0c 4c e9 10 	movl   $0xc010e94c,0xc(%esp)
c0107278:	c0 
c0107279:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0107280:	c0 
c0107281:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0107288:	00 
c0107289:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0107290:	e8 45 9b ff ff       	call   c0100dda <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0107295:	c7 04 24 60 e9 10 c0 	movl   $0xc010e960,(%esp)
c010729c:	e8 b7 90 ff ff       	call   c0100358 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01072a1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01072a8:	e9 a3 00 00 00       	jmp    c0107350 <check_swap+0x30c>
          check_rp[i] = alloc_page();
c01072ad:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01072b4:	e8 5e db ff ff       	call   c0104e17 <alloc_pages>
c01072b9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01072bc:	89 04 95 00 45 1c c0 	mov    %eax,-0x3fe3bb00(,%edx,4)
          assert(check_rp[i] != NULL );
c01072c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01072c6:	8b 04 85 00 45 1c c0 	mov    -0x3fe3bb00(,%eax,4),%eax
c01072cd:	85 c0                	test   %eax,%eax
c01072cf:	75 24                	jne    c01072f5 <check_swap+0x2b1>
c01072d1:	c7 44 24 0c 84 e9 10 	movl   $0xc010e984,0xc(%esp)
c01072d8:	c0 
c01072d9:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c01072e0:	c0 
c01072e1:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c01072e8:	00 
c01072e9:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c01072f0:	e8 e5 9a ff ff       	call   c0100dda <__panic>
          assert(!PageProperty(check_rp[i]));
c01072f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01072f8:	8b 04 85 00 45 1c c0 	mov    -0x3fe3bb00(,%eax,4),%eax
c01072ff:	83 c0 04             	add    $0x4,%eax
c0107302:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0107309:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010730c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010730f:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107312:	0f a3 10             	bt     %edx,(%eax)
c0107315:	19 c0                	sbb    %eax,%eax
c0107317:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c010731a:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c010731e:	0f 95 c0             	setne  %al
c0107321:	0f b6 c0             	movzbl %al,%eax
c0107324:	85 c0                	test   %eax,%eax
c0107326:	74 24                	je     c010734c <check_swap+0x308>
c0107328:	c7 44 24 0c 98 e9 10 	movl   $0xc010e998,0xc(%esp)
c010732f:	c0 
c0107330:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0107337:	c0 
c0107338:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c010733f:	00 
c0107340:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0107347:	e8 8e 9a ff ff       	call   c0100dda <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010734c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107350:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107354:	0f 8e 53 ff ff ff    	jle    c01072ad <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c010735a:	a1 dc 44 1c c0       	mov    0xc01c44dc,%eax
c010735f:	8b 15 e0 44 1c c0    	mov    0xc01c44e0,%edx
c0107365:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107368:	89 55 9c             	mov    %edx,-0x64(%ebp)
c010736b:	c7 45 a8 dc 44 1c c0 	movl   $0xc01c44dc,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107372:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107375:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0107378:	89 50 04             	mov    %edx,0x4(%eax)
c010737b:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010737e:	8b 50 04             	mov    0x4(%eax),%edx
c0107381:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107384:	89 10                	mov    %edx,(%eax)
c0107386:	c7 45 a4 dc 44 1c c0 	movl   $0xc01c44dc,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010738d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107390:	8b 40 04             	mov    0x4(%eax),%eax
c0107393:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0107396:	0f 94 c0             	sete   %al
c0107399:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c010739c:	85 c0                	test   %eax,%eax
c010739e:	75 24                	jne    c01073c4 <check_swap+0x380>
c01073a0:	c7 44 24 0c b3 e9 10 	movl   $0xc010e9b3,0xc(%esp)
c01073a7:	c0 
c01073a8:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c01073af:	c0 
c01073b0:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01073b7:	00 
c01073b8:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c01073bf:	e8 16 9a ff ff       	call   c0100dda <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c01073c4:	a1 e4 44 1c c0       	mov    0xc01c44e4,%eax
c01073c9:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c01073cc:	c7 05 e4 44 1c c0 00 	movl   $0x0,0xc01c44e4
c01073d3:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01073d6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01073dd:	eb 1e                	jmp    c01073fd <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c01073df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01073e2:	8b 04 85 00 45 1c c0 	mov    -0x3fe3bb00(,%eax,4),%eax
c01073e9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01073f0:	00 
c01073f1:	89 04 24             	mov    %eax,(%esp)
c01073f4:	e8 89 da ff ff       	call   c0104e82 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01073f9:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01073fd:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107401:	7e dc                	jle    c01073df <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0107403:	a1 e4 44 1c c0       	mov    0xc01c44e4,%eax
c0107408:	83 f8 04             	cmp    $0x4,%eax
c010740b:	74 24                	je     c0107431 <check_swap+0x3ed>
c010740d:	c7 44 24 0c cc e9 10 	movl   $0xc010e9cc,0xc(%esp)
c0107414:	c0 
c0107415:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c010741c:	c0 
c010741d:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0107424:	00 
c0107425:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c010742c:	e8 a9 99 ff ff       	call   c0100dda <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0107431:	c7 04 24 f0 e9 10 c0 	movl   $0xc010e9f0,(%esp)
c0107438:	e8 1b 8f ff ff       	call   c0100358 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c010743d:	c7 05 38 24 1c c0 00 	movl   $0x0,0xc01c2438
c0107444:	00 00 00 
     
     check_content_set();
c0107447:	e8 28 fa ff ff       	call   c0106e74 <check_content_set>
     assert( nr_free == 0);         
c010744c:	a1 e4 44 1c c0       	mov    0xc01c44e4,%eax
c0107451:	85 c0                	test   %eax,%eax
c0107453:	74 24                	je     c0107479 <check_swap+0x435>
c0107455:	c7 44 24 0c 17 ea 10 	movl   $0xc010ea17,0xc(%esp)
c010745c:	c0 
c010745d:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0107464:	c0 
c0107465:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010746c:	00 
c010746d:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0107474:	e8 61 99 ff ff       	call   c0100dda <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107479:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107480:	eb 26                	jmp    c01074a8 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0107482:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107485:	c7 04 85 20 45 1c c0 	movl   $0xffffffff,-0x3fe3bae0(,%eax,4)
c010748c:	ff ff ff ff 
c0107490:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107493:	8b 14 85 20 45 1c c0 	mov    -0x3fe3bae0(,%eax,4),%edx
c010749a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010749d:	89 14 85 60 45 1c c0 	mov    %edx,-0x3fe3baa0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01074a4:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01074a8:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c01074ac:	7e d4                	jle    c0107482 <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01074ae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01074b5:	e9 eb 00 00 00       	jmp    c01075a5 <check_swap+0x561>
         check_ptep[i]=0;
c01074ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01074bd:	c7 04 85 b4 45 1c c0 	movl   $0x0,-0x3fe3ba4c(,%eax,4)
c01074c4:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c01074c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01074cb:	83 c0 01             	add    $0x1,%eax
c01074ce:	c1 e0 0c             	shl    $0xc,%eax
c01074d1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01074d8:	00 
c01074d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01074dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01074e0:	89 04 24             	mov    %eax,(%esp)
c01074e3:	e8 96 e0 ff ff       	call   c010557e <get_pte>
c01074e8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01074eb:	89 04 95 b4 45 1c c0 	mov    %eax,-0x3fe3ba4c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c01074f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01074f5:	8b 04 85 b4 45 1c c0 	mov    -0x3fe3ba4c(,%eax,4),%eax
c01074fc:	85 c0                	test   %eax,%eax
c01074fe:	75 24                	jne    c0107524 <check_swap+0x4e0>
c0107500:	c7 44 24 0c 24 ea 10 	movl   $0xc010ea24,0xc(%esp)
c0107507:	c0 
c0107508:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c010750f:	c0 
c0107510:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0107517:	00 
c0107518:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c010751f:	e8 b6 98 ff ff       	call   c0100dda <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0107524:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107527:	8b 04 85 b4 45 1c c0 	mov    -0x3fe3ba4c(,%eax,4),%eax
c010752e:	8b 00                	mov    (%eax),%eax
c0107530:	89 04 24             	mov    %eax,(%esp)
c0107533:	e8 87 f5 ff ff       	call   c0106abf <pte2page>
c0107538:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010753b:	8b 14 95 00 45 1c c0 	mov    -0x3fe3bb00(,%edx,4),%edx
c0107542:	39 d0                	cmp    %edx,%eax
c0107544:	74 24                	je     c010756a <check_swap+0x526>
c0107546:	c7 44 24 0c 3c ea 10 	movl   $0xc010ea3c,0xc(%esp)
c010754d:	c0 
c010754e:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c0107555:	c0 
c0107556:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010755d:	00 
c010755e:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c0107565:	e8 70 98 ff ff       	call   c0100dda <__panic>
         assert((*check_ptep[i] & PTE_P));          
c010756a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010756d:	8b 04 85 b4 45 1c c0 	mov    -0x3fe3ba4c(,%eax,4),%eax
c0107574:	8b 00                	mov    (%eax),%eax
c0107576:	83 e0 01             	and    $0x1,%eax
c0107579:	85 c0                	test   %eax,%eax
c010757b:	75 24                	jne    c01075a1 <check_swap+0x55d>
c010757d:	c7 44 24 0c 64 ea 10 	movl   $0xc010ea64,0xc(%esp)
c0107584:	c0 
c0107585:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c010758c:	c0 
c010758d:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0107594:	00 
c0107595:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c010759c:	e8 39 98 ff ff       	call   c0100dda <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01075a1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01075a5:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01075a9:	0f 8e 0b ff ff ff    	jle    c01074ba <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c01075af:	c7 04 24 80 ea 10 c0 	movl   $0xc010ea80,(%esp)
c01075b6:	e8 9d 8d ff ff       	call   c0100358 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c01075bb:	e8 6c fa ff ff       	call   c010702c <check_content_access>
c01075c0:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c01075c3:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01075c7:	74 24                	je     c01075ed <check_swap+0x5a9>
c01075c9:	c7 44 24 0c a6 ea 10 	movl   $0xc010eaa6,0xc(%esp)
c01075d0:	c0 
c01075d1:	c7 44 24 08 8e e7 10 	movl   $0xc010e78e,0x8(%esp)
c01075d8:	c0 
c01075d9:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c01075e0:	00 
c01075e1:	c7 04 24 28 e7 10 c0 	movl   $0xc010e728,(%esp)
c01075e8:	e8 ed 97 ff ff       	call   c0100dda <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01075ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01075f4:	eb 1e                	jmp    c0107614 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c01075f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075f9:	8b 04 85 00 45 1c c0 	mov    -0x3fe3bb00(,%eax,4),%eax
c0107600:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107607:	00 
c0107608:	89 04 24             	mov    %eax,(%esp)
c010760b:	e8 72 d8 ff ff       	call   c0104e82 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107610:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107614:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107618:	7e dc                	jle    c01075f6 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c010761a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010761d:	8b 00                	mov    (%eax),%eax
c010761f:	89 04 24             	mov    %eax,(%esp)
c0107622:	e8 d6 f4 ff ff       	call   c0106afd <pde2page>
c0107627:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010762e:	00 
c010762f:	89 04 24             	mov    %eax,(%esp)
c0107632:	e8 4b d8 ff ff       	call   c0104e82 <free_pages>
     pgdir[0] = 0;
c0107637:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010763a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0107640:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107643:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c010764a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010764d:	89 04 24             	mov    %eax,(%esp)
c0107650:	e8 98 08 00 00       	call   c0107eed <mm_destroy>
     check_mm_struct = NULL;
c0107655:	c7 05 cc 45 1c c0 00 	movl   $0x0,0xc01c45cc
c010765c:	00 00 00 
     
     nr_free = nr_free_store;
c010765f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107662:	a3 e4 44 1c c0       	mov    %eax,0xc01c44e4
     free_list = free_list_store;
c0107667:	8b 45 98             	mov    -0x68(%ebp),%eax
c010766a:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010766d:	a3 dc 44 1c c0       	mov    %eax,0xc01c44dc
c0107672:	89 15 e0 44 1c c0    	mov    %edx,0xc01c44e0

     
     le = &free_list;
c0107678:	c7 45 e8 dc 44 1c c0 	movl   $0xc01c44dc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010767f:	eb 1d                	jmp    c010769e <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c0107681:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107684:	83 e8 0c             	sub    $0xc,%eax
c0107687:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c010768a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010768e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107691:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107694:	8b 40 08             	mov    0x8(%eax),%eax
c0107697:	29 c2                	sub    %eax,%edx
c0107699:	89 d0                	mov    %edx,%eax
c010769b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010769e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01076a1:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01076a4:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01076a7:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01076aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01076ad:	81 7d e8 dc 44 1c c0 	cmpl   $0xc01c44dc,-0x18(%ebp)
c01076b4:	75 cb                	jne    c0107681 <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c01076b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01076b9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01076bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01076c4:	c7 04 24 ad ea 10 c0 	movl   $0xc010eaad,(%esp)
c01076cb:	e8 88 8c ff ff       	call   c0100358 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c01076d0:	c7 04 24 c7 ea 10 c0 	movl   $0xc010eac7,(%esp)
c01076d7:	e8 7c 8c ff ff       	call   c0100358 <cprintf>
}
c01076dc:	83 c4 74             	add    $0x74,%esp
c01076df:	5b                   	pop    %ebx
c01076e0:	5d                   	pop    %ebp
c01076e1:	c3                   	ret    

c01076e2 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c01076e2:	55                   	push   %ebp
c01076e3:	89 e5                	mov    %esp,%ebp
c01076e5:	83 ec 10             	sub    $0x10,%esp
c01076e8:	c7 45 fc c4 45 1c c0 	movl   $0xc01c45c4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01076ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01076f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01076f5:	89 50 04             	mov    %edx,0x4(%eax)
c01076f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01076fb:	8b 50 04             	mov    0x4(%eax),%edx
c01076fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107701:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107703:	8b 45 08             	mov    0x8(%ebp),%eax
c0107706:	c7 40 14 c4 45 1c c0 	movl   $0xc01c45c4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c010770d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107712:	c9                   	leave  
c0107713:	c3                   	ret    

c0107714 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107714:	55                   	push   %ebp
c0107715:	89 e5                	mov    %esp,%ebp
c0107717:	83 ec 38             	sub    $0x38,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c010771a:	8b 45 08             	mov    0x8(%ebp),%eax
c010771d:	8b 40 14             	mov    0x14(%eax),%eax
c0107720:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107723:	8b 45 10             	mov    0x10(%ebp),%eax
c0107726:	83 c0 14             	add    $0x14,%eax
c0107729:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c010772c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107730:	74 06                	je     c0107738 <_fifo_map_swappable+0x24>
c0107732:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107736:	75 24                	jne    c010775c <_fifo_map_swappable+0x48>
c0107738:	c7 44 24 0c e0 ea 10 	movl   $0xc010eae0,0xc(%esp)
c010773f:	c0 
c0107740:	c7 44 24 08 fe ea 10 	movl   $0xc010eafe,0x8(%esp)
c0107747:	c0 
c0107748:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c010774f:	00 
c0107750:	c7 04 24 13 eb 10 c0 	movl   $0xc010eb13,(%esp)
c0107757:	e8 7e 96 ff ff       	call   c0100dda <__panic>
c010775c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010775f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107762:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107765:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107768:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010776b:	8b 40 04             	mov    0x4(%eax),%eax
c010776e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107771:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107774:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107777:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010777a:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010777d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107780:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107783:	89 10                	mov    %edx,(%eax)
c0107785:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107788:	8b 10                	mov    (%eax),%edx
c010778a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010778d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107790:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107793:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107796:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107799:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010779c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010779f:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: 2013011303*/
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_after(head, entry);
    return 0;
c01077a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01077a6:	c9                   	leave  
c01077a7:	c3                   	ret    

c01077a8 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c01077a8:	55                   	push   %ebp
c01077a9:	89 e5                	mov    %esp,%ebp
c01077ab:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01077ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01077b1:	8b 40 14             	mov    0x14(%eax),%eax
c01077b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c01077b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01077bb:	75 24                	jne    c01077e1 <_fifo_swap_out_victim+0x39>
c01077bd:	c7 44 24 0c 27 eb 10 	movl   $0xc010eb27,0xc(%esp)
c01077c4:	c0 
c01077c5:	c7 44 24 08 fe ea 10 	movl   $0xc010eafe,0x8(%esp)
c01077cc:	c0 
c01077cd:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c01077d4:	00 
c01077d5:	c7 04 24 13 eb 10 c0 	movl   $0xc010eb13,(%esp)
c01077dc:	e8 f9 95 ff ff       	call   c0100dda <__panic>
     assert(in_tick==0);
c01077e1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01077e5:	74 24                	je     c010780b <_fifo_swap_out_victim+0x63>
c01077e7:	c7 44 24 0c 34 eb 10 	movl   $0xc010eb34,0xc(%esp)
c01077ee:	c0 
c01077ef:	c7 44 24 08 fe ea 10 	movl   $0xc010eafe,0x8(%esp)
c01077f6:	c0 
c01077f7:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c01077fe:	00 
c01077ff:	c7 04 24 13 eb 10 c0 	movl   $0xc010eb13,(%esp)
c0107806:	e8 cf 95 ff ff       	call   c0100dda <__panic>
c010780b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010780e:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0107811:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107814:	8b 00                	mov    (%eax),%eax
     /* Select the victim */
     /*LAB3 EXERCISE 2: 2013011303*/
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     list_entry_t *le = list_prev(head);
c0107816:	89 45 f0             	mov    %eax,-0x10(%ebp)
     *ptr_page = le2page(le, pra_page_link);
c0107819:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010781c:	8d 50 ec             	lea    -0x14(%eax),%edx
c010781f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107822:	89 10                	mov    %edx,(%eax)
c0107824:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107827:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010782a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010782d:	8b 40 04             	mov    0x4(%eax),%eax
c0107830:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107833:	8b 12                	mov    (%edx),%edx
c0107835:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107838:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010783b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010783e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107841:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107844:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107847:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010784a:	89 10                	mov    %edx,(%eax)
     list_del(le);
     return 0;
c010784c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107851:	c9                   	leave  
c0107852:	c3                   	ret    

c0107853 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107853:	55                   	push   %ebp
c0107854:	89 e5                	mov    %esp,%ebp
c0107856:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107859:	c7 04 24 40 eb 10 c0 	movl   $0xc010eb40,(%esp)
c0107860:	e8 f3 8a ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107865:	b8 00 30 00 00       	mov    $0x3000,%eax
c010786a:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c010786d:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c0107872:	83 f8 04             	cmp    $0x4,%eax
c0107875:	74 24                	je     c010789b <_fifo_check_swap+0x48>
c0107877:	c7 44 24 0c 66 eb 10 	movl   $0xc010eb66,0xc(%esp)
c010787e:	c0 
c010787f:	c7 44 24 08 fe ea 10 	movl   $0xc010eafe,0x8(%esp)
c0107886:	c0 
c0107887:	c7 44 24 04 51 00 00 	movl   $0x51,0x4(%esp)
c010788e:	00 
c010788f:	c7 04 24 13 eb 10 c0 	movl   $0xc010eb13,(%esp)
c0107896:	e8 3f 95 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c010789b:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
c01078a2:	e8 b1 8a ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c01078a7:	b8 00 10 00 00       	mov    $0x1000,%eax
c01078ac:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c01078af:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c01078b4:	83 f8 04             	cmp    $0x4,%eax
c01078b7:	74 24                	je     c01078dd <_fifo_check_swap+0x8a>
c01078b9:	c7 44 24 0c 66 eb 10 	movl   $0xc010eb66,0xc(%esp)
c01078c0:	c0 
c01078c1:	c7 44 24 08 fe ea 10 	movl   $0xc010eafe,0x8(%esp)
c01078c8:	c0 
c01078c9:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c01078d0:	00 
c01078d1:	c7 04 24 13 eb 10 c0 	movl   $0xc010eb13,(%esp)
c01078d8:	e8 fd 94 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c01078dd:	c7 04 24 a0 eb 10 c0 	movl   $0xc010eba0,(%esp)
c01078e4:	e8 6f 8a ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c01078e9:	b8 00 40 00 00       	mov    $0x4000,%eax
c01078ee:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c01078f1:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c01078f6:	83 f8 04             	cmp    $0x4,%eax
c01078f9:	74 24                	je     c010791f <_fifo_check_swap+0xcc>
c01078fb:	c7 44 24 0c 66 eb 10 	movl   $0xc010eb66,0xc(%esp)
c0107902:	c0 
c0107903:	c7 44 24 08 fe ea 10 	movl   $0xc010eafe,0x8(%esp)
c010790a:	c0 
c010790b:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0107912:	00 
c0107913:	c7 04 24 13 eb 10 c0 	movl   $0xc010eb13,(%esp)
c010791a:	e8 bb 94 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c010791f:	c7 04 24 c8 eb 10 c0 	movl   $0xc010ebc8,(%esp)
c0107926:	e8 2d 8a ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010792b:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107930:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107933:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c0107938:	83 f8 04             	cmp    $0x4,%eax
c010793b:	74 24                	je     c0107961 <_fifo_check_swap+0x10e>
c010793d:	c7 44 24 0c 66 eb 10 	movl   $0xc010eb66,0xc(%esp)
c0107944:	c0 
c0107945:	c7 44 24 08 fe ea 10 	movl   $0xc010eafe,0x8(%esp)
c010794c:	c0 
c010794d:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c0107954:	00 
c0107955:	c7 04 24 13 eb 10 c0 	movl   $0xc010eb13,(%esp)
c010795c:	e8 79 94 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107961:	c7 04 24 f0 eb 10 c0 	movl   $0xc010ebf0,(%esp)
c0107968:	e8 eb 89 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c010796d:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107972:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107975:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c010797a:	83 f8 05             	cmp    $0x5,%eax
c010797d:	74 24                	je     c01079a3 <_fifo_check_swap+0x150>
c010797f:	c7 44 24 0c 16 ec 10 	movl   $0xc010ec16,0xc(%esp)
c0107986:	c0 
c0107987:	c7 44 24 08 fe ea 10 	movl   $0xc010eafe,0x8(%esp)
c010798e:	c0 
c010798f:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
c0107996:	00 
c0107997:	c7 04 24 13 eb 10 c0 	movl   $0xc010eb13,(%esp)
c010799e:	e8 37 94 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c01079a3:	c7 04 24 c8 eb 10 c0 	movl   $0xc010ebc8,(%esp)
c01079aa:	e8 a9 89 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c01079af:	b8 00 20 00 00       	mov    $0x2000,%eax
c01079b4:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c01079b7:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c01079bc:	83 f8 05             	cmp    $0x5,%eax
c01079bf:	74 24                	je     c01079e5 <_fifo_check_swap+0x192>
c01079c1:	c7 44 24 0c 16 ec 10 	movl   $0xc010ec16,0xc(%esp)
c01079c8:	c0 
c01079c9:	c7 44 24 08 fe ea 10 	movl   $0xc010eafe,0x8(%esp)
c01079d0:	c0 
c01079d1:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c01079d8:	00 
c01079d9:	c7 04 24 13 eb 10 c0 	movl   $0xc010eb13,(%esp)
c01079e0:	e8 f5 93 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01079e5:	c7 04 24 78 eb 10 c0 	movl   $0xc010eb78,(%esp)
c01079ec:	e8 67 89 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c01079f1:	b8 00 10 00 00       	mov    $0x1000,%eax
c01079f6:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c01079f9:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c01079fe:	83 f8 06             	cmp    $0x6,%eax
c0107a01:	74 24                	je     c0107a27 <_fifo_check_swap+0x1d4>
c0107a03:	c7 44 24 0c 25 ec 10 	movl   $0xc010ec25,0xc(%esp)
c0107a0a:	c0 
c0107a0b:	c7 44 24 08 fe ea 10 	movl   $0xc010eafe,0x8(%esp)
c0107a12:	c0 
c0107a13:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0107a1a:	00 
c0107a1b:	c7 04 24 13 eb 10 c0 	movl   $0xc010eb13,(%esp)
c0107a22:	e8 b3 93 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107a27:	c7 04 24 c8 eb 10 c0 	movl   $0xc010ebc8,(%esp)
c0107a2e:	e8 25 89 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107a33:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107a38:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107a3b:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c0107a40:	83 f8 07             	cmp    $0x7,%eax
c0107a43:	74 24                	je     c0107a69 <_fifo_check_swap+0x216>
c0107a45:	c7 44 24 0c 34 ec 10 	movl   $0xc010ec34,0xc(%esp)
c0107a4c:	c0 
c0107a4d:	c7 44 24 08 fe ea 10 	movl   $0xc010eafe,0x8(%esp)
c0107a54:	c0 
c0107a55:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c0107a5c:	00 
c0107a5d:	c7 04 24 13 eb 10 c0 	movl   $0xc010eb13,(%esp)
c0107a64:	e8 71 93 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107a69:	c7 04 24 40 eb 10 c0 	movl   $0xc010eb40,(%esp)
c0107a70:	e8 e3 88 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107a75:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107a7a:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107a7d:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c0107a82:	83 f8 08             	cmp    $0x8,%eax
c0107a85:	74 24                	je     c0107aab <_fifo_check_swap+0x258>
c0107a87:	c7 44 24 0c 43 ec 10 	movl   $0xc010ec43,0xc(%esp)
c0107a8e:	c0 
c0107a8f:	c7 44 24 08 fe ea 10 	movl   $0xc010eafe,0x8(%esp)
c0107a96:	c0 
c0107a97:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c0107a9e:	00 
c0107a9f:	c7 04 24 13 eb 10 c0 	movl   $0xc010eb13,(%esp)
c0107aa6:	e8 2f 93 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107aab:	c7 04 24 a0 eb 10 c0 	movl   $0xc010eba0,(%esp)
c0107ab2:	e8 a1 88 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107ab7:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107abc:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107abf:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c0107ac4:	83 f8 09             	cmp    $0x9,%eax
c0107ac7:	74 24                	je     c0107aed <_fifo_check_swap+0x29a>
c0107ac9:	c7 44 24 0c 52 ec 10 	movl   $0xc010ec52,0xc(%esp)
c0107ad0:	c0 
c0107ad1:	c7 44 24 08 fe ea 10 	movl   $0xc010eafe,0x8(%esp)
c0107ad8:	c0 
c0107ad9:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107ae0:	00 
c0107ae1:	c7 04 24 13 eb 10 c0 	movl   $0xc010eb13,(%esp)
c0107ae8:	e8 ed 92 ff ff       	call   c0100dda <__panic>
    return 0;
c0107aed:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107af2:	c9                   	leave  
c0107af3:	c3                   	ret    

c0107af4 <_fifo_init>:


static int
_fifo_init(void)
{
c0107af4:	55                   	push   %ebp
c0107af5:	89 e5                	mov    %esp,%ebp
    return 0;
c0107af7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107afc:	5d                   	pop    %ebp
c0107afd:	c3                   	ret    

c0107afe <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107afe:	55                   	push   %ebp
c0107aff:	89 e5                	mov    %esp,%ebp
    return 0;
c0107b01:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107b06:	5d                   	pop    %ebp
c0107b07:	c3                   	ret    

c0107b08 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107b08:	55                   	push   %ebp
c0107b09:	89 e5                	mov    %esp,%ebp
c0107b0b:	b8 00 00 00 00       	mov    $0x0,%eax
c0107b10:	5d                   	pop    %ebp
c0107b11:	c3                   	ret    

c0107b12 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0107b12:	55                   	push   %ebp
c0107b13:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107b15:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b18:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107b1b:	5d                   	pop    %ebp
c0107b1c:	c3                   	ret    

c0107b1d <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107b1d:	55                   	push   %ebp
c0107b1e:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107b20:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b23:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107b26:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107b29:	5d                   	pop    %ebp
c0107b2a:	c3                   	ret    

c0107b2b <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107b2b:	55                   	push   %ebp
c0107b2c:	89 e5                	mov    %esp,%ebp
c0107b2e:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107b31:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b34:	c1 e8 0c             	shr    $0xc,%eax
c0107b37:	89 c2                	mov    %eax,%edx
c0107b39:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c0107b3e:	39 c2                	cmp    %eax,%edx
c0107b40:	72 1c                	jb     c0107b5e <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107b42:	c7 44 24 08 74 ec 10 	movl   $0xc010ec74,0x8(%esp)
c0107b49:	c0 
c0107b4a:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107b51:	00 
c0107b52:	c7 04 24 93 ec 10 c0 	movl   $0xc010ec93,(%esp)
c0107b59:	e8 7c 92 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0107b5e:	a1 f0 44 1c c0       	mov    0xc01c44f0,%eax
c0107b63:	8b 55 08             	mov    0x8(%ebp),%edx
c0107b66:	c1 ea 0c             	shr    $0xc,%edx
c0107b69:	c1 e2 05             	shl    $0x5,%edx
c0107b6c:	01 d0                	add    %edx,%eax
}
c0107b6e:	c9                   	leave  
c0107b6f:	c3                   	ret    

c0107b70 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0107b70:	55                   	push   %ebp
c0107b71:	89 e5                	mov    %esp,%ebp
c0107b73:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0107b76:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b79:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107b7e:	89 04 24             	mov    %eax,(%esp)
c0107b81:	e8 a5 ff ff ff       	call   c0107b2b <pa2page>
}
c0107b86:	c9                   	leave  
c0107b87:	c3                   	ret    

c0107b88 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107b88:	55                   	push   %ebp
c0107b89:	89 e5                	mov    %esp,%ebp
c0107b8b:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107b8e:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0107b95:	e8 08 ce ff ff       	call   c01049a2 <kmalloc>
c0107b9a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107b9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107ba1:	0f 84 81 00 00 00    	je     c0107c28 <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0107ba7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107baa:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107bad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107bb0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107bb3:	89 50 04             	mov    %edx,0x4(%eax)
c0107bb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107bb9:	8b 50 04             	mov    0x4(%eax),%edx
c0107bbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107bbf:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107bc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107bc4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0107bcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107bce:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0107bd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107bd8:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0107bdf:	a1 2c 24 1c c0       	mov    0xc01c242c,%eax
c0107be4:	85 c0                	test   %eax,%eax
c0107be6:	74 0d                	je     c0107bf5 <mm_create+0x6d>
c0107be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107beb:	89 04 24             	mov    %eax,(%esp)
c0107bee:	e8 b2 ef ff ff       	call   c0106ba5 <swap_init_mm>
c0107bf3:	eb 0a                	jmp    c0107bff <mm_create+0x77>
        else mm->sm_priv = NULL;
c0107bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107bf8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0107bff:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107c06:	00 
c0107c07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c0a:	89 04 24             	mov    %eax,(%esp)
c0107c0d:	e8 0b ff ff ff       	call   c0107b1d <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0107c12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c15:	83 c0 1c             	add    $0x1c,%eax
c0107c18:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107c1f:	00 
c0107c20:	89 04 24             	mov    %eax,(%esp)
c0107c23:	e8 39 1a 00 00       	call   c0109661 <sem_init>
    }    
    return mm;
c0107c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107c2b:	c9                   	leave  
c0107c2c:	c3                   	ret    

c0107c2d <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0107c2d:	55                   	push   %ebp
c0107c2e:	89 e5                	mov    %esp,%ebp
c0107c30:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0107c33:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0107c3a:	e8 63 cd ff ff       	call   c01049a2 <kmalloc>
c0107c3f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0107c42:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107c46:	74 1b                	je     c0107c63 <vma_create+0x36>
        vma->vm_start = vm_start;
c0107c48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c4b:	8b 55 08             	mov    0x8(%ebp),%edx
c0107c4e:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0107c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c54:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107c57:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0107c5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c5d:	8b 55 10             	mov    0x10(%ebp),%edx
c0107c60:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0107c63:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107c66:	c9                   	leave  
c0107c67:	c3                   	ret    

c0107c68 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0107c68:	55                   	push   %ebp
c0107c69:	89 e5                	mov    %esp,%ebp
c0107c6b:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0107c6e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0107c75:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107c79:	0f 84 95 00 00 00    	je     c0107d14 <find_vma+0xac>
        vma = mm->mmap_cache;
c0107c7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c82:	8b 40 08             	mov    0x8(%eax),%eax
c0107c85:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0107c88:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107c8c:	74 16                	je     c0107ca4 <find_vma+0x3c>
c0107c8e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107c91:	8b 40 04             	mov    0x4(%eax),%eax
c0107c94:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107c97:	77 0b                	ja     c0107ca4 <find_vma+0x3c>
c0107c99:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107c9c:	8b 40 08             	mov    0x8(%eax),%eax
c0107c9f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107ca2:	77 61                	ja     c0107d05 <find_vma+0x9d>
                bool found = 0;
c0107ca4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0107cab:	8b 45 08             	mov    0x8(%ebp),%eax
c0107cae:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107cb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107cb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0107cb7:	eb 28                	jmp    c0107ce1 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0107cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107cbc:	83 e8 10             	sub    $0x10,%eax
c0107cbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0107cc2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107cc5:	8b 40 04             	mov    0x4(%eax),%eax
c0107cc8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107ccb:	77 14                	ja     c0107ce1 <find_vma+0x79>
c0107ccd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107cd0:	8b 40 08             	mov    0x8(%eax),%eax
c0107cd3:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107cd6:	76 09                	jbe    c0107ce1 <find_vma+0x79>
                        found = 1;
c0107cd8:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0107cdf:	eb 17                	jmp    c0107cf8 <find_vma+0x90>
c0107ce1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ce4:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107ce7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107cea:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0107ced:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107cf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107cf3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107cf6:	75 c1                	jne    c0107cb9 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0107cf8:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0107cfc:	75 07                	jne    c0107d05 <find_vma+0x9d>
                    vma = NULL;
c0107cfe:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0107d05:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107d09:	74 09                	je     c0107d14 <find_vma+0xac>
            mm->mmap_cache = vma;
c0107d0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d0e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107d11:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0107d14:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0107d17:	c9                   	leave  
c0107d18:	c3                   	ret    

c0107d19 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0107d19:	55                   	push   %ebp
c0107d1a:	89 e5                	mov    %esp,%ebp
c0107d1c:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0107d1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d22:	8b 50 04             	mov    0x4(%eax),%edx
c0107d25:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d28:	8b 40 08             	mov    0x8(%eax),%eax
c0107d2b:	39 c2                	cmp    %eax,%edx
c0107d2d:	72 24                	jb     c0107d53 <check_vma_overlap+0x3a>
c0107d2f:	c7 44 24 0c a1 ec 10 	movl   $0xc010eca1,0xc(%esp)
c0107d36:	c0 
c0107d37:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c0107d3e:	c0 
c0107d3f:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0107d46:	00 
c0107d47:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c0107d4e:	e8 87 90 ff ff       	call   c0100dda <__panic>
    assert(prev->vm_end <= next->vm_start);
c0107d53:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d56:	8b 50 08             	mov    0x8(%eax),%edx
c0107d59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107d5c:	8b 40 04             	mov    0x4(%eax),%eax
c0107d5f:	39 c2                	cmp    %eax,%edx
c0107d61:	76 24                	jbe    c0107d87 <check_vma_overlap+0x6e>
c0107d63:	c7 44 24 0c e4 ec 10 	movl   $0xc010ece4,0xc(%esp)
c0107d6a:	c0 
c0107d6b:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c0107d72:	c0 
c0107d73:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107d7a:	00 
c0107d7b:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c0107d82:	e8 53 90 ff ff       	call   c0100dda <__panic>
    assert(next->vm_start < next->vm_end);
c0107d87:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107d8a:	8b 50 04             	mov    0x4(%eax),%edx
c0107d8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107d90:	8b 40 08             	mov    0x8(%eax),%eax
c0107d93:	39 c2                	cmp    %eax,%edx
c0107d95:	72 24                	jb     c0107dbb <check_vma_overlap+0xa2>
c0107d97:	c7 44 24 0c 03 ed 10 	movl   $0xc010ed03,0xc(%esp)
c0107d9e:	c0 
c0107d9f:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c0107da6:	c0 
c0107da7:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0107dae:	00 
c0107daf:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c0107db6:	e8 1f 90 ff ff       	call   c0100dda <__panic>
}
c0107dbb:	c9                   	leave  
c0107dbc:	c3                   	ret    

c0107dbd <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0107dbd:	55                   	push   %ebp
c0107dbe:	89 e5                	mov    %esp,%ebp
c0107dc0:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c0107dc3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107dc6:	8b 50 04             	mov    0x4(%eax),%edx
c0107dc9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107dcc:	8b 40 08             	mov    0x8(%eax),%eax
c0107dcf:	39 c2                	cmp    %eax,%edx
c0107dd1:	72 24                	jb     c0107df7 <insert_vma_struct+0x3a>
c0107dd3:	c7 44 24 0c 21 ed 10 	movl   $0xc010ed21,0xc(%esp)
c0107dda:	c0 
c0107ddb:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c0107de2:	c0 
c0107de3:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0107dea:	00 
c0107deb:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c0107df2:	e8 e3 8f ff ff       	call   c0100dda <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0107df7:	8b 45 08             	mov    0x8(%ebp),%eax
c0107dfa:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0107dfd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107e00:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0107e03:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107e06:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0107e09:	eb 21                	jmp    c0107e2c <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0107e0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e0e:	83 e8 10             	sub    $0x10,%eax
c0107e11:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0107e14:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107e17:	8b 50 04             	mov    0x4(%eax),%edx
c0107e1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e1d:	8b 40 04             	mov    0x4(%eax),%eax
c0107e20:	39 c2                	cmp    %eax,%edx
c0107e22:	76 02                	jbe    c0107e26 <insert_vma_struct+0x69>
                break;
c0107e24:	eb 1d                	jmp    c0107e43 <insert_vma_struct+0x86>
            }
            le_prev = le;
c0107e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e29:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107e2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e2f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107e32:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107e35:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c0107e38:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107e3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e3e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0107e41:	75 c8                	jne    c0107e0b <insert_vma_struct+0x4e>
c0107e43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e46:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0107e49:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107e4c:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0107e4f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0107e52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e55:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0107e58:	74 15                	je     c0107e6f <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c0107e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e5d:	8d 50 f0             	lea    -0x10(%eax),%edx
c0107e60:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e63:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107e67:	89 14 24             	mov    %edx,(%esp)
c0107e6a:	e8 aa fe ff ff       	call   c0107d19 <check_vma_overlap>
    }
    if (le_next != list) {
c0107e6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107e72:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0107e75:	74 15                	je     c0107e8c <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0107e77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107e7a:	83 e8 10             	sub    $0x10,%eax
c0107e7d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107e81:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e84:	89 04 24             	mov    %eax,(%esp)
c0107e87:	e8 8d fe ff ff       	call   c0107d19 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c0107e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e8f:	8b 55 08             	mov    0x8(%ebp),%edx
c0107e92:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0107e94:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e97:	8d 50 10             	lea    0x10(%eax),%edx
c0107e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e9d:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0107ea0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107ea3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107ea6:	8b 40 04             	mov    0x4(%eax),%eax
c0107ea9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107eac:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0107eaf:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107eb2:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0107eb5:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107eb8:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107ebb:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107ebe:	89 10                	mov    %edx,(%eax)
c0107ec0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107ec3:	8b 10                	mov    (%eax),%edx
c0107ec5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107ec8:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107ecb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107ece:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0107ed1:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107ed4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107ed7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107eda:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0107edc:	8b 45 08             	mov    0x8(%ebp),%eax
c0107edf:	8b 40 10             	mov    0x10(%eax),%eax
c0107ee2:	8d 50 01             	lea    0x1(%eax),%edx
c0107ee5:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ee8:	89 50 10             	mov    %edx,0x10(%eax)
}
c0107eeb:	c9                   	leave  
c0107eec:	c3                   	ret    

c0107eed <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0107eed:	55                   	push   %ebp
c0107eee:	89 e5                	mov    %esp,%ebp
c0107ef0:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c0107ef3:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ef6:	89 04 24             	mov    %eax,(%esp)
c0107ef9:	e8 14 fc ff ff       	call   c0107b12 <mm_count>
c0107efe:	85 c0                	test   %eax,%eax
c0107f00:	74 24                	je     c0107f26 <mm_destroy+0x39>
c0107f02:	c7 44 24 0c 3d ed 10 	movl   $0xc010ed3d,0xc(%esp)
c0107f09:	c0 
c0107f0a:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c0107f11:	c0 
c0107f12:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0107f19:	00 
c0107f1a:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c0107f21:	e8 b4 8e ff ff       	call   c0100dda <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c0107f26:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f29:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0107f2c:	eb 36                	jmp    c0107f64 <mm_destroy+0x77>
c0107f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f31:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107f34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107f37:	8b 40 04             	mov    0x4(%eax),%eax
c0107f3a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107f3d:	8b 12                	mov    (%edx),%edx
c0107f3f:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0107f42:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107f45:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107f48:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107f4b:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107f4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107f51:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107f54:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0107f56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f59:	83 e8 10             	sub    $0x10,%eax
c0107f5c:	89 04 24             	mov    %eax,(%esp)
c0107f5f:	e8 59 ca ff ff       	call   c01049bd <kfree>
c0107f64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f67:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107f6a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107f6d:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0107f70:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107f73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f76:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0107f79:	75 b3                	jne    c0107f2e <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0107f7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f7e:	89 04 24             	mov    %eax,(%esp)
c0107f81:	e8 37 ca ff ff       	call   c01049bd <kfree>
    mm=NULL;
c0107f86:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0107f8d:	c9                   	leave  
c0107f8e:	c3                   	ret    

c0107f8f <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0107f8f:	55                   	push   %ebp
c0107f90:	89 e5                	mov    %esp,%ebp
c0107f92:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0107f95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f98:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107f9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f9e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107fa3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107fa6:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0107fad:	8b 45 10             	mov    0x10(%ebp),%eax
c0107fb0:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107fb3:	01 c2                	add    %eax,%edx
c0107fb5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107fb8:	01 d0                	add    %edx,%eax
c0107fba:	83 e8 01             	sub    $0x1,%eax
c0107fbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107fc0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107fc3:	ba 00 00 00 00       	mov    $0x0,%edx
c0107fc8:	f7 75 e8             	divl   -0x18(%ebp)
c0107fcb:	89 d0                	mov    %edx,%eax
c0107fcd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107fd0:	29 c2                	sub    %eax,%edx
c0107fd2:	89 d0                	mov    %edx,%eax
c0107fd4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0107fd7:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0107fde:	76 11                	jbe    c0107ff1 <mm_map+0x62>
c0107fe0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107fe3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0107fe6:	73 09                	jae    c0107ff1 <mm_map+0x62>
c0107fe8:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0107fef:	76 0a                	jbe    c0107ffb <mm_map+0x6c>
        return -E_INVAL;
c0107ff1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0107ff6:	e9 ae 00 00 00       	jmp    c01080a9 <mm_map+0x11a>
    }

    assert(mm != NULL);
c0107ffb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107fff:	75 24                	jne    c0108025 <mm_map+0x96>
c0108001:	c7 44 24 0c 4f ed 10 	movl   $0xc010ed4f,0xc(%esp)
c0108008:	c0 
c0108009:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c0108010:	c0 
c0108011:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c0108018:	00 
c0108019:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c0108020:	e8 b5 8d ff ff       	call   c0100dda <__panic>

    int ret = -E_INVAL;
c0108025:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c010802c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010802f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108033:	8b 45 08             	mov    0x8(%ebp),%eax
c0108036:	89 04 24             	mov    %eax,(%esp)
c0108039:	e8 2a fc ff ff       	call   c0107c68 <find_vma>
c010803e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108041:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108045:	74 0d                	je     c0108054 <mm_map+0xc5>
c0108047:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010804a:	8b 40 04             	mov    0x4(%eax),%eax
c010804d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108050:	73 02                	jae    c0108054 <mm_map+0xc5>
        goto out;
c0108052:	eb 52                	jmp    c01080a6 <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c0108054:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c010805b:	8b 45 14             	mov    0x14(%ebp),%eax
c010805e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108062:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108069:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010806c:	89 04 24             	mov    %eax,(%esp)
c010806f:	e8 b9 fb ff ff       	call   c0107c2d <vma_create>
c0108074:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108077:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010807b:	75 02                	jne    c010807f <mm_map+0xf0>
        goto out;
c010807d:	eb 27                	jmp    c01080a6 <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c010807f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108082:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108086:	8b 45 08             	mov    0x8(%ebp),%eax
c0108089:	89 04 24             	mov    %eax,(%esp)
c010808c:	e8 2c fd ff ff       	call   c0107dbd <insert_vma_struct>
    if (vma_store != NULL) {
c0108091:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0108095:	74 08                	je     c010809f <mm_map+0x110>
        *vma_store = vma;
c0108097:	8b 45 18             	mov    0x18(%ebp),%eax
c010809a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010809d:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c010809f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c01080a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01080a9:	c9                   	leave  
c01080aa:	c3                   	ret    

c01080ab <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c01080ab:	55                   	push   %ebp
c01080ac:	89 e5                	mov    %esp,%ebp
c01080ae:	56                   	push   %esi
c01080af:	53                   	push   %ebx
c01080b0:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c01080b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01080b7:	74 06                	je     c01080bf <dup_mmap+0x14>
c01080b9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01080bd:	75 24                	jne    c01080e3 <dup_mmap+0x38>
c01080bf:	c7 44 24 0c 5a ed 10 	movl   $0xc010ed5a,0xc(%esp)
c01080c6:	c0 
c01080c7:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c01080ce:	c0 
c01080cf:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c01080d6:	00 
c01080d7:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c01080de:	e8 f7 8c ff ff       	call   c0100dda <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c01080e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01080e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01080ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c01080ef:	e9 92 00 00 00       	jmp    c0108186 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c01080f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080f7:	83 e8 10             	sub    $0x10,%eax
c01080fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c01080fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108100:	8b 48 0c             	mov    0xc(%eax),%ecx
c0108103:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108106:	8b 50 08             	mov    0x8(%eax),%edx
c0108109:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010810c:	8b 40 04             	mov    0x4(%eax),%eax
c010810f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108113:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108117:	89 04 24             	mov    %eax,(%esp)
c010811a:	e8 0e fb ff ff       	call   c0107c2d <vma_create>
c010811f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0108122:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108126:	75 07                	jne    c010812f <dup_mmap+0x84>
            return -E_NO_MEM;
c0108128:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010812d:	eb 76                	jmp    c01081a5 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c010812f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108132:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108136:	8b 45 08             	mov    0x8(%ebp),%eax
c0108139:	89 04 24             	mov    %eax,(%esp)
c010813c:	e8 7c fc ff ff       	call   c0107dbd <insert_vma_struct>

        bool share = 0;
c0108141:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0108148:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010814b:	8b 58 08             	mov    0x8(%eax),%ebx
c010814e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108151:	8b 48 04             	mov    0x4(%eax),%ecx
c0108154:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108157:	8b 50 0c             	mov    0xc(%eax),%edx
c010815a:	8b 45 08             	mov    0x8(%ebp),%eax
c010815d:	8b 40 0c             	mov    0xc(%eax),%eax
c0108160:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0108163:	89 74 24 10          	mov    %esi,0x10(%esp)
c0108167:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010816b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010816f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108173:	89 04 24             	mov    %eax,(%esp)
c0108176:	e8 fa d7 ff ff       	call   c0105975 <copy_range>
c010817b:	85 c0                	test   %eax,%eax
c010817d:	74 07                	je     c0108186 <dup_mmap+0xdb>
            return -E_NO_MEM;
c010817f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108184:	eb 1f                	jmp    c01081a5 <dup_mmap+0xfa>
c0108186:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108189:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010818c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010818f:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0108191:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108194:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108197:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010819a:	0f 85 54 ff ff ff    	jne    c01080f4 <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c01081a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01081a5:	83 c4 40             	add    $0x40,%esp
c01081a8:	5b                   	pop    %ebx
c01081a9:	5e                   	pop    %esi
c01081aa:	5d                   	pop    %ebp
c01081ab:	c3                   	ret    

c01081ac <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c01081ac:	55                   	push   %ebp
c01081ad:	89 e5                	mov    %esp,%ebp
c01081af:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c01081b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01081b6:	74 0f                	je     c01081c7 <exit_mmap+0x1b>
c01081b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01081bb:	89 04 24             	mov    %eax,(%esp)
c01081be:	e8 4f f9 ff ff       	call   c0107b12 <mm_count>
c01081c3:	85 c0                	test   %eax,%eax
c01081c5:	74 24                	je     c01081eb <exit_mmap+0x3f>
c01081c7:	c7 44 24 0c 78 ed 10 	movl   $0xc010ed78,0xc(%esp)
c01081ce:	c0 
c01081cf:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c01081d6:	c0 
c01081d7:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01081de:	00 
c01081df:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c01081e6:	e8 ef 8b ff ff       	call   c0100dda <__panic>
    pde_t *pgdir = mm->pgdir;
c01081eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01081ee:	8b 40 0c             	mov    0xc(%eax),%eax
c01081f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c01081f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01081f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01081fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0108200:	eb 28                	jmp    c010822a <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c0108202:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108205:	83 e8 10             	sub    $0x10,%eax
c0108208:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c010820b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010820e:	8b 50 08             	mov    0x8(%eax),%edx
c0108211:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108214:	8b 40 04             	mov    0x4(%eax),%eax
c0108217:	89 54 24 08          	mov    %edx,0x8(%esp)
c010821b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010821f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108222:	89 04 24             	mov    %eax,(%esp)
c0108225:	e8 50 d5 ff ff       	call   c010577a <unmap_range>
c010822a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010822d:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108230:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108233:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0108236:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108239:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010823c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010823f:	75 c1                	jne    c0108202 <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108241:	eb 28                	jmp    c010826b <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c0108243:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108246:	83 e8 10             	sub    $0x10,%eax
c0108249:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c010824c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010824f:	8b 50 08             	mov    0x8(%eax),%edx
c0108252:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108255:	8b 40 04             	mov    0x4(%eax),%eax
c0108258:	89 54 24 08          	mov    %edx,0x8(%esp)
c010825c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108260:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108263:	89 04 24             	mov    %eax,(%esp)
c0108266:	e8 03 d6 ff ff       	call   c010586e <exit_range>
c010826b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010826e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108271:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108274:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108277:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010827a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010827d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108280:	75 c1                	jne    c0108243 <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0108282:	c9                   	leave  
c0108283:	c3                   	ret    

c0108284 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0108284:	55                   	push   %ebp
c0108285:	89 e5                	mov    %esp,%ebp
c0108287:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c010828a:	8b 45 10             	mov    0x10(%ebp),%eax
c010828d:	8b 55 18             	mov    0x18(%ebp),%edx
c0108290:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108294:	8b 55 14             	mov    0x14(%ebp),%edx
c0108297:	89 54 24 08          	mov    %edx,0x8(%esp)
c010829b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010829f:	8b 45 08             	mov    0x8(%ebp),%eax
c01082a2:	89 04 24             	mov    %eax,(%esp)
c01082a5:	e8 79 09 00 00       	call   c0108c23 <user_mem_check>
c01082aa:	85 c0                	test   %eax,%eax
c01082ac:	75 07                	jne    c01082b5 <copy_from_user+0x31>
        return 0;
c01082ae:	b8 00 00 00 00       	mov    $0x0,%eax
c01082b3:	eb 1e                	jmp    c01082d3 <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c01082b5:	8b 45 14             	mov    0x14(%ebp),%eax
c01082b8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01082bc:	8b 45 10             	mov    0x10(%ebp),%eax
c01082bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01082c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082c6:	89 04 24             	mov    %eax,(%esp)
c01082c9:	e8 eb 4e 00 00       	call   c010d1b9 <memcpy>
    return 1;
c01082ce:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01082d3:	c9                   	leave  
c01082d4:	c3                   	ret    

c01082d5 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c01082d5:	55                   	push   %ebp
c01082d6:	89 e5                	mov    %esp,%ebp
c01082d8:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c01082db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082de:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01082e5:	00 
c01082e6:	8b 55 14             	mov    0x14(%ebp),%edx
c01082e9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01082ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01082f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01082f4:	89 04 24             	mov    %eax,(%esp)
c01082f7:	e8 27 09 00 00       	call   c0108c23 <user_mem_check>
c01082fc:	85 c0                	test   %eax,%eax
c01082fe:	75 07                	jne    c0108307 <copy_to_user+0x32>
        return 0;
c0108300:	b8 00 00 00 00       	mov    $0x0,%eax
c0108305:	eb 1e                	jmp    c0108325 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c0108307:	8b 45 14             	mov    0x14(%ebp),%eax
c010830a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010830e:	8b 45 10             	mov    0x10(%ebp),%eax
c0108311:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108315:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108318:	89 04 24             	mov    %eax,(%esp)
c010831b:	e8 99 4e 00 00       	call   c010d1b9 <memcpy>
    return 1;
c0108320:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0108325:	c9                   	leave  
c0108326:	c3                   	ret    

c0108327 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0108327:	55                   	push   %ebp
c0108328:	89 e5                	mov    %esp,%ebp
c010832a:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c010832d:	e8 02 00 00 00       	call   c0108334 <check_vmm>
}
c0108332:	c9                   	leave  
c0108333:	c3                   	ret    

c0108334 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0108334:	55                   	push   %ebp
c0108335:	89 e5                	mov    %esp,%ebp
c0108337:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010833a:	e8 75 cb ff ff       	call   c0104eb4 <nr_free_pages>
c010833f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0108342:	e8 13 00 00 00       	call   c010835a <check_vma_struct>
    check_pgfault();
c0108347:	e8 a7 04 00 00       	call   c01087f3 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c010834c:	c7 04 24 98 ed 10 c0 	movl   $0xc010ed98,(%esp)
c0108353:	e8 00 80 ff ff       	call   c0100358 <cprintf>
}
c0108358:	c9                   	leave  
c0108359:	c3                   	ret    

c010835a <check_vma_struct>:

static void
check_vma_struct(void) {
c010835a:	55                   	push   %ebp
c010835b:	89 e5                	mov    %esp,%ebp
c010835d:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108360:	e8 4f cb ff ff       	call   c0104eb4 <nr_free_pages>
c0108365:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0108368:	e8 1b f8 ff ff       	call   c0107b88 <mm_create>
c010836d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0108370:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108374:	75 24                	jne    c010839a <check_vma_struct+0x40>
c0108376:	c7 44 24 0c 4f ed 10 	movl   $0xc010ed4f,0xc(%esp)
c010837d:	c0 
c010837e:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c0108385:	c0 
c0108386:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c010838d:	00 
c010838e:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c0108395:	e8 40 8a ff ff       	call   c0100dda <__panic>

    int step1 = 10, step2 = step1 * 10;
c010839a:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c01083a1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01083a4:	89 d0                	mov    %edx,%eax
c01083a6:	c1 e0 02             	shl    $0x2,%eax
c01083a9:	01 d0                	add    %edx,%eax
c01083ab:	01 c0                	add    %eax,%eax
c01083ad:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c01083b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01083b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01083b6:	eb 70                	jmp    c0108428 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01083b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01083bb:	89 d0                	mov    %edx,%eax
c01083bd:	c1 e0 02             	shl    $0x2,%eax
c01083c0:	01 d0                	add    %edx,%eax
c01083c2:	83 c0 02             	add    $0x2,%eax
c01083c5:	89 c1                	mov    %eax,%ecx
c01083c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01083ca:	89 d0                	mov    %edx,%eax
c01083cc:	c1 e0 02             	shl    $0x2,%eax
c01083cf:	01 d0                	add    %edx,%eax
c01083d1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01083d8:	00 
c01083d9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01083dd:	89 04 24             	mov    %eax,(%esp)
c01083e0:	e8 48 f8 ff ff       	call   c0107c2d <vma_create>
c01083e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c01083e8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01083ec:	75 24                	jne    c0108412 <check_vma_struct+0xb8>
c01083ee:	c7 44 24 0c b0 ed 10 	movl   $0xc010edb0,0xc(%esp)
c01083f5:	c0 
c01083f6:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c01083fd:	c0 
c01083fe:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c0108405:	00 
c0108406:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c010840d:	e8 c8 89 ff ff       	call   c0100dda <__panic>
        insert_vma_struct(mm, vma);
c0108412:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108415:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108419:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010841c:	89 04 24             	mov    %eax,(%esp)
c010841f:	e8 99 f9 ff ff       	call   c0107dbd <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0108424:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108428:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010842c:	7f 8a                	jg     c01083b8 <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c010842e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108431:	83 c0 01             	add    $0x1,%eax
c0108434:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108437:	eb 70                	jmp    c01084a9 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108439:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010843c:	89 d0                	mov    %edx,%eax
c010843e:	c1 e0 02             	shl    $0x2,%eax
c0108441:	01 d0                	add    %edx,%eax
c0108443:	83 c0 02             	add    $0x2,%eax
c0108446:	89 c1                	mov    %eax,%ecx
c0108448:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010844b:	89 d0                	mov    %edx,%eax
c010844d:	c1 e0 02             	shl    $0x2,%eax
c0108450:	01 d0                	add    %edx,%eax
c0108452:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108459:	00 
c010845a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010845e:	89 04 24             	mov    %eax,(%esp)
c0108461:	e8 c7 f7 ff ff       	call   c0107c2d <vma_create>
c0108466:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0108469:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c010846d:	75 24                	jne    c0108493 <check_vma_struct+0x139>
c010846f:	c7 44 24 0c b0 ed 10 	movl   $0xc010edb0,0xc(%esp)
c0108476:	c0 
c0108477:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c010847e:	c0 
c010847f:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0108486:	00 
c0108487:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c010848e:	e8 47 89 ff ff       	call   c0100dda <__panic>
        insert_vma_struct(mm, vma);
c0108493:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108496:	89 44 24 04          	mov    %eax,0x4(%esp)
c010849a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010849d:	89 04 24             	mov    %eax,(%esp)
c01084a0:	e8 18 f9 ff ff       	call   c0107dbd <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01084a5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01084a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084ac:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01084af:	7e 88                	jle    c0108439 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c01084b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084b4:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01084b7:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01084ba:	8b 40 04             	mov    0x4(%eax),%eax
c01084bd:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c01084c0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c01084c7:	e9 97 00 00 00       	jmp    c0108563 <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c01084cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084cf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01084d2:	75 24                	jne    c01084f8 <check_vma_struct+0x19e>
c01084d4:	c7 44 24 0c bc ed 10 	movl   $0xc010edbc,0xc(%esp)
c01084db:	c0 
c01084dc:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c01084e3:	c0 
c01084e4:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c01084eb:	00 
c01084ec:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c01084f3:	e8 e2 88 ff ff       	call   c0100dda <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c01084f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084fb:	83 e8 10             	sub    $0x10,%eax
c01084fe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0108501:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108504:	8b 48 04             	mov    0x4(%eax),%ecx
c0108507:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010850a:	89 d0                	mov    %edx,%eax
c010850c:	c1 e0 02             	shl    $0x2,%eax
c010850f:	01 d0                	add    %edx,%eax
c0108511:	39 c1                	cmp    %eax,%ecx
c0108513:	75 17                	jne    c010852c <check_vma_struct+0x1d2>
c0108515:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108518:	8b 48 08             	mov    0x8(%eax),%ecx
c010851b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010851e:	89 d0                	mov    %edx,%eax
c0108520:	c1 e0 02             	shl    $0x2,%eax
c0108523:	01 d0                	add    %edx,%eax
c0108525:	83 c0 02             	add    $0x2,%eax
c0108528:	39 c1                	cmp    %eax,%ecx
c010852a:	74 24                	je     c0108550 <check_vma_struct+0x1f6>
c010852c:	c7 44 24 0c d4 ed 10 	movl   $0xc010edd4,0xc(%esp)
c0108533:	c0 
c0108534:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c010853b:	c0 
c010853c:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0108543:	00 
c0108544:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c010854b:	e8 8a 88 ff ff       	call   c0100dda <__panic>
c0108550:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108553:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0108556:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108559:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c010855c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c010855f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108563:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108566:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108569:	0f 8e 5d ff ff ff    	jle    c01084cc <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c010856f:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0108576:	e9 cd 01 00 00       	jmp    c0108748 <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c010857b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010857e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108582:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108585:	89 04 24             	mov    %eax,(%esp)
c0108588:	e8 db f6 ff ff       	call   c0107c68 <find_vma>
c010858d:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c0108590:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0108594:	75 24                	jne    c01085ba <check_vma_struct+0x260>
c0108596:	c7 44 24 0c 09 ee 10 	movl   $0xc010ee09,0xc(%esp)
c010859d:	c0 
c010859e:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c01085a5:	c0 
c01085a6:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c01085ad:	00 
c01085ae:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c01085b5:	e8 20 88 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c01085ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085bd:	83 c0 01             	add    $0x1,%eax
c01085c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01085c7:	89 04 24             	mov    %eax,(%esp)
c01085ca:	e8 99 f6 ff ff       	call   c0107c68 <find_vma>
c01085cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c01085d2:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01085d6:	75 24                	jne    c01085fc <check_vma_struct+0x2a2>
c01085d8:	c7 44 24 0c 16 ee 10 	movl   $0xc010ee16,0xc(%esp)
c01085df:	c0 
c01085e0:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c01085e7:	c0 
c01085e8:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c01085ef:	00 
c01085f0:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c01085f7:	e8 de 87 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c01085fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085ff:	83 c0 02             	add    $0x2,%eax
c0108602:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108606:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108609:	89 04 24             	mov    %eax,(%esp)
c010860c:	e8 57 f6 ff ff       	call   c0107c68 <find_vma>
c0108611:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c0108614:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0108618:	74 24                	je     c010863e <check_vma_struct+0x2e4>
c010861a:	c7 44 24 0c 23 ee 10 	movl   $0xc010ee23,0xc(%esp)
c0108621:	c0 
c0108622:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c0108629:	c0 
c010862a:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0108631:	00 
c0108632:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c0108639:	e8 9c 87 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c010863e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108641:	83 c0 03             	add    $0x3,%eax
c0108644:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108648:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010864b:	89 04 24             	mov    %eax,(%esp)
c010864e:	e8 15 f6 ff ff       	call   c0107c68 <find_vma>
c0108653:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0108656:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c010865a:	74 24                	je     c0108680 <check_vma_struct+0x326>
c010865c:	c7 44 24 0c 30 ee 10 	movl   $0xc010ee30,0xc(%esp)
c0108663:	c0 
c0108664:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c010866b:	c0 
c010866c:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108673:	00 
c0108674:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c010867b:	e8 5a 87 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0108680:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108683:	83 c0 04             	add    $0x4,%eax
c0108686:	89 44 24 04          	mov    %eax,0x4(%esp)
c010868a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010868d:	89 04 24             	mov    %eax,(%esp)
c0108690:	e8 d3 f5 ff ff       	call   c0107c68 <find_vma>
c0108695:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0108698:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c010869c:	74 24                	je     c01086c2 <check_vma_struct+0x368>
c010869e:	c7 44 24 0c 3d ee 10 	movl   $0xc010ee3d,0xc(%esp)
c01086a5:	c0 
c01086a6:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c01086ad:	c0 
c01086ae:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c01086b5:	00 
c01086b6:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c01086bd:	e8 18 87 ff ff       	call   c0100dda <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c01086c2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01086c5:	8b 50 04             	mov    0x4(%eax),%edx
c01086c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086cb:	39 c2                	cmp    %eax,%edx
c01086cd:	75 10                	jne    c01086df <check_vma_struct+0x385>
c01086cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01086d2:	8b 50 08             	mov    0x8(%eax),%edx
c01086d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086d8:	83 c0 02             	add    $0x2,%eax
c01086db:	39 c2                	cmp    %eax,%edx
c01086dd:	74 24                	je     c0108703 <check_vma_struct+0x3a9>
c01086df:	c7 44 24 0c 4c ee 10 	movl   $0xc010ee4c,0xc(%esp)
c01086e6:	c0 
c01086e7:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c01086ee:	c0 
c01086ef:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c01086f6:	00 
c01086f7:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c01086fe:	e8 d7 86 ff ff       	call   c0100dda <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108703:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108706:	8b 50 04             	mov    0x4(%eax),%edx
c0108709:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010870c:	39 c2                	cmp    %eax,%edx
c010870e:	75 10                	jne    c0108720 <check_vma_struct+0x3c6>
c0108710:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108713:	8b 50 08             	mov    0x8(%eax),%edx
c0108716:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108719:	83 c0 02             	add    $0x2,%eax
c010871c:	39 c2                	cmp    %eax,%edx
c010871e:	74 24                	je     c0108744 <check_vma_struct+0x3ea>
c0108720:	c7 44 24 0c 7c ee 10 	movl   $0xc010ee7c,0xc(%esp)
c0108727:	c0 
c0108728:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c010872f:	c0 
c0108730:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0108737:	00 
c0108738:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c010873f:	e8 96 86 ff ff       	call   c0100dda <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108744:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108748:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010874b:	89 d0                	mov    %edx,%eax
c010874d:	c1 e0 02             	shl    $0x2,%eax
c0108750:	01 d0                	add    %edx,%eax
c0108752:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108755:	0f 8d 20 fe ff ff    	jge    c010857b <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c010875b:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108762:	eb 70                	jmp    c01087d4 <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108764:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108767:	89 44 24 04          	mov    %eax,0x4(%esp)
c010876b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010876e:	89 04 24             	mov    %eax,(%esp)
c0108771:	e8 f2 f4 ff ff       	call   c0107c68 <find_vma>
c0108776:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108779:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010877d:	74 27                	je     c01087a6 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c010877f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108782:	8b 50 08             	mov    0x8(%eax),%edx
c0108785:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108788:	8b 40 04             	mov    0x4(%eax),%eax
c010878b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010878f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108793:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108796:	89 44 24 04          	mov    %eax,0x4(%esp)
c010879a:	c7 04 24 ac ee 10 c0 	movl   $0xc010eeac,(%esp)
c01087a1:	e8 b2 7b ff ff       	call   c0100358 <cprintf>
        }
        assert(vma_below_5 == NULL);
c01087a6:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01087aa:	74 24                	je     c01087d0 <check_vma_struct+0x476>
c01087ac:	c7 44 24 0c d1 ee 10 	movl   $0xc010eed1,0xc(%esp)
c01087b3:	c0 
c01087b4:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c01087bb:	c0 
c01087bc:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c01087c3:	00 
c01087c4:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c01087cb:	e8 0a 86 ff ff       	call   c0100dda <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c01087d0:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01087d4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01087d8:	79 8a                	jns    c0108764 <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c01087da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01087dd:	89 04 24             	mov    %eax,(%esp)
c01087e0:	e8 08 f7 ff ff       	call   c0107eed <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c01087e5:	c7 04 24 e8 ee 10 c0 	movl   $0xc010eee8,(%esp)
c01087ec:	e8 67 7b ff ff       	call   c0100358 <cprintf>
}
c01087f1:	c9                   	leave  
c01087f2:	c3                   	ret    

c01087f3 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c01087f3:	55                   	push   %ebp
c01087f4:	89 e5                	mov    %esp,%ebp
c01087f6:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01087f9:	e8 b6 c6 ff ff       	call   c0104eb4 <nr_free_pages>
c01087fe:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108801:	e8 82 f3 ff ff       	call   c0107b88 <mm_create>
c0108806:	a3 cc 45 1c c0       	mov    %eax,0xc01c45cc
    assert(check_mm_struct != NULL);
c010880b:	a1 cc 45 1c c0       	mov    0xc01c45cc,%eax
c0108810:	85 c0                	test   %eax,%eax
c0108812:	75 24                	jne    c0108838 <check_pgfault+0x45>
c0108814:	c7 44 24 0c 07 ef 10 	movl   $0xc010ef07,0xc(%esp)
c010881b:	c0 
c010881c:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c0108823:	c0 
c0108824:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c010882b:	00 
c010882c:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c0108833:	e8 a2 85 ff ff       	call   c0100dda <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108838:	a1 cc 45 1c c0       	mov    0xc01c45cc,%eax
c010883d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108840:	8b 15 a4 23 1c c0    	mov    0xc01c23a4,%edx
c0108846:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108849:	89 50 0c             	mov    %edx,0xc(%eax)
c010884c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010884f:	8b 40 0c             	mov    0xc(%eax),%eax
c0108852:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108855:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108858:	8b 00                	mov    (%eax),%eax
c010885a:	85 c0                	test   %eax,%eax
c010885c:	74 24                	je     c0108882 <check_pgfault+0x8f>
c010885e:	c7 44 24 0c 1f ef 10 	movl   $0xc010ef1f,0xc(%esp)
c0108865:	c0 
c0108866:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c010886d:	c0 
c010886e:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108875:	00 
c0108876:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c010887d:	e8 58 85 ff ff       	call   c0100dda <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108882:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108889:	00 
c010888a:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108891:	00 
c0108892:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108899:	e8 8f f3 ff ff       	call   c0107c2d <vma_create>
c010889e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c01088a1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01088a5:	75 24                	jne    c01088cb <check_pgfault+0xd8>
c01088a7:	c7 44 24 0c b0 ed 10 	movl   $0xc010edb0,0xc(%esp)
c01088ae:	c0 
c01088af:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c01088b6:	c0 
c01088b7:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c01088be:	00 
c01088bf:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c01088c6:	e8 0f 85 ff ff       	call   c0100dda <__panic>

    insert_vma_struct(mm, vma);
c01088cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01088ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088d5:	89 04 24             	mov    %eax,(%esp)
c01088d8:	e8 e0 f4 ff ff       	call   c0107dbd <insert_vma_struct>

    uintptr_t addr = 0x100;
c01088dd:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c01088e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01088e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088ee:	89 04 24             	mov    %eax,(%esp)
c01088f1:	e8 72 f3 ff ff       	call   c0107c68 <find_vma>
c01088f6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01088f9:	74 24                	je     c010891f <check_pgfault+0x12c>
c01088fb:	c7 44 24 0c 2d ef 10 	movl   $0xc010ef2d,0xc(%esp)
c0108902:	c0 
c0108903:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c010890a:	c0 
c010890b:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108912:	00 
c0108913:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c010891a:	e8 bb 84 ff ff       	call   c0100dda <__panic>

    int i, sum = 0;
c010891f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108926:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010892d:	eb 17                	jmp    c0108946 <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c010892f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108932:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108935:	01 d0                	add    %edx,%eax
c0108937:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010893a:	88 10                	mov    %dl,(%eax)
        sum += i;
c010893c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010893f:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108942:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108946:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010894a:	7e e3                	jle    c010892f <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c010894c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108953:	eb 15                	jmp    c010896a <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108955:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108958:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010895b:	01 d0                	add    %edx,%eax
c010895d:	0f b6 00             	movzbl (%eax),%eax
c0108960:	0f be c0             	movsbl %al,%eax
c0108963:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108966:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010896a:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010896e:	7e e5                	jle    c0108955 <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108970:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108974:	74 24                	je     c010899a <check_pgfault+0x1a7>
c0108976:	c7 44 24 0c 47 ef 10 	movl   $0xc010ef47,0xc(%esp)
c010897d:	c0 
c010897e:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c0108985:	c0 
c0108986:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c010898d:	00 
c010898e:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c0108995:	e8 40 84 ff ff       	call   c0100dda <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c010899a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010899d:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01089a0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01089a3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01089a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01089af:	89 04 24             	mov    %eax,(%esp)
c01089b2:	e8 e1 d1 ff ff       	call   c0105b98 <page_remove>
    free_page(pde2page(pgdir[0]));
c01089b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01089ba:	8b 00                	mov    (%eax),%eax
c01089bc:	89 04 24             	mov    %eax,(%esp)
c01089bf:	e8 ac f1 ff ff       	call   c0107b70 <pde2page>
c01089c4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01089cb:	00 
c01089cc:	89 04 24             	mov    %eax,(%esp)
c01089cf:	e8 ae c4 ff ff       	call   c0104e82 <free_pages>
    pgdir[0] = 0;
c01089d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01089d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c01089dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089e0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c01089e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089ea:	89 04 24             	mov    %eax,(%esp)
c01089ed:	e8 fb f4 ff ff       	call   c0107eed <mm_destroy>
    check_mm_struct = NULL;
c01089f2:	c7 05 cc 45 1c c0 00 	movl   $0x0,0xc01c45cc
c01089f9:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c01089fc:	e8 b3 c4 ff ff       	call   c0104eb4 <nr_free_pages>
c0108a01:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108a04:	74 24                	je     c0108a2a <check_pgfault+0x237>
c0108a06:	c7 44 24 0c 50 ef 10 	movl   $0xc010ef50,0xc(%esp)
c0108a0d:	c0 
c0108a0e:	c7 44 24 08 bf ec 10 	movl   $0xc010ecbf,0x8(%esp)
c0108a15:	c0 
c0108a16:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0108a1d:	00 
c0108a1e:	c7 04 24 d4 ec 10 c0 	movl   $0xc010ecd4,(%esp)
c0108a25:	e8 b0 83 ff ff       	call   c0100dda <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108a2a:	c7 04 24 77 ef 10 c0 	movl   $0xc010ef77,(%esp)
c0108a31:	e8 22 79 ff ff       	call   c0100358 <cprintf>
}
c0108a36:	c9                   	leave  
c0108a37:	c3                   	ret    

c0108a38 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108a38:	55                   	push   %ebp
c0108a39:	89 e5                	mov    %esp,%ebp
c0108a3b:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108a3e:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108a45:	8b 45 10             	mov    0x10(%ebp),%eax
c0108a48:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a4f:	89 04 24             	mov    %eax,(%esp)
c0108a52:	e8 11 f2 ff ff       	call   c0107c68 <find_vma>
c0108a57:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108a5a:	a1 38 24 1c c0       	mov    0xc01c2438,%eax
c0108a5f:	83 c0 01             	add    $0x1,%eax
c0108a62:	a3 38 24 1c c0       	mov    %eax,0xc01c2438
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108a67:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108a6b:	74 0b                	je     c0108a78 <do_pgfault+0x40>
c0108a6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108a70:	8b 40 04             	mov    0x4(%eax),%eax
c0108a73:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108a76:	76 18                	jbe    c0108a90 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108a78:	8b 45 10             	mov    0x10(%ebp),%eax
c0108a7b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a7f:	c7 04 24 94 ef 10 c0 	movl   $0xc010ef94,(%esp)
c0108a86:	e8 cd 78 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0108a8b:	e9 8e 01 00 00       	jmp    c0108c1e <do_pgfault+0x1e6>
    }
    //check the error_code
    switch (error_code & 3) {
c0108a90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108a93:	83 e0 03             	and    $0x3,%eax
c0108a96:	85 c0                	test   %eax,%eax
c0108a98:	74 36                	je     c0108ad0 <do_pgfault+0x98>
c0108a9a:	83 f8 01             	cmp    $0x1,%eax
c0108a9d:	74 20                	je     c0108abf <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108a9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108aa2:	8b 40 0c             	mov    0xc(%eax),%eax
c0108aa5:	83 e0 02             	and    $0x2,%eax
c0108aa8:	85 c0                	test   %eax,%eax
c0108aaa:	75 11                	jne    c0108abd <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108aac:	c7 04 24 c4 ef 10 c0 	movl   $0xc010efc4,(%esp)
c0108ab3:	e8 a0 78 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108ab8:	e9 61 01 00 00       	jmp    c0108c1e <do_pgfault+0x1e6>
        }
        break;
c0108abd:	eb 2f                	jmp    c0108aee <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108abf:	c7 04 24 24 f0 10 c0 	movl   $0xc010f024,(%esp)
c0108ac6:	e8 8d 78 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0108acb:	e9 4e 01 00 00       	jmp    c0108c1e <do_pgfault+0x1e6>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108ad0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ad3:	8b 40 0c             	mov    0xc(%eax),%eax
c0108ad6:	83 e0 05             	and    $0x5,%eax
c0108ad9:	85 c0                	test   %eax,%eax
c0108adb:	75 11                	jne    c0108aee <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108add:	c7 04 24 5c f0 10 c0 	movl   $0xc010f05c,(%esp)
c0108ae4:	e8 6f 78 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108ae9:	e9 30 01 00 00       	jmp    c0108c1e <do_pgfault+0x1e6>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108aee:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108af5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108af8:	8b 40 0c             	mov    0xc(%eax),%eax
c0108afb:	83 e0 02             	and    $0x2,%eax
c0108afe:	85 c0                	test   %eax,%eax
c0108b00:	74 04                	je     c0108b06 <do_pgfault+0xce>
        perm |= PTE_W;
c0108b02:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108b06:	8b 45 10             	mov    0x10(%ebp),%eax
c0108b09:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108b0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b0f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108b14:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108b17:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108b1e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    * VARIABLES:
    *   mm->pgdir : the PDT of these vma
    *
    */
    /*LAB3 EXERCISE 1: 2013011303*/
    ptep = get_pte(mm->pgdir, addr, 1); //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
c0108b25:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b28:	8b 40 0c             	mov    0xc(%eax),%eax
c0108b2b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108b32:	00 
c0108b33:	8b 55 10             	mov    0x10(%ebp),%edx
c0108b36:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108b3a:	89 04 24             	mov    %eax,(%esp)
c0108b3d:	e8 3c ca ff ff       	call   c010557e <get_pte>
c0108b42:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (!ptep) goto failed;
c0108b45:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108b49:	75 05                	jne    c0108b50 <do_pgfault+0x118>
c0108b4b:	e9 ce 00 00 00       	jmp    c0108c1e <do_pgfault+0x1e6>
    if (*ptep == 0) {
c0108b50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108b53:	8b 00                	mov    (%eax),%eax
c0108b55:	85 c0                	test   %eax,%eax
c0108b57:	75 2f                	jne    c0108b88 <do_pgfault+0x150>
                            //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
        struct Page *page = pgdir_alloc_page(mm->pgdir, addr, perm);
c0108b59:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b5c:	8b 40 0c             	mov    0xc(%eax),%eax
c0108b5f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108b62:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108b66:	8b 55 10             	mov    0x10(%ebp),%edx
c0108b69:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108b6d:	89 04 24             	mov    %eax,(%esp)
c0108b70:	e8 7d d1 ff ff       	call   c0105cf2 <pgdir_alloc_page>
c0108b75:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (!page) goto failed;
c0108b78:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108b7c:	75 05                	jne    c0108b83 <do_pgfault+0x14b>
c0108b7e:	e9 9b 00 00 00       	jmp    c0108c1e <do_pgfault+0x1e6>
c0108b83:	e9 8f 00 00 00       	jmp    c0108c17 <do_pgfault+0x1df>
		     If the vma includes this addr is writable, then we can set the page writable by rewrite the *ptep.
		     This method could be used to implement the Copy on Write (COW) thchnology(a fast fork process method).
		  2) *ptep & PTE_P == 0 & but *ptep!=0, it means this pte is a  swap entry.
		     We should add the LAB3's results here.
     */
        if(swap_init_ok) {
c0108b88:	a1 2c 24 1c c0       	mov    0xc01c242c,%eax
c0108b8d:	85 c0                	test   %eax,%eax
c0108b8f:	74 6f                	je     c0108c00 <do_pgfault+0x1c8>
            struct Page *page=NULL;
c0108b91:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
                                    //(1）According to the mm AND addr, try to load the content of right disk page
                                    //    into the memory which page managed.
                                    //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
                                    //(3) make the page swappable.
                                    //(4) [NOTICE]: you myabe need to update your lab3's implementation for LAB5's normal execution.
            ret = swap_in(mm, addr, &page);
c0108b98:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0108b9b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108b9f:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ba2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ba6:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ba9:	89 04 24             	mov    %eax,(%esp)
c0108bac:	e8 ed e1 ff ff       	call   c0106d9e <swap_in>
c0108bb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (ret != 0) goto failed;
c0108bb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108bb8:	75 64                	jne    c0108c1e <do_pgfault+0x1e6>
            page_insert(mm->pgdir, page, addr, perm);
c0108bba:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108bbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bc0:	8b 40 0c             	mov    0xc(%eax),%eax
c0108bc3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0108bc6:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108bca:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0108bcd:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108bd1:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108bd5:	89 04 24             	mov    %eax,(%esp)
c0108bd8:	e8 ff cf ff ff       	call   c0105bdc <page_insert>
            swap_map_swappable(mm, addr, page, 1);
c0108bdd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108be0:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0108be7:	00 
c0108be8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108bec:	8b 45 10             	mov    0x10(%ebp),%eax
c0108bef:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108bf3:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bf6:	89 04 24             	mov    %eax,(%esp)
c0108bf9:	e8 d7 df ff ff       	call   c0106bd5 <swap_map_swappable>
c0108bfe:	eb 17                	jmp    c0108c17 <do_pgfault+0x1df>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0108c00:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c03:	8b 00                	mov    (%eax),%eax
c0108c05:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c09:	c7 04 24 c0 f0 10 c0 	movl   $0xc010f0c0,(%esp)
c0108c10:	e8 43 77 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108c15:	eb 07                	jmp    c0108c1e <do_pgfault+0x1e6>
        }
   }
   ret = 0;
c0108c17:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0108c1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108c21:	c9                   	leave  
c0108c22:	c3                   	ret    

c0108c23 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0108c23:	55                   	push   %ebp
c0108c24:	89 e5                	mov    %esp,%ebp
c0108c26:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0108c29:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108c2d:	0f 84 e0 00 00 00    	je     c0108d13 <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0108c33:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0108c3a:	76 1c                	jbe    c0108c58 <user_mem_check+0x35>
c0108c3c:	8b 45 10             	mov    0x10(%ebp),%eax
c0108c3f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108c42:	01 d0                	add    %edx,%eax
c0108c44:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108c47:	76 0f                	jbe    c0108c58 <user_mem_check+0x35>
c0108c49:	8b 45 10             	mov    0x10(%ebp),%eax
c0108c4c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108c4f:	01 d0                	add    %edx,%eax
c0108c51:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0108c56:	76 0a                	jbe    c0108c62 <user_mem_check+0x3f>
            return 0;
c0108c58:	b8 00 00 00 00       	mov    $0x0,%eax
c0108c5d:	e9 e2 00 00 00       	jmp    c0108d44 <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0108c62:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108c65:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0108c68:	8b 45 10             	mov    0x10(%ebp),%eax
c0108c6b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108c6e:	01 d0                	add    %edx,%eax
c0108c70:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0108c73:	e9 88 00 00 00       	jmp    c0108d00 <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0108c78:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108c7b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c82:	89 04 24             	mov    %eax,(%esp)
c0108c85:	e8 de ef ff ff       	call   c0107c68 <find_vma>
c0108c8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108c8d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108c91:	74 0b                	je     c0108c9e <user_mem_check+0x7b>
c0108c93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c96:	8b 40 04             	mov    0x4(%eax),%eax
c0108c99:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108c9c:	76 0a                	jbe    c0108ca8 <user_mem_check+0x85>
                return 0;
c0108c9e:	b8 00 00 00 00       	mov    $0x0,%eax
c0108ca3:	e9 9c 00 00 00       	jmp    c0108d44 <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0108ca8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cab:	8b 50 0c             	mov    0xc(%eax),%edx
c0108cae:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108cb2:	74 07                	je     c0108cbb <user_mem_check+0x98>
c0108cb4:	b8 02 00 00 00       	mov    $0x2,%eax
c0108cb9:	eb 05                	jmp    c0108cc0 <user_mem_check+0x9d>
c0108cbb:	b8 01 00 00 00       	mov    $0x1,%eax
c0108cc0:	21 d0                	and    %edx,%eax
c0108cc2:	85 c0                	test   %eax,%eax
c0108cc4:	75 07                	jne    c0108ccd <user_mem_check+0xaa>
                return 0;
c0108cc6:	b8 00 00 00 00       	mov    $0x0,%eax
c0108ccb:	eb 77                	jmp    c0108d44 <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0108ccd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108cd1:	74 24                	je     c0108cf7 <user_mem_check+0xd4>
c0108cd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cd6:	8b 40 0c             	mov    0xc(%eax),%eax
c0108cd9:	83 e0 08             	and    $0x8,%eax
c0108cdc:	85 c0                	test   %eax,%eax
c0108cde:	74 17                	je     c0108cf7 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0108ce0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ce3:	8b 40 04             	mov    0x4(%eax),%eax
c0108ce6:	05 00 10 00 00       	add    $0x1000,%eax
c0108ceb:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108cee:	76 07                	jbe    c0108cf7 <user_mem_check+0xd4>
                    return 0;
c0108cf0:	b8 00 00 00 00       	mov    $0x0,%eax
c0108cf5:	eb 4d                	jmp    c0108d44 <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0108cf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cfa:	8b 40 08             	mov    0x8(%eax),%eax
c0108cfd:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0108d00:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108d03:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0108d06:	0f 82 6c ff ff ff    	jb     c0108c78 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0108d0c:	b8 01 00 00 00       	mov    $0x1,%eax
c0108d11:	eb 31                	jmp    c0108d44 <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c0108d13:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0108d1a:	76 23                	jbe    c0108d3f <user_mem_check+0x11c>
c0108d1c:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d1f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108d22:	01 d0                	add    %edx,%eax
c0108d24:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108d27:	76 16                	jbe    c0108d3f <user_mem_check+0x11c>
c0108d29:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d2c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108d2f:	01 d0                	add    %edx,%eax
c0108d31:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0108d36:	77 07                	ja     c0108d3f <user_mem_check+0x11c>
c0108d38:	b8 01 00 00 00       	mov    $0x1,%eax
c0108d3d:	eb 05                	jmp    c0108d44 <user_mem_check+0x121>
c0108d3f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108d44:	c9                   	leave  
c0108d45:	c3                   	ret    

c0108d46 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c0108d46:	55                   	push   %ebp
c0108d47:	89 e5                	mov    %esp,%ebp
c0108d49:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c0108d4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d4f:	8b 04 85 e0 45 1c c0 	mov    -0x3fe3ba20(,%eax,4),%eax
c0108d56:	83 f8 01             	cmp    $0x1,%eax
c0108d59:	0f 85 85 00 00 00    	jne    c0108de4 <phi_test_sema+0x9e>
c0108d5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d62:	8d 48 04             	lea    0x4(%eax),%ecx
c0108d65:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108d6a:	89 c8                	mov    %ecx,%eax
c0108d6c:	f7 ea                	imul   %edx
c0108d6e:	d1 fa                	sar    %edx
c0108d70:	89 c8                	mov    %ecx,%eax
c0108d72:	c1 f8 1f             	sar    $0x1f,%eax
c0108d75:	29 c2                	sub    %eax,%edx
c0108d77:	89 d0                	mov    %edx,%eax
c0108d79:	c1 e0 02             	shl    $0x2,%eax
c0108d7c:	01 d0                	add    %edx,%eax
c0108d7e:	29 c1                	sub    %eax,%ecx
c0108d80:	89 ca                	mov    %ecx,%edx
c0108d82:	8b 04 95 e0 45 1c c0 	mov    -0x3fe3ba20(,%edx,4),%eax
c0108d89:	83 f8 02             	cmp    $0x2,%eax
c0108d8c:	74 56                	je     c0108de4 <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c0108d8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d91:	8d 48 01             	lea    0x1(%eax),%ecx
c0108d94:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108d99:	89 c8                	mov    %ecx,%eax
c0108d9b:	f7 ea                	imul   %edx
c0108d9d:	d1 fa                	sar    %edx
c0108d9f:	89 c8                	mov    %ecx,%eax
c0108da1:	c1 f8 1f             	sar    $0x1f,%eax
c0108da4:	29 c2                	sub    %eax,%edx
c0108da6:	89 d0                	mov    %edx,%eax
c0108da8:	c1 e0 02             	shl    $0x2,%eax
c0108dab:	01 d0                	add    %edx,%eax
c0108dad:	29 c1                	sub    %eax,%ecx
c0108daf:	89 ca                	mov    %ecx,%edx
c0108db1:	8b 04 95 e0 45 1c c0 	mov    -0x3fe3ba20(,%edx,4),%eax
c0108db8:	83 f8 02             	cmp    $0x2,%eax
c0108dbb:	74 27                	je     c0108de4 <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c0108dbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0108dc0:	c7 04 85 e0 45 1c c0 	movl   $0x2,-0x3fe3ba20(,%eax,4)
c0108dc7:	02 00 00 00 
        up(&s[i]);
c0108dcb:	8b 55 08             	mov    0x8(%ebp),%edx
c0108dce:	89 d0                	mov    %edx,%eax
c0108dd0:	01 c0                	add    %eax,%eax
c0108dd2:	01 d0                	add    %edx,%eax
c0108dd4:	c1 e0 02             	shl    $0x2,%eax
c0108dd7:	05 80 46 1c c0       	add    $0xc01c4680,%eax
c0108ddc:	89 04 24             	mov    %eax,(%esp)
c0108ddf:	e8 f0 09 00 00       	call   c01097d4 <up>
    }
}
c0108de4:	c9                   	leave  
c0108de5:	c3                   	ret    

c0108de6 <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0108de6:	55                   	push   %ebp
c0108de7:	89 e5                	mov    %esp,%ebp
c0108de9:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0108dec:	c7 04 24 08 46 1c c0 	movl   $0xc01c4608,(%esp)
c0108df3:	e8 f7 09 00 00       	call   c01097ef <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0108df8:	8b 45 08             	mov    0x8(%ebp),%eax
c0108dfb:	c7 04 85 e0 45 1c c0 	movl   $0x1,-0x3fe3ba20(,%eax,4)
c0108e02:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c0108e06:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e09:	89 04 24             	mov    %eax,(%esp)
c0108e0c:	e8 35 ff ff ff       	call   c0108d46 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0108e11:	c7 04 24 08 46 1c c0 	movl   $0xc01c4608,(%esp)
c0108e18:	e8 b7 09 00 00       	call   c01097d4 <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0108e1d:	8b 55 08             	mov    0x8(%ebp),%edx
c0108e20:	89 d0                	mov    %edx,%eax
c0108e22:	01 c0                	add    %eax,%eax
c0108e24:	01 d0                	add    %edx,%eax
c0108e26:	c1 e0 02             	shl    $0x2,%eax
c0108e29:	05 80 46 1c c0       	add    $0xc01c4680,%eax
c0108e2e:	89 04 24             	mov    %eax,(%esp)
c0108e31:	e8 b9 09 00 00       	call   c01097ef <down>
}
c0108e36:	c9                   	leave  
c0108e37:	c3                   	ret    

c0108e38 <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0108e38:	55                   	push   %ebp
c0108e39:	89 e5                	mov    %esp,%ebp
c0108e3b:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0108e3e:	c7 04 24 08 46 1c c0 	movl   $0xc01c4608,(%esp)
c0108e45:	e8 a5 09 00 00       	call   c01097ef <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c0108e4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e4d:	c7 04 85 e0 45 1c c0 	movl   $0x0,-0x3fe3ba20(,%eax,4)
c0108e54:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c0108e58:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e5b:	8d 48 04             	lea    0x4(%eax),%ecx
c0108e5e:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108e63:	89 c8                	mov    %ecx,%eax
c0108e65:	f7 ea                	imul   %edx
c0108e67:	d1 fa                	sar    %edx
c0108e69:	89 c8                	mov    %ecx,%eax
c0108e6b:	c1 f8 1f             	sar    $0x1f,%eax
c0108e6e:	29 c2                	sub    %eax,%edx
c0108e70:	89 d0                	mov    %edx,%eax
c0108e72:	c1 e0 02             	shl    $0x2,%eax
c0108e75:	01 d0                	add    %edx,%eax
c0108e77:	29 c1                	sub    %eax,%ecx
c0108e79:	89 ca                	mov    %ecx,%edx
c0108e7b:	89 14 24             	mov    %edx,(%esp)
c0108e7e:	e8 c3 fe ff ff       	call   c0108d46 <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0108e83:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e86:	8d 48 01             	lea    0x1(%eax),%ecx
c0108e89:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108e8e:	89 c8                	mov    %ecx,%eax
c0108e90:	f7 ea                	imul   %edx
c0108e92:	d1 fa                	sar    %edx
c0108e94:	89 c8                	mov    %ecx,%eax
c0108e96:	c1 f8 1f             	sar    $0x1f,%eax
c0108e99:	29 c2                	sub    %eax,%edx
c0108e9b:	89 d0                	mov    %edx,%eax
c0108e9d:	c1 e0 02             	shl    $0x2,%eax
c0108ea0:	01 d0                	add    %edx,%eax
c0108ea2:	29 c1                	sub    %eax,%ecx
c0108ea4:	89 ca                	mov    %ecx,%edx
c0108ea6:	89 14 24             	mov    %edx,(%esp)
c0108ea9:	e8 98 fe ff ff       	call   c0108d46 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0108eae:	c7 04 24 08 46 1c c0 	movl   $0xc01c4608,(%esp)
c0108eb5:	e8 1a 09 00 00       	call   c01097d4 <up>
}
c0108eba:	c9                   	leave  
c0108ebb:	c3                   	ret    

c0108ebc <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c0108ebc:	55                   	push   %ebp
c0108ebd:	89 e5                	mov    %esp,%ebp
c0108ebf:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c0108ec2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0108ec9:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ecc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c0108ecf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108ed2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ed6:	c7 04 24 e8 f0 10 c0 	movl   $0xc010f0e8,(%esp)
c0108edd:	e8 76 74 ff ff       	call   c0100358 <cprintf>
    while(iter++<TIMES)
c0108ee2:	eb 62                	jmp    c0108f46 <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c0108ee4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108ee7:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108eeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108eee:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ef2:	c7 04 24 08 f1 10 c0 	movl   $0xc010f108,(%esp)
c0108ef9:	e8 5a 74 ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c0108efe:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0108f05:	e8 55 2b 00 00       	call   c010ba5f <do_sleep>
        phi_take_forks_sema(i); 
c0108f0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108f0d:	89 04 24             	mov    %eax,(%esp)
c0108f10:	e8 d1 fe ff ff       	call   c0108de6 <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c0108f15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108f18:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108f1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f23:	c7 04 24 38 f1 10 c0 	movl   $0xc010f138,(%esp)
c0108f2a:	e8 29 74 ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c0108f2f:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0108f36:	e8 24 2b 00 00       	call   c010ba5f <do_sleep>
        phi_put_forks_sema(i); 
c0108f3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108f3e:	89 04 24             	mov    %eax,(%esp)
c0108f41:	e8 f2 fe ff ff       	call   c0108e38 <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c0108f46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f49:	8d 50 01             	lea    0x1(%eax),%edx
c0108f4c:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0108f4f:	83 f8 03             	cmp    $0x3,%eax
c0108f52:	7e 90                	jle    c0108ee4 <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c0108f54:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108f57:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f5b:	c7 04 24 63 f1 10 c0 	movl   $0xc010f163,(%esp)
c0108f62:	e8 f1 73 ff ff       	call   c0100358 <cprintf>
    return 0;    
c0108f67:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108f6c:	c9                   	leave  
c0108f6d:	c3                   	ret    

c0108f6e <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c0108f6e:	55                   	push   %ebp
c0108f6f:	89 e5                	mov    %esp,%ebp
c0108f71:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c0108f74:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f77:	8b 04 85 40 46 1c c0 	mov    -0x3fe3b9c0(,%eax,4),%eax
c0108f7e:	83 f8 01             	cmp    $0x1,%eax
c0108f81:	0f 85 b5 00 00 00    	jne    c010903c <phi_test_condvar+0xce>
c0108f87:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f8a:	8d 48 04             	lea    0x4(%eax),%ecx
c0108f8d:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108f92:	89 c8                	mov    %ecx,%eax
c0108f94:	f7 ea                	imul   %edx
c0108f96:	d1 fa                	sar    %edx
c0108f98:	89 c8                	mov    %ecx,%eax
c0108f9a:	c1 f8 1f             	sar    $0x1f,%eax
c0108f9d:	29 c2                	sub    %eax,%edx
c0108f9f:	89 d0                	mov    %edx,%eax
c0108fa1:	c1 e0 02             	shl    $0x2,%eax
c0108fa4:	01 d0                	add    %edx,%eax
c0108fa6:	29 c1                	sub    %eax,%ecx
c0108fa8:	89 ca                	mov    %ecx,%edx
c0108faa:	8b 04 95 40 46 1c c0 	mov    -0x3fe3b9c0(,%edx,4),%eax
c0108fb1:	83 f8 02             	cmp    $0x2,%eax
c0108fb4:	0f 84 82 00 00 00    	je     c010903c <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c0108fba:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fbd:	8d 48 01             	lea    0x1(%eax),%ecx
c0108fc0:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108fc5:	89 c8                	mov    %ecx,%eax
c0108fc7:	f7 ea                	imul   %edx
c0108fc9:	d1 fa                	sar    %edx
c0108fcb:	89 c8                	mov    %ecx,%eax
c0108fcd:	c1 f8 1f             	sar    $0x1f,%eax
c0108fd0:	29 c2                	sub    %eax,%edx
c0108fd2:	89 d0                	mov    %edx,%eax
c0108fd4:	c1 e0 02             	shl    $0x2,%eax
c0108fd7:	01 d0                	add    %edx,%eax
c0108fd9:	29 c1                	sub    %eax,%ecx
c0108fdb:	89 ca                	mov    %ecx,%edx
c0108fdd:	8b 04 95 40 46 1c c0 	mov    -0x3fe3b9c0(,%edx,4),%eax
c0108fe4:	83 f8 02             	cmp    $0x2,%eax
c0108fe7:	74 53                	je     c010903c <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c0108fe9:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fec:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ff0:	c7 04 24 80 f1 10 c0 	movl   $0xc010f180,(%esp)
c0108ff7:	e8 5c 73 ff ff       	call   c0100358 <cprintf>
        state_condvar[i] = EATING ;
c0108ffc:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fff:	c7 04 85 40 46 1c c0 	movl   $0x2,-0x3fe3b9c0(,%eax,4)
c0109006:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c010900a:	8b 45 08             	mov    0x8(%ebp),%eax
c010900d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109011:	c7 04 24 b4 f1 10 c0 	movl   $0xc010f1b4,(%esp)
c0109018:	e8 3b 73 ff ff       	call   c0100358 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c010901d:	a1 80 0a 13 c0       	mov    0xc0130a80,%eax
c0109022:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109025:	8b 55 08             	mov    0x8(%ebp),%edx
c0109028:	89 d0                	mov    %edx,%eax
c010902a:	c1 e0 02             	shl    $0x2,%eax
c010902d:	01 d0                	add    %edx,%eax
c010902f:	c1 e0 02             	shl    $0x2,%eax
c0109032:	01 c8                	add    %ecx,%eax
c0109034:	89 04 24             	mov    %eax,(%esp)
c0109037:	e8 8f 04 00 00       	call   c01094cb <cond_signal>
    }
}
c010903c:	c9                   	leave  
c010903d:	c3                   	ret    

c010903e <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c010903e:	55                   	push   %ebp
c010903f:	89 e5                	mov    %esp,%ebp
c0109041:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c0109044:	a1 80 0a 13 c0       	mov    0xc0130a80,%eax
c0109049:	89 04 24             	mov    %eax,(%esp)
c010904c:	e8 9e 07 00 00       	call   c01097ef <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: 2013011303
     // I am hungry
     // try to get fork
    state_condvar[i] = HUNGRY;
c0109051:	8b 45 08             	mov    0x8(%ebp),%eax
c0109054:	c7 04 85 40 46 1c c0 	movl   $0x1,-0x3fe3b9c0(,%eax,4)
c010905b:	01 00 00 00 
    phi_test_condvar(i);
c010905f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109062:	89 04 24             	mov    %eax,(%esp)
c0109065:	e8 04 ff ff ff       	call   c0108f6e <phi_test_condvar>
    while (state_condvar[i] != EATING) {
c010906a:	eb 32                	jmp    c010909e <phi_take_forks_condvar+0x60>
        cprintf("phi_take_forks_condvar: %d didn’t get fork and will wait\n", i);
c010906c:	8b 45 08             	mov    0x8(%ebp),%eax
c010906f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109073:	c7 04 24 dc f1 10 c0 	movl   $0xc010f1dc,(%esp)
c010907a:	e8 d9 72 ff ff       	call   c0100358 <cprintf>
        cond_wait(&mtp->cv[i]);
c010907f:	a1 80 0a 13 c0       	mov    0xc0130a80,%eax
c0109084:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109087:	8b 55 08             	mov    0x8(%ebp),%edx
c010908a:	89 d0                	mov    %edx,%eax
c010908c:	c1 e0 02             	shl    $0x2,%eax
c010908f:	01 d0                	add    %edx,%eax
c0109091:	c1 e0 02             	shl    $0x2,%eax
c0109094:	01 c8                	add    %ecx,%eax
c0109096:	89 04 24             	mov    %eax,(%esp)
c0109099:	e8 d3 04 00 00       	call   c0109571 <cond_wait>
     // LAB7 EXERCISE1: 2013011303
     // I am hungry
     // try to get fork
    state_condvar[i] = HUNGRY;
    phi_test_condvar(i);
    while (state_condvar[i] != EATING) {
c010909e:	8b 45 08             	mov    0x8(%ebp),%eax
c01090a1:	8b 04 85 40 46 1c c0 	mov    -0x3fe3b9c0(,%eax,4),%eax
c01090a8:	83 f8 02             	cmp    $0x2,%eax
c01090ab:	75 bf                	jne    c010906c <phi_take_forks_condvar+0x2e>
        cprintf("phi_take_forks_condvar: %d didn’t get fork and will wait\n", i);
        cond_wait(&mtp->cv[i]);
    }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c01090ad:	a1 80 0a 13 c0       	mov    0xc0130a80,%eax
c01090b2:	8b 40 18             	mov    0x18(%eax),%eax
c01090b5:	85 c0                	test   %eax,%eax
c01090b7:	7e 12                	jle    c01090cb <phi_take_forks_condvar+0x8d>
         up(&(mtp->next));
c01090b9:	a1 80 0a 13 c0       	mov    0xc0130a80,%eax
c01090be:	83 c0 0c             	add    $0xc,%eax
c01090c1:	89 04 24             	mov    %eax,(%esp)
c01090c4:	e8 0b 07 00 00       	call   c01097d4 <up>
c01090c9:	eb 0d                	jmp    c01090d8 <phi_take_forks_condvar+0x9a>
      else
         up(&(mtp->mutex));
c01090cb:	a1 80 0a 13 c0       	mov    0xc0130a80,%eax
c01090d0:	89 04 24             	mov    %eax,(%esp)
c01090d3:	e8 fc 06 00 00       	call   c01097d4 <up>
}
c01090d8:	c9                   	leave  
c01090d9:	c3                   	ret    

c01090da <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c01090da:	55                   	push   %ebp
c01090db:	89 e5                	mov    %esp,%ebp
c01090dd:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c01090e0:	a1 80 0a 13 c0       	mov    0xc0130a80,%eax
c01090e5:	89 04 24             	mov    %eax,(%esp)
c01090e8:	e8 02 07 00 00       	call   c01097ef <down>

//--------into routine in monitor--------------
     // LAB7 EXERCISE1: 2013011303
     // I ate over
     // test left and right neighbors
    state_condvar[i] = THINKING;
c01090ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01090f0:	c7 04 85 40 46 1c c0 	movl   $0x0,-0x3fe3b9c0(,%eax,4)
c01090f7:	00 00 00 00 
    phi_test_condvar(LEFT);
c01090fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01090fe:	8d 48 04             	lea    0x4(%eax),%ecx
c0109101:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109106:	89 c8                	mov    %ecx,%eax
c0109108:	f7 ea                	imul   %edx
c010910a:	d1 fa                	sar    %edx
c010910c:	89 c8                	mov    %ecx,%eax
c010910e:	c1 f8 1f             	sar    $0x1f,%eax
c0109111:	29 c2                	sub    %eax,%edx
c0109113:	89 d0                	mov    %edx,%eax
c0109115:	c1 e0 02             	shl    $0x2,%eax
c0109118:	01 d0                	add    %edx,%eax
c010911a:	29 c1                	sub    %eax,%ecx
c010911c:	89 ca                	mov    %ecx,%edx
c010911e:	89 14 24             	mov    %edx,(%esp)
c0109121:	e8 48 fe ff ff       	call   c0108f6e <phi_test_condvar>
    phi_test_condvar(RIGHT);
c0109126:	8b 45 08             	mov    0x8(%ebp),%eax
c0109129:	8d 48 01             	lea    0x1(%eax),%ecx
c010912c:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109131:	89 c8                	mov    %ecx,%eax
c0109133:	f7 ea                	imul   %edx
c0109135:	d1 fa                	sar    %edx
c0109137:	89 c8                	mov    %ecx,%eax
c0109139:	c1 f8 1f             	sar    $0x1f,%eax
c010913c:	29 c2                	sub    %eax,%edx
c010913e:	89 d0                	mov    %edx,%eax
c0109140:	c1 e0 02             	shl    $0x2,%eax
c0109143:	01 d0                	add    %edx,%eax
c0109145:	29 c1                	sub    %eax,%ecx
c0109147:	89 ca                	mov    %ecx,%edx
c0109149:	89 14 24             	mov    %edx,(%esp)
c010914c:	e8 1d fe ff ff       	call   c0108f6e <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c0109151:	a1 80 0a 13 c0       	mov    0xc0130a80,%eax
c0109156:	8b 40 18             	mov    0x18(%eax),%eax
c0109159:	85 c0                	test   %eax,%eax
c010915b:	7e 12                	jle    c010916f <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c010915d:	a1 80 0a 13 c0       	mov    0xc0130a80,%eax
c0109162:	83 c0 0c             	add    $0xc,%eax
c0109165:	89 04 24             	mov    %eax,(%esp)
c0109168:	e8 67 06 00 00       	call   c01097d4 <up>
c010916d:	eb 0d                	jmp    c010917c <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c010916f:	a1 80 0a 13 c0       	mov    0xc0130a80,%eax
c0109174:	89 04 24             	mov    %eax,(%esp)
c0109177:	e8 58 06 00 00       	call   c01097d4 <up>
}
c010917c:	c9                   	leave  
c010917d:	c3                   	ret    

c010917e <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c010917e:	55                   	push   %ebp
c010917f:	89 e5                	mov    %esp,%ebp
c0109181:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c0109184:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c010918b:	8b 45 08             	mov    0x8(%ebp),%eax
c010918e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c0109191:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109194:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109198:	c7 04 24 18 f2 10 c0 	movl   $0xc010f218,(%esp)
c010919f:	e8 b4 71 ff ff       	call   c0100358 <cprintf>
    while(iter++<TIMES)
c01091a4:	eb 62                	jmp    c0109208 <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c01091a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091a9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01091ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091b4:	c7 04 24 38 f2 10 c0 	movl   $0xc010f238,(%esp)
c01091bb:	e8 98 71 ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c01091c0:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01091c7:	e8 93 28 00 00       	call   c010ba5f <do_sleep>
        phi_take_forks_condvar(i); 
c01091cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091cf:	89 04 24             	mov    %eax,(%esp)
c01091d2:	e8 67 fe ff ff       	call   c010903e <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c01091d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091da:	89 44 24 08          	mov    %eax,0x8(%esp)
c01091de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091e5:	c7 04 24 68 f2 10 c0 	movl   $0xc010f268,(%esp)
c01091ec:	e8 67 71 ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c01091f1:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01091f8:	e8 62 28 00 00       	call   c010ba5f <do_sleep>
        phi_put_forks_condvar(i); 
c01091fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109200:	89 04 24             	mov    %eax,(%esp)
c0109203:	e8 d2 fe ff ff       	call   c01090da <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c0109208:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010920b:	8d 50 01             	lea    0x1(%eax),%edx
c010920e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109211:	83 f8 03             	cmp    $0x3,%eax
c0109214:	7e 90                	jle    c01091a6 <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c0109216:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109219:	89 44 24 04          	mov    %eax,0x4(%esp)
c010921d:	c7 04 24 98 f2 10 c0 	movl   $0xc010f298,(%esp)
c0109224:	e8 2f 71 ff ff       	call   c0100358 <cprintf>
    return 0;    
c0109229:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010922e:	c9                   	leave  
c010922f:	c3                   	ret    

c0109230 <check_sync>:

void check_sync(void){
c0109230:	55                   	push   %ebp
c0109231:	89 e5                	mov    %esp,%ebp
c0109233:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c0109236:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010923d:	00 
c010923e:	c7 04 24 08 46 1c c0 	movl   $0xc01c4608,(%esp)
c0109245:	e8 17 04 00 00       	call   c0109661 <sem_init>
    for(i=0;i<N;i++){
c010924a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109251:	e9 94 00 00 00       	jmp    c01092ea <check_sync+0xba>
        sem_init(&s[i], 0);
c0109256:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109259:	89 d0                	mov    %edx,%eax
c010925b:	01 c0                	add    %eax,%eax
c010925d:	01 d0                	add    %edx,%eax
c010925f:	c1 e0 02             	shl    $0x2,%eax
c0109262:	05 80 46 1c c0       	add    $0xc01c4680,%eax
c0109267:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010926e:	00 
c010926f:	89 04 24             	mov    %eax,(%esp)
c0109272:	e8 ea 03 00 00       	call   c0109661 <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c0109277:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010927a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109281:	00 
c0109282:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109286:	c7 04 24 bc 8e 10 c0 	movl   $0xc0108ebc,(%esp)
c010928d:	e8 33 13 00 00       	call   c010a5c5 <kernel_thread>
c0109292:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c0109295:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109299:	7f 1c                	jg     c01092b7 <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c010929b:	c7 44 24 08 b8 f2 10 	movl   $0xc010f2b8,0x8(%esp)
c01092a2:	c0 
c01092a3:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c01092aa:	00 
c01092ab:	c7 04 24 ea f2 10 c0 	movl   $0xc010f2ea,(%esp)
c01092b2:	e8 23 7b ff ff       	call   c0100dda <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c01092b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092ba:	89 04 24             	mov    %eax,(%esp)
c01092bd:	e8 8f 12 00 00       	call   c010a551 <find_proc>
c01092c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01092c5:	89 04 95 54 46 1c c0 	mov    %eax,-0x3fe3b9ac(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c01092cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092cf:	8b 04 85 54 46 1c c0 	mov    -0x3fe3b9ac(,%eax,4),%eax
c01092d6:	c7 44 24 04 01 f3 10 	movl   $0xc010f301,0x4(%esp)
c01092dd:	c0 
c01092de:	89 04 24             	mov    %eax,(%esp)
c01092e1:	e8 52 0e 00 00       	call   c010a138 <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c01092e6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01092ea:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01092ee:	0f 8e 62 ff ff ff    	jle    c0109256 <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c01092f4:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01092fb:	00 
c01092fc:	c7 04 24 20 46 1c c0 	movl   $0xc01c4620,(%esp)
c0109303:	e8 99 00 00 00       	call   c01093a1 <monitor_init>
    for(i=0;i<N;i++){
c0109308:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010930f:	e9 81 00 00 00       	jmp    c0109395 <check_sync+0x165>
        state_condvar[i]=THINKING;
c0109314:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109317:	c7 04 85 40 46 1c c0 	movl   $0x0,-0x3fe3b9c0(,%eax,4)
c010931e:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0109322:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109325:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010932c:	00 
c010932d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109331:	c7 04 24 7e 91 10 c0 	movl   $0xc010917e,(%esp)
c0109338:	e8 88 12 00 00       	call   c010a5c5 <kernel_thread>
c010933d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c0109340:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109344:	7f 1c                	jg     c0109362 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c0109346:	c7 44 24 08 18 f3 10 	movl   $0xc010f318,0x8(%esp)
c010934d:	c0 
c010934e:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0109355:	00 
c0109356:	c7 04 24 ea f2 10 c0 	movl   $0xc010f2ea,(%esp)
c010935d:	e8 78 7a ff ff       	call   c0100dda <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0109362:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109365:	89 04 24             	mov    %eax,(%esp)
c0109368:	e8 e4 11 00 00       	call   c010a551 <find_proc>
c010936d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109370:	89 04 95 f4 45 1c c0 	mov    %eax,-0x3fe3ba0c(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c0109377:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010937a:	8b 04 85 f4 45 1c c0 	mov    -0x3fe3ba0c(,%eax,4),%eax
c0109381:	c7 44 24 04 48 f3 10 	movl   $0xc010f348,0x4(%esp)
c0109388:	c0 
c0109389:	89 04 24             	mov    %eax,(%esp)
c010938c:	e8 a7 0d 00 00       	call   c010a138 <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c0109391:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109395:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109399:	0f 8e 75 ff ff ff    	jle    c0109314 <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c010939f:	c9                   	leave  
c01093a0:	c3                   	ret    

c01093a1 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c01093a1:	55                   	push   %ebp
c01093a2:	89 e5                	mov    %esp,%ebp
c01093a4:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c01093a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01093ab:	75 24                	jne    c01093d1 <monitor_init+0x30>
c01093ad:	c7 44 24 0c 64 f3 10 	movl   $0xc010f364,0xc(%esp)
c01093b4:	c0 
c01093b5:	c7 44 24 08 6d f3 10 	movl   $0xc010f36d,0x8(%esp)
c01093bc:	c0 
c01093bd:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c01093c4:	00 
c01093c5:	c7 04 24 82 f3 10 c0 	movl   $0xc010f382,(%esp)
c01093cc:	e8 09 7a ff ff       	call   c0100dda <__panic>
    mtp->next_count = 0;
c01093d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01093d4:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c01093db:	8b 45 08             	mov    0x8(%ebp),%eax
c01093de:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c01093e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01093e8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01093ef:	00 
c01093f0:	89 04 24             	mov    %eax,(%esp)
c01093f3:	e8 69 02 00 00       	call   c0109661 <sem_init>
    sem_init(&(mtp->next), 0);
c01093f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01093fb:	83 c0 0c             	add    $0xc,%eax
c01093fe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109405:	00 
c0109406:	89 04 24             	mov    %eax,(%esp)
c0109409:	e8 53 02 00 00       	call   c0109661 <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c010940e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109411:	89 d0                	mov    %edx,%eax
c0109413:	c1 e0 02             	shl    $0x2,%eax
c0109416:	01 d0                	add    %edx,%eax
c0109418:	c1 e0 02             	shl    $0x2,%eax
c010941b:	89 04 24             	mov    %eax,(%esp)
c010941e:	e8 7f b5 ff ff       	call   c01049a2 <kmalloc>
c0109423:	8b 55 08             	mov    0x8(%ebp),%edx
c0109426:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c0109429:	8b 45 08             	mov    0x8(%ebp),%eax
c010942c:	8b 40 1c             	mov    0x1c(%eax),%eax
c010942f:	85 c0                	test   %eax,%eax
c0109431:	75 24                	jne    c0109457 <monitor_init+0xb6>
c0109433:	c7 44 24 0c 96 f3 10 	movl   $0xc010f396,0xc(%esp)
c010943a:	c0 
c010943b:	c7 44 24 08 6d f3 10 	movl   $0xc010f36d,0x8(%esp)
c0109442:	c0 
c0109443:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c010944a:	00 
c010944b:	c7 04 24 82 f3 10 c0 	movl   $0xc010f382,(%esp)
c0109452:	e8 83 79 ff ff       	call   c0100dda <__panic>
    for(i=0; i<num_cv; i++){
c0109457:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010945e:	eb 61                	jmp    c01094c1 <monitor_init+0x120>
        mtp->cv[i].count=0;
c0109460:	8b 45 08             	mov    0x8(%ebp),%eax
c0109463:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109466:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109469:	89 d0                	mov    %edx,%eax
c010946b:	c1 e0 02             	shl    $0x2,%eax
c010946e:	01 d0                	add    %edx,%eax
c0109470:	c1 e0 02             	shl    $0x2,%eax
c0109473:	01 c8                	add    %ecx,%eax
c0109475:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c010947c:	8b 45 08             	mov    0x8(%ebp),%eax
c010947f:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109482:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109485:	89 d0                	mov    %edx,%eax
c0109487:	c1 e0 02             	shl    $0x2,%eax
c010948a:	01 d0                	add    %edx,%eax
c010948c:	c1 e0 02             	shl    $0x2,%eax
c010948f:	01 c8                	add    %ecx,%eax
c0109491:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109498:	00 
c0109499:	89 04 24             	mov    %eax,(%esp)
c010949c:	e8 c0 01 00 00       	call   c0109661 <sem_init>
        mtp->cv[i].owner=mtp;
c01094a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01094a4:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01094a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01094aa:	89 d0                	mov    %edx,%eax
c01094ac:	c1 e0 02             	shl    $0x2,%eax
c01094af:	01 d0                	add    %edx,%eax
c01094b1:	c1 e0 02             	shl    $0x2,%eax
c01094b4:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01094b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01094ba:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c01094bd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01094c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094c4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01094c7:	72 97                	jb     c0109460 <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c01094c9:	c9                   	leave  
c01094ca:	c3                   	ret    

c01094cb <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c01094cb:	55                   	push   %ebp
c01094cc:	89 e5                	mov    %esp,%ebp
c01094ce:	83 ec 28             	sub    $0x28,%esp
   //LAB7 EXERCISE1: 2013011303
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c01094d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01094d4:	8b 40 10             	mov    0x10(%eax),%eax
c01094d7:	8b 50 18             	mov    0x18(%eax),%edx
c01094da:	8b 45 08             	mov    0x8(%ebp),%eax
c01094dd:	8b 40 0c             	mov    0xc(%eax),%eax
c01094e0:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01094e4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01094e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01094eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01094ef:	c7 04 24 a4 f3 10 c0 	movl   $0xc010f3a4,(%esp)
c01094f6:	e8 5d 6e ff ff       	call   c0100358 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
   monitor_t *mtp = cvp->owner;
c01094fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01094fe:	8b 40 10             	mov    0x10(%eax),%eax
c0109501:	89 45 f4             	mov    %eax,-0xc(%ebp)
   if (cvp->count > 0) {
c0109504:	8b 45 08             	mov    0x8(%ebp),%eax
c0109507:	8b 40 0c             	mov    0xc(%eax),%eax
c010950a:	85 c0                	test   %eax,%eax
c010950c:	7e 37                	jle    c0109545 <cond_signal+0x7a>
      mtp->next_count++;
c010950e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109511:	8b 40 18             	mov    0x18(%eax),%eax
c0109514:	8d 50 01             	lea    0x1(%eax),%edx
c0109517:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010951a:	89 50 18             	mov    %edx,0x18(%eax)
      up(&cvp->sem);
c010951d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109520:	89 04 24             	mov    %eax,(%esp)
c0109523:	e8 ac 02 00 00       	call   c01097d4 <up>
      down(&mtp->next);
c0109528:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010952b:	83 c0 0c             	add    $0xc,%eax
c010952e:	89 04 24             	mov    %eax,(%esp)
c0109531:	e8 b9 02 00 00       	call   c01097ef <down>
      mtp->next_count--;
c0109536:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109539:	8b 40 18             	mov    0x18(%eax),%eax
c010953c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010953f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109542:	89 50 18             	mov    %edx,0x18(%eax)
   }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109545:	8b 45 08             	mov    0x8(%ebp),%eax
c0109548:	8b 40 10             	mov    0x10(%eax),%eax
c010954b:	8b 50 18             	mov    0x18(%eax),%edx
c010954e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109551:	8b 40 0c             	mov    0xc(%eax),%eax
c0109554:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109558:	89 44 24 08          	mov    %eax,0x8(%esp)
c010955c:	8b 45 08             	mov    0x8(%ebp),%eax
c010955f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109563:	c7 04 24 ec f3 10 c0 	movl   $0xc010f3ec,(%esp)
c010956a:	e8 e9 6d ff ff       	call   c0100358 <cprintf>
}
c010956f:	c9                   	leave  
c0109570:	c3                   	ret    

c0109571 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109571:	55                   	push   %ebp
c0109572:	89 e5                	mov    %esp,%ebp
c0109574:	83 ec 28             	sub    $0x28,%esp
    //LAB7 EXERCISE1: 2013011303
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109577:	8b 45 08             	mov    0x8(%ebp),%eax
c010957a:	8b 40 10             	mov    0x10(%eax),%eax
c010957d:	8b 50 18             	mov    0x18(%eax),%edx
c0109580:	8b 45 08             	mov    0x8(%ebp),%eax
c0109583:	8b 40 0c             	mov    0xc(%eax),%eax
c0109586:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010958a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010958e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109591:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109595:	c7 04 24 30 f4 10 c0 	movl   $0xc010f430,(%esp)
c010959c:	e8 b7 6d ff ff       	call   c0100358 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
    monitor_t *mtp = cvp->owner;
c01095a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01095a4:	8b 40 10             	mov    0x10(%eax),%eax
c01095a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cvp->count++;
c01095aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01095ad:	8b 40 0c             	mov    0xc(%eax),%eax
c01095b0:	8d 50 01             	lea    0x1(%eax),%edx
c01095b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01095b6:	89 50 0c             	mov    %edx,0xc(%eax)
    if (mtp->next_count > 0)
c01095b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095bc:	8b 40 18             	mov    0x18(%eax),%eax
c01095bf:	85 c0                	test   %eax,%eax
c01095c1:	7e 10                	jle    c01095d3 <cond_wait+0x62>
        up(&mtp->next);
c01095c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095c6:	83 c0 0c             	add    $0xc,%eax
c01095c9:	89 04 24             	mov    %eax,(%esp)
c01095cc:	e8 03 02 00 00       	call   c01097d4 <up>
c01095d1:	eb 0b                	jmp    c01095de <cond_wait+0x6d>
    else
        up(&mtp->mutex);
c01095d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095d6:	89 04 24             	mov    %eax,(%esp)
c01095d9:	e8 f6 01 00 00       	call   c01097d4 <up>
    down(&cvp->sem);
c01095de:	8b 45 08             	mov    0x8(%ebp),%eax
c01095e1:	89 04 24             	mov    %eax,(%esp)
c01095e4:	e8 06 02 00 00       	call   c01097ef <down>
    cvp->count--;
c01095e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01095ec:	8b 40 0c             	mov    0xc(%eax),%eax
c01095ef:	8d 50 ff             	lea    -0x1(%eax),%edx
c01095f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01095f5:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01095f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01095fb:	8b 40 10             	mov    0x10(%eax),%eax
c01095fe:	8b 50 18             	mov    0x18(%eax),%edx
c0109601:	8b 45 08             	mov    0x8(%ebp),%eax
c0109604:	8b 40 0c             	mov    0xc(%eax),%eax
c0109607:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010960b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010960f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109612:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109616:	c7 04 24 74 f4 10 c0 	movl   $0xc010f474,(%esp)
c010961d:	e8 36 6d ff ff       	call   c0100358 <cprintf>
}
c0109622:	c9                   	leave  
c0109623:	c3                   	ret    

c0109624 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109624:	55                   	push   %ebp
c0109625:	89 e5                	mov    %esp,%ebp
c0109627:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010962a:	9c                   	pushf  
c010962b:	58                   	pop    %eax
c010962c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010962f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109632:	25 00 02 00 00       	and    $0x200,%eax
c0109637:	85 c0                	test   %eax,%eax
c0109639:	74 0c                	je     c0109647 <__intr_save+0x23>
        intr_disable();
c010963b:	e8 f2 89 ff ff       	call   c0102032 <intr_disable>
        return 1;
c0109640:	b8 01 00 00 00       	mov    $0x1,%eax
c0109645:	eb 05                	jmp    c010964c <__intr_save+0x28>
    }
    return 0;
c0109647:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010964c:	c9                   	leave  
c010964d:	c3                   	ret    

c010964e <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010964e:	55                   	push   %ebp
c010964f:	89 e5                	mov    %esp,%ebp
c0109651:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109654:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109658:	74 05                	je     c010965f <__intr_restore+0x11>
        intr_enable();
c010965a:	e8 cd 89 ff ff       	call   c010202c <intr_enable>
    }
}
c010965f:	c9                   	leave  
c0109660:	c3                   	ret    

c0109661 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109661:	55                   	push   %ebp
c0109662:	89 e5                	mov    %esp,%ebp
c0109664:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109667:	8b 45 08             	mov    0x8(%ebp),%eax
c010966a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010966d:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c010966f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109672:	83 c0 04             	add    $0x4,%eax
c0109675:	89 04 24             	mov    %eax,(%esp)
c0109678:	e8 33 02 00 00       	call   c01098b0 <wait_queue_init>
}
c010967d:	c9                   	leave  
c010967e:	c3                   	ret    

c010967f <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c010967f:	55                   	push   %ebp
c0109680:	89 e5                	mov    %esp,%ebp
c0109682:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109685:	e8 9a ff ff ff       	call   c0109624 <__intr_save>
c010968a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c010968d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109690:	83 c0 04             	add    $0x4,%eax
c0109693:	89 04 24             	mov    %eax,(%esp)
c0109696:	e8 69 04 00 00       	call   c0109b04 <wait_queue_first>
c010969b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010969e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01096a2:	75 0f                	jne    c01096b3 <__up+0x34>
            sem->value ++;
c01096a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01096a7:	8b 00                	mov    (%eax),%eax
c01096a9:	8d 50 01             	lea    0x1(%eax),%edx
c01096ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01096af:	89 10                	mov    %edx,(%eax)
c01096b1:	eb 58                	jmp    c010970b <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c01096b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096b6:	8b 00                	mov    (%eax),%eax
c01096b8:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c01096be:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01096c1:	74 24                	je     c01096e7 <__up+0x68>
c01096c3:	c7 44 24 0c b8 f4 10 	movl   $0xc010f4b8,0xc(%esp)
c01096ca:	c0 
c01096cb:	c7 44 24 08 dd f4 10 	movl   $0xc010f4dd,0x8(%esp)
c01096d2:	c0 
c01096d3:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c01096da:	00 
c01096db:	c7 04 24 f2 f4 10 c0 	movl   $0xc010f4f2,(%esp)
c01096e2:	e8 f3 76 ff ff       	call   c0100dda <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c01096e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01096ea:	8d 50 04             	lea    0x4(%eax),%edx
c01096ed:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01096f4:	00 
c01096f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01096f8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01096fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109703:	89 14 24             	mov    %edx,(%esp)
c0109706:	e8 95 04 00 00       	call   c0109ba0 <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c010970b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010970e:	89 04 24             	mov    %eax,(%esp)
c0109711:	e8 38 ff ff ff       	call   c010964e <__intr_restore>
}
c0109716:	c9                   	leave  
c0109717:	c3                   	ret    

c0109718 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109718:	55                   	push   %ebp
c0109719:	89 e5                	mov    %esp,%ebp
c010971b:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010971e:	e8 01 ff ff ff       	call   c0109624 <__intr_save>
c0109723:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109726:	8b 45 08             	mov    0x8(%ebp),%eax
c0109729:	8b 00                	mov    (%eax),%eax
c010972b:	85 c0                	test   %eax,%eax
c010972d:	7e 22                	jle    c0109751 <__down+0x39>
        sem->value --;
c010972f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109732:	8b 00                	mov    (%eax),%eax
c0109734:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109737:	8b 45 08             	mov    0x8(%ebp),%eax
c010973a:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c010973c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010973f:	89 04 24             	mov    %eax,(%esp)
c0109742:	e8 07 ff ff ff       	call   c010964e <__intr_restore>
        return 0;
c0109747:	b8 00 00 00 00       	mov    $0x0,%eax
c010974c:	e9 81 00 00 00       	jmp    c01097d2 <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109751:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109754:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109757:	8b 45 08             	mov    0x8(%ebp),%eax
c010975a:	8d 50 04             	lea    0x4(%eax),%edx
c010975d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109760:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109764:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109767:	89 44 24 04          	mov    %eax,0x4(%esp)
c010976b:	89 14 24             	mov    %edx,(%esp)
c010976e:	e8 34 05 00 00       	call   c0109ca7 <wait_current_set>
    local_intr_restore(intr_flag);
c0109773:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109776:	89 04 24             	mov    %eax,(%esp)
c0109779:	e8 d0 fe ff ff       	call   c010964e <__intr_restore>

    schedule();
c010977e:	e8 9b 28 00 00       	call   c010c01e <schedule>

    local_intr_save(intr_flag);
c0109783:	e8 9c fe ff ff       	call   c0109624 <__intr_save>
c0109788:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c010978b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010978e:	89 04 24             	mov    %eax,(%esp)
c0109791:	e8 e2 03 00 00       	call   c0109b78 <wait_in_queue>
c0109796:	85 c0                	test   %eax,%eax
c0109798:	74 15                	je     c01097af <__down+0x97>
c010979a:	8b 45 08             	mov    0x8(%ebp),%eax
c010979d:	8d 50 04             	lea    0x4(%eax),%edx
c01097a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097a7:	89 14 24             	mov    %edx,(%esp)
c01097aa:	e8 c4 01 00 00       	call   c0109973 <wait_queue_del>
    local_intr_restore(intr_flag);
c01097af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097b2:	89 04 24             	mov    %eax,(%esp)
c01097b5:	e8 94 fe ff ff       	call   c010964e <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c01097ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097bd:	8b 40 04             	mov    0x4(%eax),%eax
c01097c0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01097c3:	74 08                	je     c01097cd <__down+0xb5>
        return wait->wakeup_flags;
c01097c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097c8:	8b 40 04             	mov    0x4(%eax),%eax
c01097cb:	eb 05                	jmp    c01097d2 <__down+0xba>
    }
    return 0;
c01097cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01097d2:	c9                   	leave  
c01097d3:	c3                   	ret    

c01097d4 <up>:

void
up(semaphore_t *sem) {
c01097d4:	55                   	push   %ebp
c01097d5:	89 e5                	mov    %esp,%ebp
c01097d7:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c01097da:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c01097e1:	00 
c01097e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01097e5:	89 04 24             	mov    %eax,(%esp)
c01097e8:	e8 92 fe ff ff       	call   c010967f <__up>
}
c01097ed:	c9                   	leave  
c01097ee:	c3                   	ret    

c01097ef <down>:

void
down(semaphore_t *sem) {
c01097ef:	55                   	push   %ebp
c01097f0:	89 e5                	mov    %esp,%ebp
c01097f2:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c01097f5:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c01097fc:	00 
c01097fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109800:	89 04 24             	mov    %eax,(%esp)
c0109803:	e8 10 ff ff ff       	call   c0109718 <__down>
c0109808:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c010980b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010980f:	74 24                	je     c0109835 <down+0x46>
c0109811:	c7 44 24 0c 02 f5 10 	movl   $0xc010f502,0xc(%esp)
c0109818:	c0 
c0109819:	c7 44 24 08 dd f4 10 	movl   $0xc010f4dd,0x8(%esp)
c0109820:	c0 
c0109821:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109828:	00 
c0109829:	c7 04 24 f2 f4 10 c0 	movl   $0xc010f4f2,(%esp)
c0109830:	e8 a5 75 ff ff       	call   c0100dda <__panic>
}
c0109835:	c9                   	leave  
c0109836:	c3                   	ret    

c0109837 <try_down>:

bool
try_down(semaphore_t *sem) {
c0109837:	55                   	push   %ebp
c0109838:	89 e5                	mov    %esp,%ebp
c010983a:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c010983d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109844:	e8 db fd ff ff       	call   c0109624 <__intr_save>
c0109849:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c010984c:	8b 45 08             	mov    0x8(%ebp),%eax
c010984f:	8b 00                	mov    (%eax),%eax
c0109851:	85 c0                	test   %eax,%eax
c0109853:	7e 14                	jle    c0109869 <try_down+0x32>
        sem->value --, ret = 1;
c0109855:	8b 45 08             	mov    0x8(%ebp),%eax
c0109858:	8b 00                	mov    (%eax),%eax
c010985a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010985d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109860:	89 10                	mov    %edx,(%eax)
c0109862:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109869:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010986c:	89 04 24             	mov    %eax,(%esp)
c010986f:	e8 da fd ff ff       	call   c010964e <__intr_restore>
    return ret;
c0109874:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109877:	c9                   	leave  
c0109878:	c3                   	ret    

c0109879 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109879:	55                   	push   %ebp
c010987a:	89 e5                	mov    %esp,%ebp
c010987c:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c010987f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109882:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109885:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109887:	8b 45 08             	mov    0x8(%ebp),%eax
c010988a:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109891:	8b 45 08             	mov    0x8(%ebp),%eax
c0109894:	83 c0 0c             	add    $0xc,%eax
c0109897:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010989a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010989d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01098a0:	89 50 04             	mov    %edx,0x4(%eax)
c01098a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01098a6:	8b 50 04             	mov    0x4(%eax),%edx
c01098a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01098ac:	89 10                	mov    %edx,(%eax)
}
c01098ae:	c9                   	leave  
c01098af:	c3                   	ret    

c01098b0 <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c01098b0:	55                   	push   %ebp
c01098b1:	89 e5                	mov    %esp,%ebp
c01098b3:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c01098b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01098b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01098bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01098bf:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01098c2:	89 50 04             	mov    %edx,0x4(%eax)
c01098c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01098c8:	8b 50 04             	mov    0x4(%eax),%edx
c01098cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01098ce:	89 10                	mov    %edx,(%eax)
}
c01098d0:	c9                   	leave  
c01098d1:	c3                   	ret    

c01098d2 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c01098d2:	55                   	push   %ebp
c01098d3:	89 e5                	mov    %esp,%ebp
c01098d5:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c01098d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01098db:	83 c0 0c             	add    $0xc,%eax
c01098de:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01098e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098e4:	8b 40 04             	mov    0x4(%eax),%eax
c01098e7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01098ea:	0f 94 c0             	sete   %al
c01098ed:	0f b6 c0             	movzbl %al,%eax
c01098f0:	85 c0                	test   %eax,%eax
c01098f2:	74 09                	je     c01098fd <wait_queue_add+0x2b>
c01098f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01098f7:	8b 00                	mov    (%eax),%eax
c01098f9:	85 c0                	test   %eax,%eax
c01098fb:	75 24                	jne    c0109921 <wait_queue_add+0x4f>
c01098fd:	c7 44 24 0c 10 f5 10 	movl   $0xc010f510,0xc(%esp)
c0109904:	c0 
c0109905:	c7 44 24 08 45 f5 10 	movl   $0xc010f545,0x8(%esp)
c010990c:	c0 
c010990d:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109914:	00 
c0109915:	c7 04 24 5a f5 10 c0 	movl   $0xc010f55a,(%esp)
c010991c:	e8 b9 74 ff ff       	call   c0100dda <__panic>
    wait->wait_queue = queue;
c0109921:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109924:	8b 55 08             	mov    0x8(%ebp),%edx
c0109927:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c010992a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010992d:	8d 50 0c             	lea    0xc(%eax),%edx
c0109930:	8b 45 08             	mov    0x8(%ebp),%eax
c0109933:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109936:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109939:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010993c:	8b 00                	mov    (%eax),%eax
c010993e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109941:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109944:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109947:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010994a:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010994d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109950:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109953:	89 10                	mov    %edx,(%eax)
c0109955:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109958:	8b 10                	mov    (%eax),%edx
c010995a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010995d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109960:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109963:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109966:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109969:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010996c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010996f:	89 10                	mov    %edx,(%eax)
}
c0109971:	c9                   	leave  
c0109972:	c3                   	ret    

c0109973 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109973:	55                   	push   %ebp
c0109974:	89 e5                	mov    %esp,%ebp
c0109976:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109979:	8b 45 0c             	mov    0xc(%ebp),%eax
c010997c:	83 c0 0c             	add    $0xc,%eax
c010997f:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109982:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109985:	8b 40 04             	mov    0x4(%eax),%eax
c0109988:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010998b:	0f 94 c0             	sete   %al
c010998e:	0f b6 c0             	movzbl %al,%eax
c0109991:	85 c0                	test   %eax,%eax
c0109993:	75 0b                	jne    c01099a0 <wait_queue_del+0x2d>
c0109995:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109998:	8b 40 08             	mov    0x8(%eax),%eax
c010999b:	3b 45 08             	cmp    0x8(%ebp),%eax
c010999e:	74 24                	je     c01099c4 <wait_queue_del+0x51>
c01099a0:	c7 44 24 0c 6c f5 10 	movl   $0xc010f56c,0xc(%esp)
c01099a7:	c0 
c01099a8:	c7 44 24 08 45 f5 10 	movl   $0xc010f545,0x8(%esp)
c01099af:	c0 
c01099b0:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c01099b7:	00 
c01099b8:	c7 04 24 5a f5 10 c0 	movl   $0xc010f55a,(%esp)
c01099bf:	e8 16 74 ff ff       	call   c0100dda <__panic>
    list_del_init(&(wait->wait_link));
c01099c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01099c7:	83 c0 0c             	add    $0xc,%eax
c01099ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01099cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01099d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01099d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099d6:	8b 40 04             	mov    0x4(%eax),%eax
c01099d9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01099dc:	8b 12                	mov    (%edx),%edx
c01099de:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01099e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01099e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01099e7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01099ea:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01099ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01099f0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01099f3:	89 10                	mov    %edx,(%eax)
c01099f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01099f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01099fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01099fe:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109a01:	89 50 04             	mov    %edx,0x4(%eax)
c0109a04:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109a07:	8b 50 04             	mov    0x4(%eax),%edx
c0109a0a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109a0d:	89 10                	mov    %edx,(%eax)
}
c0109a0f:	c9                   	leave  
c0109a10:	c3                   	ret    

c0109a11 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109a11:	55                   	push   %ebp
c0109a12:	89 e5                	mov    %esp,%ebp
c0109a14:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109a17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a1a:	83 c0 0c             	add    $0xc,%eax
c0109a1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109a20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a23:	8b 40 04             	mov    0x4(%eax),%eax
c0109a26:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109a29:	0f 94 c0             	sete   %al
c0109a2c:	0f b6 c0             	movzbl %al,%eax
c0109a2f:	85 c0                	test   %eax,%eax
c0109a31:	75 0b                	jne    c0109a3e <wait_queue_next+0x2d>
c0109a33:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a36:	8b 40 08             	mov    0x8(%eax),%eax
c0109a39:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109a3c:	74 24                	je     c0109a62 <wait_queue_next+0x51>
c0109a3e:	c7 44 24 0c 6c f5 10 	movl   $0xc010f56c,0xc(%esp)
c0109a45:	c0 
c0109a46:	c7 44 24 08 45 f5 10 	movl   $0xc010f545,0x8(%esp)
c0109a4d:	c0 
c0109a4e:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0109a55:	00 
c0109a56:	c7 04 24 5a f5 10 c0 	movl   $0xc010f55a,(%esp)
c0109a5d:	e8 78 73 ff ff       	call   c0100dda <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109a62:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a65:	83 c0 0c             	add    $0xc,%eax
c0109a68:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109a6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a6e:	8b 40 04             	mov    0x4(%eax),%eax
c0109a71:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109a74:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a77:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109a7a:	74 08                	je     c0109a84 <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0109a7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a7f:	83 e8 0c             	sub    $0xc,%eax
c0109a82:	eb 05                	jmp    c0109a89 <wait_queue_next+0x78>
    }
    return NULL;
c0109a84:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109a89:	c9                   	leave  
c0109a8a:	c3                   	ret    

c0109a8b <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109a8b:	55                   	push   %ebp
c0109a8c:	89 e5                	mov    %esp,%ebp
c0109a8e:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109a91:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a94:	83 c0 0c             	add    $0xc,%eax
c0109a97:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109a9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a9d:	8b 40 04             	mov    0x4(%eax),%eax
c0109aa0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109aa3:	0f 94 c0             	sete   %al
c0109aa6:	0f b6 c0             	movzbl %al,%eax
c0109aa9:	85 c0                	test   %eax,%eax
c0109aab:	75 0b                	jne    c0109ab8 <wait_queue_prev+0x2d>
c0109aad:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ab0:	8b 40 08             	mov    0x8(%eax),%eax
c0109ab3:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109ab6:	74 24                	je     c0109adc <wait_queue_prev+0x51>
c0109ab8:	c7 44 24 0c 6c f5 10 	movl   $0xc010f56c,0xc(%esp)
c0109abf:	c0 
c0109ac0:	c7 44 24 08 45 f5 10 	movl   $0xc010f545,0x8(%esp)
c0109ac7:	c0 
c0109ac8:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0109acf:	00 
c0109ad0:	c7 04 24 5a f5 10 c0 	movl   $0xc010f55a,(%esp)
c0109ad7:	e8 fe 72 ff ff       	call   c0100dda <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0109adc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109adf:	83 c0 0c             	add    $0xc,%eax
c0109ae2:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109ae5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ae8:	8b 00                	mov    (%eax),%eax
c0109aea:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109aed:	8b 45 08             	mov    0x8(%ebp),%eax
c0109af0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109af3:	74 08                	je     c0109afd <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c0109af5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109af8:	83 e8 0c             	sub    $0xc,%eax
c0109afb:	eb 05                	jmp    c0109b02 <wait_queue_prev+0x77>
    }
    return NULL;
c0109afd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109b02:	c9                   	leave  
c0109b03:	c3                   	ret    

c0109b04 <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c0109b04:	55                   	push   %ebp
c0109b05:	89 e5                	mov    %esp,%ebp
c0109b07:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109b0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b0d:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109b10:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109b13:	8b 40 04             	mov    0x4(%eax),%eax
c0109b16:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109b19:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b1c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109b1f:	74 08                	je     c0109b29 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0109b21:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109b24:	83 e8 0c             	sub    $0xc,%eax
c0109b27:	eb 05                	jmp    c0109b2e <wait_queue_first+0x2a>
    }
    return NULL;
c0109b29:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109b2e:	c9                   	leave  
c0109b2f:	c3                   	ret    

c0109b30 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0109b30:	55                   	push   %ebp
c0109b31:	89 e5                	mov    %esp,%ebp
c0109b33:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c0109b36:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b39:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109b3c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109b3f:	8b 00                	mov    (%eax),%eax
c0109b41:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109b44:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b47:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109b4a:	74 08                	je     c0109b54 <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c0109b4c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109b4f:	83 e8 0c             	sub    $0xc,%eax
c0109b52:	eb 05                	jmp    c0109b59 <wait_queue_last+0x29>
    }
    return NULL;
c0109b54:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109b59:	c9                   	leave  
c0109b5a:	c3                   	ret    

c0109b5b <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c0109b5b:	55                   	push   %ebp
c0109b5c:	89 e5                	mov    %esp,%ebp
c0109b5e:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c0109b61:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b64:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109b67:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109b6a:	8b 40 04             	mov    0x4(%eax),%eax
c0109b6d:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109b70:	0f 94 c0             	sete   %al
c0109b73:	0f b6 c0             	movzbl %al,%eax
}
c0109b76:	c9                   	leave  
c0109b77:	c3                   	ret    

c0109b78 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c0109b78:	55                   	push   %ebp
c0109b79:	89 e5                	mov    %esp,%ebp
c0109b7b:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c0109b7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b81:	83 c0 0c             	add    $0xc,%eax
c0109b84:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109b87:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109b8a:	8b 40 04             	mov    0x4(%eax),%eax
c0109b8d:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109b90:	0f 94 c0             	sete   %al
c0109b93:	0f b6 c0             	movzbl %al,%eax
c0109b96:	85 c0                	test   %eax,%eax
c0109b98:	0f 94 c0             	sete   %al
c0109b9b:	0f b6 c0             	movzbl %al,%eax
}
c0109b9e:	c9                   	leave  
c0109b9f:	c3                   	ret    

c0109ba0 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c0109ba0:	55                   	push   %ebp
c0109ba1:	89 e5                	mov    %esp,%ebp
c0109ba3:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c0109ba6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109baa:	74 12                	je     c0109bbe <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c0109bac:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109baf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109bb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bb6:	89 04 24             	mov    %eax,(%esp)
c0109bb9:	e8 b5 fd ff ff       	call   c0109973 <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c0109bbe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bc1:	8b 55 10             	mov    0x10(%ebp),%edx
c0109bc4:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c0109bc7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bca:	8b 00                	mov    (%eax),%eax
c0109bcc:	89 04 24             	mov    %eax,(%esp)
c0109bcf:	e8 ae 23 00 00       	call   c010bf82 <wakeup_proc>
}
c0109bd4:	c9                   	leave  
c0109bd5:	c3                   	ret    

c0109bd6 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109bd6:	55                   	push   %ebp
c0109bd7:	89 e5                	mov    %esp,%ebp
c0109bd9:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109bdc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bdf:	89 04 24             	mov    %eax,(%esp)
c0109be2:	e8 1d ff ff ff       	call   c0109b04 <wait_queue_first>
c0109be7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109bea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109bee:	74 20                	je     c0109c10 <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c0109bf0:	8b 45 10             	mov    0x10(%ebp),%eax
c0109bf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109bf7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bfa:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109bfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c01:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c05:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c08:	89 04 24             	mov    %eax,(%esp)
c0109c0b:	e8 90 ff ff ff       	call   c0109ba0 <wakeup_wait>
    }
}
c0109c10:	c9                   	leave  
c0109c11:	c3                   	ret    

c0109c12 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109c12:	55                   	push   %ebp
c0109c13:	89 e5                	mov    %esp,%ebp
c0109c15:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109c18:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c1b:	89 04 24             	mov    %eax,(%esp)
c0109c1e:	e8 e1 fe ff ff       	call   c0109b04 <wait_queue_first>
c0109c23:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109c26:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109c2a:	74 79                	je     c0109ca5 <wakeup_queue+0x93>
        if (del) {
c0109c2c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109c30:	74 37                	je     c0109c69 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c0109c32:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109c39:	00 
c0109c3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c3d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c44:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c48:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c4b:	89 04 24             	mov    %eax,(%esp)
c0109c4e:	e8 4d ff ff ff       	call   c0109ba0 <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c0109c53:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c56:	89 04 24             	mov    %eax,(%esp)
c0109c59:	e8 a6 fe ff ff       	call   c0109b04 <wait_queue_first>
c0109c5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109c61:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109c65:	75 cb                	jne    c0109c32 <wakeup_queue+0x20>
c0109c67:	eb 3c                	jmp    c0109ca5 <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c0109c69:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0109c70:	00 
c0109c71:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c74:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c7b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c82:	89 04 24             	mov    %eax,(%esp)
c0109c85:	e8 16 ff ff ff       	call   c0109ba0 <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c0109c8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c91:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c94:	89 04 24             	mov    %eax,(%esp)
c0109c97:	e8 75 fd ff ff       	call   c0109a11 <wait_queue_next>
c0109c9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109c9f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109ca3:	75 c4                	jne    c0109c69 <wakeup_queue+0x57>
        }
    }
}
c0109ca5:	c9                   	leave  
c0109ca6:	c3                   	ret    

c0109ca7 <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c0109ca7:	55                   	push   %ebp
c0109ca8:	89 e5                	mov    %esp,%ebp
c0109caa:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c0109cad:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c0109cb2:	85 c0                	test   %eax,%eax
c0109cb4:	75 24                	jne    c0109cda <wait_current_set+0x33>
c0109cb6:	c7 44 24 0c a9 f5 10 	movl   $0xc010f5a9,0xc(%esp)
c0109cbd:	c0 
c0109cbe:	c7 44 24 08 45 f5 10 	movl   $0xc010f545,0x8(%esp)
c0109cc5:	c0 
c0109cc6:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0109ccd:	00 
c0109cce:	c7 04 24 5a f5 10 c0 	movl   $0xc010f55a,(%esp)
c0109cd5:	e8 00 71 ff ff       	call   c0100dda <__panic>
    wait_init(wait, current);
c0109cda:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c0109cdf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ce3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ce6:	89 04 24             	mov    %eax,(%esp)
c0109ce9:	e8 8b fb ff ff       	call   c0109879 <wait_init>
    current->state = PROC_SLEEPING;
c0109cee:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c0109cf3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c0109cf9:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c0109cfe:	8b 55 10             	mov    0x10(%ebp),%edx
c0109d01:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c0109d07:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d11:	89 04 24             	mov    %eax,(%esp)
c0109d14:	e8 b9 fb ff ff       	call   c01098d2 <wait_queue_add>
}
c0109d19:	c9                   	leave  
c0109d1a:	c3                   	ret    

c0109d1b <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0109d1b:	55                   	push   %ebp
c0109d1c:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0109d1e:	8b 55 08             	mov    0x8(%ebp),%edx
c0109d21:	a1 f0 44 1c c0       	mov    0xc01c44f0,%eax
c0109d26:	29 c2                	sub    %eax,%edx
c0109d28:	89 d0                	mov    %edx,%eax
c0109d2a:	c1 f8 05             	sar    $0x5,%eax
}
c0109d2d:	5d                   	pop    %ebp
c0109d2e:	c3                   	ret    

c0109d2f <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0109d2f:	55                   	push   %ebp
c0109d30:	89 e5                	mov    %esp,%ebp
c0109d32:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0109d35:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d38:	89 04 24             	mov    %eax,(%esp)
c0109d3b:	e8 db ff ff ff       	call   c0109d1b <page2ppn>
c0109d40:	c1 e0 0c             	shl    $0xc,%eax
}
c0109d43:	c9                   	leave  
c0109d44:	c3                   	ret    

c0109d45 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c0109d45:	55                   	push   %ebp
c0109d46:	89 e5                	mov    %esp,%ebp
c0109d48:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0109d4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d4e:	89 04 24             	mov    %eax,(%esp)
c0109d51:	e8 d9 ff ff ff       	call   c0109d2f <page2pa>
c0109d56:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109d59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d5c:	c1 e8 0c             	shr    $0xc,%eax
c0109d5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109d62:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c0109d67:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109d6a:	72 23                	jb     c0109d8f <page2kva+0x4a>
c0109d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109d73:	c7 44 24 08 bc f5 10 	movl   $0xc010f5bc,0x8(%esp)
c0109d7a:	c0 
c0109d7b:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0109d82:	00 
c0109d83:	c7 04 24 df f5 10 c0 	movl   $0xc010f5df,(%esp)
c0109d8a:	e8 4b 70 ff ff       	call   c0100dda <__panic>
c0109d8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d92:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0109d97:	c9                   	leave  
c0109d98:	c3                   	ret    

c0109d99 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c0109d99:	55                   	push   %ebp
c0109d9a:	89 e5                	mov    %esp,%ebp
c0109d9c:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c0109d9f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109da6:	e8 7f 7d ff ff       	call   c0101b2a <ide_device_valid>
c0109dab:	85 c0                	test   %eax,%eax
c0109dad:	75 1c                	jne    c0109dcb <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c0109daf:	c7 44 24 08 ed f5 10 	movl   $0xc010f5ed,0x8(%esp)
c0109db6:	c0 
c0109db7:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c0109dbe:	00 
c0109dbf:	c7 04 24 07 f6 10 c0 	movl   $0xc010f607,(%esp)
c0109dc6:	e8 0f 70 ff ff       	call   c0100dda <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c0109dcb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109dd2:	e8 92 7d ff ff       	call   c0101b69 <ide_device_size>
c0109dd7:	c1 e8 03             	shr    $0x3,%eax
c0109dda:	a3 9c 45 1c c0       	mov    %eax,0xc01c459c
}
c0109ddf:	c9                   	leave  
c0109de0:	c3                   	ret    

c0109de1 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c0109de1:	55                   	push   %ebp
c0109de2:	89 e5                	mov    %esp,%ebp
c0109de4:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0109de7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109dea:	89 04 24             	mov    %eax,(%esp)
c0109ded:	e8 53 ff ff ff       	call   c0109d45 <page2kva>
c0109df2:	8b 55 08             	mov    0x8(%ebp),%edx
c0109df5:	c1 ea 08             	shr    $0x8,%edx
c0109df8:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109dfb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109dff:	74 0b                	je     c0109e0c <swapfs_read+0x2b>
c0109e01:	8b 15 9c 45 1c c0    	mov    0xc01c459c,%edx
c0109e07:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c0109e0a:	72 23                	jb     c0109e2f <swapfs_read+0x4e>
c0109e0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109e13:	c7 44 24 08 18 f6 10 	movl   $0xc010f618,0x8(%esp)
c0109e1a:	c0 
c0109e1b:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c0109e22:	00 
c0109e23:	c7 04 24 07 f6 10 c0 	movl   $0xc010f607,(%esp)
c0109e2a:	e8 ab 6f ff ff       	call   c0100dda <__panic>
c0109e2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109e32:	c1 e2 03             	shl    $0x3,%edx
c0109e35:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c0109e3c:	00 
c0109e3d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109e41:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109e45:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109e4c:	e8 57 7d ff ff       	call   c0101ba8 <ide_read_secs>
}
c0109e51:	c9                   	leave  
c0109e52:	c3                   	ret    

c0109e53 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c0109e53:	55                   	push   %ebp
c0109e54:	89 e5                	mov    %esp,%ebp
c0109e56:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0109e59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e5c:	89 04 24             	mov    %eax,(%esp)
c0109e5f:	e8 e1 fe ff ff       	call   c0109d45 <page2kva>
c0109e64:	8b 55 08             	mov    0x8(%ebp),%edx
c0109e67:	c1 ea 08             	shr    $0x8,%edx
c0109e6a:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109e6d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109e71:	74 0b                	je     c0109e7e <swapfs_write+0x2b>
c0109e73:	8b 15 9c 45 1c c0    	mov    0xc01c459c,%edx
c0109e79:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c0109e7c:	72 23                	jb     c0109ea1 <swapfs_write+0x4e>
c0109e7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e81:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109e85:	c7 44 24 08 18 f6 10 	movl   $0xc010f618,0x8(%esp)
c0109e8c:	c0 
c0109e8d:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109e94:	00 
c0109e95:	c7 04 24 07 f6 10 c0 	movl   $0xc010f607,(%esp)
c0109e9c:	e8 39 6f ff ff       	call   c0100dda <__panic>
c0109ea1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109ea4:	c1 e2 03             	shl    $0x3,%edx
c0109ea7:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c0109eae:	00 
c0109eaf:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109eb3:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109eb7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109ebe:	e8 27 7f ff ff       	call   c0101dea <ide_write_secs>
}
c0109ec3:	c9                   	leave  
c0109ec4:	c3                   	ret    

c0109ec5 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c0109ec5:	52                   	push   %edx
    call *%ebx              # call fn
c0109ec6:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c0109ec8:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c0109ec9:	e8 b3 0b 00 00       	call   c010aa81 <do_exit>

c0109ece <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c0109ece:	55                   	push   %ebp
c0109ecf:	89 e5                	mov    %esp,%ebp
c0109ed1:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c0109ed4:	8b 55 10             	mov    0x10(%ebp),%edx
c0109ed7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109eda:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c0109edc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109edf:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109ee2:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c0109ee5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ee8:	83 c0 08             	add    $0x8,%eax
c0109eeb:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109eee:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ef1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109ef4:	89 50 04             	mov    %edx,0x4(%eax)
c0109ef7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109efa:	8b 50 04             	mov    0x4(%eax),%edx
c0109efd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f00:	89 10                	mov    %edx,(%eax)
    return timer;
c0109f02:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0109f05:	c9                   	leave  
c0109f06:	c3                   	ret    

c0109f07 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109f07:	55                   	push   %ebp
c0109f08:	89 e5                	mov    %esp,%ebp
c0109f0a:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109f0d:	9c                   	pushf  
c0109f0e:	58                   	pop    %eax
c0109f0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109f12:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109f15:	25 00 02 00 00       	and    $0x200,%eax
c0109f1a:	85 c0                	test   %eax,%eax
c0109f1c:	74 0c                	je     c0109f2a <__intr_save+0x23>
        intr_disable();
c0109f1e:	e8 0f 81 ff ff       	call   c0102032 <intr_disable>
        return 1;
c0109f23:	b8 01 00 00 00       	mov    $0x1,%eax
c0109f28:	eb 05                	jmp    c0109f2f <__intr_save+0x28>
    }
    return 0;
c0109f2a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109f2f:	c9                   	leave  
c0109f30:	c3                   	ret    

c0109f31 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109f31:	55                   	push   %ebp
c0109f32:	89 e5                	mov    %esp,%ebp
c0109f34:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109f37:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109f3b:	74 05                	je     c0109f42 <__intr_restore+0x11>
        intr_enable();
c0109f3d:	e8 ea 80 ff ff       	call   c010202c <intr_enable>
    }
}
c0109f42:	c9                   	leave  
c0109f43:	c3                   	ret    

c0109f44 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0109f44:	55                   	push   %ebp
c0109f45:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0109f47:	8b 55 08             	mov    0x8(%ebp),%edx
c0109f4a:	a1 f0 44 1c c0       	mov    0xc01c44f0,%eax
c0109f4f:	29 c2                	sub    %eax,%edx
c0109f51:	89 d0                	mov    %edx,%eax
c0109f53:	c1 f8 05             	sar    $0x5,%eax
}
c0109f56:	5d                   	pop    %ebp
c0109f57:	c3                   	ret    

c0109f58 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0109f58:	55                   	push   %ebp
c0109f59:	89 e5                	mov    %esp,%ebp
c0109f5b:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0109f5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f61:	89 04 24             	mov    %eax,(%esp)
c0109f64:	e8 db ff ff ff       	call   c0109f44 <page2ppn>
c0109f69:	c1 e0 0c             	shl    $0xc,%eax
}
c0109f6c:	c9                   	leave  
c0109f6d:	c3                   	ret    

c0109f6e <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0109f6e:	55                   	push   %ebp
c0109f6f:	89 e5                	mov    %esp,%ebp
c0109f71:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0109f74:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f77:	c1 e8 0c             	shr    $0xc,%eax
c0109f7a:	89 c2                	mov    %eax,%edx
c0109f7c:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c0109f81:	39 c2                	cmp    %eax,%edx
c0109f83:	72 1c                	jb     c0109fa1 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0109f85:	c7 44 24 08 38 f6 10 	movl   $0xc010f638,0x8(%esp)
c0109f8c:	c0 
c0109f8d:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0109f94:	00 
c0109f95:	c7 04 24 57 f6 10 c0 	movl   $0xc010f657,(%esp)
c0109f9c:	e8 39 6e ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0109fa1:	a1 f0 44 1c c0       	mov    0xc01c44f0,%eax
c0109fa6:	8b 55 08             	mov    0x8(%ebp),%edx
c0109fa9:	c1 ea 0c             	shr    $0xc,%edx
c0109fac:	c1 e2 05             	shl    $0x5,%edx
c0109faf:	01 d0                	add    %edx,%eax
}
c0109fb1:	c9                   	leave  
c0109fb2:	c3                   	ret    

c0109fb3 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0109fb3:	55                   	push   %ebp
c0109fb4:	89 e5                	mov    %esp,%ebp
c0109fb6:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0109fb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fbc:	89 04 24             	mov    %eax,(%esp)
c0109fbf:	e8 94 ff ff ff       	call   c0109f58 <page2pa>
c0109fc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109fc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fca:	c1 e8 0c             	shr    $0xc,%eax
c0109fcd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109fd0:	a1 a0 23 1c c0       	mov    0xc01c23a0,%eax
c0109fd5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109fd8:	72 23                	jb     c0109ffd <page2kva+0x4a>
c0109fda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fdd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109fe1:	c7 44 24 08 68 f6 10 	movl   $0xc010f668,0x8(%esp)
c0109fe8:	c0 
c0109fe9:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0109ff0:	00 
c0109ff1:	c7 04 24 57 f6 10 c0 	movl   $0xc010f657,(%esp)
c0109ff8:	e8 dd 6d ff ff       	call   c0100dda <__panic>
c0109ffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a000:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a005:	c9                   	leave  
c010a006:	c3                   	ret    

c010a007 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010a007:	55                   	push   %ebp
c010a008:	89 e5                	mov    %esp,%ebp
c010a00a:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010a00d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a010:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a013:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010a01a:	77 23                	ja     c010a03f <kva2page+0x38>
c010a01c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a01f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a023:	c7 44 24 08 8c f6 10 	movl   $0xc010f68c,0x8(%esp)
c010a02a:	c0 
c010a02b:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010a032:	00 
c010a033:	c7 04 24 57 f6 10 c0 	movl   $0xc010f657,(%esp)
c010a03a:	e8 9b 6d ff ff       	call   c0100dda <__panic>
c010a03f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a042:	05 00 00 00 40       	add    $0x40000000,%eax
c010a047:	89 04 24             	mov    %eax,(%esp)
c010a04a:	e8 1f ff ff ff       	call   c0109f6e <pa2page>
}
c010a04f:	c9                   	leave  
c010a050:	c3                   	ret    

c010a051 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c010a051:	55                   	push   %ebp
c010a052:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010a054:	8b 45 08             	mov    0x8(%ebp),%eax
c010a057:	8b 40 18             	mov    0x18(%eax),%eax
c010a05a:	8d 50 01             	lea    0x1(%eax),%edx
c010a05d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a060:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a063:	8b 45 08             	mov    0x8(%ebp),%eax
c010a066:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a069:	5d                   	pop    %ebp
c010a06a:	c3                   	ret    

c010a06b <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010a06b:	55                   	push   %ebp
c010a06c:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010a06e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a071:	8b 40 18             	mov    0x18(%eax),%eax
c010a074:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a077:	8b 45 08             	mov    0x8(%ebp),%eax
c010a07a:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a07d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a080:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a083:	5d                   	pop    %ebp
c010a084:	c3                   	ret    

c010a085 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010a085:	55                   	push   %ebp
c010a086:	89 e5                	mov    %esp,%ebp
c010a088:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a08b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a08f:	74 25                	je     c010a0b6 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010a091:	8b 45 08             	mov    0x8(%ebp),%eax
c010a094:	83 c0 1c             	add    $0x1c,%eax
c010a097:	89 04 24             	mov    %eax,(%esp)
c010a09a:	e8 50 f7 ff ff       	call   c01097ef <down>
        if (current != NULL) {
c010a09f:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010a0a4:	85 c0                	test   %eax,%eax
c010a0a6:	74 0e                	je     c010a0b6 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010a0a8:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010a0ad:	8b 50 04             	mov    0x4(%eax),%edx
c010a0b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0b3:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010a0b6:	c9                   	leave  
c010a0b7:	c3                   	ret    

c010a0b8 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010a0b8:	55                   	push   %ebp
c010a0b9:	89 e5                	mov    %esp,%ebp
c010a0bb:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a0be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a0c2:	74 18                	je     c010a0dc <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010a0c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0c7:	83 c0 1c             	add    $0x1c,%eax
c010a0ca:	89 04 24             	mov    %eax,(%esp)
c010a0cd:	e8 02 f7 ff ff       	call   c01097d4 <up>
        mm->locked_by = 0;
c010a0d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0d5:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010a0dc:	c9                   	leave  
c010a0dd:	c3                   	ret    

c010a0de <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010a0de:	55                   	push   %ebp
c010a0df:	89 e5                	mov    %esp,%ebp
c010a0e1:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010a0e4:	c7 04 24 c4 00 00 00 	movl   $0xc4,(%esp)
c010a0eb:	e8 b2 a8 ff ff       	call   c01049a2 <kmalloc>
c010a0f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010a0f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0f7:	74 3a                	je     c010a133 <alloc_proc+0x55>
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
        memset(proc, 0, sizeof(struct proc_struct));
c010a0f9:	c7 44 24 08 c4 00 00 	movl   $0xc4,0x8(%esp)
c010a100:	00 
c010a101:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a108:	00 
c010a109:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a10c:	89 04 24             	mov    %eax,(%esp)
c010a10f:	e8 c3 2f 00 00       	call   c010d0d7 <memset>
        proc->state = PROC_UNINIT;
c010a114:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a117:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010a11d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a120:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->cr3 = boot_cr3;
c010a127:	8b 15 ec 44 1c c0    	mov    0xc01c44ec,%edx
c010a12d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a130:	89 50 40             	mov    %edx,0x40(%eax)
    }
    return proc;
c010a133:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a136:	c9                   	leave  
c010a137:	c3                   	ret    

c010a138 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010a138:	55                   	push   %ebp
c010a139:	89 e5                	mov    %esp,%ebp
c010a13b:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010a13e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a141:	83 c0 48             	add    $0x48,%eax
c010a144:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a14b:	00 
c010a14c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a153:	00 
c010a154:	89 04 24             	mov    %eax,(%esp)
c010a157:	e8 7b 2f 00 00       	call   c010d0d7 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010a15c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a15f:	8d 50 48             	lea    0x48(%eax),%edx
c010a162:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a169:	00 
c010a16a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a16d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a171:	89 14 24             	mov    %edx,(%esp)
c010a174:	e8 40 30 00 00       	call   c010d1b9 <memcpy>
}
c010a179:	c9                   	leave  
c010a17a:	c3                   	ret    

c010a17b <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010a17b:	55                   	push   %ebp
c010a17c:	89 e5                	mov    %esp,%ebp
c010a17e:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010a181:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a188:	00 
c010a189:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a190:	00 
c010a191:	c7 04 24 80 44 1c c0 	movl   $0xc01c4480,(%esp)
c010a198:	e8 3a 2f 00 00       	call   c010d0d7 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010a19d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1a0:	83 c0 48             	add    $0x48,%eax
c010a1a3:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a1aa:	00 
c010a1ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a1af:	c7 04 24 80 44 1c c0 	movl   $0xc01c4480,(%esp)
c010a1b6:	e8 fe 2f 00 00       	call   c010d1b9 <memcpy>
}
c010a1bb:	c9                   	leave  
c010a1bc:	c3                   	ret    

c010a1bd <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010a1bd:	55                   	push   %ebp
c010a1be:	89 e5                	mov    %esp,%ebp
c010a1c0:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010a1c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1c6:	83 c0 7c             	add    $0x7c,%eax
c010a1c9:	c7 45 fc bc 46 1c c0 	movl   $0xc01c46bc,-0x4(%ebp)
c010a1d0:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010a1d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a1d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a1d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a1dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010a1df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1e2:	8b 40 04             	mov    0x4(%eax),%eax
c010a1e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a1e8:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010a1eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a1ee:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a1f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a1f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a1f7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a1fa:	89 10                	mov    %edx,(%eax)
c010a1fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a1ff:	8b 10                	mov    (%eax),%edx
c010a201:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a204:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a207:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a20a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a20d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a210:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a213:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a216:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010a218:	8b 45 08             	mov    0x8(%ebp),%eax
c010a21b:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010a222:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010a225:	8b 45 08             	mov    0x8(%ebp),%eax
c010a228:	8b 40 14             	mov    0x14(%eax),%eax
c010a22b:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010a231:	8b 45 08             	mov    0x8(%ebp),%eax
c010a234:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a23a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a23d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a243:	85 c0                	test   %eax,%eax
c010a245:	74 12                	je     c010a259 <set_links+0x9c>
        proc->optr->yptr = proc;
c010a247:	8b 45 08             	mov    0x8(%ebp),%eax
c010a24a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a250:	8b 55 08             	mov    0x8(%ebp),%edx
c010a253:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010a259:	8b 45 08             	mov    0x8(%ebp),%eax
c010a25c:	8b 40 14             	mov    0x14(%eax),%eax
c010a25f:	8b 55 08             	mov    0x8(%ebp),%edx
c010a262:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010a268:	a1 60 44 1c c0       	mov    0xc01c4460,%eax
c010a26d:	83 c0 01             	add    $0x1,%eax
c010a270:	a3 60 44 1c c0       	mov    %eax,0xc01c4460
}
c010a275:	c9                   	leave  
c010a276:	c3                   	ret    

c010a277 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010a277:	55                   	push   %ebp
c010a278:	89 e5                	mov    %esp,%ebp
c010a27a:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010a27d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a280:	83 c0 7c             	add    $0x7c,%eax
c010a283:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a286:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a289:	8b 40 04             	mov    0x4(%eax),%eax
c010a28c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a28f:	8b 12                	mov    (%edx),%edx
c010a291:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a294:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a297:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a29a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a29d:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a2a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2a3:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a2a6:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010a2a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2ab:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a2b1:	85 c0                	test   %eax,%eax
c010a2b3:	74 18                	je     c010a2cd <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010a2b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2b8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a2be:	8b 55 08             	mov    0x8(%ebp),%edx
c010a2c1:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010a2c7:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010a2cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2d0:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010a2d6:	85 c0                	test   %eax,%eax
c010a2d8:	74 1a                	je     c010a2f4 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010a2da:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2dd:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010a2e3:	8b 55 08             	mov    0x8(%ebp),%edx
c010a2e6:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010a2ec:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a2f2:	eb 15                	jmp    c010a309 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010a2f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2f7:	8b 40 14             	mov    0x14(%eax),%eax
c010a2fa:	8b 55 08             	mov    0x8(%ebp),%edx
c010a2fd:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010a303:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010a309:	a1 60 44 1c c0       	mov    0xc01c4460,%eax
c010a30e:	83 e8 01             	sub    $0x1,%eax
c010a311:	a3 60 44 1c c0       	mov    %eax,0xc01c4460
}
c010a316:	c9                   	leave  
c010a317:	c3                   	ret    

c010a318 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010a318:	55                   	push   %ebp
c010a319:	89 e5                	mov    %esp,%ebp
c010a31b:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010a31e:	c7 45 f8 bc 46 1c c0 	movl   $0xc01c46bc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010a325:	a1 84 0a 13 c0       	mov    0xc0130a84,%eax
c010a32a:	83 c0 01             	add    $0x1,%eax
c010a32d:	a3 84 0a 13 c0       	mov    %eax,0xc0130a84
c010a332:	a1 84 0a 13 c0       	mov    0xc0130a84,%eax
c010a337:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a33c:	7e 0c                	jle    c010a34a <get_pid+0x32>
        last_pid = 1;
c010a33e:	c7 05 84 0a 13 c0 01 	movl   $0x1,0xc0130a84
c010a345:	00 00 00 
        goto inside;
c010a348:	eb 13                	jmp    c010a35d <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010a34a:	8b 15 84 0a 13 c0    	mov    0xc0130a84,%edx
c010a350:	a1 88 0a 13 c0       	mov    0xc0130a88,%eax
c010a355:	39 c2                	cmp    %eax,%edx
c010a357:	0f 8c ac 00 00 00    	jl     c010a409 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010a35d:	c7 05 88 0a 13 c0 00 	movl   $0x2000,0xc0130a88
c010a364:	20 00 00 
    repeat:
        le = list;
c010a367:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a36a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010a36d:	eb 7f                	jmp    c010a3ee <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010a36f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a372:	83 e8 7c             	sub    $0x7c,%eax
c010a375:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010a378:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a37b:	8b 50 04             	mov    0x4(%eax),%edx
c010a37e:	a1 84 0a 13 c0       	mov    0xc0130a84,%eax
c010a383:	39 c2                	cmp    %eax,%edx
c010a385:	75 3e                	jne    c010a3c5 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010a387:	a1 84 0a 13 c0       	mov    0xc0130a84,%eax
c010a38c:	83 c0 01             	add    $0x1,%eax
c010a38f:	a3 84 0a 13 c0       	mov    %eax,0xc0130a84
c010a394:	8b 15 84 0a 13 c0    	mov    0xc0130a84,%edx
c010a39a:	a1 88 0a 13 c0       	mov    0xc0130a88,%eax
c010a39f:	39 c2                	cmp    %eax,%edx
c010a3a1:	7c 4b                	jl     c010a3ee <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010a3a3:	a1 84 0a 13 c0       	mov    0xc0130a84,%eax
c010a3a8:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a3ad:	7e 0a                	jle    c010a3b9 <get_pid+0xa1>
                        last_pid = 1;
c010a3af:	c7 05 84 0a 13 c0 01 	movl   $0x1,0xc0130a84
c010a3b6:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010a3b9:	c7 05 88 0a 13 c0 00 	movl   $0x2000,0xc0130a88
c010a3c0:	20 00 00 
                    goto repeat;
c010a3c3:	eb a2                	jmp    c010a367 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010a3c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3c8:	8b 50 04             	mov    0x4(%eax),%edx
c010a3cb:	a1 84 0a 13 c0       	mov    0xc0130a84,%eax
c010a3d0:	39 c2                	cmp    %eax,%edx
c010a3d2:	7e 1a                	jle    c010a3ee <get_pid+0xd6>
c010a3d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3d7:	8b 50 04             	mov    0x4(%eax),%edx
c010a3da:	a1 88 0a 13 c0       	mov    0xc0130a88,%eax
c010a3df:	39 c2                	cmp    %eax,%edx
c010a3e1:	7d 0b                	jge    c010a3ee <get_pid+0xd6>
                next_safe = proc->pid;
c010a3e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3e6:	8b 40 04             	mov    0x4(%eax),%eax
c010a3e9:	a3 88 0a 13 c0       	mov    %eax,0xc0130a88
c010a3ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a3f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a3f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a3f7:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010a3fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a3fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a400:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010a403:	0f 85 66 ff ff ff    	jne    c010a36f <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010a409:	a1 84 0a 13 c0       	mov    0xc0130a84,%eax
}
c010a40e:	c9                   	leave  
c010a40f:	c3                   	ret    

c010a410 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010a410:	55                   	push   %ebp
c010a411:	89 e5                	mov    %esp,%ebp
c010a413:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010a416:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010a41b:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a41e:	74 63                	je     c010a483 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010a420:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010a425:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a428:	8b 45 08             	mov    0x8(%ebp),%eax
c010a42b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010a42e:	e8 d4 fa ff ff       	call   c0109f07 <__intr_save>
c010a433:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010a436:	8b 45 08             	mov    0x8(%ebp),%eax
c010a439:	a3 48 24 1c c0       	mov    %eax,0xc01c2448
            load_esp0(next->kstack + KSTACKSIZE);
c010a43e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a441:	8b 40 0c             	mov    0xc(%eax),%eax
c010a444:	05 00 20 00 00       	add    $0x2000,%eax
c010a449:	89 04 24             	mov    %eax,(%esp)
c010a44c:	e8 78 a8 ff ff       	call   c0104cc9 <load_esp0>
            lcr3(next->cr3);
c010a451:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a454:	8b 40 40             	mov    0x40(%eax),%eax
c010a457:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010a45a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a45d:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010a460:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a463:	8d 50 1c             	lea    0x1c(%eax),%edx
c010a466:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a469:	83 c0 1c             	add    $0x1c,%eax
c010a46c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a470:	89 04 24             	mov    %eax,(%esp)
c010a473:	e8 67 16 00 00       	call   c010badf <switch_to>
        }
        local_intr_restore(intr_flag);
c010a478:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a47b:	89 04 24             	mov    %eax,(%esp)
c010a47e:	e8 ae fa ff ff       	call   c0109f31 <__intr_restore>
    }
}
c010a483:	c9                   	leave  
c010a484:	c3                   	ret    

c010a485 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010a485:	55                   	push   %ebp
c010a486:	89 e5                	mov    %esp,%ebp
c010a488:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010a48b:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010a490:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a493:	89 04 24             	mov    %eax,(%esp)
c010a496:	e8 66 85 ff ff       	call   c0102a01 <forkrets>
}
c010a49b:	c9                   	leave  
c010a49c:	c3                   	ret    

c010a49d <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010a49d:	55                   	push   %ebp
c010a49e:	89 e5                	mov    %esp,%ebp
c010a4a0:	53                   	push   %ebx
c010a4a1:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010a4a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4a7:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010a4ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4b0:	8b 40 04             	mov    0x4(%eax),%eax
c010a4b3:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010a4ba:	00 
c010a4bb:	89 04 24             	mov    %eax,(%esp)
c010a4be:	e8 67 21 00 00       	call   c010c62a <hash32>
c010a4c3:	c1 e0 03             	shl    $0x3,%eax
c010a4c6:	05 60 24 1c c0       	add    $0xc01c2460,%eax
c010a4cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a4ce:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010a4d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a4d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4da:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010a4dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a4e0:	8b 40 04             	mov    0x4(%eax),%eax
c010a4e3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a4e6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010a4e9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a4ec:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010a4ef:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a4f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a4f5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a4f8:	89 10                	mov    %edx,(%eax)
c010a4fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a4fd:	8b 10                	mov    (%eax),%edx
c010a4ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a502:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a505:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a508:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a50b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a50e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a511:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a514:	89 10                	mov    %edx,(%eax)
}
c010a516:	83 c4 34             	add    $0x34,%esp
c010a519:	5b                   	pop    %ebx
c010a51a:	5d                   	pop    %ebp
c010a51b:	c3                   	ret    

c010a51c <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010a51c:	55                   	push   %ebp
c010a51d:	89 e5                	mov    %esp,%ebp
c010a51f:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010a522:	8b 45 08             	mov    0x8(%ebp),%eax
c010a525:	05 84 00 00 00       	add    $0x84,%eax
c010a52a:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a52d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a530:	8b 40 04             	mov    0x4(%eax),%eax
c010a533:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a536:	8b 12                	mov    (%edx),%edx
c010a538:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a53b:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a53e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a541:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a544:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a547:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a54a:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a54d:	89 10                	mov    %edx,(%eax)
}
c010a54f:	c9                   	leave  
c010a550:	c3                   	ret    

c010a551 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010a551:	55                   	push   %ebp
c010a552:	89 e5                	mov    %esp,%ebp
c010a554:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010a557:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a55b:	7e 61                	jle    c010a5be <find_proc+0x6d>
c010a55d:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010a564:	7f 58                	jg     c010a5be <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010a566:	8b 45 08             	mov    0x8(%ebp),%eax
c010a569:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010a570:	00 
c010a571:	89 04 24             	mov    %eax,(%esp)
c010a574:	e8 b1 20 00 00       	call   c010c62a <hash32>
c010a579:	c1 e0 03             	shl    $0x3,%eax
c010a57c:	05 60 24 1c c0       	add    $0xc01c2460,%eax
c010a581:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a584:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a587:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010a58a:	eb 1b                	jmp    c010a5a7 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010a58c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a58f:	2d 84 00 00 00       	sub    $0x84,%eax
c010a594:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010a597:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a59a:	8b 40 04             	mov    0x4(%eax),%eax
c010a59d:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a5a0:	75 05                	jne    c010a5a7 <find_proc+0x56>
                return proc;
c010a5a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a5a5:	eb 1c                	jmp    c010a5c3 <find_proc+0x72>
c010a5a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a5ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a5b0:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010a5b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a5b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5b9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010a5bc:	75 ce                	jne    c010a58c <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010a5be:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a5c3:	c9                   	leave  
c010a5c4:	c3                   	ret    

c010a5c5 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010a5c5:	55                   	push   %ebp
c010a5c6:	89 e5                	mov    %esp,%ebp
c010a5c8:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010a5cb:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010a5d2:	00 
c010a5d3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a5da:	00 
c010a5db:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010a5de:	89 04 24             	mov    %eax,(%esp)
c010a5e1:	e8 f1 2a 00 00       	call   c010d0d7 <memset>
    tf.tf_cs = KERNEL_CS;
c010a5e6:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010a5ec:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010a5f2:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010a5f6:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010a5fa:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010a5fe:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010a602:	8b 45 08             	mov    0x8(%ebp),%eax
c010a605:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010a608:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a60b:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010a60e:	b8 c5 9e 10 c0       	mov    $0xc0109ec5,%eax
c010a613:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010a616:	8b 45 10             	mov    0x10(%ebp),%eax
c010a619:	80 cc 01             	or     $0x1,%ah
c010a61c:	89 c2                	mov    %eax,%edx
c010a61e:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010a621:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a625:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a62c:	00 
c010a62d:	89 14 24             	mov    %edx,(%esp)
c010a630:	e8 25 03 00 00       	call   c010a95a <do_fork>
}
c010a635:	c9                   	leave  
c010a636:	c3                   	ret    

c010a637 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010a637:	55                   	push   %ebp
c010a638:	89 e5                	mov    %esp,%ebp
c010a63a:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010a63d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010a644:	e8 ce a7 ff ff       	call   c0104e17 <alloc_pages>
c010a649:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010a64c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a650:	74 1a                	je     c010a66c <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010a652:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a655:	89 04 24             	mov    %eax,(%esp)
c010a658:	e8 56 f9 ff ff       	call   c0109fb3 <page2kva>
c010a65d:	89 c2                	mov    %eax,%edx
c010a65f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a662:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010a665:	b8 00 00 00 00       	mov    $0x0,%eax
c010a66a:	eb 05                	jmp    c010a671 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010a66c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010a671:	c9                   	leave  
c010a672:	c3                   	ret    

c010a673 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010a673:	55                   	push   %ebp
c010a674:	89 e5                	mov    %esp,%ebp
c010a676:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010a679:	8b 45 08             	mov    0x8(%ebp),%eax
c010a67c:	8b 40 0c             	mov    0xc(%eax),%eax
c010a67f:	89 04 24             	mov    %eax,(%esp)
c010a682:	e8 80 f9 ff ff       	call   c010a007 <kva2page>
c010a687:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010a68e:	00 
c010a68f:	89 04 24             	mov    %eax,(%esp)
c010a692:	e8 eb a7 ff ff       	call   c0104e82 <free_pages>
}
c010a697:	c9                   	leave  
c010a698:	c3                   	ret    

c010a699 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010a699:	55                   	push   %ebp
c010a69a:	89 e5                	mov    %esp,%ebp
c010a69c:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010a69f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a6a6:	e8 6c a7 ff ff       	call   c0104e17 <alloc_pages>
c010a6ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a6ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a6b2:	75 0a                	jne    c010a6be <setup_pgdir+0x25>
        return -E_NO_MEM;
c010a6b4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010a6b9:	e9 80 00 00 00       	jmp    c010a73e <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010a6be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6c1:	89 04 24             	mov    %eax,(%esp)
c010a6c4:	e8 ea f8 ff ff       	call   c0109fb3 <page2kva>
c010a6c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010a6cc:	a1 a4 23 1c c0       	mov    0xc01c23a4,%eax
c010a6d1:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010a6d8:	00 
c010a6d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a6dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6e0:	89 04 24             	mov    %eax,(%esp)
c010a6e3:	e8 d1 2a 00 00       	call   c010d1b9 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010a6e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6eb:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010a6f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a6f7:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010a6fe:	77 23                	ja     c010a723 <setup_pgdir+0x8a>
c010a700:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a703:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a707:	c7 44 24 08 8c f6 10 	movl   $0xc010f68c,0x8(%esp)
c010a70e:	c0 
c010a70f:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c010a716:	00 
c010a717:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010a71e:	e8 b7 66 ff ff       	call   c0100dda <__panic>
c010a723:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a726:	05 00 00 00 40       	add    $0x40000000,%eax
c010a72b:	83 c8 03             	or     $0x3,%eax
c010a72e:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010a730:	8b 45 08             	mov    0x8(%ebp),%eax
c010a733:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a736:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010a739:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a73e:	c9                   	leave  
c010a73f:	c3                   	ret    

c010a740 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010a740:	55                   	push   %ebp
c010a741:	89 e5                	mov    %esp,%ebp
c010a743:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010a746:	8b 45 08             	mov    0x8(%ebp),%eax
c010a749:	8b 40 0c             	mov    0xc(%eax),%eax
c010a74c:	89 04 24             	mov    %eax,(%esp)
c010a74f:	e8 b3 f8 ff ff       	call   c010a007 <kva2page>
c010a754:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010a75b:	00 
c010a75c:	89 04 24             	mov    %eax,(%esp)
c010a75f:	e8 1e a7 ff ff       	call   c0104e82 <free_pages>
}
c010a764:	c9                   	leave  
c010a765:	c3                   	ret    

c010a766 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010a766:	55                   	push   %ebp
c010a767:	89 e5                	mov    %esp,%ebp
c010a769:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010a76c:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010a771:	8b 40 18             	mov    0x18(%eax),%eax
c010a774:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010a777:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a77b:	75 0a                	jne    c010a787 <copy_mm+0x21>
        return 0;
c010a77d:	b8 00 00 00 00       	mov    $0x0,%eax
c010a782:	e9 f9 00 00 00       	jmp    c010a880 <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010a787:	8b 45 08             	mov    0x8(%ebp),%eax
c010a78a:	25 00 01 00 00       	and    $0x100,%eax
c010a78f:	85 c0                	test   %eax,%eax
c010a791:	74 08                	je     c010a79b <copy_mm+0x35>
        mm = oldmm;
c010a793:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a796:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010a799:	eb 78                	jmp    c010a813 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010a79b:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010a7a2:	e8 e1 d3 ff ff       	call   c0107b88 <mm_create>
c010a7a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a7aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a7ae:	75 05                	jne    c010a7b5 <copy_mm+0x4f>
        goto bad_mm;
c010a7b0:	e9 c8 00 00 00       	jmp    c010a87d <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010a7b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7b8:	89 04 24             	mov    %eax,(%esp)
c010a7bb:	e8 d9 fe ff ff       	call   c010a699 <setup_pgdir>
c010a7c0:	85 c0                	test   %eax,%eax
c010a7c2:	74 05                	je     c010a7c9 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010a7c4:	e9 a9 00 00 00       	jmp    c010a872 <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010a7c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7cc:	89 04 24             	mov    %eax,(%esp)
c010a7cf:	e8 b1 f8 ff ff       	call   c010a085 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010a7d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a7db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7de:	89 04 24             	mov    %eax,(%esp)
c010a7e1:	e8 c5 d8 ff ff       	call   c01080ab <dup_mmap>
c010a7e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010a7e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7ec:	89 04 24             	mov    %eax,(%esp)
c010a7ef:	e8 c4 f8 ff ff       	call   c010a0b8 <unlock_mm>

    if (ret != 0) {
c010a7f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a7f8:	74 19                	je     c010a813 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010a7fa:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010a7fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7fe:	89 04 24             	mov    %eax,(%esp)
c010a801:	e8 a6 d9 ff ff       	call   c01081ac <exit_mmap>
    put_pgdir(mm);
c010a806:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a809:	89 04 24             	mov    %eax,(%esp)
c010a80c:	e8 2f ff ff ff       	call   c010a740 <put_pgdir>
c010a811:	eb 5f                	jmp    c010a872 <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010a813:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a816:	89 04 24             	mov    %eax,(%esp)
c010a819:	e8 33 f8 ff ff       	call   c010a051 <mm_count_inc>
    proc->mm = mm;
c010a81e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a821:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a824:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010a827:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a82a:	8b 40 0c             	mov    0xc(%eax),%eax
c010a82d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a830:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010a837:	77 23                	ja     c010a85c <copy_mm+0xf6>
c010a839:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a83c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a840:	c7 44 24 08 8c f6 10 	movl   $0xc010f68c,0x8(%esp)
c010a847:	c0 
c010a848:	c7 44 24 04 5d 01 00 	movl   $0x15d,0x4(%esp)
c010a84f:	00 
c010a850:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010a857:	e8 7e 65 ff ff       	call   c0100dda <__panic>
c010a85c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a85f:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010a865:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a868:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010a86b:	b8 00 00 00 00       	mov    $0x0,%eax
c010a870:	eb 0e                	jmp    c010a880 <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010a872:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a875:	89 04 24             	mov    %eax,(%esp)
c010a878:	e8 70 d6 ff ff       	call   c0107eed <mm_destroy>
bad_mm:
    return ret;
c010a87d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010a880:	c9                   	leave  
c010a881:	c3                   	ret    

c010a882 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010a882:	55                   	push   %ebp
c010a883:	89 e5                	mov    %esp,%ebp
c010a885:	57                   	push   %edi
c010a886:	56                   	push   %esi
c010a887:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010a888:	8b 45 08             	mov    0x8(%ebp),%eax
c010a88b:	8b 40 0c             	mov    0xc(%eax),%eax
c010a88e:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010a893:	89 c2                	mov    %eax,%edx
c010a895:	8b 45 08             	mov    0x8(%ebp),%eax
c010a898:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010a89b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a89e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8a1:	8b 55 10             	mov    0x10(%ebp),%edx
c010a8a4:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010a8a9:	89 c1                	mov    %eax,%ecx
c010a8ab:	83 e1 01             	and    $0x1,%ecx
c010a8ae:	85 c9                	test   %ecx,%ecx
c010a8b0:	74 0e                	je     c010a8c0 <copy_thread+0x3e>
c010a8b2:	0f b6 0a             	movzbl (%edx),%ecx
c010a8b5:	88 08                	mov    %cl,(%eax)
c010a8b7:	83 c0 01             	add    $0x1,%eax
c010a8ba:	83 c2 01             	add    $0x1,%edx
c010a8bd:	83 eb 01             	sub    $0x1,%ebx
c010a8c0:	89 c1                	mov    %eax,%ecx
c010a8c2:	83 e1 02             	and    $0x2,%ecx
c010a8c5:	85 c9                	test   %ecx,%ecx
c010a8c7:	74 0f                	je     c010a8d8 <copy_thread+0x56>
c010a8c9:	0f b7 0a             	movzwl (%edx),%ecx
c010a8cc:	66 89 08             	mov    %cx,(%eax)
c010a8cf:	83 c0 02             	add    $0x2,%eax
c010a8d2:	83 c2 02             	add    $0x2,%edx
c010a8d5:	83 eb 02             	sub    $0x2,%ebx
c010a8d8:	89 d9                	mov    %ebx,%ecx
c010a8da:	c1 e9 02             	shr    $0x2,%ecx
c010a8dd:	89 c7                	mov    %eax,%edi
c010a8df:	89 d6                	mov    %edx,%esi
c010a8e1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010a8e3:	89 f2                	mov    %esi,%edx
c010a8e5:	89 f8                	mov    %edi,%eax
c010a8e7:	b9 00 00 00 00       	mov    $0x0,%ecx
c010a8ec:	89 de                	mov    %ebx,%esi
c010a8ee:	83 e6 02             	and    $0x2,%esi
c010a8f1:	85 f6                	test   %esi,%esi
c010a8f3:	74 0b                	je     c010a900 <copy_thread+0x7e>
c010a8f5:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010a8f9:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010a8fd:	83 c1 02             	add    $0x2,%ecx
c010a900:	83 e3 01             	and    $0x1,%ebx
c010a903:	85 db                	test   %ebx,%ebx
c010a905:	74 07                	je     c010a90e <copy_thread+0x8c>
c010a907:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010a90b:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010a90e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a911:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a914:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010a91b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a91e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a921:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a924:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010a927:	8b 45 08             	mov    0x8(%ebp),%eax
c010a92a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a92d:	8b 55 08             	mov    0x8(%ebp),%edx
c010a930:	8b 52 3c             	mov    0x3c(%edx),%edx
c010a933:	8b 52 40             	mov    0x40(%edx),%edx
c010a936:	80 ce 02             	or     $0x2,%dh
c010a939:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010a93c:	ba 85 a4 10 c0       	mov    $0xc010a485,%edx
c010a941:	8b 45 08             	mov    0x8(%ebp),%eax
c010a944:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010a947:	8b 45 08             	mov    0x8(%ebp),%eax
c010a94a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a94d:	89 c2                	mov    %eax,%edx
c010a94f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a952:	89 50 20             	mov    %edx,0x20(%eax)
}
c010a955:	5b                   	pop    %ebx
c010a956:	5e                   	pop    %esi
c010a957:	5f                   	pop    %edi
c010a958:	5d                   	pop    %ebp
c010a959:	c3                   	ret    

c010a95a <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010a95a:	55                   	push   %ebp
c010a95b:	89 e5                	mov    %esp,%ebp
c010a95d:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010a960:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010a967:	a1 60 44 1c c0       	mov    0xc01c4460,%eax
c010a96c:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010a971:	7e 05                	jle    c010a978 <do_fork+0x1e>
        goto fork_out;
c010a973:	e9 f5 00 00 00       	jmp    c010aa6d <do_fork+0x113>
    }
    ret = -E_NO_MEM;
c010a978:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
     *   proc_list:    the process set's list
     *   nr_process:   the number of process set
     */

    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
c010a97f:	e8 5a f7 ff ff       	call   c010a0de <alloc_proc>
c010a984:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!proc) goto fork_out;
c010a987:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a98b:	75 05                	jne    c010a992 <do_fork+0x38>
c010a98d:	e9 db 00 00 00       	jmp    c010aa6d <do_fork+0x113>
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc)) goto bad_fork_cleanup_proc;
c010a992:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a995:	89 04 24             	mov    %eax,(%esp)
c010a998:	e8 9a fc ff ff       	call   c010a637 <setup_kstack>
c010a99d:	85 c0                	test   %eax,%eax
c010a99f:	74 05                	je     c010a9a6 <do_fork+0x4c>
c010a9a1:	e9 cc 00 00 00       	jmp    c010aa72 <do_fork+0x118>
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc)) goto bad_fork_cleanup_kstack;
c010a9a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9a9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9b0:	89 04 24             	mov    %eax,(%esp)
c010a9b3:	e8 ae fd ff ff       	call   c010a766 <copy_mm>
c010a9b8:	85 c0                	test   %eax,%eax
c010a9ba:	74 11                	je     c010a9cd <do_fork+0x73>
c010a9bc:	90                   	nop
	
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010a9bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9c0:	89 04 24             	mov    %eax,(%esp)
c010a9c3:	e8 ab fc ff ff       	call   c010a673 <put_kstack>
c010a9c8:	e9 a5 00 00 00       	jmp    c010aa72 <do_fork+0x118>
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc)) goto bad_fork_cleanup_proc;
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc)) goto bad_fork_cleanup_kstack;
    //    4. call copy_thread to setup tf & context in proc_struct
    copy_thread(proc, stack, tf);
c010a9cd:	8b 45 10             	mov    0x10(%ebp),%eax
c010a9d0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a9d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a9d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9de:	89 04 24             	mov    %eax,(%esp)
c010a9e1:	e8 9c fe ff ff       	call   c010a882 <copy_thread>
    //    5. insert proc_struct into hash_list && proc_list
    proc->parent = current;
c010a9e6:	8b 15 48 24 1c c0    	mov    0xc01c2448,%edx
c010a9ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9ef:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010a9f2:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010a9f7:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010a9fd:	85 c0                	test   %eax,%eax
c010a9ff:	74 24                	je     c010aa25 <do_fork+0xcb>
c010aa01:	c7 44 24 0c c4 f6 10 	movl   $0xc010f6c4,0xc(%esp)
c010aa08:	c0 
c010aa09:	c7 44 24 08 dd f6 10 	movl   $0xc010f6dd,0x8(%esp)
c010aa10:	c0 
c010aa11:	c7 44 24 04 a0 01 00 	movl   $0x1a0,0x4(%esp)
c010aa18:	00 
c010aa19:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010aa20:	e8 b5 63 ff ff       	call   c0100dda <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010aa25:	e8 dd f4 ff ff       	call   c0109f07 <__intr_save>
c010aa2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    proc->pid = get_pid();
c010aa2d:	e8 e6 f8 ff ff       	call   c010a318 <get_pid>
c010aa32:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010aa35:	89 42 04             	mov    %eax,0x4(%edx)
    hash_proc(proc);
c010aa38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa3b:	89 04 24             	mov    %eax,(%esp)
c010aa3e:	e8 5a fa ff ff       	call   c010a49d <hash_proc>
    set_links(proc);
c010aa43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa46:	89 04 24             	mov    %eax,(%esp)
c010aa49:	e8 6f f7 ff ff       	call   c010a1bd <set_links>
    local_intr_restore(intr_flag);
c010aa4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa51:	89 04 24             	mov    %eax,(%esp)
c010aa54:	e8 d8 f4 ff ff       	call   c0109f31 <__intr_restore>
    //    6. call wakup_proc to make the new child process RUNNABLE
    wakeup_proc(proc);
c010aa59:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa5c:	89 04 24             	mov    %eax,(%esp)
c010aa5f:	e8 1e 15 00 00       	call   c010bf82 <wakeup_proc>
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
c010aa64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa67:	8b 40 04             	mov    0x4(%eax),%eax
c010aa6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
	
fork_out:
    return ret;
c010aa6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa70:	eb 0d                	jmp    c010aa7f <do_fork+0x125>

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010aa72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa75:	89 04 24             	mov    %eax,(%esp)
c010aa78:	e8 40 9f ff ff       	call   c01049bd <kfree>
    goto fork_out;
c010aa7d:	eb ee                	jmp    c010aa6d <do_fork+0x113>
}
c010aa7f:	c9                   	leave  
c010aa80:	c3                   	ret    

c010aa81 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010aa81:	55                   	push   %ebp
c010aa82:	89 e5                	mov    %esp,%ebp
c010aa84:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010aa87:	8b 15 48 24 1c c0    	mov    0xc01c2448,%edx
c010aa8d:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c010aa92:	39 c2                	cmp    %eax,%edx
c010aa94:	75 1c                	jne    c010aab2 <do_exit+0x31>
        panic("idleproc exit.\n");
c010aa96:	c7 44 24 08 f2 f6 10 	movl   $0xc010f6f2,0x8(%esp)
c010aa9d:	c0 
c010aa9e:	c7 44 24 04 c5 01 00 	movl   $0x1c5,0x4(%esp)
c010aaa5:	00 
c010aaa6:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010aaad:	e8 28 63 ff ff       	call   c0100dda <__panic>
    }
    if (current == initproc) {
c010aab2:	8b 15 48 24 1c c0    	mov    0xc01c2448,%edx
c010aab8:	a1 44 24 1c c0       	mov    0xc01c2444,%eax
c010aabd:	39 c2                	cmp    %eax,%edx
c010aabf:	75 1c                	jne    c010aadd <do_exit+0x5c>
        panic("initproc exit.\n");
c010aac1:	c7 44 24 08 02 f7 10 	movl   $0xc010f702,0x8(%esp)
c010aac8:	c0 
c010aac9:	c7 44 24 04 c8 01 00 	movl   $0x1c8,0x4(%esp)
c010aad0:	00 
c010aad1:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010aad8:	e8 fd 62 ff ff       	call   c0100dda <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010aadd:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010aae2:	8b 40 18             	mov    0x18(%eax),%eax
c010aae5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010aae8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aaec:	74 4a                	je     c010ab38 <do_exit+0xb7>
        lcr3(boot_cr3);
c010aaee:	a1 ec 44 1c c0       	mov    0xc01c44ec,%eax
c010aaf3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010aaf6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aaf9:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010aafc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aaff:	89 04 24             	mov    %eax,(%esp)
c010ab02:	e8 64 f5 ff ff       	call   c010a06b <mm_count_dec>
c010ab07:	85 c0                	test   %eax,%eax
c010ab09:	75 21                	jne    c010ab2c <do_exit+0xab>
            exit_mmap(mm);
c010ab0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab0e:	89 04 24             	mov    %eax,(%esp)
c010ab11:	e8 96 d6 ff ff       	call   c01081ac <exit_mmap>
            put_pgdir(mm);
c010ab16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab19:	89 04 24             	mov    %eax,(%esp)
c010ab1c:	e8 1f fc ff ff       	call   c010a740 <put_pgdir>
            mm_destroy(mm);
c010ab21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab24:	89 04 24             	mov    %eax,(%esp)
c010ab27:	e8 c1 d3 ff ff       	call   c0107eed <mm_destroy>
        }
        current->mm = NULL;
c010ab2c:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010ab31:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010ab38:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010ab3d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010ab43:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010ab48:	8b 55 08             	mov    0x8(%ebp),%edx
c010ab4b:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010ab51:	e8 b1 f3 ff ff       	call   c0109f07 <__intr_save>
c010ab56:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010ab59:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010ab5e:	8b 40 14             	mov    0x14(%eax),%eax
c010ab61:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010ab64:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab67:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ab6d:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010ab72:	75 10                	jne    c010ab84 <do_exit+0x103>
            wakeup_proc(proc);
c010ab74:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab77:	89 04 24             	mov    %eax,(%esp)
c010ab7a:	e8 03 14 00 00       	call   c010bf82 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010ab7f:	e9 ac 00 00 00       	jmp    c010ac30 <do_exit+0x1af>
c010ab84:	e9 a7 00 00 00       	jmp    c010ac30 <do_exit+0x1af>
            proc = current->cptr;
c010ab89:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010ab8e:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010ab94:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010ab97:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010ab9c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ab9f:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010aba5:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010abab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abae:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010abb5:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010abb8:	a1 44 24 1c c0       	mov    0xc01c2444,%eax
c010abbd:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010abc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abc6:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010abcc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abcf:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010abd5:	85 c0                	test   %eax,%eax
c010abd7:	74 14                	je     c010abed <do_exit+0x16c>
                initproc->cptr->yptr = proc;
c010abd9:	a1 44 24 1c c0       	mov    0xc01c2444,%eax
c010abde:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010abe4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010abe7:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010abed:	8b 15 44 24 1c c0    	mov    0xc01c2444,%edx
c010abf3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abf6:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010abf9:	a1 44 24 1c c0       	mov    0xc01c2444,%eax
c010abfe:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ac01:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010ac07:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac0a:	8b 00                	mov    (%eax),%eax
c010ac0c:	83 f8 03             	cmp    $0x3,%eax
c010ac0f:	75 1f                	jne    c010ac30 <do_exit+0x1af>
                if (initproc->wait_state == WT_CHILD) {
c010ac11:	a1 44 24 1c c0       	mov    0xc01c2444,%eax
c010ac16:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ac1c:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010ac21:	75 0d                	jne    c010ac30 <do_exit+0x1af>
                    wakeup_proc(initproc);
c010ac23:	a1 44 24 1c c0       	mov    0xc01c2444,%eax
c010ac28:	89 04 24             	mov    %eax,(%esp)
c010ac2b:	e8 52 13 00 00       	call   c010bf82 <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010ac30:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010ac35:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010ac3b:	85 c0                	test   %eax,%eax
c010ac3d:	0f 85 46 ff ff ff    	jne    c010ab89 <do_exit+0x108>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010ac43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac46:	89 04 24             	mov    %eax,(%esp)
c010ac49:	e8 e3 f2 ff ff       	call   c0109f31 <__intr_restore>
    
    schedule();
c010ac4e:	e8 cb 13 00 00       	call   c010c01e <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010ac53:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010ac58:	8b 40 04             	mov    0x4(%eax),%eax
c010ac5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ac5f:	c7 44 24 08 14 f7 10 	movl   $0xc010f714,0x8(%esp)
c010ac66:	c0 
c010ac67:	c7 44 24 04 f4 01 00 	movl   $0x1f4,0x4(%esp)
c010ac6e:	00 
c010ac6f:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010ac76:	e8 5f 61 ff ff       	call   c0100dda <__panic>

c010ac7b <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010ac7b:	55                   	push   %ebp
c010ac7c:	89 e5                	mov    %esp,%ebp
c010ac7e:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010ac81:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010ac86:	8b 40 18             	mov    0x18(%eax),%eax
c010ac89:	85 c0                	test   %eax,%eax
c010ac8b:	74 1c                	je     c010aca9 <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010ac8d:	c7 44 24 08 34 f7 10 	movl   $0xc010f734,0x8(%esp)
c010ac94:	c0 
c010ac95:	c7 44 24 04 fe 01 00 	movl   $0x1fe,0x4(%esp)
c010ac9c:	00 
c010ac9d:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010aca4:	e8 31 61 ff ff       	call   c0100dda <__panic>
    }

    int ret = -E_NO_MEM;
c010aca9:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010acb0:	e8 d3 ce ff ff       	call   c0107b88 <mm_create>
c010acb5:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010acb8:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010acbc:	75 06                	jne    c010acc4 <load_icode+0x49>
        goto bad_mm;
c010acbe:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010acbf:	e9 ef 05 00 00       	jmp    c010b2b3 <load_icode+0x638>
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010acc4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010acc7:	89 04 24             	mov    %eax,(%esp)
c010acca:	e8 ca f9 ff ff       	call   c010a699 <setup_pgdir>
c010accf:	85 c0                	test   %eax,%eax
c010acd1:	74 05                	je     c010acd8 <load_icode+0x5d>
        goto bad_pgdir_cleanup_mm;
c010acd3:	e9 f6 05 00 00       	jmp    c010b2ce <load_icode+0x653>
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010acd8:	8b 45 08             	mov    0x8(%ebp),%eax
c010acdb:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010acde:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010ace1:	8b 50 1c             	mov    0x1c(%eax),%edx
c010ace4:	8b 45 08             	mov    0x8(%ebp),%eax
c010ace7:	01 d0                	add    %edx,%eax
c010ace9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010acec:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010acef:	8b 00                	mov    (%eax),%eax
c010acf1:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010acf6:	74 0c                	je     c010ad04 <load_icode+0x89>
        ret = -E_INVAL_ELF;
c010acf8:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010acff:	e9 bf 05 00 00       	jmp    c010b2c3 <load_icode+0x648>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010ad04:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010ad07:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010ad0b:	0f b7 c0             	movzwl %ax,%eax
c010ad0e:	c1 e0 05             	shl    $0x5,%eax
c010ad11:	89 c2                	mov    %eax,%edx
c010ad13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad16:	01 d0                	add    %edx,%eax
c010ad18:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010ad1b:	e9 13 03 00 00       	jmp    c010b033 <load_icode+0x3b8>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010ad20:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad23:	8b 00                	mov    (%eax),%eax
c010ad25:	83 f8 01             	cmp    $0x1,%eax
c010ad28:	74 05                	je     c010ad2f <load_icode+0xb4>
            continue ;
c010ad2a:	e9 00 03 00 00       	jmp    c010b02f <load_icode+0x3b4>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010ad2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad32:	8b 50 10             	mov    0x10(%eax),%edx
c010ad35:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad38:	8b 40 14             	mov    0x14(%eax),%eax
c010ad3b:	39 c2                	cmp    %eax,%edx
c010ad3d:	76 0c                	jbe    c010ad4b <load_icode+0xd0>
            ret = -E_INVAL_ELF;
c010ad3f:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010ad46:	e9 6d 05 00 00       	jmp    c010b2b8 <load_icode+0x63d>
        }
        if (ph->p_filesz == 0) {
c010ad4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad4e:	8b 40 10             	mov    0x10(%eax),%eax
c010ad51:	85 c0                	test   %eax,%eax
c010ad53:	75 05                	jne    c010ad5a <load_icode+0xdf>
            continue ;
c010ad55:	e9 d5 02 00 00       	jmp    c010b02f <load_icode+0x3b4>
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010ad5a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010ad61:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010ad68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad6b:	8b 40 18             	mov    0x18(%eax),%eax
c010ad6e:	83 e0 01             	and    $0x1,%eax
c010ad71:	85 c0                	test   %eax,%eax
c010ad73:	74 04                	je     c010ad79 <load_icode+0xfe>
c010ad75:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010ad79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad7c:	8b 40 18             	mov    0x18(%eax),%eax
c010ad7f:	83 e0 02             	and    $0x2,%eax
c010ad82:	85 c0                	test   %eax,%eax
c010ad84:	74 04                	je     c010ad8a <load_icode+0x10f>
c010ad86:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010ad8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad8d:	8b 40 18             	mov    0x18(%eax),%eax
c010ad90:	83 e0 04             	and    $0x4,%eax
c010ad93:	85 c0                	test   %eax,%eax
c010ad95:	74 04                	je     c010ad9b <load_icode+0x120>
c010ad97:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010ad9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad9e:	83 e0 02             	and    $0x2,%eax
c010ada1:	85 c0                	test   %eax,%eax
c010ada3:	74 04                	je     c010ada9 <load_icode+0x12e>
c010ada5:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010ada9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adac:	8b 50 14             	mov    0x14(%eax),%edx
c010adaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adb2:	8b 40 08             	mov    0x8(%eax),%eax
c010adb5:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010adbc:	00 
c010adbd:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010adc0:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010adc4:	89 54 24 08          	mov    %edx,0x8(%esp)
c010adc8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010adcc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010adcf:	89 04 24             	mov    %eax,(%esp)
c010add2:	e8 b8 d1 ff ff       	call   c0107f8f <mm_map>
c010add7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010adda:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010adde:	74 05                	je     c010ade5 <load_icode+0x16a>
            goto bad_cleanup_mmap;
c010ade0:	e9 d3 04 00 00       	jmp    c010b2b8 <load_icode+0x63d>
        }
        unsigned char *from = binary + ph->p_offset;
c010ade5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ade8:	8b 50 04             	mov    0x4(%eax),%edx
c010adeb:	8b 45 08             	mov    0x8(%ebp),%eax
c010adee:	01 d0                	add    %edx,%eax
c010adf0:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010adf3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adf6:	8b 40 08             	mov    0x8(%eax),%eax
c010adf9:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010adfc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010adff:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010ae02:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ae05:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010ae0a:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010ae0d:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010ae14:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae17:	8b 50 08             	mov    0x8(%eax),%edx
c010ae1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae1d:	8b 40 10             	mov    0x10(%eax),%eax
c010ae20:	01 d0                	add    %edx,%eax
c010ae22:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010ae25:	e9 90 00 00 00       	jmp    c010aeba <load_icode+0x23f>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010ae2a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ae2d:	8b 40 0c             	mov    0xc(%eax),%eax
c010ae30:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ae33:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ae37:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ae3a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ae3e:	89 04 24             	mov    %eax,(%esp)
c010ae41:	e8 ac ae ff ff       	call   c0105cf2 <pgdir_alloc_page>
c010ae46:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ae49:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ae4d:	75 05                	jne    c010ae54 <load_icode+0x1d9>
                goto bad_cleanup_mmap;
c010ae4f:	e9 64 04 00 00       	jmp    c010b2b8 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010ae54:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ae57:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ae5a:	29 c2                	sub    %eax,%edx
c010ae5c:	89 d0                	mov    %edx,%eax
c010ae5e:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010ae61:	b8 00 10 00 00       	mov    $0x1000,%eax
c010ae66:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010ae69:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010ae6c:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010ae73:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ae76:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010ae79:	73 0d                	jae    c010ae88 <load_icode+0x20d>
                size -= la - end;
c010ae7b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ae7e:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010ae81:	29 c2                	sub    %eax,%edx
c010ae83:	89 d0                	mov    %edx,%eax
c010ae85:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010ae88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae8b:	89 04 24             	mov    %eax,(%esp)
c010ae8e:	e8 20 f1 ff ff       	call   c0109fb3 <page2kva>
c010ae93:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010ae96:	01 c2                	add    %eax,%edx
c010ae98:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ae9b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ae9f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aea2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aea6:	89 14 24             	mov    %edx,(%esp)
c010aea9:	e8 0b 23 00 00       	call   c010d1b9 <memcpy>
            start += size, from += size;
c010aeae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010aeb1:	01 45 d8             	add    %eax,-0x28(%ebp)
c010aeb4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010aeb7:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010aeba:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010aebd:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010aec0:	0f 82 64 ff ff ff    	jb     c010ae2a <load_icode+0x1af>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010aec6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aec9:	8b 50 08             	mov    0x8(%eax),%edx
c010aecc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aecf:	8b 40 14             	mov    0x14(%eax),%eax
c010aed2:	01 d0                	add    %edx,%eax
c010aed4:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010aed7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010aeda:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010aedd:	0f 83 b0 00 00 00    	jae    c010af93 <load_icode+0x318>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010aee3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010aee6:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010aee9:	75 05                	jne    c010aef0 <load_icode+0x275>
                continue ;
c010aeeb:	e9 3f 01 00 00       	jmp    c010b02f <load_icode+0x3b4>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010aef0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010aef3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010aef6:	29 c2                	sub    %eax,%edx
c010aef8:	89 d0                	mov    %edx,%eax
c010aefa:	05 00 10 00 00       	add    $0x1000,%eax
c010aeff:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010af02:	b8 00 10 00 00       	mov    $0x1000,%eax
c010af07:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010af0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010af0d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010af10:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010af13:	73 0d                	jae    c010af22 <load_icode+0x2a7>
                size -= la - end;
c010af15:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010af18:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010af1b:	29 c2                	sub    %eax,%edx
c010af1d:	89 d0                	mov    %edx,%eax
c010af1f:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010af22:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af25:	89 04 24             	mov    %eax,(%esp)
c010af28:	e8 86 f0 ff ff       	call   c0109fb3 <page2kva>
c010af2d:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010af30:	01 c2                	add    %eax,%edx
c010af32:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010af35:	89 44 24 08          	mov    %eax,0x8(%esp)
c010af39:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010af40:	00 
c010af41:	89 14 24             	mov    %edx,(%esp)
c010af44:	e8 8e 21 00 00       	call   c010d0d7 <memset>
            start += size;
c010af49:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010af4c:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010af4f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010af52:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010af55:	73 08                	jae    c010af5f <load_icode+0x2e4>
c010af57:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010af5a:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010af5d:	74 34                	je     c010af93 <load_icode+0x318>
c010af5f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010af62:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010af65:	72 08                	jb     c010af6f <load_icode+0x2f4>
c010af67:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010af6a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010af6d:	74 24                	je     c010af93 <load_icode+0x318>
c010af6f:	c7 44 24 0c 5c f7 10 	movl   $0xc010f75c,0xc(%esp)
c010af76:	c0 
c010af77:	c7 44 24 08 dd f6 10 	movl   $0xc010f6dd,0x8(%esp)
c010af7e:	c0 
c010af7f:	c7 44 24 04 50 02 00 	movl   $0x250,0x4(%esp)
c010af86:	00 
c010af87:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010af8e:	e8 47 5e ff ff       	call   c0100dda <__panic>
        }
        while (start < end) {
c010af93:	e9 8b 00 00 00       	jmp    c010b023 <load_icode+0x3a8>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010af98:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010af9b:	8b 40 0c             	mov    0xc(%eax),%eax
c010af9e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010afa1:	89 54 24 08          	mov    %edx,0x8(%esp)
c010afa5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010afa8:	89 54 24 04          	mov    %edx,0x4(%esp)
c010afac:	89 04 24             	mov    %eax,(%esp)
c010afaf:	e8 3e ad ff ff       	call   c0105cf2 <pgdir_alloc_page>
c010afb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010afb7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010afbb:	75 05                	jne    c010afc2 <load_icode+0x347>
                goto bad_cleanup_mmap;
c010afbd:	e9 f6 02 00 00       	jmp    c010b2b8 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010afc2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010afc5:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010afc8:	29 c2                	sub    %eax,%edx
c010afca:	89 d0                	mov    %edx,%eax
c010afcc:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010afcf:	b8 00 10 00 00       	mov    $0x1000,%eax
c010afd4:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010afd7:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010afda:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010afe1:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010afe4:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010afe7:	73 0d                	jae    c010aff6 <load_icode+0x37b>
                size -= la - end;
c010afe9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010afec:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010afef:	29 c2                	sub    %eax,%edx
c010aff1:	89 d0                	mov    %edx,%eax
c010aff3:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010aff6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aff9:	89 04 24             	mov    %eax,(%esp)
c010affc:	e8 b2 ef ff ff       	call   c0109fb3 <page2kva>
c010b001:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b004:	01 c2                	add    %eax,%edx
c010b006:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b009:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b00d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b014:	00 
c010b015:	89 14 24             	mov    %edx,(%esp)
c010b018:	e8 ba 20 00 00       	call   c010d0d7 <memset>
            start += size;
c010b01d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b020:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010b023:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b026:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b029:	0f 82 69 ff ff ff    	jb     c010af98 <load_icode+0x31d>
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010b02f:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010b033:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b036:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010b039:	0f 82 e1 fc ff ff    	jb     c010ad20 <load_icode+0xa5>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010b03f:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010b046:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b04d:	00 
c010b04e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b051:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b055:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010b05c:	00 
c010b05d:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010b064:	af 
c010b065:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b068:	89 04 24             	mov    %eax,(%esp)
c010b06b:	e8 1f cf ff ff       	call   c0107f8f <mm_map>
c010b070:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b073:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b077:	74 05                	je     c010b07e <load_icode+0x403>
        goto bad_cleanup_mmap;
c010b079:	e9 3a 02 00 00       	jmp    c010b2b8 <load_icode+0x63d>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010b07e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b081:	8b 40 0c             	mov    0xc(%eax),%eax
c010b084:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b08b:	00 
c010b08c:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010b093:	af 
c010b094:	89 04 24             	mov    %eax,(%esp)
c010b097:	e8 56 ac ff ff       	call   c0105cf2 <pgdir_alloc_page>
c010b09c:	85 c0                	test   %eax,%eax
c010b09e:	75 24                	jne    c010b0c4 <load_icode+0x449>
c010b0a0:	c7 44 24 0c 98 f7 10 	movl   $0xc010f798,0xc(%esp)
c010b0a7:	c0 
c010b0a8:	c7 44 24 08 dd f6 10 	movl   $0xc010f6dd,0x8(%esp)
c010b0af:	c0 
c010b0b0:	c7 44 24 04 63 02 00 	movl   $0x263,0x4(%esp)
c010b0b7:	00 
c010b0b8:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b0bf:	e8 16 5d ff ff       	call   c0100dda <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010b0c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b0c7:	8b 40 0c             	mov    0xc(%eax),%eax
c010b0ca:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b0d1:	00 
c010b0d2:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010b0d9:	af 
c010b0da:	89 04 24             	mov    %eax,(%esp)
c010b0dd:	e8 10 ac ff ff       	call   c0105cf2 <pgdir_alloc_page>
c010b0e2:	85 c0                	test   %eax,%eax
c010b0e4:	75 24                	jne    c010b10a <load_icode+0x48f>
c010b0e6:	c7 44 24 0c dc f7 10 	movl   $0xc010f7dc,0xc(%esp)
c010b0ed:	c0 
c010b0ee:	c7 44 24 08 dd f6 10 	movl   $0xc010f6dd,0x8(%esp)
c010b0f5:	c0 
c010b0f6:	c7 44 24 04 64 02 00 	movl   $0x264,0x4(%esp)
c010b0fd:	00 
c010b0fe:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b105:	e8 d0 5c ff ff       	call   c0100dda <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010b10a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b10d:	8b 40 0c             	mov    0xc(%eax),%eax
c010b110:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b117:	00 
c010b118:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010b11f:	af 
c010b120:	89 04 24             	mov    %eax,(%esp)
c010b123:	e8 ca ab ff ff       	call   c0105cf2 <pgdir_alloc_page>
c010b128:	85 c0                	test   %eax,%eax
c010b12a:	75 24                	jne    c010b150 <load_icode+0x4d5>
c010b12c:	c7 44 24 0c 20 f8 10 	movl   $0xc010f820,0xc(%esp)
c010b133:	c0 
c010b134:	c7 44 24 08 dd f6 10 	movl   $0xc010f6dd,0x8(%esp)
c010b13b:	c0 
c010b13c:	c7 44 24 04 65 02 00 	movl   $0x265,0x4(%esp)
c010b143:	00 
c010b144:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b14b:	e8 8a 5c ff ff       	call   c0100dda <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010b150:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b153:	8b 40 0c             	mov    0xc(%eax),%eax
c010b156:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b15d:	00 
c010b15e:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010b165:	af 
c010b166:	89 04 24             	mov    %eax,(%esp)
c010b169:	e8 84 ab ff ff       	call   c0105cf2 <pgdir_alloc_page>
c010b16e:	85 c0                	test   %eax,%eax
c010b170:	75 24                	jne    c010b196 <load_icode+0x51b>
c010b172:	c7 44 24 0c 64 f8 10 	movl   $0xc010f864,0xc(%esp)
c010b179:	c0 
c010b17a:	c7 44 24 08 dd f6 10 	movl   $0xc010f6dd,0x8(%esp)
c010b181:	c0 
c010b182:	c7 44 24 04 66 02 00 	movl   $0x266,0x4(%esp)
c010b189:	00 
c010b18a:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b191:	e8 44 5c ff ff       	call   c0100dda <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010b196:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b199:	89 04 24             	mov    %eax,(%esp)
c010b19c:	e8 b0 ee ff ff       	call   c010a051 <mm_count_inc>
    current->mm = mm;
c010b1a1:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010b1a6:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b1a9:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010b1ac:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010b1b1:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b1b4:	8b 52 0c             	mov    0xc(%edx),%edx
c010b1b7:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010b1ba:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010b1c1:	77 23                	ja     c010b1e6 <load_icode+0x56b>
c010b1c3:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010b1c6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b1ca:	c7 44 24 08 8c f6 10 	movl   $0xc010f68c,0x8(%esp)
c010b1d1:	c0 
c010b1d2:	c7 44 24 04 6b 02 00 	movl   $0x26b,0x4(%esp)
c010b1d9:	00 
c010b1da:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b1e1:	e8 f4 5b ff ff       	call   c0100dda <__panic>
c010b1e6:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010b1e9:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010b1ef:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010b1f2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b1f5:	8b 40 0c             	mov    0xc(%eax),%eax
c010b1f8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010b1fb:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010b202:	77 23                	ja     c010b227 <load_icode+0x5ac>
c010b204:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b207:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b20b:	c7 44 24 08 8c f6 10 	movl   $0xc010f68c,0x8(%esp)
c010b212:	c0 
c010b213:	c7 44 24 04 6c 02 00 	movl   $0x26c,0x4(%esp)
c010b21a:	00 
c010b21b:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b222:	e8 b3 5b ff ff       	call   c0100dda <__panic>
c010b227:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b22a:	05 00 00 00 40       	add    $0x40000000,%eax
c010b22f:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010b232:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010b235:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010b238:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010b23d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b240:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010b243:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010b24a:	00 
c010b24b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b252:	00 
c010b253:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b256:	89 04 24             	mov    %eax,(%esp)
c010b259:	e8 79 1e 00 00       	call   c010d0d7 <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010b25e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b261:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010b267:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b26a:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010b270:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b273:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010b277:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b27a:	66 89 50 28          	mov    %dx,0x28(%eax)
c010b27e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b281:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010b285:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b288:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010b28c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b28f:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010b296:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b299:	8b 50 18             	mov    0x18(%eax),%edx
c010b29c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b29f:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010b2a2:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b2a5:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010b2ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010b2b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2b6:	eb 23                	jmp    c010b2db <load_icode+0x660>
bad_cleanup_mmap:
    exit_mmap(mm);
c010b2b8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b2bb:	89 04 24             	mov    %eax,(%esp)
c010b2be:	e8 e9 ce ff ff       	call   c01081ac <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010b2c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b2c6:	89 04 24             	mov    %eax,(%esp)
c010b2c9:	e8 72 f4 ff ff       	call   c010a740 <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010b2ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b2d1:	89 04 24             	mov    %eax,(%esp)
c010b2d4:	e8 14 cc ff ff       	call   c0107eed <mm_destroy>
bad_mm:
    goto out;
c010b2d9:	eb d8                	jmp    c010b2b3 <load_icode+0x638>
}
c010b2db:	c9                   	leave  
c010b2dc:	c3                   	ret    

c010b2dd <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010b2dd:	55                   	push   %ebp
c010b2de:	89 e5                	mov    %esp,%ebp
c010b2e0:	83 ec 58             	sub    $0x58,%esp
    struct mm_struct *mm = current->mm;
c010b2e3:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010b2e8:	8b 40 18             	mov    0x18(%eax),%eax
c010b2eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010b2ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2f1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010b2f8:	00 
c010b2f9:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b2fc:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b300:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b304:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b307:	89 04 24             	mov    %eax,(%esp)
c010b30a:	e8 14 d9 ff ff       	call   c0108c23 <user_mem_check>
c010b30f:	85 c0                	test   %eax,%eax
c010b311:	75 0a                	jne    c010b31d <do_execve+0x40>
        return -E_INVAL;
c010b313:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b318:	e9 f4 00 00 00       	jmp    c010b411 <do_execve+0x134>
    }
    if (len > PROC_NAME_LEN) {
c010b31d:	83 7d 0c 32          	cmpl   $0x32,0xc(%ebp)
c010b321:	76 07                	jbe    c010b32a <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010b323:	c7 45 0c 32 00 00 00 	movl   $0x32,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010b32a:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010b331:	00 
c010b332:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b339:	00 
c010b33a:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010b33d:	89 04 24             	mov    %eax,(%esp)
c010b340:	e8 92 1d 00 00       	call   c010d0d7 <memset>
    memcpy(local_name, name, len);
c010b345:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b348:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b34c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b34f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b353:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010b356:	89 04 24             	mov    %eax,(%esp)
c010b359:	e8 5b 1e 00 00       	call   c010d1b9 <memcpy>

    if (mm != NULL) {
c010b35e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b362:	74 4a                	je     c010b3ae <do_execve+0xd1>
        lcr3(boot_cr3);
c010b364:	a1 ec 44 1c c0       	mov    0xc01c44ec,%eax
c010b369:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b36c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b36f:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010b372:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b375:	89 04 24             	mov    %eax,(%esp)
c010b378:	e8 ee ec ff ff       	call   c010a06b <mm_count_dec>
c010b37d:	85 c0                	test   %eax,%eax
c010b37f:	75 21                	jne    c010b3a2 <do_execve+0xc5>
            exit_mmap(mm);
c010b381:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b384:	89 04 24             	mov    %eax,(%esp)
c010b387:	e8 20 ce ff ff       	call   c01081ac <exit_mmap>
            put_pgdir(mm);
c010b38c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b38f:	89 04 24             	mov    %eax,(%esp)
c010b392:	e8 a9 f3 ff ff       	call   c010a740 <put_pgdir>
            mm_destroy(mm);
c010b397:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b39a:	89 04 24             	mov    %eax,(%esp)
c010b39d:	e8 4b cb ff ff       	call   c0107eed <mm_destroy>
        }
        current->mm = NULL;
c010b3a2:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010b3a7:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010b3ae:	8b 45 14             	mov    0x14(%ebp),%eax
c010b3b1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b3b5:	8b 45 10             	mov    0x10(%ebp),%eax
c010b3b8:	89 04 24             	mov    %eax,(%esp)
c010b3bb:	e8 bb f8 ff ff       	call   c010ac7b <load_icode>
c010b3c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b3c3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b3c7:	74 2f                	je     c010b3f8 <do_execve+0x11b>
        goto execve_exit;
c010b3c9:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010b3ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3cd:	89 04 24             	mov    %eax,(%esp)
c010b3d0:	e8 ac f6 ff ff       	call   c010aa81 <do_exit>
    panic("already exit: %e.\n", ret);
c010b3d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b3dc:	c7 44 24 08 a7 f8 10 	movl   $0xc010f8a7,0x8(%esp)
c010b3e3:	c0 
c010b3e4:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c010b3eb:	00 
c010b3ec:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b3f3:	e8 e2 59 ff ff       	call   c0100dda <__panic>
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010b3f8:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010b3fd:	8d 55 b9             	lea    -0x47(%ebp),%edx
c010b400:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b404:	89 04 24             	mov    %eax,(%esp)
c010b407:	e8 2c ed ff ff       	call   c010a138 <set_proc_name>
    return 0;
c010b40c:	b8 00 00 00 00       	mov    $0x0,%eax

execve_exit:
    do_exit(ret);
    panic("already exit: %e.\n", ret);
}
c010b411:	c9                   	leave  
c010b412:	c3                   	ret    

c010b413 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010b413:	55                   	push   %ebp
c010b414:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010b416:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010b41b:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010b422:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b427:	5d                   	pop    %ebp
c010b428:	c3                   	ret    

c010b429 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010b429:	55                   	push   %ebp
c010b42a:	89 e5                	mov    %esp,%ebp
c010b42c:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b42f:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010b434:	8b 40 18             	mov    0x18(%eax),%eax
c010b437:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010b43a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b43e:	74 30                	je     c010b470 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010b440:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b443:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010b44a:	00 
c010b44b:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010b452:	00 
c010b453:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b457:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b45a:	89 04 24             	mov    %eax,(%esp)
c010b45d:	e8 c1 d7 ff ff       	call   c0108c23 <user_mem_check>
c010b462:	85 c0                	test   %eax,%eax
c010b464:	75 0a                	jne    c010b470 <do_wait+0x47>
            return -E_INVAL;
c010b466:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b46b:	e9 57 01 00 00       	jmp    c010b5c7 <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010b470:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010b477:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b47b:	74 39                	je     c010b4b6 <do_wait+0x8d>
        proc = find_proc(pid);
c010b47d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b480:	89 04 24             	mov    %eax,(%esp)
c010b483:	e8 c9 f0 ff ff       	call   c010a551 <find_proc>
c010b488:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010b48b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b48f:	74 5a                	je     c010b4eb <do_wait+0xc2>
c010b491:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b494:	8b 50 14             	mov    0x14(%eax),%edx
c010b497:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010b49c:	39 c2                	cmp    %eax,%edx
c010b49e:	75 4b                	jne    c010b4eb <do_wait+0xc2>
            haskid = 1;
c010b4a0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b4a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4aa:	8b 00                	mov    (%eax),%eax
c010b4ac:	83 f8 03             	cmp    $0x3,%eax
c010b4af:	75 3a                	jne    c010b4eb <do_wait+0xc2>
                goto found;
c010b4b1:	e9 89 00 00 00       	jmp    c010b53f <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010b4b6:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010b4bb:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b4c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010b4c4:	eb 1f                	jmp    c010b4e5 <do_wait+0xbc>
            haskid = 1;
c010b4c6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b4cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4d0:	8b 00                	mov    (%eax),%eax
c010b4d2:	83 f8 03             	cmp    $0x3,%eax
c010b4d5:	75 02                	jne    c010b4d9 <do_wait+0xb0>
                goto found;
c010b4d7:	eb 66                	jmp    c010b53f <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010b4d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4dc:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b4e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b4e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b4e9:	75 db                	jne    c010b4c6 <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010b4eb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b4ef:	74 44                	je     c010b535 <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010b4f1:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010b4f6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010b4fc:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010b501:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010b508:	00 00 80 
        schedule();
c010b50b:	e8 0e 0b 00 00       	call   c010c01e <schedule>
        if (current->flags & PF_EXITING) {
c010b510:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010b515:	8b 40 44             	mov    0x44(%eax),%eax
c010b518:	83 e0 01             	and    $0x1,%eax
c010b51b:	85 c0                	test   %eax,%eax
c010b51d:	74 11                	je     c010b530 <do_wait+0x107>
            do_exit(-E_KILLED);
c010b51f:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010b526:	e8 56 f5 ff ff       	call   c010aa81 <do_exit>
        }
        goto repeat;
c010b52b:	e9 40 ff ff ff       	jmp    c010b470 <do_wait+0x47>
c010b530:	e9 3b ff ff ff       	jmp    c010b470 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010b535:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010b53a:	e9 88 00 00 00       	jmp    c010b5c7 <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010b53f:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c010b544:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b547:	74 0a                	je     c010b553 <do_wait+0x12a>
c010b549:	a1 44 24 1c c0       	mov    0xc01c2444,%eax
c010b54e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b551:	75 1c                	jne    c010b56f <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010b553:	c7 44 24 08 ba f8 10 	movl   $0xc010f8ba,0x8(%esp)
c010b55a:	c0 
c010b55b:	c7 44 24 04 e7 02 00 	movl   $0x2e7,0x4(%esp)
c010b562:	00 
c010b563:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b56a:	e8 6b 58 ff ff       	call   c0100dda <__panic>
    }
    if (code_store != NULL) {
c010b56f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b573:	74 0e                	je     c010b583 <do_wait+0x15a>
        *code_store = proc->exit_code;
c010b575:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b578:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010b57e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b581:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010b583:	e8 7f e9 ff ff       	call   c0109f07 <__intr_save>
c010b588:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010b58b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b58e:	89 04 24             	mov    %eax,(%esp)
c010b591:	e8 86 ef ff ff       	call   c010a51c <unhash_proc>
        remove_links(proc);
c010b596:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b599:	89 04 24             	mov    %eax,(%esp)
c010b59c:	e8 d6 ec ff ff       	call   c010a277 <remove_links>
    }
    local_intr_restore(intr_flag);
c010b5a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b5a4:	89 04 24             	mov    %eax,(%esp)
c010b5a7:	e8 85 e9 ff ff       	call   c0109f31 <__intr_restore>
    put_kstack(proc);
c010b5ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5af:	89 04 24             	mov    %eax,(%esp)
c010b5b2:	e8 bc f0 ff ff       	call   c010a673 <put_kstack>
    kfree(proc);
c010b5b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5ba:	89 04 24             	mov    %eax,(%esp)
c010b5bd:	e8 fb 93 ff ff       	call   c01049bd <kfree>
    return 0;
c010b5c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b5c7:	c9                   	leave  
c010b5c8:	c3                   	ret    

c010b5c9 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010b5c9:	55                   	push   %ebp
c010b5ca:	89 e5                	mov    %esp,%ebp
c010b5cc:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010b5cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5d2:	89 04 24             	mov    %eax,(%esp)
c010b5d5:	e8 77 ef ff ff       	call   c010a551 <find_proc>
c010b5da:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b5dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b5e1:	74 44                	je     c010b627 <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010b5e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5e6:	8b 40 44             	mov    0x44(%eax),%eax
c010b5e9:	83 e0 01             	and    $0x1,%eax
c010b5ec:	85 c0                	test   %eax,%eax
c010b5ee:	75 30                	jne    c010b620 <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010b5f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5f3:	8b 40 44             	mov    0x44(%eax),%eax
c010b5f6:	83 c8 01             	or     $0x1,%eax
c010b5f9:	89 c2                	mov    %eax,%edx
c010b5fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5fe:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010b601:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b604:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b60a:	85 c0                	test   %eax,%eax
c010b60c:	79 0b                	jns    c010b619 <do_kill+0x50>
                wakeup_proc(proc);
c010b60e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b611:	89 04 24             	mov    %eax,(%esp)
c010b614:	e8 69 09 00 00       	call   c010bf82 <wakeup_proc>
            }
            return 0;
c010b619:	b8 00 00 00 00       	mov    $0x0,%eax
c010b61e:	eb 0c                	jmp    c010b62c <do_kill+0x63>
        }
        return -E_KILLED;
c010b620:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010b625:	eb 05                	jmp    c010b62c <do_kill+0x63>
    }
    return -E_INVAL;
c010b627:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010b62c:	c9                   	leave  
c010b62d:	c3                   	ret    

c010b62e <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010b62e:	55                   	push   %ebp
c010b62f:	89 e5                	mov    %esp,%ebp
c010b631:	57                   	push   %edi
c010b632:	56                   	push   %esi
c010b633:	53                   	push   %ebx
c010b634:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010b637:	8b 45 08             	mov    0x8(%ebp),%eax
c010b63a:	89 04 24             	mov    %eax,(%esp)
c010b63d:	e8 66 17 00 00       	call   c010cda8 <strlen>
c010b642:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010b645:	b8 04 00 00 00       	mov    $0x4,%eax
c010b64a:	8b 55 08             	mov    0x8(%ebp),%edx
c010b64d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010b650:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010b653:	8b 75 10             	mov    0x10(%ebp),%esi
c010b656:	89 f7                	mov    %esi,%edi
c010b658:	cd 80                	int    $0x80
c010b65a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010b65d:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010b660:	83 c4 2c             	add    $0x2c,%esp
c010b663:	5b                   	pop    %ebx
c010b664:	5e                   	pop    %esi
c010b665:	5f                   	pop    %edi
c010b666:	5d                   	pop    %ebp
c010b667:	c3                   	ret    

c010b668 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010b668:	55                   	push   %ebp
c010b669:	89 e5                	mov    %esp,%ebp
c010b66b:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010b66e:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010b673:	8b 40 04             	mov    0x4(%eax),%eax
c010b676:	c7 44 24 08 d6 f8 10 	movl   $0xc010f8d6,0x8(%esp)
c010b67d:	c0 
c010b67e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b682:	c7 04 24 e0 f8 10 c0 	movl   $0xc010f8e0,(%esp)
c010b689:	e8 ca 4c ff ff       	call   c0100358 <cprintf>
c010b68e:	b8 04 7a 00 00       	mov    $0x7a04,%eax
c010b693:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b697:	c7 44 24 04 e0 53 17 	movl   $0xc01753e0,0x4(%esp)
c010b69e:	c0 
c010b69f:	c7 04 24 d6 f8 10 c0 	movl   $0xc010f8d6,(%esp)
c010b6a6:	e8 83 ff ff ff       	call   c010b62e <kernel_execve>
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010b6ab:	c7 44 24 08 07 f9 10 	movl   $0xc010f907,0x8(%esp)
c010b6b2:	c0 
c010b6b3:	c7 44 24 04 30 03 00 	movl   $0x330,0x4(%esp)
c010b6ba:	00 
c010b6bb:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b6c2:	e8 13 57 ff ff       	call   c0100dda <__panic>

c010b6c7 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010b6c7:	55                   	push   %ebp
c010b6c8:	89 e5                	mov    %esp,%ebp
c010b6ca:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010b6cd:	e8 e2 97 ff ff       	call   c0104eb4 <nr_free_pages>
c010b6d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010b6d5:	e8 ab 91 ff ff       	call   c0104885 <kallocated>
c010b6da:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010b6dd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b6e4:	00 
c010b6e5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b6ec:	00 
c010b6ed:	c7 04 24 68 b6 10 c0 	movl   $0xc010b668,(%esp)
c010b6f4:	e8 cc ee ff ff       	call   c010a5c5 <kernel_thread>
c010b6f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010b6fc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b700:	7f 1c                	jg     c010b71e <init_main+0x57>
        panic("create user_main failed.\n");
c010b702:	c7 44 24 08 21 f9 10 	movl   $0xc010f921,0x8(%esp)
c010b709:	c0 
c010b70a:	c7 44 24 04 3b 03 00 	movl   $0x33b,0x4(%esp)
c010b711:	00 
c010b712:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b719:	e8 bc 56 ff ff       	call   c0100dda <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010b71e:	e8 0d db ff ff       	call   c0109230 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010b723:	eb 05                	jmp    c010b72a <init_main+0x63>
        schedule();
c010b725:	e8 f4 08 00 00       	call   c010c01e <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010b72a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b731:	00 
c010b732:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010b739:	e8 eb fc ff ff       	call   c010b429 <do_wait>
c010b73e:	85 c0                	test   %eax,%eax
c010b740:	74 e3                	je     c010b725 <init_main+0x5e>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010b742:	c7 04 24 3c f9 10 c0 	movl   $0xc010f93c,(%esp)
c010b749:	e8 0a 4c ff ff       	call   c0100358 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010b74e:	a1 44 24 1c c0       	mov    0xc01c2444,%eax
c010b753:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b759:	85 c0                	test   %eax,%eax
c010b75b:	75 1e                	jne    c010b77b <init_main+0xb4>
c010b75d:	a1 44 24 1c c0       	mov    0xc01c2444,%eax
c010b762:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010b768:	85 c0                	test   %eax,%eax
c010b76a:	75 0f                	jne    c010b77b <init_main+0xb4>
c010b76c:	a1 44 24 1c c0       	mov    0xc01c2444,%eax
c010b771:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b777:	85 c0                	test   %eax,%eax
c010b779:	74 24                	je     c010b79f <init_main+0xd8>
c010b77b:	c7 44 24 0c 60 f9 10 	movl   $0xc010f960,0xc(%esp)
c010b782:	c0 
c010b783:	c7 44 24 08 dd f6 10 	movl   $0xc010f6dd,0x8(%esp)
c010b78a:	c0 
c010b78b:	c7 44 24 04 45 03 00 	movl   $0x345,0x4(%esp)
c010b792:	00 
c010b793:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b79a:	e8 3b 56 ff ff       	call   c0100dda <__panic>
    assert(nr_process == 2);
c010b79f:	a1 60 44 1c c0       	mov    0xc01c4460,%eax
c010b7a4:	83 f8 02             	cmp    $0x2,%eax
c010b7a7:	74 24                	je     c010b7cd <init_main+0x106>
c010b7a9:	c7 44 24 0c ab f9 10 	movl   $0xc010f9ab,0xc(%esp)
c010b7b0:	c0 
c010b7b1:	c7 44 24 08 dd f6 10 	movl   $0xc010f6dd,0x8(%esp)
c010b7b8:	c0 
c010b7b9:	c7 44 24 04 46 03 00 	movl   $0x346,0x4(%esp)
c010b7c0:	00 
c010b7c1:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b7c8:	e8 0d 56 ff ff       	call   c0100dda <__panic>
c010b7cd:	c7 45 e8 bc 46 1c c0 	movl   $0xc01c46bc,-0x18(%ebp)
c010b7d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b7d7:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010b7da:	8b 15 44 24 1c c0    	mov    0xc01c2444,%edx
c010b7e0:	83 c2 7c             	add    $0x7c,%edx
c010b7e3:	39 d0                	cmp    %edx,%eax
c010b7e5:	74 24                	je     c010b80b <init_main+0x144>
c010b7e7:	c7 44 24 0c bc f9 10 	movl   $0xc010f9bc,0xc(%esp)
c010b7ee:	c0 
c010b7ef:	c7 44 24 08 dd f6 10 	movl   $0xc010f6dd,0x8(%esp)
c010b7f6:	c0 
c010b7f7:	c7 44 24 04 47 03 00 	movl   $0x347,0x4(%esp)
c010b7fe:	00 
c010b7ff:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b806:	e8 cf 55 ff ff       	call   c0100dda <__panic>
c010b80b:	c7 45 e4 bc 46 1c c0 	movl   $0xc01c46bc,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010b812:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b815:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010b817:	8b 15 44 24 1c c0    	mov    0xc01c2444,%edx
c010b81d:	83 c2 7c             	add    $0x7c,%edx
c010b820:	39 d0                	cmp    %edx,%eax
c010b822:	74 24                	je     c010b848 <init_main+0x181>
c010b824:	c7 44 24 0c ec f9 10 	movl   $0xc010f9ec,0xc(%esp)
c010b82b:	c0 
c010b82c:	c7 44 24 08 dd f6 10 	movl   $0xc010f6dd,0x8(%esp)
c010b833:	c0 
c010b834:	c7 44 24 04 48 03 00 	movl   $0x348,0x4(%esp)
c010b83b:	00 
c010b83c:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b843:	e8 92 55 ff ff       	call   c0100dda <__panic>

    cprintf("init check memory pass.\n");
c010b848:	c7 04 24 1c fa 10 c0 	movl   $0xc010fa1c,(%esp)
c010b84f:	e8 04 4b ff ff       	call   c0100358 <cprintf>
    return 0;
c010b854:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b859:	c9                   	leave  
c010b85a:	c3                   	ret    

c010b85b <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010b85b:	55                   	push   %ebp
c010b85c:	89 e5                	mov    %esp,%ebp
c010b85e:	83 ec 28             	sub    $0x28,%esp
c010b861:	c7 45 ec bc 46 1c c0 	movl   $0xc01c46bc,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b868:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b86b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b86e:	89 50 04             	mov    %edx,0x4(%eax)
c010b871:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b874:	8b 50 04             	mov    0x4(%eax),%edx
c010b877:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b87a:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010b87c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b883:	eb 26                	jmp    c010b8ab <proc_init+0x50>
        list_init(hash_list + i);
c010b885:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b888:	c1 e0 03             	shl    $0x3,%eax
c010b88b:	05 60 24 1c c0       	add    $0xc01c2460,%eax
c010b890:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b893:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b896:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b899:	89 50 04             	mov    %edx,0x4(%eax)
c010b89c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b89f:	8b 50 04             	mov    0x4(%eax),%edx
c010b8a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b8a5:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010b8a7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b8ab:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010b8b2:	7e d1                	jle    c010b885 <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010b8b4:	e8 25 e8 ff ff       	call   c010a0de <alloc_proc>
c010b8b9:	a3 40 24 1c c0       	mov    %eax,0xc01c2440
c010b8be:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c010b8c3:	85 c0                	test   %eax,%eax
c010b8c5:	75 1c                	jne    c010b8e3 <proc_init+0x88>
        panic("cannot alloc idleproc.\n");
c010b8c7:	c7 44 24 08 35 fa 10 	movl   $0xc010fa35,0x8(%esp)
c010b8ce:	c0 
c010b8cf:	c7 44 24 04 5a 03 00 	movl   $0x35a,0x4(%esp)
c010b8d6:	00 
c010b8d7:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b8de:	e8 f7 54 ff ff       	call   c0100dda <__panic>
    }

    idleproc->pid = 0;
c010b8e3:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c010b8e8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010b8ef:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c010b8f4:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010b8fa:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c010b8ff:	ba 00 e0 12 c0       	mov    $0xc012e000,%edx
c010b904:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010b907:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c010b90c:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010b913:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c010b918:	c7 44 24 04 4d fa 10 	movl   $0xc010fa4d,0x4(%esp)
c010b91f:	c0 
c010b920:	89 04 24             	mov    %eax,(%esp)
c010b923:	e8 10 e8 ff ff       	call   c010a138 <set_proc_name>
    nr_process ++;
c010b928:	a1 60 44 1c c0       	mov    0xc01c4460,%eax
c010b92d:	83 c0 01             	add    $0x1,%eax
c010b930:	a3 60 44 1c c0       	mov    %eax,0xc01c4460

    current = idleproc;
c010b935:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c010b93a:	a3 48 24 1c c0       	mov    %eax,0xc01c2448

    int pid = kernel_thread(init_main, NULL, 0);
c010b93f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b946:	00 
c010b947:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b94e:	00 
c010b94f:	c7 04 24 c7 b6 10 c0 	movl   $0xc010b6c7,(%esp)
c010b956:	e8 6a ec ff ff       	call   c010a5c5 <kernel_thread>
c010b95b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010b95e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b962:	7f 1c                	jg     c010b980 <proc_init+0x125>
        panic("create init_main failed.\n");
c010b964:	c7 44 24 08 52 fa 10 	movl   $0xc010fa52,0x8(%esp)
c010b96b:	c0 
c010b96c:	c7 44 24 04 68 03 00 	movl   $0x368,0x4(%esp)
c010b973:	00 
c010b974:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b97b:	e8 5a 54 ff ff       	call   c0100dda <__panic>
    }

    initproc = find_proc(pid);
c010b980:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b983:	89 04 24             	mov    %eax,(%esp)
c010b986:	e8 c6 eb ff ff       	call   c010a551 <find_proc>
c010b98b:	a3 44 24 1c c0       	mov    %eax,0xc01c2444
    set_proc_name(initproc, "init");
c010b990:	a1 44 24 1c c0       	mov    0xc01c2444,%eax
c010b995:	c7 44 24 04 6c fa 10 	movl   $0xc010fa6c,0x4(%esp)
c010b99c:	c0 
c010b99d:	89 04 24             	mov    %eax,(%esp)
c010b9a0:	e8 93 e7 ff ff       	call   c010a138 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010b9a5:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c010b9aa:	85 c0                	test   %eax,%eax
c010b9ac:	74 0c                	je     c010b9ba <proc_init+0x15f>
c010b9ae:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c010b9b3:	8b 40 04             	mov    0x4(%eax),%eax
c010b9b6:	85 c0                	test   %eax,%eax
c010b9b8:	74 24                	je     c010b9de <proc_init+0x183>
c010b9ba:	c7 44 24 0c 74 fa 10 	movl   $0xc010fa74,0xc(%esp)
c010b9c1:	c0 
c010b9c2:	c7 44 24 08 dd f6 10 	movl   $0xc010f6dd,0x8(%esp)
c010b9c9:	c0 
c010b9ca:	c7 44 24 04 6e 03 00 	movl   $0x36e,0x4(%esp)
c010b9d1:	00 
c010b9d2:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010b9d9:	e8 fc 53 ff ff       	call   c0100dda <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010b9de:	a1 44 24 1c c0       	mov    0xc01c2444,%eax
c010b9e3:	85 c0                	test   %eax,%eax
c010b9e5:	74 0d                	je     c010b9f4 <proc_init+0x199>
c010b9e7:	a1 44 24 1c c0       	mov    0xc01c2444,%eax
c010b9ec:	8b 40 04             	mov    0x4(%eax),%eax
c010b9ef:	83 f8 01             	cmp    $0x1,%eax
c010b9f2:	74 24                	je     c010ba18 <proc_init+0x1bd>
c010b9f4:	c7 44 24 0c 9c fa 10 	movl   $0xc010fa9c,0xc(%esp)
c010b9fb:	c0 
c010b9fc:	c7 44 24 08 dd f6 10 	movl   $0xc010f6dd,0x8(%esp)
c010ba03:	c0 
c010ba04:	c7 44 24 04 6f 03 00 	movl   $0x36f,0x4(%esp)
c010ba0b:	00 
c010ba0c:	c7 04 24 b0 f6 10 c0 	movl   $0xc010f6b0,(%esp)
c010ba13:	e8 c2 53 ff ff       	call   c0100dda <__panic>
}
c010ba18:	c9                   	leave  
c010ba19:	c3                   	ret    

c010ba1a <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010ba1a:	55                   	push   %ebp
c010ba1b:	89 e5                	mov    %esp,%ebp
c010ba1d:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010ba20:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010ba25:	8b 40 10             	mov    0x10(%eax),%eax
c010ba28:	85 c0                	test   %eax,%eax
c010ba2a:	74 07                	je     c010ba33 <cpu_idle+0x19>
            schedule();
c010ba2c:	e8 ed 05 00 00       	call   c010c01e <schedule>
        }
    }
c010ba31:	eb ed                	jmp    c010ba20 <cpu_idle+0x6>
c010ba33:	eb eb                	jmp    c010ba20 <cpu_idle+0x6>

c010ba35 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010ba35:	55                   	push   %ebp
c010ba36:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010ba38:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ba3c:	75 11                	jne    c010ba4f <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010ba3e:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010ba43:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010ba4a:	00 00 00 
c010ba4d:	eb 0e                	jmp    c010ba5d <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010ba4f:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010ba54:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba57:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010ba5d:	5d                   	pop    %ebp
c010ba5e:	c3                   	ret    

c010ba5f <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010ba5f:	55                   	push   %ebp
c010ba60:	89 e5                	mov    %esp,%ebp
c010ba62:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010ba65:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ba69:	75 07                	jne    c010ba72 <do_sleep+0x13>
        return 0;
c010ba6b:	b8 00 00 00 00       	mov    $0x0,%eax
c010ba70:	eb 6b                	jmp    c010badd <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010ba72:	e8 90 e4 ff ff       	call   c0109f07 <__intr_save>
c010ba77:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010ba7a:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba7d:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010ba82:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ba86:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba8a:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010ba8d:	89 04 24             	mov    %eax,(%esp)
c010ba90:	e8 39 e4 ff ff       	call   c0109ece <timer_init>
c010ba95:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010ba98:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010ba9d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010baa3:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010baa8:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010baaf:	00 00 80 
    add_timer(timer);
c010bab2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bab5:	89 04 24             	mov    %eax,(%esp)
c010bab8:	e8 ec 05 00 00       	call   c010c0a9 <add_timer>
    local_intr_restore(intr_flag);
c010babd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bac0:	89 04 24             	mov    %eax,(%esp)
c010bac3:	e8 69 e4 ff ff       	call   c0109f31 <__intr_restore>

    schedule();
c010bac8:	e8 51 05 00 00       	call   c010c01e <schedule>

    del_timer(timer);
c010bacd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bad0:	89 04 24             	mov    %eax,(%esp)
c010bad3:	e8 0f 07 00 00       	call   c010c1e7 <del_timer>
    return 0;
c010bad8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010badd:	c9                   	leave  
c010bade:	c3                   	ret    

c010badf <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010badf:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010bae3:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010bae5:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010bae8:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010baeb:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010baee:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010baf1:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010baf4:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010baf7:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010bafa:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010bafe:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010bb01:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010bb04:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010bb07:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010bb0a:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010bb0d:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010bb10:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010bb13:	ff 30                	pushl  (%eax)

    ret
c010bb15:	c3                   	ret    

c010bb16 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010bb16:	55                   	push   %ebp
c010bb17:	89 e5                	mov    %esp,%ebp
c010bb19:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010bb1c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bb20:	75 08                	jne    c010bb2a <skew_heap_merge+0x14>
c010bb22:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb25:	e9 bd 00 00 00       	jmp    c010bbe7 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010bb2a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bb2e:	75 08                	jne    c010bb38 <skew_heap_merge+0x22>
c010bb30:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb33:	e9 af 00 00 00       	jmp    c010bbe7 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010bb38:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb3b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb42:	89 04 24             	mov    %eax,(%esp)
c010bb45:	8b 45 10             	mov    0x10(%ebp),%eax
c010bb48:	ff d0                	call   *%eax
c010bb4a:	83 f8 ff             	cmp    $0xffffffff,%eax
c010bb4d:	75 4d                	jne    c010bb9c <skew_heap_merge+0x86>
     {
          r = a->left;
c010bb4f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb52:	8b 40 04             	mov    0x4(%eax),%eax
c010bb55:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010bb58:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb5b:	8b 40 08             	mov    0x8(%eax),%eax
c010bb5e:	8b 55 10             	mov    0x10(%ebp),%edx
c010bb61:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bb65:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bb68:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bb6c:	89 04 24             	mov    %eax,(%esp)
c010bb6f:	e8 a2 ff ff ff       	call   c010bb16 <skew_heap_merge>
c010bb74:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010bb77:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bb7d:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010bb80:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb83:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bb86:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010bb89:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bb8d:	74 08                	je     c010bb97 <skew_heap_merge+0x81>
c010bb8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb92:	8b 55 08             	mov    0x8(%ebp),%edx
c010bb95:	89 10                	mov    %edx,(%eax)

          return a;
c010bb97:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb9a:	eb 4b                	jmp    c010bbe7 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010bb9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb9f:	8b 40 04             	mov    0x4(%eax),%eax
c010bba2:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010bba5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bba8:	8b 40 08             	mov    0x8(%eax),%eax
c010bbab:	8b 55 10             	mov    0x10(%ebp),%edx
c010bbae:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bbb2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbb9:	89 04 24             	mov    %eax,(%esp)
c010bbbc:	e8 55 ff ff ff       	call   c010bb16 <skew_heap_merge>
c010bbc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010bbc4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bbc7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bbca:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010bbcd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bbd0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bbd3:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010bbd6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bbda:	74 08                	je     c010bbe4 <skew_heap_merge+0xce>
c010bbdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbdf:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bbe2:	89 10                	mov    %edx,(%eax)

          return b;
c010bbe4:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010bbe7:	c9                   	leave  
c010bbe8:	c3                   	ret    

c010bbe9 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010bbe9:	55                   	push   %ebp
c010bbea:	89 e5                	mov    %esp,%ebp
c010bbec:	83 ec 10             	sub    $0x10,%esp
    struct proc_struct *p = le2proc(a, lab6_run_pool);
c010bbef:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbf2:	2d b0 00 00 00       	sub    $0xb0,%eax
c010bbf7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct proc_struct *q = le2proc(b, lab6_run_pool);
c010bbfa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bbfd:	2d b0 00 00 00       	sub    $0xb0,%eax
c010bc02:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int32_t c = p->lab6_stride - q->lab6_stride;
c010bc05:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bc08:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010bc0e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bc11:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010bc17:	29 c2                	sub    %eax,%edx
c010bc19:	89 d0                	mov    %edx,%eax
c010bc1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (c > 0) return 1;
c010bc1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc22:	7e 07                	jle    c010bc2b <proc_stride_comp_f+0x42>
c010bc24:	b8 01 00 00 00       	mov    $0x1,%eax
c010bc29:	eb 12                	jmp    c010bc3d <proc_stride_comp_f+0x54>
    else if (c == 0) return 0;
c010bc2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc2f:	75 07                	jne    c010bc38 <proc_stride_comp_f+0x4f>
c010bc31:	b8 00 00 00 00       	mov    $0x0,%eax
c010bc36:	eb 05                	jmp    c010bc3d <proc_stride_comp_f+0x54>
    else return -1;
c010bc38:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010bc3d:	c9                   	leave  
c010bc3e:	c3                   	ret    

c010bc3f <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010bc3f:	55                   	push   %ebp
c010bc40:	89 e5                	mov    %esp,%ebp
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0
      */
#if USE_SKEW_HEAP
    rq->lab6_run_pool = 0;
c010bc42:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc45:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
#else
    list_init(&rq->run_list);
#endif
    rq->proc_num = 0;
c010bc4c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc4f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010bc56:	5d                   	pop    %ebp
c010bc57:	c3                   	ret    

c010bc58 <stride_enqueue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010bc58:	55                   	push   %ebp
c010bc59:	89 e5                	mov    %esp,%ebp
c010bc5b:	83 ec 28             	sub    $0x28,%esp
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
#if USE_SKEW_HEAP
    rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010bc5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc61:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010bc67:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc6a:	8b 40 10             	mov    0x10(%eax),%eax
c010bc6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bc70:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010bc73:	c7 45 ec e9 bb 10 c0 	movl   $0xc010bbe9,-0x14(%ebp)
c010bc7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc7d:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010bc80:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc83:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010bc89:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc8c:	8b 10                	mov    (%eax),%edx
c010bc8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc91:	89 50 08             	mov    %edx,0x8(%eax)
c010bc94:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc97:	8b 50 08             	mov    0x8(%eax),%edx
c010bc9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc9d:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010bca0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bca3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bca7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcaa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bcae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcb1:	89 04 24             	mov    %eax,(%esp)
c010bcb4:	e8 5d fe ff ff       	call   c010bb16 <skew_heap_merge>
c010bcb9:	89 c2                	mov    %eax,%edx
c010bcbb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcbe:	89 50 10             	mov    %edx,0x10(%eax)
#else
    list_add(&rq->run_list, &proc->run_link);
#endif
    proc->time_slice = rq->max_time_slice;
c010bcc1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcc4:	8b 50 0c             	mov    0xc(%eax),%edx
c010bcc7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bcca:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    proc->rq = rq;
c010bcd0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bcd3:	8b 55 08             	mov    0x8(%ebp),%edx
c010bcd6:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    if (proc->lab6_priority == 0) proc->lab6_priority = 1;
c010bcdc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bcdf:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010bce5:	85 c0                	test   %eax,%eax
c010bce7:	75 0d                	jne    c010bcf6 <stride_enqueue+0x9e>
c010bce9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bcec:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010bcf3:	00 00 00 
    rq->proc_num++;
c010bcf6:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcf9:	8b 40 08             	mov    0x8(%eax),%eax
c010bcfc:	8d 50 01             	lea    0x1(%eax),%edx
c010bcff:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd02:	89 50 08             	mov    %edx,0x8(%eax)
}
c010bd05:	c9                   	leave  
c010bd06:	c3                   	ret    

c010bd07 <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010bd07:	55                   	push   %ebp
c010bd08:	89 e5                	mov    %esp,%ebp
c010bd0a:	83 ec 38             	sub    $0x38,%esp
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
#if USE_SKEW_HEAP
    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010bd0d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd10:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010bd16:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd19:	8b 40 10             	mov    0x10(%eax),%eax
c010bd1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd1f:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010bd22:	c7 45 ec e9 bb 10 c0 	movl   $0xc010bbe9,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010bd29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd2c:	8b 00                	mov    (%eax),%eax
c010bd2e:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010bd31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd34:	8b 50 08             	mov    0x8(%eax),%edx
c010bd37:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd3a:	8b 40 04             	mov    0x4(%eax),%eax
c010bd3d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010bd40:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010bd44:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bd48:	89 04 24             	mov    %eax,(%esp)
c010bd4b:	e8 c6 fd ff ff       	call   c010bb16 <skew_heap_merge>
c010bd50:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010bd53:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010bd57:	74 08                	je     c010bd61 <stride_dequeue+0x5a>
c010bd59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bd5c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010bd5f:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010bd61:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bd65:	74 24                	je     c010bd8b <stride_dequeue+0x84>
     {
          if (p->left == b)
c010bd67:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd6a:	8b 40 04             	mov    0x4(%eax),%eax
c010bd6d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010bd70:	75 0b                	jne    c010bd7d <stride_dequeue+0x76>
               p->left = rep;
c010bd72:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd75:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010bd78:	89 50 04             	mov    %edx,0x4(%eax)
c010bd7b:	eb 09                	jmp    c010bd86 <stride_dequeue+0x7f>
          else p->right = rep;
c010bd7d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd80:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010bd83:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010bd86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd89:	eb 03                	jmp    c010bd8e <stride_dequeue+0x87>
     }
     else return rep;
c010bd8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bd8e:	89 c2                	mov    %eax,%edx
c010bd90:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd93:	89 50 10             	mov    %edx,0x10(%eax)
#else
    list_del(&proc->run_link);
#endif
    rq->proc_num--;
c010bd96:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd99:	8b 40 08             	mov    0x8(%eax),%eax
c010bd9c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bd9f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bda2:	89 50 08             	mov    %edx,0x8(%eax)
}
c010bda5:	c9                   	leave  
c010bda6:	c3                   	ret    

c010bda7 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010bda7:	55                   	push   %ebp
c010bda8:	89 e5                	mov    %esp,%ebp
c010bdaa:	53                   	push   %ebx
c010bdab:	83 ec 10             	sub    $0x10,%esp
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
#if USE_SKEW_HEAP
    if (!rq->lab6_run_pool) return NULL;
c010bdae:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdb1:	8b 40 10             	mov    0x10(%eax),%eax
c010bdb4:	85 c0                	test   %eax,%eax
c010bdb6:	75 07                	jne    c010bdbf <stride_pick_next+0x18>
c010bdb8:	b8 00 00 00 00       	mov    $0x0,%eax
c010bdbd:	eb 41                	jmp    c010be00 <stride_pick_next+0x59>
    struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010bdbf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdc2:	8b 40 10             	mov    0x10(%eax),%eax
c010bdc5:	2d b0 00 00 00       	sub    $0xb0,%eax
c010bdca:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (le = list_next(&rq->run_list); le != &rq->run_list; le = list_next(le)) {
        struct proc_struct *q = le2proc(le, run_link);
        if (!p || proc_stride_comp_f(&p->lab6_run_pool, &q->lab6_run_pool) == 1) p = q;
    }
#endif
    if (p) p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010bdcd:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c010bdd1:	74 2a                	je     c010bdfd <stride_pick_next+0x56>
c010bdd3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bdd6:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010bddc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bddf:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010bde5:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010bdea:	ba 00 00 00 00       	mov    $0x0,%edx
c010bdef:	f7 f3                	div    %ebx
c010bdf1:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010bdf4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bdf7:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
    return p;
c010bdfd:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010be00:	83 c4 10             	add    $0x10,%esp
c010be03:	5b                   	pop    %ebx
c010be04:	5d                   	pop    %ebp
c010be05:	c3                   	ret    

c010be06 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010be06:	55                   	push   %ebp
c010be07:	89 e5                	mov    %esp,%ebp
     /* LAB6: 2012012017 */
    if (--proc->time_slice <= 0) proc->need_resched = 1;
c010be09:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be0c:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010be12:	8d 50 ff             	lea    -0x1(%eax),%edx
c010be15:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be18:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
c010be1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be21:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010be27:	85 c0                	test   %eax,%eax
c010be29:	7f 0a                	jg     c010be35 <stride_proc_tick+0x2f>
c010be2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be2e:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
}
c010be35:	5d                   	pop    %ebp
c010be36:	c3                   	ret    

c010be37 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010be37:	55                   	push   %ebp
c010be38:	89 e5                	mov    %esp,%ebp
c010be3a:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010be3d:	9c                   	pushf  
c010be3e:	58                   	pop    %eax
c010be3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010be42:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010be45:	25 00 02 00 00       	and    $0x200,%eax
c010be4a:	85 c0                	test   %eax,%eax
c010be4c:	74 0c                	je     c010be5a <__intr_save+0x23>
        intr_disable();
c010be4e:	e8 df 61 ff ff       	call   c0102032 <intr_disable>
        return 1;
c010be53:	b8 01 00 00 00       	mov    $0x1,%eax
c010be58:	eb 05                	jmp    c010be5f <__intr_save+0x28>
    }
    return 0;
c010be5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010be5f:	c9                   	leave  
c010be60:	c3                   	ret    

c010be61 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010be61:	55                   	push   %ebp
c010be62:	89 e5                	mov    %esp,%ebp
c010be64:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010be67:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010be6b:	74 05                	je     c010be72 <__intr_restore+0x11>
        intr_enable();
c010be6d:	e8 ba 61 ff ff       	call   c010202c <intr_enable>
    }
}
c010be72:	c9                   	leave  
c010be73:	c3                   	ret    

c010be74 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010be74:	55                   	push   %ebp
c010be75:	89 e5                	mov    %esp,%ebp
c010be77:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010be7a:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c010be7f:	39 45 08             	cmp    %eax,0x8(%ebp)
c010be82:	74 1a                	je     c010be9e <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010be84:	a1 bc 44 1c c0       	mov    0xc01c44bc,%eax
c010be89:	8b 40 08             	mov    0x8(%eax),%eax
c010be8c:	8b 15 c0 44 1c c0    	mov    0xc01c44c0,%edx
c010be92:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010be95:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010be99:	89 14 24             	mov    %edx,(%esp)
c010be9c:	ff d0                	call   *%eax
    }
}
c010be9e:	c9                   	leave  
c010be9f:	c3                   	ret    

c010bea0 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010bea0:	55                   	push   %ebp
c010bea1:	89 e5                	mov    %esp,%ebp
c010bea3:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010bea6:	a1 bc 44 1c c0       	mov    0xc01c44bc,%eax
c010beab:	8b 40 0c             	mov    0xc(%eax),%eax
c010beae:	8b 15 c0 44 1c c0    	mov    0xc01c44c0,%edx
c010beb4:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010beb7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010bebb:	89 14 24             	mov    %edx,(%esp)
c010bebe:	ff d0                	call   *%eax
}
c010bec0:	c9                   	leave  
c010bec1:	c3                   	ret    

c010bec2 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010bec2:	55                   	push   %ebp
c010bec3:	89 e5                	mov    %esp,%ebp
c010bec5:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010bec8:	a1 bc 44 1c c0       	mov    0xc01c44bc,%eax
c010becd:	8b 40 10             	mov    0x10(%eax),%eax
c010bed0:	8b 15 c0 44 1c c0    	mov    0xc01c44c0,%edx
c010bed6:	89 14 24             	mov    %edx,(%esp)
c010bed9:	ff d0                	call   *%eax
}
c010bedb:	c9                   	leave  
c010bedc:	c3                   	ret    

c010bedd <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010bedd:	55                   	push   %ebp
c010bede:	89 e5                	mov    %esp,%ebp
c010bee0:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010bee3:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c010bee8:	39 45 08             	cmp    %eax,0x8(%ebp)
c010beeb:	74 1c                	je     c010bf09 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010beed:	a1 bc 44 1c c0       	mov    0xc01c44bc,%eax
c010bef2:	8b 40 14             	mov    0x14(%eax),%eax
c010bef5:	8b 15 c0 44 1c c0    	mov    0xc01c44c0,%edx
c010befb:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010befe:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010bf02:	89 14 24             	mov    %edx,(%esp)
c010bf05:	ff d0                	call   *%eax
c010bf07:	eb 0a                	jmp    c010bf13 <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010bf09:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf0c:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010bf13:	c9                   	leave  
c010bf14:	c3                   	ret    

c010bf15 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010bf15:	55                   	push   %ebp
c010bf16:	89 e5                	mov    %esp,%ebp
c010bf18:	83 ec 28             	sub    $0x28,%esp
c010bf1b:	c7 45 f4 b4 44 1c c0 	movl   $0xc01c44b4,-0xc(%ebp)
c010bf22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf25:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bf28:	89 50 04             	mov    %edx,0x4(%eax)
c010bf2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf2e:	8b 50 04             	mov    0x4(%eax),%edx
c010bf31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf34:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010bf36:	c7 05 bc 44 1c c0 8c 	movl   $0xc0130a8c,0xc01c44bc
c010bf3d:	0a 13 c0 

    rq = &__rq;
c010bf40:	c7 05 c0 44 1c c0 c4 	movl   $0xc01c44c4,0xc01c44c0
c010bf47:	44 1c c0 
    rq->max_time_slice = 5;
c010bf4a:	a1 c0 44 1c c0       	mov    0xc01c44c0,%eax
c010bf4f:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010bf56:	a1 bc 44 1c c0       	mov    0xc01c44bc,%eax
c010bf5b:	8b 40 04             	mov    0x4(%eax),%eax
c010bf5e:	8b 15 c0 44 1c c0    	mov    0xc01c44c0,%edx
c010bf64:	89 14 24             	mov    %edx,(%esp)
c010bf67:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010bf69:	a1 bc 44 1c c0       	mov    0xc01c44bc,%eax
c010bf6e:	8b 00                	mov    (%eax),%eax
c010bf70:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf74:	c7 04 24 d4 fa 10 c0 	movl   $0xc010fad4,(%esp)
c010bf7b:	e8 d8 43 ff ff       	call   c0100358 <cprintf>
}
c010bf80:	c9                   	leave  
c010bf81:	c3                   	ret    

c010bf82 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010bf82:	55                   	push   %ebp
c010bf83:	89 e5                	mov    %esp,%ebp
c010bf85:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010bf88:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf8b:	8b 00                	mov    (%eax),%eax
c010bf8d:	83 f8 03             	cmp    $0x3,%eax
c010bf90:	75 24                	jne    c010bfb6 <wakeup_proc+0x34>
c010bf92:	c7 44 24 0c e5 fa 10 	movl   $0xc010fae5,0xc(%esp)
c010bf99:	c0 
c010bf9a:	c7 44 24 08 00 fb 10 	movl   $0xc010fb00,0x8(%esp)
c010bfa1:	c0 
c010bfa2:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010bfa9:	00 
c010bfaa:	c7 04 24 15 fb 10 c0 	movl   $0xc010fb15,(%esp)
c010bfb1:	e8 24 4e ff ff       	call   c0100dda <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010bfb6:	e8 7c fe ff ff       	call   c010be37 <__intr_save>
c010bfbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010bfbe:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfc1:	8b 00                	mov    (%eax),%eax
c010bfc3:	83 f8 02             	cmp    $0x2,%eax
c010bfc6:	74 2d                	je     c010bff5 <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010bfc8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfcb:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010bfd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfd4:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010bfdb:	00 00 00 
            if (proc != current) {
c010bfde:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010bfe3:	39 45 08             	cmp    %eax,0x8(%ebp)
c010bfe6:	74 29                	je     c010c011 <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010bfe8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfeb:	89 04 24             	mov    %eax,(%esp)
c010bfee:	e8 81 fe ff ff       	call   c010be74 <sched_class_enqueue>
c010bff3:	eb 1c                	jmp    c010c011 <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010bff5:	c7 44 24 08 2b fb 10 	movl   $0xc010fb2b,0x8(%esp)
c010bffc:	c0 
c010bffd:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010c004:	00 
c010c005:	c7 04 24 15 fb 10 c0 	movl   $0xc010fb15,(%esp)
c010c00c:	e8 35 4e ff ff       	call   c0100e46 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010c011:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c014:	89 04 24             	mov    %eax,(%esp)
c010c017:	e8 45 fe ff ff       	call   c010be61 <__intr_restore>
}
c010c01c:	c9                   	leave  
c010c01d:	c3                   	ret    

c010c01e <schedule>:

void
schedule(void) {
c010c01e:	55                   	push   %ebp
c010c01f:	89 e5                	mov    %esp,%ebp
c010c021:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010c024:	e8 0e fe ff ff       	call   c010be37 <__intr_save>
c010c029:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010c02c:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010c031:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010c038:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010c03d:	8b 00                	mov    (%eax),%eax
c010c03f:	83 f8 02             	cmp    $0x2,%eax
c010c042:	75 0d                	jne    c010c051 <schedule+0x33>
            sched_class_enqueue(current);
c010c044:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010c049:	89 04 24             	mov    %eax,(%esp)
c010c04c:	e8 23 fe ff ff       	call   c010be74 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010c051:	e8 6c fe ff ff       	call   c010bec2 <sched_class_pick_next>
c010c056:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c059:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c05d:	74 0b                	je     c010c06a <schedule+0x4c>
            sched_class_dequeue(next);
c010c05f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c062:	89 04 24             	mov    %eax,(%esp)
c010c065:	e8 36 fe ff ff       	call   c010bea0 <sched_class_dequeue>
        }
        if (next == NULL) {
c010c06a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c06e:	75 08                	jne    c010c078 <schedule+0x5a>
            next = idleproc;
c010c070:	a1 40 24 1c c0       	mov    0xc01c2440,%eax
c010c075:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010c078:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c07b:	8b 40 08             	mov    0x8(%eax),%eax
c010c07e:	8d 50 01             	lea    0x1(%eax),%edx
c010c081:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c084:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010c087:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010c08c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010c08f:	74 0b                	je     c010c09c <schedule+0x7e>
            proc_run(next);
c010c091:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c094:	89 04 24             	mov    %eax,(%esp)
c010c097:	e8 74 e3 ff ff       	call   c010a410 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010c09c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c09f:	89 04 24             	mov    %eax,(%esp)
c010c0a2:	e8 ba fd ff ff       	call   c010be61 <__intr_restore>
}
c010c0a7:	c9                   	leave  
c010c0a8:	c3                   	ret    

c010c0a9 <add_timer>:

// add timer to timer_list
void
add_timer(timer_t *timer) {
c010c0a9:	55                   	push   %ebp
c010c0aa:	89 e5                	mov    %esp,%ebp
c010c0ac:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c0af:	e8 83 fd ff ff       	call   c010be37 <__intr_save>
c010c0b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010c0b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0ba:	8b 00                	mov    (%eax),%eax
c010c0bc:	85 c0                	test   %eax,%eax
c010c0be:	74 0a                	je     c010c0ca <add_timer+0x21>
c010c0c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0c3:	8b 40 04             	mov    0x4(%eax),%eax
c010c0c6:	85 c0                	test   %eax,%eax
c010c0c8:	75 24                	jne    c010c0ee <add_timer+0x45>
c010c0ca:	c7 44 24 0c 48 fb 10 	movl   $0xc010fb48,0xc(%esp)
c010c0d1:	c0 
c010c0d2:	c7 44 24 08 00 fb 10 	movl   $0xc010fb00,0x8(%esp)
c010c0d9:	c0 
c010c0da:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010c0e1:	00 
c010c0e2:	c7 04 24 15 fb 10 c0 	movl   $0xc010fb15,(%esp)
c010c0e9:	e8 ec 4c ff ff       	call   c0100dda <__panic>
        assert(list_empty(&(timer->timer_link)));
c010c0ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0f1:	83 c0 08             	add    $0x8,%eax
c010c0f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c0f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c0fa:	8b 40 04             	mov    0x4(%eax),%eax
c010c0fd:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c100:	0f 94 c0             	sete   %al
c010c103:	0f b6 c0             	movzbl %al,%eax
c010c106:	85 c0                	test   %eax,%eax
c010c108:	75 24                	jne    c010c12e <add_timer+0x85>
c010c10a:	c7 44 24 0c 74 fb 10 	movl   $0xc010fb74,0xc(%esp)
c010c111:	c0 
c010c112:	c7 44 24 08 00 fb 10 	movl   $0xc010fb00,0x8(%esp)
c010c119:	c0 
c010c11a:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010c121:	00 
c010c122:	c7 04 24 15 fb 10 c0 	movl   $0xc010fb15,(%esp)
c010c129:	e8 ac 4c ff ff       	call   c0100dda <__panic>
c010c12e:	c7 45 e4 b4 44 1c c0 	movl   $0xc01c44b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c135:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c138:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010c13b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010c13e:	eb 4a                	jmp    c010c18a <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010c140:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c143:	83 e8 08             	sub    $0x8,%eax
c010c146:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010c149:	8b 45 08             	mov    0x8(%ebp),%eax
c010c14c:	8b 10                	mov    (%eax),%edx
c010c14e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c151:	8b 00                	mov    (%eax),%eax
c010c153:	39 c2                	cmp    %eax,%edx
c010c155:	73 13                	jae    c010c16a <add_timer+0xc1>
                next->expires -= timer->expires;
c010c157:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c15a:	8b 10                	mov    (%eax),%edx
c010c15c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c15f:	8b 00                	mov    (%eax),%eax
c010c161:	29 c2                	sub    %eax,%edx
c010c163:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c166:	89 10                	mov    %edx,(%eax)
                break;
c010c168:	eb 29                	jmp    c010c193 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010c16a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c16d:	8b 10                	mov    (%eax),%edx
c010c16f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c172:	8b 00                	mov    (%eax),%eax
c010c174:	29 c2                	sub    %eax,%edx
c010c176:	8b 45 08             	mov    0x8(%ebp),%eax
c010c179:	89 10                	mov    %edx,(%eax)
c010c17b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c17e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c181:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c184:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010c187:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010c18a:	81 7d f4 b4 44 1c c0 	cmpl   $0xc01c44b4,-0xc(%ebp)
c010c191:	75 ad                	jne    c010c140 <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010c193:	8b 45 08             	mov    0x8(%ebp),%eax
c010c196:	8d 50 08             	lea    0x8(%eax),%edx
c010c199:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c19c:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010c19f:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010c1a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c1a5:	8b 00                	mov    (%eax),%eax
c010c1a7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c1aa:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c1ad:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c1b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c1b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c1b6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c1b9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c1bc:	89 10                	mov    %edx,(%eax)
c010c1be:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c1c1:	8b 10                	mov    (%eax),%edx
c010c1c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c1c6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c1c9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c1cc:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010c1cf:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c1d2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c1d5:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c1d8:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010c1da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c1dd:	89 04 24             	mov    %eax,(%esp)
c010c1e0:	e8 7c fc ff ff       	call   c010be61 <__intr_restore>
}
c010c1e5:	c9                   	leave  
c010c1e6:	c3                   	ret    

c010c1e7 <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010c1e7:	55                   	push   %ebp
c010c1e8:	89 e5                	mov    %esp,%ebp
c010c1ea:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c1ed:	e8 45 fc ff ff       	call   c010be37 <__intr_save>
c010c1f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010c1f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1f8:	83 c0 08             	add    $0x8,%eax
c010c1fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c1fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c201:	8b 40 04             	mov    0x4(%eax),%eax
c010c204:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c207:	0f 94 c0             	sete   %al
c010c20a:	0f b6 c0             	movzbl %al,%eax
c010c20d:	85 c0                	test   %eax,%eax
c010c20f:	0f 85 89 00 00 00    	jne    c010c29e <del_timer+0xb7>
            if (timer->expires != 0) {
c010c215:	8b 45 08             	mov    0x8(%ebp),%eax
c010c218:	8b 00                	mov    (%eax),%eax
c010c21a:	85 c0                	test   %eax,%eax
c010c21c:	74 35                	je     c010c253 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010c21e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c221:	83 c0 08             	add    $0x8,%eax
c010c224:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c227:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c22a:	8b 40 04             	mov    0x4(%eax),%eax
c010c22d:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010c230:	81 7d f0 b4 44 1c c0 	cmpl   $0xc01c44b4,-0x10(%ebp)
c010c237:	74 1a                	je     c010c253 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010c239:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c23c:	83 e8 08             	sub    $0x8,%eax
c010c23f:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010c242:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c245:	8b 10                	mov    (%eax),%edx
c010c247:	8b 45 08             	mov    0x8(%ebp),%eax
c010c24a:	8b 00                	mov    (%eax),%eax
c010c24c:	01 c2                	add    %eax,%edx
c010c24e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c251:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010c253:	8b 45 08             	mov    0x8(%ebp),%eax
c010c256:	83 c0 08             	add    $0x8,%eax
c010c259:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c25c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c25f:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c262:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c265:	8b 40 04             	mov    0x4(%eax),%eax
c010c268:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c26b:	8b 12                	mov    (%edx),%edx
c010c26d:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010c270:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c273:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c276:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c279:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c27c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c27f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c282:	89 10                	mov    %edx,(%eax)
c010c284:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c287:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c28a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c28d:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c290:	89 50 04             	mov    %edx,0x4(%eax)
c010c293:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c296:	8b 50 04             	mov    0x4(%eax),%edx
c010c299:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c29c:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010c29e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2a1:	89 04 24             	mov    %eax,(%esp)
c010c2a4:	e8 b8 fb ff ff       	call   c010be61 <__intr_restore>
}
c010c2a9:	c9                   	leave  
c010c2aa:	c3                   	ret    

c010c2ab <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010c2ab:	55                   	push   %ebp
c010c2ac:	89 e5                	mov    %esp,%ebp
c010c2ae:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c2b1:	e8 81 fb ff ff       	call   c010be37 <__intr_save>
c010c2b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c2b9:	c7 45 e4 b4 44 1c c0 	movl   $0xc01c44b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c2c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c2c3:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010c2c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010c2c9:	81 7d f4 b4 44 1c c0 	cmpl   $0xc01c44b4,-0xc(%ebp)
c010c2d0:	0f 84 fb 00 00 00    	je     c010c3d1 <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010c2d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2d9:	83 e8 08             	sub    $0x8,%eax
c010c2dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010c2df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2e2:	8b 00                	mov    (%eax),%eax
c010c2e4:	85 c0                	test   %eax,%eax
c010c2e6:	75 24                	jne    c010c30c <run_timer_list+0x61>
c010c2e8:	c7 44 24 0c 95 fb 10 	movl   $0xc010fb95,0xc(%esp)
c010c2ef:	c0 
c010c2f0:	c7 44 24 08 00 fb 10 	movl   $0xc010fb00,0x8(%esp)
c010c2f7:	c0 
c010c2f8:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010c2ff:	00 
c010c300:	c7 04 24 15 fb 10 c0 	movl   $0xc010fb15,(%esp)
c010c307:	e8 ce 4a ff ff       	call   c0100dda <__panic>
            timer->expires --;
c010c30c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c30f:	8b 00                	mov    (%eax),%eax
c010c311:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c314:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c317:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010c319:	e9 a6 00 00 00       	jmp    c010c3c4 <run_timer_list+0x119>
c010c31e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c321:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c324:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c327:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010c32a:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010c32d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c330:	8b 40 04             	mov    0x4(%eax),%eax
c010c333:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010c336:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c339:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c33f:	85 c0                	test   %eax,%eax
c010c341:	74 31                	je     c010c374 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010c343:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c346:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c34c:	85 c0                	test   %eax,%eax
c010c34e:	78 4a                	js     c010c39a <run_timer_list+0xef>
c010c350:	c7 44 24 0c ac fb 10 	movl   $0xc010fbac,0xc(%esp)
c010c357:	c0 
c010c358:	c7 44 24 08 00 fb 10 	movl   $0xc010fb00,0x8(%esp)
c010c35f:	c0 
c010c360:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010c367:	00 
c010c368:	c7 04 24 15 fb 10 c0 	movl   $0xc010fb15,(%esp)
c010c36f:	e8 66 4a ff ff       	call   c0100dda <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010c374:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c377:	8b 40 04             	mov    0x4(%eax),%eax
c010c37a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c37e:	c7 44 24 08 d0 fb 10 	movl   $0xc010fbd0,0x8(%esp)
c010c385:	c0 
c010c386:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c010c38d:	00 
c010c38e:	c7 04 24 15 fb 10 c0 	movl   $0xc010fb15,(%esp)
c010c395:	e8 ac 4a ff ff       	call   c0100e46 <__warn>
                }
                wakeup_proc(proc);
c010c39a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c39d:	89 04 24             	mov    %eax,(%esp)
c010c3a0:	e8 dd fb ff ff       	call   c010bf82 <wakeup_proc>
                del_timer(timer);
c010c3a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c3a8:	89 04 24             	mov    %eax,(%esp)
c010c3ab:	e8 37 fe ff ff       	call   c010c1e7 <del_timer>
                if (le == &timer_list) {
c010c3b0:	81 7d f4 b4 44 1c c0 	cmpl   $0xc01c44b4,-0xc(%ebp)
c010c3b7:	75 02                	jne    c010c3bb <run_timer_list+0x110>
                    break;
c010c3b9:	eb 16                	jmp    c010c3d1 <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010c3bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3be:	83 e8 08             	sub    $0x8,%eax
c010c3c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010c3c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c3c7:	8b 00                	mov    (%eax),%eax
c010c3c9:	85 c0                	test   %eax,%eax
c010c3cb:	0f 84 4d ff ff ff    	je     c010c31e <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010c3d1:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010c3d6:	89 04 24             	mov    %eax,(%esp)
c010c3d9:	e8 ff fa ff ff       	call   c010bedd <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010c3de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c3e1:	89 04 24             	mov    %eax,(%esp)
c010c3e4:	e8 78 fa ff ff       	call   c010be61 <__intr_restore>
}
c010c3e9:	c9                   	leave  
c010c3ea:	c3                   	ret    

c010c3eb <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010c3eb:	55                   	push   %ebp
c010c3ec:	89 e5                	mov    %esp,%ebp
c010c3ee:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010c3f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3f4:	8b 00                	mov    (%eax),%eax
c010c3f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010c3f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3fc:	89 04 24             	mov    %eax,(%esp)
c010c3ff:	e8 7d e6 ff ff       	call   c010aa81 <do_exit>
}
c010c404:	c9                   	leave  
c010c405:	c3                   	ret    

c010c406 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010c406:	55                   	push   %ebp
c010c407:	89 e5                	mov    %esp,%ebp
c010c409:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010c40c:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010c411:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c414:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010c417:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c41a:	8b 40 44             	mov    0x44(%eax),%eax
c010c41d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010c420:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c423:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c427:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c42a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c42e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c435:	e8 20 e5 ff ff       	call   c010a95a <do_fork>
}
c010c43a:	c9                   	leave  
c010c43b:	c3                   	ret    

c010c43c <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010c43c:	55                   	push   %ebp
c010c43d:	89 e5                	mov    %esp,%ebp
c010c43f:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010c442:	8b 45 08             	mov    0x8(%ebp),%eax
c010c445:	8b 00                	mov    (%eax),%eax
c010c447:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010c44a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c44d:	83 c0 04             	add    $0x4,%eax
c010c450:	8b 00                	mov    (%eax),%eax
c010c452:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010c455:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c458:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c45c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c45f:	89 04 24             	mov    %eax,(%esp)
c010c462:	e8 c2 ef ff ff       	call   c010b429 <do_wait>
}
c010c467:	c9                   	leave  
c010c468:	c3                   	ret    

c010c469 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010c469:	55                   	push   %ebp
c010c46a:	89 e5                	mov    %esp,%ebp
c010c46c:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010c46f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c472:	8b 00                	mov    (%eax),%eax
c010c474:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010c477:	8b 45 08             	mov    0x8(%ebp),%eax
c010c47a:	8b 40 04             	mov    0x4(%eax),%eax
c010c47d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010c480:	8b 45 08             	mov    0x8(%ebp),%eax
c010c483:	83 c0 08             	add    $0x8,%eax
c010c486:	8b 00                	mov    (%eax),%eax
c010c488:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010c48b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c48e:	8b 40 0c             	mov    0xc(%eax),%eax
c010c491:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010c494:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c497:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c49b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c49e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c4a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4a5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c4a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4ac:	89 04 24             	mov    %eax,(%esp)
c010c4af:	e8 29 ee ff ff       	call   c010b2dd <do_execve>
}
c010c4b4:	c9                   	leave  
c010c4b5:	c3                   	ret    

c010c4b6 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010c4b6:	55                   	push   %ebp
c010c4b7:	89 e5                	mov    %esp,%ebp
c010c4b9:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010c4bc:	e8 52 ef ff ff       	call   c010b413 <do_yield>
}
c010c4c1:	c9                   	leave  
c010c4c2:	c3                   	ret    

c010c4c3 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010c4c3:	55                   	push   %ebp
c010c4c4:	89 e5                	mov    %esp,%ebp
c010c4c6:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010c4c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4cc:	8b 00                	mov    (%eax),%eax
c010c4ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010c4d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4d4:	89 04 24             	mov    %eax,(%esp)
c010c4d7:	e8 ed f0 ff ff       	call   c010b5c9 <do_kill>
}
c010c4dc:	c9                   	leave  
c010c4dd:	c3                   	ret    

c010c4de <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010c4de:	55                   	push   %ebp
c010c4df:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010c4e1:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010c4e6:	8b 40 04             	mov    0x4(%eax),%eax
}
c010c4e9:	5d                   	pop    %ebp
c010c4ea:	c3                   	ret    

c010c4eb <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010c4eb:	55                   	push   %ebp
c010c4ec:	89 e5                	mov    %esp,%ebp
c010c4ee:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010c4f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4f4:	8b 00                	mov    (%eax),%eax
c010c4f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010c4f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4fc:	89 04 24             	mov    %eax,(%esp)
c010c4ff:	e8 7a 3e ff ff       	call   c010037e <cputchar>
    return 0;
c010c504:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c509:	c9                   	leave  
c010c50a:	c3                   	ret    

c010c50b <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010c50b:	55                   	push   %ebp
c010c50c:	89 e5                	mov    %esp,%ebp
c010c50e:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010c511:	e8 f6 a3 ff ff       	call   c010690c <print_pgdir>
    return 0;
c010c516:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c51b:	c9                   	leave  
c010c51c:	c3                   	ret    

c010c51d <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010c51d:	55                   	push   %ebp
c010c51e:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010c520:	a1 d8 44 1c c0       	mov    0xc01c44d8,%eax
}
c010c525:	5d                   	pop    %ebp
c010c526:	c3                   	ret    

c010c527 <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010c527:	55                   	push   %ebp
c010c528:	89 e5                	mov    %esp,%ebp
c010c52a:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010c52d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c530:	8b 00                	mov    (%eax),%eax
c010c532:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010c535:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c538:	89 04 24             	mov    %eax,(%esp)
c010c53b:	e8 f5 f4 ff ff       	call   c010ba35 <lab6_set_priority>
    return 0;
c010c540:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c545:	c9                   	leave  
c010c546:	c3                   	ret    

c010c547 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010c547:	55                   	push   %ebp
c010c548:	89 e5                	mov    %esp,%ebp
c010c54a:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010c54d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c550:	8b 00                	mov    (%eax),%eax
c010c552:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010c555:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c558:	89 04 24             	mov    %eax,(%esp)
c010c55b:	e8 ff f4 ff ff       	call   c010ba5f <do_sleep>
}
c010c560:	c9                   	leave  
c010c561:	c3                   	ret    

c010c562 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010c562:	55                   	push   %ebp
c010c563:	89 e5                	mov    %esp,%ebp
c010c565:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010c568:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010c56d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c570:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010c573:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c576:	8b 40 1c             	mov    0x1c(%eax),%eax
c010c579:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010c57c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c580:	78 60                	js     c010c5e2 <syscall+0x80>
c010c582:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c585:	3d ff 00 00 00       	cmp    $0xff,%eax
c010c58a:	77 56                	ja     c010c5e2 <syscall+0x80>
        if (syscalls[num] != NULL) {
c010c58c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c58f:	8b 04 85 c0 0a 13 c0 	mov    -0x3fecf540(,%eax,4),%eax
c010c596:	85 c0                	test   %eax,%eax
c010c598:	74 48                	je     c010c5e2 <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010c59a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c59d:	8b 40 14             	mov    0x14(%eax),%eax
c010c5a0:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010c5a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5a6:	8b 40 18             	mov    0x18(%eax),%eax
c010c5a9:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010c5ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5af:	8b 40 10             	mov    0x10(%eax),%eax
c010c5b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010c5b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5b8:	8b 00                	mov    (%eax),%eax
c010c5ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010c5bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5c0:	8b 40 04             	mov    0x4(%eax),%eax
c010c5c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010c5c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5c9:	8b 04 85 c0 0a 13 c0 	mov    -0x3fecf540(,%eax,4),%eax
c010c5d0:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010c5d3:	89 14 24             	mov    %edx,(%esp)
c010c5d6:	ff d0                	call   *%eax
c010c5d8:	89 c2                	mov    %eax,%edx
c010c5da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5dd:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010c5e0:	eb 46                	jmp    c010c628 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010c5e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5e5:	89 04 24             	mov    %eax,(%esp)
c010c5e8:	e8 a5 5d ff ff       	call   c0102392 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010c5ed:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010c5f2:	8d 50 48             	lea    0x48(%eax),%edx
c010c5f5:	a1 48 24 1c c0       	mov    0xc01c2448,%eax
c010c5fa:	8b 40 04             	mov    0x4(%eax),%eax
c010c5fd:	89 54 24 14          	mov    %edx,0x14(%esp)
c010c601:	89 44 24 10          	mov    %eax,0x10(%esp)
c010c605:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c608:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c60c:	c7 44 24 08 f0 fb 10 	movl   $0xc010fbf0,0x8(%esp)
c010c613:	c0 
c010c614:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c010c61b:	00 
c010c61c:	c7 04 24 1c fc 10 c0 	movl   $0xc010fc1c,(%esp)
c010c623:	e8 b2 47 ff ff       	call   c0100dda <__panic>
            num, current->pid, current->name);
}
c010c628:	c9                   	leave  
c010c629:	c3                   	ret    

c010c62a <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010c62a:	55                   	push   %ebp
c010c62b:	89 e5                	mov    %esp,%ebp
c010c62d:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010c630:	8b 45 08             	mov    0x8(%ebp),%eax
c010c633:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010c639:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010c63c:	b8 20 00 00 00       	mov    $0x20,%eax
c010c641:	2b 45 0c             	sub    0xc(%ebp),%eax
c010c644:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c647:	89 c1                	mov    %eax,%ecx
c010c649:	d3 ea                	shr    %cl,%edx
c010c64b:	89 d0                	mov    %edx,%eax
}
c010c64d:	c9                   	leave  
c010c64e:	c3                   	ret    

c010c64f <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010c64f:	55                   	push   %ebp
c010c650:	89 e5                	mov    %esp,%ebp
c010c652:	83 ec 58             	sub    $0x58,%esp
c010c655:	8b 45 10             	mov    0x10(%ebp),%eax
c010c658:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c65b:	8b 45 14             	mov    0x14(%ebp),%eax
c010c65e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010c661:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c664:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c667:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c66a:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010c66d:	8b 45 18             	mov    0x18(%ebp),%eax
c010c670:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c673:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c676:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c679:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c67c:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c67f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c682:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c685:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c689:	74 1c                	je     c010c6a7 <printnum+0x58>
c010c68b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c68e:	ba 00 00 00 00       	mov    $0x0,%edx
c010c693:	f7 75 e4             	divl   -0x1c(%ebp)
c010c696:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010c699:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c69c:	ba 00 00 00 00       	mov    $0x0,%edx
c010c6a1:	f7 75 e4             	divl   -0x1c(%ebp)
c010c6a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c6a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c6aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c6ad:	f7 75 e4             	divl   -0x1c(%ebp)
c010c6b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c6b3:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010c6b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c6b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c6bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c6bf:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c6c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c6c5:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010c6c8:	8b 45 18             	mov    0x18(%ebp),%eax
c010c6cb:	ba 00 00 00 00       	mov    $0x0,%edx
c010c6d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010c6d3:	77 56                	ja     c010c72b <printnum+0xdc>
c010c6d5:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010c6d8:	72 05                	jb     c010c6df <printnum+0x90>
c010c6da:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010c6dd:	77 4c                	ja     c010c72b <printnum+0xdc>
        printnum(putch, putdat, result, base, width - 1, padc);
c010c6df:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010c6e2:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c6e5:	8b 45 20             	mov    0x20(%ebp),%eax
c010c6e8:	89 44 24 18          	mov    %eax,0x18(%esp)
c010c6ec:	89 54 24 14          	mov    %edx,0x14(%esp)
c010c6f0:	8b 45 18             	mov    0x18(%ebp),%eax
c010c6f3:	89 44 24 10          	mov    %eax,0x10(%esp)
c010c6f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c6fa:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c6fd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c701:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010c705:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c708:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c70c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c70f:	89 04 24             	mov    %eax,(%esp)
c010c712:	e8 38 ff ff ff       	call   c010c64f <printnum>
c010c717:	eb 1c                	jmp    c010c735 <printnum+0xe6>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010c719:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c71c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c720:	8b 45 20             	mov    0x20(%ebp),%eax
c010c723:	89 04 24             	mov    %eax,(%esp)
c010c726:	8b 45 08             	mov    0x8(%ebp),%eax
c010c729:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010c72b:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010c72f:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010c733:	7f e4                	jg     c010c719 <printnum+0xca>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010c735:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c738:	05 44 fd 10 c0       	add    $0xc010fd44,%eax
c010c73d:	0f b6 00             	movzbl (%eax),%eax
c010c740:	0f be c0             	movsbl %al,%eax
c010c743:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c746:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c74a:	89 04 24             	mov    %eax,(%esp)
c010c74d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c750:	ff d0                	call   *%eax
}
c010c752:	c9                   	leave  
c010c753:	c3                   	ret    

c010c754 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010c754:	55                   	push   %ebp
c010c755:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010c757:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010c75b:	7e 14                	jle    c010c771 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010c75d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c760:	8b 00                	mov    (%eax),%eax
c010c762:	8d 48 08             	lea    0x8(%eax),%ecx
c010c765:	8b 55 08             	mov    0x8(%ebp),%edx
c010c768:	89 0a                	mov    %ecx,(%edx)
c010c76a:	8b 50 04             	mov    0x4(%eax),%edx
c010c76d:	8b 00                	mov    (%eax),%eax
c010c76f:	eb 30                	jmp    c010c7a1 <getuint+0x4d>
    }
    else if (lflag) {
c010c771:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c775:	74 16                	je     c010c78d <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010c777:	8b 45 08             	mov    0x8(%ebp),%eax
c010c77a:	8b 00                	mov    (%eax),%eax
c010c77c:	8d 48 04             	lea    0x4(%eax),%ecx
c010c77f:	8b 55 08             	mov    0x8(%ebp),%edx
c010c782:	89 0a                	mov    %ecx,(%edx)
c010c784:	8b 00                	mov    (%eax),%eax
c010c786:	ba 00 00 00 00       	mov    $0x0,%edx
c010c78b:	eb 14                	jmp    c010c7a1 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010c78d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c790:	8b 00                	mov    (%eax),%eax
c010c792:	8d 48 04             	lea    0x4(%eax),%ecx
c010c795:	8b 55 08             	mov    0x8(%ebp),%edx
c010c798:	89 0a                	mov    %ecx,(%edx)
c010c79a:	8b 00                	mov    (%eax),%eax
c010c79c:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010c7a1:	5d                   	pop    %ebp
c010c7a2:	c3                   	ret    

c010c7a3 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010c7a3:	55                   	push   %ebp
c010c7a4:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010c7a6:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010c7aa:	7e 14                	jle    c010c7c0 <getint+0x1d>
        return va_arg(*ap, long long);
c010c7ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7af:	8b 00                	mov    (%eax),%eax
c010c7b1:	8d 48 08             	lea    0x8(%eax),%ecx
c010c7b4:	8b 55 08             	mov    0x8(%ebp),%edx
c010c7b7:	89 0a                	mov    %ecx,(%edx)
c010c7b9:	8b 50 04             	mov    0x4(%eax),%edx
c010c7bc:	8b 00                	mov    (%eax),%eax
c010c7be:	eb 28                	jmp    c010c7e8 <getint+0x45>
    }
    else if (lflag) {
c010c7c0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c7c4:	74 12                	je     c010c7d8 <getint+0x35>
        return va_arg(*ap, long);
c010c7c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7c9:	8b 00                	mov    (%eax),%eax
c010c7cb:	8d 48 04             	lea    0x4(%eax),%ecx
c010c7ce:	8b 55 08             	mov    0x8(%ebp),%edx
c010c7d1:	89 0a                	mov    %ecx,(%edx)
c010c7d3:	8b 00                	mov    (%eax),%eax
c010c7d5:	99                   	cltd   
c010c7d6:	eb 10                	jmp    c010c7e8 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010c7d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7db:	8b 00                	mov    (%eax),%eax
c010c7dd:	8d 48 04             	lea    0x4(%eax),%ecx
c010c7e0:	8b 55 08             	mov    0x8(%ebp),%edx
c010c7e3:	89 0a                	mov    %ecx,(%edx)
c010c7e5:	8b 00                	mov    (%eax),%eax
c010c7e7:	99                   	cltd   
    }
}
c010c7e8:	5d                   	pop    %ebp
c010c7e9:	c3                   	ret    

c010c7ea <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010c7ea:	55                   	push   %ebp
c010c7eb:	89 e5                	mov    %esp,%ebp
c010c7ed:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010c7f0:	8d 45 14             	lea    0x14(%ebp),%eax
c010c7f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010c7f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7f9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c7fd:	8b 45 10             	mov    0x10(%ebp),%eax
c010c800:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c804:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c807:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c80b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c80e:	89 04 24             	mov    %eax,(%esp)
c010c811:	e8 02 00 00 00       	call   c010c818 <vprintfmt>
    va_end(ap);
}
c010c816:	c9                   	leave  
c010c817:	c3                   	ret    

c010c818 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010c818:	55                   	push   %ebp
c010c819:	89 e5                	mov    %esp,%ebp
c010c81b:	56                   	push   %esi
c010c81c:	53                   	push   %ebx
c010c81d:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010c820:	eb 18                	jmp    c010c83a <vprintfmt+0x22>
            if (ch == '\0') {
c010c822:	85 db                	test   %ebx,%ebx
c010c824:	75 05                	jne    c010c82b <vprintfmt+0x13>
                return;
c010c826:	e9 d1 03 00 00       	jmp    c010cbfc <vprintfmt+0x3e4>
            }
            putch(ch, putdat);
c010c82b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c82e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c832:	89 1c 24             	mov    %ebx,(%esp)
c010c835:	8b 45 08             	mov    0x8(%ebp),%eax
c010c838:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010c83a:	8b 45 10             	mov    0x10(%ebp),%eax
c010c83d:	8d 50 01             	lea    0x1(%eax),%edx
c010c840:	89 55 10             	mov    %edx,0x10(%ebp)
c010c843:	0f b6 00             	movzbl (%eax),%eax
c010c846:	0f b6 d8             	movzbl %al,%ebx
c010c849:	83 fb 25             	cmp    $0x25,%ebx
c010c84c:	75 d4                	jne    c010c822 <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010c84e:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010c852:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010c859:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c85c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010c85f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010c866:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c869:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010c86c:	8b 45 10             	mov    0x10(%ebp),%eax
c010c86f:	8d 50 01             	lea    0x1(%eax),%edx
c010c872:	89 55 10             	mov    %edx,0x10(%ebp)
c010c875:	0f b6 00             	movzbl (%eax),%eax
c010c878:	0f b6 d8             	movzbl %al,%ebx
c010c87b:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010c87e:	83 f8 55             	cmp    $0x55,%eax
c010c881:	0f 87 44 03 00 00    	ja     c010cbcb <vprintfmt+0x3b3>
c010c887:	8b 04 85 68 fd 10 c0 	mov    -0x3fef0298(,%eax,4),%eax
c010c88e:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010c890:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010c894:	eb d6                	jmp    c010c86c <vprintfmt+0x54>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010c896:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010c89a:	eb d0                	jmp    c010c86c <vprintfmt+0x54>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010c89c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010c8a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c8a6:	89 d0                	mov    %edx,%eax
c010c8a8:	c1 e0 02             	shl    $0x2,%eax
c010c8ab:	01 d0                	add    %edx,%eax
c010c8ad:	01 c0                	add    %eax,%eax
c010c8af:	01 d8                	add    %ebx,%eax
c010c8b1:	83 e8 30             	sub    $0x30,%eax
c010c8b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010c8b7:	8b 45 10             	mov    0x10(%ebp),%eax
c010c8ba:	0f b6 00             	movzbl (%eax),%eax
c010c8bd:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010c8c0:	83 fb 2f             	cmp    $0x2f,%ebx
c010c8c3:	7e 0b                	jle    c010c8d0 <vprintfmt+0xb8>
c010c8c5:	83 fb 39             	cmp    $0x39,%ebx
c010c8c8:	7f 06                	jg     c010c8d0 <vprintfmt+0xb8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010c8ca:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010c8ce:	eb d3                	jmp    c010c8a3 <vprintfmt+0x8b>
            goto process_precision;
c010c8d0:	eb 33                	jmp    c010c905 <vprintfmt+0xed>

        case '*':
            precision = va_arg(ap, int);
c010c8d2:	8b 45 14             	mov    0x14(%ebp),%eax
c010c8d5:	8d 50 04             	lea    0x4(%eax),%edx
c010c8d8:	89 55 14             	mov    %edx,0x14(%ebp)
c010c8db:	8b 00                	mov    (%eax),%eax
c010c8dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010c8e0:	eb 23                	jmp    c010c905 <vprintfmt+0xed>

        case '.':
            if (width < 0)
c010c8e2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c8e6:	79 0c                	jns    c010c8f4 <vprintfmt+0xdc>
                width = 0;
c010c8e8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010c8ef:	e9 78 ff ff ff       	jmp    c010c86c <vprintfmt+0x54>
c010c8f4:	e9 73 ff ff ff       	jmp    c010c86c <vprintfmt+0x54>

        case '#':
            altflag = 1;
c010c8f9:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010c900:	e9 67 ff ff ff       	jmp    c010c86c <vprintfmt+0x54>

        process_precision:
            if (width < 0)
c010c905:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c909:	79 12                	jns    c010c91d <vprintfmt+0x105>
                width = precision, precision = -1;
c010c90b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c90e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c911:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010c918:	e9 4f ff ff ff       	jmp    c010c86c <vprintfmt+0x54>
c010c91d:	e9 4a ff ff ff       	jmp    c010c86c <vprintfmt+0x54>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010c922:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010c926:	e9 41 ff ff ff       	jmp    c010c86c <vprintfmt+0x54>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010c92b:	8b 45 14             	mov    0x14(%ebp),%eax
c010c92e:	8d 50 04             	lea    0x4(%eax),%edx
c010c931:	89 55 14             	mov    %edx,0x14(%ebp)
c010c934:	8b 00                	mov    (%eax),%eax
c010c936:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c939:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c93d:	89 04 24             	mov    %eax,(%esp)
c010c940:	8b 45 08             	mov    0x8(%ebp),%eax
c010c943:	ff d0                	call   *%eax
            break;
c010c945:	e9 ac 02 00 00       	jmp    c010cbf6 <vprintfmt+0x3de>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010c94a:	8b 45 14             	mov    0x14(%ebp),%eax
c010c94d:	8d 50 04             	lea    0x4(%eax),%edx
c010c950:	89 55 14             	mov    %edx,0x14(%ebp)
c010c953:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010c955:	85 db                	test   %ebx,%ebx
c010c957:	79 02                	jns    c010c95b <vprintfmt+0x143>
                err = -err;
c010c959:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010c95b:	83 fb 18             	cmp    $0x18,%ebx
c010c95e:	7f 0b                	jg     c010c96b <vprintfmt+0x153>
c010c960:	8b 34 9d e0 fc 10 c0 	mov    -0x3fef0320(,%ebx,4),%esi
c010c967:	85 f6                	test   %esi,%esi
c010c969:	75 23                	jne    c010c98e <vprintfmt+0x176>
                printfmt(putch, putdat, "error %d", err);
c010c96b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010c96f:	c7 44 24 08 55 fd 10 	movl   $0xc010fd55,0x8(%esp)
c010c976:	c0 
c010c977:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c97a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c97e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c981:	89 04 24             	mov    %eax,(%esp)
c010c984:	e8 61 fe ff ff       	call   c010c7ea <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010c989:	e9 68 02 00 00       	jmp    c010cbf6 <vprintfmt+0x3de>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010c98e:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c992:	c7 44 24 08 5e fd 10 	movl   $0xc010fd5e,0x8(%esp)
c010c999:	c0 
c010c99a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c99d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9a4:	89 04 24             	mov    %eax,(%esp)
c010c9a7:	e8 3e fe ff ff       	call   c010c7ea <printfmt>
            }
            break;
c010c9ac:	e9 45 02 00 00       	jmp    c010cbf6 <vprintfmt+0x3de>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010c9b1:	8b 45 14             	mov    0x14(%ebp),%eax
c010c9b4:	8d 50 04             	lea    0x4(%eax),%edx
c010c9b7:	89 55 14             	mov    %edx,0x14(%ebp)
c010c9ba:	8b 30                	mov    (%eax),%esi
c010c9bc:	85 f6                	test   %esi,%esi
c010c9be:	75 05                	jne    c010c9c5 <vprintfmt+0x1ad>
                p = "(null)";
c010c9c0:	be 61 fd 10 c0       	mov    $0xc010fd61,%esi
            }
            if (width > 0 && padc != '-') {
c010c9c5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c9c9:	7e 3e                	jle    c010ca09 <vprintfmt+0x1f1>
c010c9cb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010c9cf:	74 38                	je     c010ca09 <vprintfmt+0x1f1>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010c9d1:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010c9d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c9d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9db:	89 34 24             	mov    %esi,(%esp)
c010c9de:	e8 ed 03 00 00       	call   c010cdd0 <strnlen>
c010c9e3:	29 c3                	sub    %eax,%ebx
c010c9e5:	89 d8                	mov    %ebx,%eax
c010c9e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c9ea:	eb 17                	jmp    c010ca03 <vprintfmt+0x1eb>
                    putch(padc, putdat);
c010c9ec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010c9f0:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c9f3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c9f7:	89 04 24             	mov    %eax,(%esp)
c010c9fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9fd:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010c9ff:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010ca03:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ca07:	7f e3                	jg     c010c9ec <vprintfmt+0x1d4>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010ca09:	eb 38                	jmp    c010ca43 <vprintfmt+0x22b>
                if (altflag && (ch < ' ' || ch > '~')) {
c010ca0b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010ca0f:	74 1f                	je     c010ca30 <vprintfmt+0x218>
c010ca11:	83 fb 1f             	cmp    $0x1f,%ebx
c010ca14:	7e 05                	jle    c010ca1b <vprintfmt+0x203>
c010ca16:	83 fb 7e             	cmp    $0x7e,%ebx
c010ca19:	7e 15                	jle    c010ca30 <vprintfmt+0x218>
                    putch('?', putdat);
c010ca1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca22:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010ca29:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca2c:	ff d0                	call   *%eax
c010ca2e:	eb 0f                	jmp    c010ca3f <vprintfmt+0x227>
                }
                else {
                    putch(ch, putdat);
c010ca30:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca33:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca37:	89 1c 24             	mov    %ebx,(%esp)
c010ca3a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca3d:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010ca3f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010ca43:	89 f0                	mov    %esi,%eax
c010ca45:	8d 70 01             	lea    0x1(%eax),%esi
c010ca48:	0f b6 00             	movzbl (%eax),%eax
c010ca4b:	0f be d8             	movsbl %al,%ebx
c010ca4e:	85 db                	test   %ebx,%ebx
c010ca50:	74 10                	je     c010ca62 <vprintfmt+0x24a>
c010ca52:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010ca56:	78 b3                	js     c010ca0b <vprintfmt+0x1f3>
c010ca58:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010ca5c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010ca60:	79 a9                	jns    c010ca0b <vprintfmt+0x1f3>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010ca62:	eb 17                	jmp    c010ca7b <vprintfmt+0x263>
                putch(' ', putdat);
c010ca64:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca67:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca6b:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010ca72:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca75:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010ca77:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010ca7b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ca7f:	7f e3                	jg     c010ca64 <vprintfmt+0x24c>
                putch(' ', putdat);
            }
            break;
c010ca81:	e9 70 01 00 00       	jmp    c010cbf6 <vprintfmt+0x3de>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010ca86:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ca89:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca8d:	8d 45 14             	lea    0x14(%ebp),%eax
c010ca90:	89 04 24             	mov    %eax,(%esp)
c010ca93:	e8 0b fd ff ff       	call   c010c7a3 <getint>
c010ca98:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ca9b:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010ca9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010caa1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010caa4:	85 d2                	test   %edx,%edx
c010caa6:	79 26                	jns    c010cace <vprintfmt+0x2b6>
                putch('-', putdat);
c010caa8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010caab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010caaf:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010cab6:	8b 45 08             	mov    0x8(%ebp),%eax
c010cab9:	ff d0                	call   *%eax
                num = -(long long)num;
c010cabb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cabe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cac1:	f7 d8                	neg    %eax
c010cac3:	83 d2 00             	adc    $0x0,%edx
c010cac6:	f7 da                	neg    %edx
c010cac8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cacb:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010cace:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010cad5:	e9 a8 00 00 00       	jmp    c010cb82 <vprintfmt+0x36a>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010cada:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cadd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cae1:	8d 45 14             	lea    0x14(%ebp),%eax
c010cae4:	89 04 24             	mov    %eax,(%esp)
c010cae7:	e8 68 fc ff ff       	call   c010c754 <getuint>
c010caec:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010caef:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010caf2:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010caf9:	e9 84 00 00 00       	jmp    c010cb82 <vprintfmt+0x36a>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010cafe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cb01:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb05:	8d 45 14             	lea    0x14(%ebp),%eax
c010cb08:	89 04 24             	mov    %eax,(%esp)
c010cb0b:	e8 44 fc ff ff       	call   c010c754 <getuint>
c010cb10:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cb13:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010cb16:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010cb1d:	eb 63                	jmp    c010cb82 <vprintfmt+0x36a>

        // pointer
        case 'p':
            putch('0', putdat);
c010cb1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb22:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb26:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010cb2d:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb30:	ff d0                	call   *%eax
            putch('x', putdat);
c010cb32:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb35:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb39:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010cb40:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb43:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010cb45:	8b 45 14             	mov    0x14(%ebp),%eax
c010cb48:	8d 50 04             	lea    0x4(%eax),%edx
c010cb4b:	89 55 14             	mov    %edx,0x14(%ebp)
c010cb4e:	8b 00                	mov    (%eax),%eax
c010cb50:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cb53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010cb5a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010cb61:	eb 1f                	jmp    c010cb82 <vprintfmt+0x36a>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010cb63:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cb66:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb6a:	8d 45 14             	lea    0x14(%ebp),%eax
c010cb6d:	89 04 24             	mov    %eax,(%esp)
c010cb70:	e8 df fb ff ff       	call   c010c754 <getuint>
c010cb75:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cb78:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010cb7b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010cb82:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010cb86:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb89:	89 54 24 18          	mov    %edx,0x18(%esp)
c010cb8d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010cb90:	89 54 24 14          	mov    %edx,0x14(%esp)
c010cb94:	89 44 24 10          	mov    %eax,0x10(%esp)
c010cb98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cb9e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cba2:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010cba6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cba9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cbad:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbb0:	89 04 24             	mov    %eax,(%esp)
c010cbb3:	e8 97 fa ff ff       	call   c010c64f <printnum>
            break;
c010cbb8:	eb 3c                	jmp    c010cbf6 <vprintfmt+0x3de>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010cbba:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbbd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cbc1:	89 1c 24             	mov    %ebx,(%esp)
c010cbc4:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbc7:	ff d0                	call   *%eax
            break;
c010cbc9:	eb 2b                	jmp    c010cbf6 <vprintfmt+0x3de>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010cbcb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbce:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cbd2:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010cbd9:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbdc:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010cbde:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010cbe2:	eb 04                	jmp    c010cbe8 <vprintfmt+0x3d0>
c010cbe4:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010cbe8:	8b 45 10             	mov    0x10(%ebp),%eax
c010cbeb:	83 e8 01             	sub    $0x1,%eax
c010cbee:	0f b6 00             	movzbl (%eax),%eax
c010cbf1:	3c 25                	cmp    $0x25,%al
c010cbf3:	75 ef                	jne    c010cbe4 <vprintfmt+0x3cc>
                /* do nothing */;
            break;
c010cbf5:	90                   	nop
        }
    }
c010cbf6:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010cbf7:	e9 3e fc ff ff       	jmp    c010c83a <vprintfmt+0x22>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010cbfc:	83 c4 40             	add    $0x40,%esp
c010cbff:	5b                   	pop    %ebx
c010cc00:	5e                   	pop    %esi
c010cc01:	5d                   	pop    %ebp
c010cc02:	c3                   	ret    

c010cc03 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010cc03:	55                   	push   %ebp
c010cc04:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010cc06:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc09:	8b 40 08             	mov    0x8(%eax),%eax
c010cc0c:	8d 50 01             	lea    0x1(%eax),%edx
c010cc0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc12:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010cc15:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc18:	8b 10                	mov    (%eax),%edx
c010cc1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc1d:	8b 40 04             	mov    0x4(%eax),%eax
c010cc20:	39 c2                	cmp    %eax,%edx
c010cc22:	73 12                	jae    c010cc36 <sprintputch+0x33>
        *b->buf ++ = ch;
c010cc24:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc27:	8b 00                	mov    (%eax),%eax
c010cc29:	8d 48 01             	lea    0x1(%eax),%ecx
c010cc2c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cc2f:	89 0a                	mov    %ecx,(%edx)
c010cc31:	8b 55 08             	mov    0x8(%ebp),%edx
c010cc34:	88 10                	mov    %dl,(%eax)
    }
}
c010cc36:	5d                   	pop    %ebp
c010cc37:	c3                   	ret    

c010cc38 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010cc38:	55                   	push   %ebp
c010cc39:	89 e5                	mov    %esp,%ebp
c010cc3b:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010cc3e:	8d 45 14             	lea    0x14(%ebp),%eax
c010cc41:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010cc44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc47:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cc4b:	8b 45 10             	mov    0x10(%ebp),%eax
c010cc4e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cc52:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc55:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc59:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc5c:	89 04 24             	mov    %eax,(%esp)
c010cc5f:	e8 08 00 00 00       	call   c010cc6c <vsnprintf>
c010cc64:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010cc67:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010cc6a:	c9                   	leave  
c010cc6b:	c3                   	ret    

c010cc6c <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010cc6c:	55                   	push   %ebp
c010cc6d:	89 e5                	mov    %esp,%ebp
c010cc6f:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010cc72:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc75:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cc78:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc7b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cc7e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc81:	01 d0                	add    %edx,%eax
c010cc83:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cc86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010cc8d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010cc91:	74 0a                	je     c010cc9d <vsnprintf+0x31>
c010cc93:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cc96:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc99:	39 c2                	cmp    %eax,%edx
c010cc9b:	76 07                	jbe    c010cca4 <vsnprintf+0x38>
        return -E_INVAL;
c010cc9d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010cca2:	eb 2a                	jmp    c010ccce <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010cca4:	8b 45 14             	mov    0x14(%ebp),%eax
c010cca7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ccab:	8b 45 10             	mov    0x10(%ebp),%eax
c010ccae:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ccb2:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ccb5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ccb9:	c7 04 24 03 cc 10 c0 	movl   $0xc010cc03,(%esp)
c010ccc0:	e8 53 fb ff ff       	call   c010c818 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010ccc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ccc8:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010cccb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ccce:	c9                   	leave  
c010cccf:	c3                   	ret    

c010ccd0 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010ccd0:	55                   	push   %ebp
c010ccd1:	89 e5                	mov    %esp,%ebp
c010ccd3:	57                   	push   %edi
c010ccd4:	56                   	push   %esi
c010ccd5:	53                   	push   %ebx
c010ccd6:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010ccd9:	a1 c0 0e 13 c0       	mov    0xc0130ec0,%eax
c010ccde:	8b 15 c4 0e 13 c0    	mov    0xc0130ec4,%edx
c010cce4:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010ccea:	6b f0 05             	imul   $0x5,%eax,%esi
c010cced:	01 f7                	add    %esi,%edi
c010ccef:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c010ccf4:	f7 e6                	mul    %esi
c010ccf6:	8d 34 17             	lea    (%edi,%edx,1),%esi
c010ccf9:	89 f2                	mov    %esi,%edx
c010ccfb:	83 c0 0b             	add    $0xb,%eax
c010ccfe:	83 d2 00             	adc    $0x0,%edx
c010cd01:	89 c7                	mov    %eax,%edi
c010cd03:	83 e7 ff             	and    $0xffffffff,%edi
c010cd06:	89 f9                	mov    %edi,%ecx
c010cd08:	0f b7 da             	movzwl %dx,%ebx
c010cd0b:	89 0d c0 0e 13 c0    	mov    %ecx,0xc0130ec0
c010cd11:	89 1d c4 0e 13 c0    	mov    %ebx,0xc0130ec4
    unsigned long long result = (next >> 12);
c010cd17:	a1 c0 0e 13 c0       	mov    0xc0130ec0,%eax
c010cd1c:	8b 15 c4 0e 13 c0    	mov    0xc0130ec4,%edx
c010cd22:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010cd26:	c1 ea 0c             	shr    $0xc,%edx
c010cd29:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cd2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010cd2f:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010cd36:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cd39:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cd3c:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cd3f:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010cd42:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cd45:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cd48:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cd4c:	74 1c                	je     c010cd6a <rand+0x9a>
c010cd4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cd51:	ba 00 00 00 00       	mov    $0x0,%edx
c010cd56:	f7 75 dc             	divl   -0x24(%ebp)
c010cd59:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010cd5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cd5f:	ba 00 00 00 00       	mov    $0x0,%edx
c010cd64:	f7 75 dc             	divl   -0x24(%ebp)
c010cd67:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cd6a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cd6d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cd70:	f7 75 dc             	divl   -0x24(%ebp)
c010cd73:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cd76:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010cd79:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cd7c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010cd7f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cd82:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010cd85:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010cd88:	83 c4 24             	add    $0x24,%esp
c010cd8b:	5b                   	pop    %ebx
c010cd8c:	5e                   	pop    %esi
c010cd8d:	5f                   	pop    %edi
c010cd8e:	5d                   	pop    %ebp
c010cd8f:	c3                   	ret    

c010cd90 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010cd90:	55                   	push   %ebp
c010cd91:	89 e5                	mov    %esp,%ebp
    next = seed;
c010cd93:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd96:	ba 00 00 00 00       	mov    $0x0,%edx
c010cd9b:	a3 c0 0e 13 c0       	mov    %eax,0xc0130ec0
c010cda0:	89 15 c4 0e 13 c0    	mov    %edx,0xc0130ec4
}
c010cda6:	5d                   	pop    %ebp
c010cda7:	c3                   	ret    

c010cda8 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010cda8:	55                   	push   %ebp
c010cda9:	89 e5                	mov    %esp,%ebp
c010cdab:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010cdae:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010cdb5:	eb 04                	jmp    c010cdbb <strlen+0x13>
        cnt ++;
c010cdb7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010cdbb:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdbe:	8d 50 01             	lea    0x1(%eax),%edx
c010cdc1:	89 55 08             	mov    %edx,0x8(%ebp)
c010cdc4:	0f b6 00             	movzbl (%eax),%eax
c010cdc7:	84 c0                	test   %al,%al
c010cdc9:	75 ec                	jne    c010cdb7 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010cdcb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010cdce:	c9                   	leave  
c010cdcf:	c3                   	ret    

c010cdd0 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010cdd0:	55                   	push   %ebp
c010cdd1:	89 e5                	mov    %esp,%ebp
c010cdd3:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010cdd6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010cddd:	eb 04                	jmp    c010cde3 <strnlen+0x13>
        cnt ++;
c010cddf:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010cde3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010cde6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010cde9:	73 10                	jae    c010cdfb <strnlen+0x2b>
c010cdeb:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdee:	8d 50 01             	lea    0x1(%eax),%edx
c010cdf1:	89 55 08             	mov    %edx,0x8(%ebp)
c010cdf4:	0f b6 00             	movzbl (%eax),%eax
c010cdf7:	84 c0                	test   %al,%al
c010cdf9:	75 e4                	jne    c010cddf <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010cdfb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010cdfe:	c9                   	leave  
c010cdff:	c3                   	ret    

c010ce00 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010ce00:	55                   	push   %ebp
c010ce01:	89 e5                	mov    %esp,%ebp
c010ce03:	57                   	push   %edi
c010ce04:	56                   	push   %esi
c010ce05:	83 ec 20             	sub    $0x20,%esp
c010ce08:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce0e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce11:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010ce14:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ce17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce1a:	89 d1                	mov    %edx,%ecx
c010ce1c:	89 c2                	mov    %eax,%edx
c010ce1e:	89 ce                	mov    %ecx,%esi
c010ce20:	89 d7                	mov    %edx,%edi
c010ce22:	ac                   	lods   %ds:(%esi),%al
c010ce23:	aa                   	stos   %al,%es:(%edi)
c010ce24:	84 c0                	test   %al,%al
c010ce26:	75 fa                	jne    c010ce22 <strcpy+0x22>
c010ce28:	89 fa                	mov    %edi,%edx
c010ce2a:	89 f1                	mov    %esi,%ecx
c010ce2c:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010ce2f:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010ce32:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010ce35:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010ce38:	83 c4 20             	add    $0x20,%esp
c010ce3b:	5e                   	pop    %esi
c010ce3c:	5f                   	pop    %edi
c010ce3d:	5d                   	pop    %ebp
c010ce3e:	c3                   	ret    

c010ce3f <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010ce3f:	55                   	push   %ebp
c010ce40:	89 e5                	mov    %esp,%ebp
c010ce42:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010ce45:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce48:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010ce4b:	eb 21                	jmp    c010ce6e <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010ce4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce50:	0f b6 10             	movzbl (%eax),%edx
c010ce53:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ce56:	88 10                	mov    %dl,(%eax)
c010ce58:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ce5b:	0f b6 00             	movzbl (%eax),%eax
c010ce5e:	84 c0                	test   %al,%al
c010ce60:	74 04                	je     c010ce66 <strncpy+0x27>
            src ++;
c010ce62:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010ce66:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010ce6a:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010ce6e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010ce72:	75 d9                	jne    c010ce4d <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010ce74:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010ce77:	c9                   	leave  
c010ce78:	c3                   	ret    

c010ce79 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010ce79:	55                   	push   %ebp
c010ce7a:	89 e5                	mov    %esp,%ebp
c010ce7c:	57                   	push   %edi
c010ce7d:	56                   	push   %esi
c010ce7e:	83 ec 20             	sub    $0x20,%esp
c010ce81:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce84:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce87:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010ce8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ce90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce93:	89 d1                	mov    %edx,%ecx
c010ce95:	89 c2                	mov    %eax,%edx
c010ce97:	89 ce                	mov    %ecx,%esi
c010ce99:	89 d7                	mov    %edx,%edi
c010ce9b:	ac                   	lods   %ds:(%esi),%al
c010ce9c:	ae                   	scas   %es:(%edi),%al
c010ce9d:	75 08                	jne    c010cea7 <strcmp+0x2e>
c010ce9f:	84 c0                	test   %al,%al
c010cea1:	75 f8                	jne    c010ce9b <strcmp+0x22>
c010cea3:	31 c0                	xor    %eax,%eax
c010cea5:	eb 04                	jmp    c010ceab <strcmp+0x32>
c010cea7:	19 c0                	sbb    %eax,%eax
c010cea9:	0c 01                	or     $0x1,%al
c010ceab:	89 fa                	mov    %edi,%edx
c010cead:	89 f1                	mov    %esi,%ecx
c010ceaf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ceb2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010ceb5:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010ceb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010cebb:	83 c4 20             	add    $0x20,%esp
c010cebe:	5e                   	pop    %esi
c010cebf:	5f                   	pop    %edi
c010cec0:	5d                   	pop    %ebp
c010cec1:	c3                   	ret    

c010cec2 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010cec2:	55                   	push   %ebp
c010cec3:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010cec5:	eb 0c                	jmp    c010ced3 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010cec7:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010cecb:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010cecf:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010ced3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010ced7:	74 1a                	je     c010cef3 <strncmp+0x31>
c010ced9:	8b 45 08             	mov    0x8(%ebp),%eax
c010cedc:	0f b6 00             	movzbl (%eax),%eax
c010cedf:	84 c0                	test   %al,%al
c010cee1:	74 10                	je     c010cef3 <strncmp+0x31>
c010cee3:	8b 45 08             	mov    0x8(%ebp),%eax
c010cee6:	0f b6 10             	movzbl (%eax),%edx
c010cee9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ceec:	0f b6 00             	movzbl (%eax),%eax
c010ceef:	38 c2                	cmp    %al,%dl
c010cef1:	74 d4                	je     c010cec7 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010cef3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010cef7:	74 18                	je     c010cf11 <strncmp+0x4f>
c010cef9:	8b 45 08             	mov    0x8(%ebp),%eax
c010cefc:	0f b6 00             	movzbl (%eax),%eax
c010ceff:	0f b6 d0             	movzbl %al,%edx
c010cf02:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf05:	0f b6 00             	movzbl (%eax),%eax
c010cf08:	0f b6 c0             	movzbl %al,%eax
c010cf0b:	29 c2                	sub    %eax,%edx
c010cf0d:	89 d0                	mov    %edx,%eax
c010cf0f:	eb 05                	jmp    c010cf16 <strncmp+0x54>
c010cf11:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cf16:	5d                   	pop    %ebp
c010cf17:	c3                   	ret    

c010cf18 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010cf18:	55                   	push   %ebp
c010cf19:	89 e5                	mov    %esp,%ebp
c010cf1b:	83 ec 04             	sub    $0x4,%esp
c010cf1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf21:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010cf24:	eb 14                	jmp    c010cf3a <strchr+0x22>
        if (*s == c) {
c010cf26:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf29:	0f b6 00             	movzbl (%eax),%eax
c010cf2c:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010cf2f:	75 05                	jne    c010cf36 <strchr+0x1e>
            return (char *)s;
c010cf31:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf34:	eb 13                	jmp    c010cf49 <strchr+0x31>
        }
        s ++;
c010cf36:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010cf3a:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf3d:	0f b6 00             	movzbl (%eax),%eax
c010cf40:	84 c0                	test   %al,%al
c010cf42:	75 e2                	jne    c010cf26 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010cf44:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cf49:	c9                   	leave  
c010cf4a:	c3                   	ret    

c010cf4b <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010cf4b:	55                   	push   %ebp
c010cf4c:	89 e5                	mov    %esp,%ebp
c010cf4e:	83 ec 04             	sub    $0x4,%esp
c010cf51:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf54:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010cf57:	eb 11                	jmp    c010cf6a <strfind+0x1f>
        if (*s == c) {
c010cf59:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf5c:	0f b6 00             	movzbl (%eax),%eax
c010cf5f:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010cf62:	75 02                	jne    c010cf66 <strfind+0x1b>
            break;
c010cf64:	eb 0e                	jmp    c010cf74 <strfind+0x29>
        }
        s ++;
c010cf66:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010cf6a:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf6d:	0f b6 00             	movzbl (%eax),%eax
c010cf70:	84 c0                	test   %al,%al
c010cf72:	75 e5                	jne    c010cf59 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c010cf74:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010cf77:	c9                   	leave  
c010cf78:	c3                   	ret    

c010cf79 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010cf79:	55                   	push   %ebp
c010cf7a:	89 e5                	mov    %esp,%ebp
c010cf7c:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010cf7f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010cf86:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010cf8d:	eb 04                	jmp    c010cf93 <strtol+0x1a>
        s ++;
c010cf8f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010cf93:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf96:	0f b6 00             	movzbl (%eax),%eax
c010cf99:	3c 20                	cmp    $0x20,%al
c010cf9b:	74 f2                	je     c010cf8f <strtol+0x16>
c010cf9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfa0:	0f b6 00             	movzbl (%eax),%eax
c010cfa3:	3c 09                	cmp    $0x9,%al
c010cfa5:	74 e8                	je     c010cf8f <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010cfa7:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfaa:	0f b6 00             	movzbl (%eax),%eax
c010cfad:	3c 2b                	cmp    $0x2b,%al
c010cfaf:	75 06                	jne    c010cfb7 <strtol+0x3e>
        s ++;
c010cfb1:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010cfb5:	eb 15                	jmp    c010cfcc <strtol+0x53>
    }
    else if (*s == '-') {
c010cfb7:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfba:	0f b6 00             	movzbl (%eax),%eax
c010cfbd:	3c 2d                	cmp    $0x2d,%al
c010cfbf:	75 0b                	jne    c010cfcc <strtol+0x53>
        s ++, neg = 1;
c010cfc1:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010cfc5:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010cfcc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010cfd0:	74 06                	je     c010cfd8 <strtol+0x5f>
c010cfd2:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010cfd6:	75 24                	jne    c010cffc <strtol+0x83>
c010cfd8:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfdb:	0f b6 00             	movzbl (%eax),%eax
c010cfde:	3c 30                	cmp    $0x30,%al
c010cfe0:	75 1a                	jne    c010cffc <strtol+0x83>
c010cfe2:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfe5:	83 c0 01             	add    $0x1,%eax
c010cfe8:	0f b6 00             	movzbl (%eax),%eax
c010cfeb:	3c 78                	cmp    $0x78,%al
c010cfed:	75 0d                	jne    c010cffc <strtol+0x83>
        s += 2, base = 16;
c010cfef:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010cff3:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010cffa:	eb 2a                	jmp    c010d026 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010cffc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d000:	75 17                	jne    c010d019 <strtol+0xa0>
c010d002:	8b 45 08             	mov    0x8(%ebp),%eax
c010d005:	0f b6 00             	movzbl (%eax),%eax
c010d008:	3c 30                	cmp    $0x30,%al
c010d00a:	75 0d                	jne    c010d019 <strtol+0xa0>
        s ++, base = 8;
c010d00c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d010:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010d017:	eb 0d                	jmp    c010d026 <strtol+0xad>
    }
    else if (base == 0) {
c010d019:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d01d:	75 07                	jne    c010d026 <strtol+0xad>
        base = 10;
c010d01f:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010d026:	8b 45 08             	mov    0x8(%ebp),%eax
c010d029:	0f b6 00             	movzbl (%eax),%eax
c010d02c:	3c 2f                	cmp    $0x2f,%al
c010d02e:	7e 1b                	jle    c010d04b <strtol+0xd2>
c010d030:	8b 45 08             	mov    0x8(%ebp),%eax
c010d033:	0f b6 00             	movzbl (%eax),%eax
c010d036:	3c 39                	cmp    $0x39,%al
c010d038:	7f 11                	jg     c010d04b <strtol+0xd2>
            dig = *s - '0';
c010d03a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d03d:	0f b6 00             	movzbl (%eax),%eax
c010d040:	0f be c0             	movsbl %al,%eax
c010d043:	83 e8 30             	sub    $0x30,%eax
c010d046:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d049:	eb 48                	jmp    c010d093 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010d04b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d04e:	0f b6 00             	movzbl (%eax),%eax
c010d051:	3c 60                	cmp    $0x60,%al
c010d053:	7e 1b                	jle    c010d070 <strtol+0xf7>
c010d055:	8b 45 08             	mov    0x8(%ebp),%eax
c010d058:	0f b6 00             	movzbl (%eax),%eax
c010d05b:	3c 7a                	cmp    $0x7a,%al
c010d05d:	7f 11                	jg     c010d070 <strtol+0xf7>
            dig = *s - 'a' + 10;
c010d05f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d062:	0f b6 00             	movzbl (%eax),%eax
c010d065:	0f be c0             	movsbl %al,%eax
c010d068:	83 e8 57             	sub    $0x57,%eax
c010d06b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d06e:	eb 23                	jmp    c010d093 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010d070:	8b 45 08             	mov    0x8(%ebp),%eax
c010d073:	0f b6 00             	movzbl (%eax),%eax
c010d076:	3c 40                	cmp    $0x40,%al
c010d078:	7e 3d                	jle    c010d0b7 <strtol+0x13e>
c010d07a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d07d:	0f b6 00             	movzbl (%eax),%eax
c010d080:	3c 5a                	cmp    $0x5a,%al
c010d082:	7f 33                	jg     c010d0b7 <strtol+0x13e>
            dig = *s - 'A' + 10;
c010d084:	8b 45 08             	mov    0x8(%ebp),%eax
c010d087:	0f b6 00             	movzbl (%eax),%eax
c010d08a:	0f be c0             	movsbl %al,%eax
c010d08d:	83 e8 37             	sub    $0x37,%eax
c010d090:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010d093:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d096:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d099:	7c 02                	jl     c010d09d <strtol+0x124>
            break;
c010d09b:	eb 1a                	jmp    c010d0b7 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c010d09d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d0a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d0a4:	0f af 45 10          	imul   0x10(%ebp),%eax
c010d0a8:	89 c2                	mov    %eax,%edx
c010d0aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d0ad:	01 d0                	add    %edx,%eax
c010d0af:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010d0b2:	e9 6f ff ff ff       	jmp    c010d026 <strtol+0xad>

    if (endptr) {
c010d0b7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d0bb:	74 08                	je     c010d0c5 <strtol+0x14c>
        *endptr = (char *) s;
c010d0bd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d0c0:	8b 55 08             	mov    0x8(%ebp),%edx
c010d0c3:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010d0c5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010d0c9:	74 07                	je     c010d0d2 <strtol+0x159>
c010d0cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d0ce:	f7 d8                	neg    %eax
c010d0d0:	eb 03                	jmp    c010d0d5 <strtol+0x15c>
c010d0d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010d0d5:	c9                   	leave  
c010d0d6:	c3                   	ret    

c010d0d7 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010d0d7:	55                   	push   %ebp
c010d0d8:	89 e5                	mov    %esp,%ebp
c010d0da:	57                   	push   %edi
c010d0db:	83 ec 24             	sub    $0x24,%esp
c010d0de:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d0e1:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010d0e4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010d0e8:	8b 55 08             	mov    0x8(%ebp),%edx
c010d0eb:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010d0ee:	88 45 f7             	mov    %al,-0x9(%ebp)
c010d0f1:	8b 45 10             	mov    0x10(%ebp),%eax
c010d0f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010d0f7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010d0fa:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010d0fe:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010d101:	89 d7                	mov    %edx,%edi
c010d103:	f3 aa                	rep stos %al,%es:(%edi)
c010d105:	89 fa                	mov    %edi,%edx
c010d107:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010d10a:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010d10d:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010d110:	83 c4 24             	add    $0x24,%esp
c010d113:	5f                   	pop    %edi
c010d114:	5d                   	pop    %ebp
c010d115:	c3                   	ret    

c010d116 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010d116:	55                   	push   %ebp
c010d117:	89 e5                	mov    %esp,%ebp
c010d119:	57                   	push   %edi
c010d11a:	56                   	push   %esi
c010d11b:	53                   	push   %ebx
c010d11c:	83 ec 30             	sub    $0x30,%esp
c010d11f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d122:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d125:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d128:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d12b:	8b 45 10             	mov    0x10(%ebp),%eax
c010d12e:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010d131:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d134:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010d137:	73 42                	jae    c010d17b <memmove+0x65>
c010d139:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d13c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d13f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d142:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d145:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d148:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d14b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d14e:	c1 e8 02             	shr    $0x2,%eax
c010d151:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d153:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d156:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d159:	89 d7                	mov    %edx,%edi
c010d15b:	89 c6                	mov    %eax,%esi
c010d15d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d15f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010d162:	83 e1 03             	and    $0x3,%ecx
c010d165:	74 02                	je     c010d169 <memmove+0x53>
c010d167:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d169:	89 f0                	mov    %esi,%eax
c010d16b:	89 fa                	mov    %edi,%edx
c010d16d:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010d170:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d173:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d176:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d179:	eb 36                	jmp    c010d1b1 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010d17b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d17e:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d181:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d184:	01 c2                	add    %eax,%edx
c010d186:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d189:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010d18c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d18f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010d192:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d195:	89 c1                	mov    %eax,%ecx
c010d197:	89 d8                	mov    %ebx,%eax
c010d199:	89 d6                	mov    %edx,%esi
c010d19b:	89 c7                	mov    %eax,%edi
c010d19d:	fd                   	std    
c010d19e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d1a0:	fc                   	cld    
c010d1a1:	89 f8                	mov    %edi,%eax
c010d1a3:	89 f2                	mov    %esi,%edx
c010d1a5:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010d1a8:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010d1ab:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010d1ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010d1b1:	83 c4 30             	add    $0x30,%esp
c010d1b4:	5b                   	pop    %ebx
c010d1b5:	5e                   	pop    %esi
c010d1b6:	5f                   	pop    %edi
c010d1b7:	5d                   	pop    %ebp
c010d1b8:	c3                   	ret    

c010d1b9 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010d1b9:	55                   	push   %ebp
c010d1ba:	89 e5                	mov    %esp,%ebp
c010d1bc:	57                   	push   %edi
c010d1bd:	56                   	push   %esi
c010d1be:	83 ec 20             	sub    $0x20,%esp
c010d1c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d1c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d1ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d1cd:	8b 45 10             	mov    0x10(%ebp),%eax
c010d1d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d1d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d1d6:	c1 e8 02             	shr    $0x2,%eax
c010d1d9:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d1db:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d1de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d1e1:	89 d7                	mov    %edx,%edi
c010d1e3:	89 c6                	mov    %eax,%esi
c010d1e5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d1e7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010d1ea:	83 e1 03             	and    $0x3,%ecx
c010d1ed:	74 02                	je     c010d1f1 <memcpy+0x38>
c010d1ef:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d1f1:	89 f0                	mov    %esi,%eax
c010d1f3:	89 fa                	mov    %edi,%edx
c010d1f5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010d1f8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010d1fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d1fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010d201:	83 c4 20             	add    $0x20,%esp
c010d204:	5e                   	pop    %esi
c010d205:	5f                   	pop    %edi
c010d206:	5d                   	pop    %ebp
c010d207:	c3                   	ret    

c010d208 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010d208:	55                   	push   %ebp
c010d209:	89 e5                	mov    %esp,%ebp
c010d20b:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010d20e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d211:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010d214:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d217:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010d21a:	eb 30                	jmp    c010d24c <memcmp+0x44>
        if (*s1 != *s2) {
c010d21c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d21f:	0f b6 10             	movzbl (%eax),%edx
c010d222:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d225:	0f b6 00             	movzbl (%eax),%eax
c010d228:	38 c2                	cmp    %al,%dl
c010d22a:	74 18                	je     c010d244 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010d22c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d22f:	0f b6 00             	movzbl (%eax),%eax
c010d232:	0f b6 d0             	movzbl %al,%edx
c010d235:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d238:	0f b6 00             	movzbl (%eax),%eax
c010d23b:	0f b6 c0             	movzbl %al,%eax
c010d23e:	29 c2                	sub    %eax,%edx
c010d240:	89 d0                	mov    %edx,%eax
c010d242:	eb 1a                	jmp    c010d25e <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010d244:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010d248:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010d24c:	8b 45 10             	mov    0x10(%ebp),%eax
c010d24f:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d252:	89 55 10             	mov    %edx,0x10(%ebp)
c010d255:	85 c0                	test   %eax,%eax
c010d257:	75 c3                	jne    c010d21c <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010d259:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d25e:	c9                   	leave  
c010d25f:	c3                   	ret    
