
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 e0 14 00 	lgdtl  0x14e018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 e0 14 c0       	mov    $0xc014e000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba 04 32 15 c0       	mov    $0xc0153204,%edx
c0100035:	b8 d0 ee 14 c0       	mov    $0xc014eed0,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 d0 ee 14 c0 	movl   $0xc014eed0,(%esp)
c0100051:	e8 d9 4e 01 00       	call   c0114f2f <memset>

    cons_init();                // init the console
c0100056:	e8 7d 17 00 00       	call   c01017d8 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 c0 50 11 c0 	movl   $0xc01150c0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 dc 50 11 c0 	movl   $0xc01150dc,(%esp)
c0100070:	e8 f0 02 00 00       	call   c0100365 <cprintf>

    print_kerninfo();
c0100075:	e8 f8 09 00 00       	call   c0100a72 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a7 00 00 00       	call   c0100126 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 82 54 00 00       	call   c0105506 <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 2d 21 00 00       	call   c01021b6 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 a5 22 00 00       	call   c0102333 <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 50 83 00 00       	call   c01083e3 <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 77 df 00 00       	call   c010e00f <sched_init>
    proc_init();                // init process table
c0100098:	e8 69 d8 00 00       	call   c010d906 <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 67 18 00 00       	call   c0101909 <ide_init>
    swap_init();                // init swap
c01000a2:	e8 2a 6b 00 00       	call   c0106bd1 <swap_init>
    fs_init();                  // init fs
c01000a7:	e8 42 ac 00 00       	call   c010acee <fs_init>
    
    clock_init();               // init clock interrupt
c01000ac:	e8 dd 0e 00 00       	call   c0100f8e <clock_init>
    intr_enable();              // enable irq interrupt
c01000b1:	e8 6e 20 00 00       	call   c0102124 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b6:	e8 59 da 00 00       	call   c010db14 <cpu_idle>

c01000bb <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000bb:	55                   	push   %ebp
c01000bc:	89 e5                	mov    %esp,%ebp
c01000be:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000c1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c8:	00 
c01000c9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000d0:	00 
c01000d1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d8:	e8 d9 0d 00 00       	call   c0100eb6 <mon_backtrace>
}
c01000dd:	c9                   	leave  
c01000de:	c3                   	ret    

c01000df <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000df:	55                   	push   %ebp
c01000e0:	89 e5                	mov    %esp,%ebp
c01000e2:	53                   	push   %ebx
c01000e3:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e6:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000ec:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01000f2:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000fe:	89 04 24             	mov    %eax,(%esp)
c0100101:	e8 b5 ff ff ff       	call   c01000bb <grade_backtrace2>
}
c0100106:	83 c4 14             	add    $0x14,%esp
c0100109:	5b                   	pop    %ebx
c010010a:	5d                   	pop    %ebp
c010010b:	c3                   	ret    

c010010c <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c010010c:	55                   	push   %ebp
c010010d:	89 e5                	mov    %esp,%ebp
c010010f:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100112:	8b 45 10             	mov    0x10(%ebp),%eax
c0100115:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100119:	8b 45 08             	mov    0x8(%ebp),%eax
c010011c:	89 04 24             	mov    %eax,(%esp)
c010011f:	e8 bb ff ff ff       	call   c01000df <grade_backtrace1>
}
c0100124:	c9                   	leave  
c0100125:	c3                   	ret    

c0100126 <grade_backtrace>:

void
grade_backtrace(void) {
c0100126:	55                   	push   %ebp
c0100127:	89 e5                	mov    %esp,%ebp
c0100129:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010012c:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100131:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100138:	ff 
c0100139:	89 44 24 04          	mov    %eax,0x4(%esp)
c010013d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100144:	e8 c3 ff ff ff       	call   c010010c <grade_backtrace0>
}
c0100149:	c9                   	leave  
c010014a:	c3                   	ret    

c010014b <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010014b:	55                   	push   %ebp
c010014c:	89 e5                	mov    %esp,%ebp
c010014e:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100151:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100154:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100157:	8c 45 f2             	mov    %es,-0xe(%ebp)
c010015a:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010015d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100161:	0f b7 c0             	movzwl %ax,%eax
c0100164:	83 e0 03             	and    $0x3,%eax
c0100167:	89 c2                	mov    %eax,%edx
c0100169:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c010016e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100172:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100176:	c7 04 24 e1 50 11 c0 	movl   $0xc01150e1,(%esp)
c010017d:	e8 e3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100182:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100186:	0f b7 d0             	movzwl %ax,%edx
c0100189:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c010018e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100192:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100196:	c7 04 24 ef 50 11 c0 	movl   $0xc01150ef,(%esp)
c010019d:	e8 c3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001a2:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a6:	0f b7 d0             	movzwl %ax,%edx
c01001a9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ae:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b6:	c7 04 24 fd 50 11 c0 	movl   $0xc01150fd,(%esp)
c01001bd:	e8 a3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001c2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c6:	0f b7 d0             	movzwl %ax,%edx
c01001c9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ce:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d6:	c7 04 24 0b 51 11 c0 	movl   $0xc011510b,(%esp)
c01001dd:	e8 83 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001e2:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e6:	0f b7 d0             	movzwl %ax,%edx
c01001e9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ee:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f6:	c7 04 24 19 51 11 c0 	movl   $0xc0115119,(%esp)
c01001fd:	e8 63 01 00 00       	call   c0100365 <cprintf>
    round ++;
c0100202:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c0100207:	83 c0 01             	add    $0x1,%eax
c010020a:	a3 e0 ee 14 c0       	mov    %eax,0xc014eee0
}
c010020f:	c9                   	leave  
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100219:	5d                   	pop    %ebp
c010021a:	c3                   	ret    

c010021b <lab1_switch_test>:

static void
lab1_switch_test(void) {
c010021b:	55                   	push   %ebp
c010021c:	89 e5                	mov    %esp,%ebp
c010021e:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100221:	e8 25 ff ff ff       	call   c010014b <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100226:	c7 04 24 28 51 11 c0 	movl   $0xc0115128,(%esp)
c010022d:	e8 33 01 00 00       	call   c0100365 <cprintf>
    lab1_switch_to_user();
c0100232:	e8 da ff ff ff       	call   c0100211 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100237:	e8 0f ff ff ff       	call   c010014b <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010023c:	c7 04 24 48 51 11 c0 	movl   $0xc0115148,(%esp)
c0100243:	e8 1d 01 00 00       	call   c0100365 <cprintf>
    lab1_switch_to_kernel();
c0100248:	e8 c9 ff ff ff       	call   c0100216 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010024d:	e8 f9 fe ff ff       	call   c010014b <lab1_print_cur_status>
}
c0100252:	c9                   	leave  
c0100253:	c3                   	ret    

c0100254 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100254:	55                   	push   %ebp
c0100255:	89 e5                	mov    %esp,%ebp
c0100257:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c010025a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010025e:	74 13                	je     c0100273 <readline+0x1f>
        cprintf("%s", prompt);
c0100260:	8b 45 08             	mov    0x8(%ebp),%eax
c0100263:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100267:	c7 04 24 67 51 11 c0 	movl   $0xc0115167,(%esp)
c010026e:	e8 f2 00 00 00       	call   c0100365 <cprintf>
    }
    int i = 0, c;
c0100273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c010027a:	e8 6e 01 00 00       	call   c01003ed <getchar>
c010027f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100282:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100286:	79 07                	jns    c010028f <readline+0x3b>
            return NULL;
c0100288:	b8 00 00 00 00       	mov    $0x0,%eax
c010028d:	eb 79                	jmp    c0100308 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010028f:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100293:	7e 28                	jle    c01002bd <readline+0x69>
c0100295:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c010029c:	7f 1f                	jg     c01002bd <readline+0x69>
            cputchar(c);
c010029e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a1:	89 04 24             	mov    %eax,(%esp)
c01002a4:	e8 e2 00 00 00       	call   c010038b <cputchar>
            buf[i ++] = c;
c01002a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002ac:	8d 50 01             	lea    0x1(%eax),%edx
c01002af:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002b5:	88 90 00 ef 14 c0    	mov    %dl,-0x3feb1100(%eax)
c01002bb:	eb 46                	jmp    c0100303 <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002bd:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002c1:	75 17                	jne    c01002da <readline+0x86>
c01002c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002c7:	7e 11                	jle    c01002da <readline+0x86>
            cputchar(c);
c01002c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002cc:	89 04 24             	mov    %eax,(%esp)
c01002cf:	e8 b7 00 00 00       	call   c010038b <cputchar>
            i --;
c01002d4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002d8:	eb 29                	jmp    c0100303 <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002da:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002de:	74 06                	je     c01002e6 <readline+0x92>
c01002e0:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002e4:	75 1d                	jne    c0100303 <readline+0xaf>
            cputchar(c);
c01002e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002e9:	89 04 24             	mov    %eax,(%esp)
c01002ec:	e8 9a 00 00 00       	call   c010038b <cputchar>
            buf[i] = '\0';
c01002f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002f4:	05 00 ef 14 c0       	add    $0xc014ef00,%eax
c01002f9:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002fc:	b8 00 ef 14 c0       	mov    $0xc014ef00,%eax
c0100301:	eb 05                	jmp    c0100308 <readline+0xb4>
        }
    }
c0100303:	e9 72 ff ff ff       	jmp    c010027a <readline+0x26>
}
c0100308:	c9                   	leave  
c0100309:	c3                   	ret    

c010030a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010030a:	55                   	push   %ebp
c010030b:	89 e5                	mov    %esp,%ebp
c010030d:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100310:	8b 45 08             	mov    0x8(%ebp),%eax
c0100313:	89 04 24             	mov    %eax,(%esp)
c0100316:	e8 e9 14 00 00       	call   c0101804 <cons_putc>
    (*cnt) ++;
c010031b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010031e:	8b 00                	mov    (%eax),%eax
c0100320:	8d 50 01             	lea    0x1(%eax),%edx
c0100323:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100326:	89 10                	mov    %edx,(%eax)
}
c0100328:	c9                   	leave  
c0100329:	c3                   	ret    

c010032a <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010032a:	55                   	push   %ebp
c010032b:	89 e5                	mov    %esp,%ebp
c010032d:	83 ec 38             	sub    $0x38,%esp
    int cnt = 0;
c0100330:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
c0100337:	8b 45 0c             	mov    0xc(%ebp),%eax
c010033a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010033e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100341:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100345:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100348:	89 44 24 08          	mov    %eax,0x8(%esp)
c010034c:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c0100353:	ff 
c0100354:	c7 04 24 0a 03 10 c0 	movl   $0xc010030a,(%esp)
c010035b:	e8 7f 42 01 00       	call   c01145df <vprintfmt>
    return cnt;
c0100360:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100363:	c9                   	leave  
c0100364:	c3                   	ret    

c0100365 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100365:	55                   	push   %ebp
c0100366:	89 e5                	mov    %esp,%ebp
c0100368:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010036b:	8d 45 0c             	lea    0xc(%ebp),%eax
c010036e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100371:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100374:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100378:	8b 45 08             	mov    0x8(%ebp),%eax
c010037b:	89 04 24             	mov    %eax,(%esp)
c010037e:	e8 a7 ff ff ff       	call   c010032a <vcprintf>
c0100383:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100386:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100389:	c9                   	leave  
c010038a:	c3                   	ret    

c010038b <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010038b:	55                   	push   %ebp
c010038c:	89 e5                	mov    %esp,%ebp
c010038e:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100391:	8b 45 08             	mov    0x8(%ebp),%eax
c0100394:	89 04 24             	mov    %eax,(%esp)
c0100397:	e8 68 14 00 00       	call   c0101804 <cons_putc>
}
c010039c:	c9                   	leave  
c010039d:	c3                   	ret    

c010039e <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010039e:	55                   	push   %ebp
c010039f:	89 e5                	mov    %esp,%ebp
c01003a1:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003ab:	eb 13                	jmp    c01003c0 <cputs+0x22>
        cputch(c, &cnt);
c01003ad:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003b1:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003b8:	89 04 24             	mov    %eax,(%esp)
c01003bb:	e8 4a ff ff ff       	call   c010030a <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01003c3:	8d 50 01             	lea    0x1(%eax),%edx
c01003c6:	89 55 08             	mov    %edx,0x8(%ebp)
c01003c9:	0f b6 00             	movzbl (%eax),%eax
c01003cc:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003cf:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003d3:	75 d8                	jne    c01003ad <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003d5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003dc:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003e3:	e8 22 ff ff ff       	call   c010030a <cputch>
    return cnt;
c01003e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003eb:	c9                   	leave  
c01003ec:	c3                   	ret    

c01003ed <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003ed:	55                   	push   %ebp
c01003ee:	89 e5                	mov    %esp,%ebp
c01003f0:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003f3:	e8 48 14 00 00       	call   c0101840 <cons_getc>
c01003f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003ff:	74 f2                	je     c01003f3 <getchar+0x6>
        /* do nothing */;
    return c;
c0100401:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100404:	c9                   	leave  
c0100405:	c3                   	ret    

c0100406 <strdup>:
#include <string.h>
#include <kmalloc.h>

char *
strdup(const char *src) {
c0100406:	55                   	push   %ebp
c0100407:	89 e5                	mov    %esp,%ebp
c0100409:	83 ec 28             	sub    $0x28,%esp
    char *dst;
    size_t len = strlen(src);
c010040c:	8b 45 08             	mov    0x8(%ebp),%eax
c010040f:	89 04 24             	mov    %eax,(%esp)
c0100412:	e8 c2 47 01 00       	call   c0114bd9 <strlen>
c0100417:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((dst = kmalloc(len + 1)) != NULL) {
c010041a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010041d:	83 c0 01             	add    $0x1,%eax
c0100420:	89 04 24             	mov    %eax,(%esp)
c0100423:	e8 36 46 00 00       	call   c0104a5e <kmalloc>
c0100428:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010042b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010042f:	74 24                	je     c0100455 <strdup+0x4f>
        memcpy(dst, src, len);
c0100431:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100434:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100438:	8b 45 08             	mov    0x8(%ebp),%eax
c010043b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010043f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100442:	89 04 24             	mov    %eax,(%esp)
c0100445:	e8 c7 4b 01 00       	call   c0115011 <memcpy>
        dst[len] = '\0';
c010044a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010044d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100450:	01 d0                	add    %edx,%eax
c0100452:	c6 00 00             	movb   $0x0,(%eax)
    }
    return dst;
c0100455:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100458:	c9                   	leave  
c0100459:	c3                   	ret    

c010045a <stradd>:

char *
stradd(const char *src1, const char *src2) {
c010045a:	55                   	push   %ebp
c010045b:	89 e5                	mov    %esp,%ebp
c010045d:	83 ec 28             	sub    $0x28,%esp
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
c0100460:	8b 45 08             	mov    0x8(%ebp),%eax
c0100463:	89 04 24             	mov    %eax,(%esp)
c0100466:	e8 6e 47 01 00       	call   c0114bd9 <strlen>
c010046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010046e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100471:	89 04 24             	mov    %eax,(%esp)
c0100474:	e8 60 47 01 00       	call   c0114bd9 <strlen>
c0100479:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
c010047c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010047f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100482:	01 d0                	add    %edx,%eax
c0100484:	83 c0 01             	add    $0x1,%eax
c0100487:	89 04 24             	mov    %eax,(%esp)
c010048a:	e8 cf 45 00 00       	call   c0104a5e <kmalloc>
c010048f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100492:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100495:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0100498:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010049c:	74 44                	je     c01004e2 <stradd+0x88>
        memcpy(dst, src1, len1), dst += len1;
c010049e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01004a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004af:	89 04 24             	mov    %eax,(%esp)
c01004b2:	e8 5a 4b 01 00       	call   c0115011 <memcpy>
c01004b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004ba:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(dst, src2, len2), dst += len2;
c01004bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004ce:	89 04 24             	mov    %eax,(%esp)
c01004d1:	e8 3b 4b 01 00       	call   c0115011 <memcpy>
c01004d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d9:	01 45 ec             	add    %eax,-0x14(%ebp)
        *dst = '\0';
c01004dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004df:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ret;
c01004e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c01004e5:	c9                   	leave  
c01004e6:	c3                   	ret    

c01004e7 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004e7:	55                   	push   %ebp
c01004e8:	89 e5                	mov    %esp,%ebp
c01004ea:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004f0:	8b 00                	mov    (%eax),%eax
c01004f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01004f8:	8b 00                	mov    (%eax),%eax
c01004fa:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100504:	e9 d2 00 00 00       	jmp    c01005db <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c0100509:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010050c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010050f:	01 d0                	add    %edx,%eax
c0100511:	89 c2                	mov    %eax,%edx
c0100513:	c1 ea 1f             	shr    $0x1f,%edx
c0100516:	01 d0                	add    %edx,%eax
c0100518:	d1 f8                	sar    %eax
c010051a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010051d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100520:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100523:	eb 04                	jmp    c0100529 <stab_binsearch+0x42>
            m --;
c0100525:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100529:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010052c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010052f:	7c 1f                	jl     c0100550 <stab_binsearch+0x69>
c0100531:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100534:	89 d0                	mov    %edx,%eax
c0100536:	01 c0                	add    %eax,%eax
c0100538:	01 d0                	add    %edx,%eax
c010053a:	c1 e0 02             	shl    $0x2,%eax
c010053d:	89 c2                	mov    %eax,%edx
c010053f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100542:	01 d0                	add    %edx,%eax
c0100544:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100548:	0f b6 c0             	movzbl %al,%eax
c010054b:	3b 45 14             	cmp    0x14(%ebp),%eax
c010054e:	75 d5                	jne    c0100525 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100550:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100553:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100556:	7d 0b                	jge    c0100563 <stab_binsearch+0x7c>
            l = true_m + 1;
c0100558:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010055b:	83 c0 01             	add    $0x1,%eax
c010055e:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100561:	eb 78                	jmp    c01005db <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100563:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010056a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010056d:	89 d0                	mov    %edx,%eax
c010056f:	01 c0                	add    %eax,%eax
c0100571:	01 d0                	add    %edx,%eax
c0100573:	c1 e0 02             	shl    $0x2,%eax
c0100576:	89 c2                	mov    %eax,%edx
c0100578:	8b 45 08             	mov    0x8(%ebp),%eax
c010057b:	01 d0                	add    %edx,%eax
c010057d:	8b 40 08             	mov    0x8(%eax),%eax
c0100580:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100583:	73 13                	jae    c0100598 <stab_binsearch+0xb1>
            *region_left = m;
c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100588:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010058b:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010058d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100590:	83 c0 01             	add    $0x1,%eax
c0100593:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100596:	eb 43                	jmp    c01005db <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100598:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010059b:	89 d0                	mov    %edx,%eax
c010059d:	01 c0                	add    %eax,%eax
c010059f:	01 d0                	add    %edx,%eax
c01005a1:	c1 e0 02             	shl    $0x2,%eax
c01005a4:	89 c2                	mov    %eax,%edx
c01005a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01005a9:	01 d0                	add    %edx,%eax
c01005ab:	8b 40 08             	mov    0x8(%eax),%eax
c01005ae:	3b 45 18             	cmp    0x18(%ebp),%eax
c01005b1:	76 16                	jbe    c01005c9 <stab_binsearch+0xe2>
            *region_right = m - 1;
c01005b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005b6:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005b9:	8b 45 10             	mov    0x10(%ebp),%eax
c01005bc:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005c1:	83 e8 01             	sub    $0x1,%eax
c01005c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005c7:	eb 12                	jmp    c01005db <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005cf:	89 10                	mov    %edx,(%eax)
            l = m;
c01005d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005d7:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005de:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005e1:	0f 8e 22 ff ff ff    	jle    c0100509 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005eb:	75 0f                	jne    c01005fc <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f0:	8b 00                	mov    (%eax),%eax
c01005f2:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01005f8:	89 10                	mov    %edx,(%eax)
c01005fa:	eb 3f                	jmp    c010063b <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005fc:	8b 45 10             	mov    0x10(%ebp),%eax
c01005ff:	8b 00                	mov    (%eax),%eax
c0100601:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100604:	eb 04                	jmp    c010060a <stab_binsearch+0x123>
c0100606:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010060a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010060d:	8b 00                	mov    (%eax),%eax
c010060f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100612:	7d 1f                	jge    c0100633 <stab_binsearch+0x14c>
c0100614:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100617:	89 d0                	mov    %edx,%eax
c0100619:	01 c0                	add    %eax,%eax
c010061b:	01 d0                	add    %edx,%eax
c010061d:	c1 e0 02             	shl    $0x2,%eax
c0100620:	89 c2                	mov    %eax,%edx
c0100622:	8b 45 08             	mov    0x8(%ebp),%eax
c0100625:	01 d0                	add    %edx,%eax
c0100627:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010062b:	0f b6 c0             	movzbl %al,%eax
c010062e:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100631:	75 d3                	jne    c0100606 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100633:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100636:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100639:	89 10                	mov    %edx,(%eax)
    }
}
c010063b:	c9                   	leave  
c010063c:	c3                   	ret    

c010063d <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010063d:	55                   	push   %ebp
c010063e:	89 e5                	mov    %esp,%ebp
c0100640:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100643:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100646:	c7 00 6c 51 11 c0    	movl   $0xc011516c,(%eax)
    info->eip_line = 0;
c010064c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010064f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100656:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100659:	c7 40 08 6c 51 11 c0 	movl   $0xc011516c,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100660:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100663:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010066a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010066d:	8b 55 08             	mov    0x8(%ebp),%edx
c0100670:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100673:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100676:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010067d:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100684:	76 21                	jbe    c01006a7 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100686:	c7 45 f4 40 96 11 c0 	movl   $0xc0119640,-0xc(%ebp)
        stab_end = __STAB_END__;
c010068d:	c7 45 f0 40 eb 13 c0 	movl   $0xc013eb40,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c0100694:	c7 45 ec 41 eb 13 c0 	movl   $0xc013eb41,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c010069b:	c7 45 e8 bb b4 14 c0 	movl   $0xc014b4bb,-0x18(%ebp)
c01006a2:	e9 ea 00 00 00       	jmp    c0100791 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01006a7:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01006ae:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01006b3:	85 c0                	test   %eax,%eax
c01006b5:	74 11                	je     c01006c8 <debuginfo_eip+0x8b>
c01006b7:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01006bc:	8b 40 18             	mov    0x18(%eax),%eax
c01006bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006c2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006c6:	75 0a                	jne    c01006d2 <debuginfo_eip+0x95>
            return -1;
c01006c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006cd:	e9 9e 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006d5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01006dc:	00 
c01006dd:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01006e4:	00 
c01006e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01006ec:	89 04 24             	mov    %eax,(%esp)
c01006ef:	e8 eb 85 00 00       	call   c0108cdf <user_mem_check>
c01006f4:	85 c0                	test   %eax,%eax
c01006f6:	75 0a                	jne    c0100702 <debuginfo_eip+0xc5>
            return -1;
c01006f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006fd:	e9 6e 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100705:	8b 00                	mov    (%eax),%eax
c0100707:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010070a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010070d:	8b 40 04             	mov    0x4(%eax),%eax
c0100710:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100713:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100716:	8b 40 08             	mov    0x8(%eax),%eax
c0100719:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010071c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010071f:	8b 40 0c             	mov    0xc(%eax),%eax
c0100722:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100725:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100728:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010072b:	29 c2                	sub    %eax,%edx
c010072d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100730:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100737:	00 
c0100738:	89 54 24 08          	mov    %edx,0x8(%esp)
c010073c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100740:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100743:	89 04 24             	mov    %eax,(%esp)
c0100746:	e8 94 85 00 00       	call   c0108cdf <user_mem_check>
c010074b:	85 c0                	test   %eax,%eax
c010074d:	75 0a                	jne    c0100759 <debuginfo_eip+0x11c>
            return -1;
c010074f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100754:	e9 17 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100759:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010075c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010075f:	29 c2                	sub    %eax,%edx
c0100761:	89 d0                	mov    %edx,%eax
c0100763:	89 c2                	mov    %eax,%edx
c0100765:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100768:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010076f:	00 
c0100770:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100774:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100778:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010077b:	89 04 24             	mov    %eax,(%esp)
c010077e:	e8 5c 85 00 00       	call   c0108cdf <user_mem_check>
c0100783:	85 c0                	test   %eax,%eax
c0100785:	75 0a                	jne    c0100791 <debuginfo_eip+0x154>
            return -1;
c0100787:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010078c:	e9 df 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100791:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100794:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100797:	76 0d                	jbe    c01007a6 <debuginfo_eip+0x169>
c0100799:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010079c:	83 e8 01             	sub    $0x1,%eax
c010079f:	0f b6 00             	movzbl (%eax),%eax
c01007a2:	84 c0                	test   %al,%al
c01007a4:	74 0a                	je     c01007b0 <debuginfo_eip+0x173>
        return -1;
c01007a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007ab:	e9 c0 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01007b0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01007b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01007ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007bd:	29 c2                	sub    %eax,%edx
c01007bf:	89 d0                	mov    %edx,%eax
c01007c1:	c1 f8 02             	sar    $0x2,%eax
c01007c4:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01007ca:	83 e8 01             	sub    $0x1,%eax
c01007cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01007d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01007d3:	89 44 24 10          	mov    %eax,0x10(%esp)
c01007d7:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01007de:	00 
c01007df:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01007e2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01007e6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007f0:	89 04 24             	mov    %eax,(%esp)
c01007f3:	e8 ef fc ff ff       	call   c01004e7 <stab_binsearch>
    if (lfile == 0)
c01007f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007fb:	85 c0                	test   %eax,%eax
c01007fd:	75 0a                	jne    c0100809 <debuginfo_eip+0x1cc>
        return -1;
c01007ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100804:	e9 67 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100809:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010080c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010080f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100812:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100815:	8b 45 08             	mov    0x8(%ebp),%eax
c0100818:	89 44 24 10          	mov    %eax,0x10(%esp)
c010081c:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100823:	00 
c0100824:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100827:	89 44 24 08          	mov    %eax,0x8(%esp)
c010082b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010082e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100832:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100835:	89 04 24             	mov    %eax,(%esp)
c0100838:	e8 aa fc ff ff       	call   c01004e7 <stab_binsearch>

    if (lfun <= rfun) {
c010083d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100840:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100843:	39 c2                	cmp    %eax,%edx
c0100845:	7f 7c                	jg     c01008c3 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100847:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010084a:	89 c2                	mov    %eax,%edx
c010084c:	89 d0                	mov    %edx,%eax
c010084e:	01 c0                	add    %eax,%eax
c0100850:	01 d0                	add    %edx,%eax
c0100852:	c1 e0 02             	shl    $0x2,%eax
c0100855:	89 c2                	mov    %eax,%edx
c0100857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010085a:	01 d0                	add    %edx,%eax
c010085c:	8b 10                	mov    (%eax),%edx
c010085e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100861:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100864:	29 c1                	sub    %eax,%ecx
c0100866:	89 c8                	mov    %ecx,%eax
c0100868:	39 c2                	cmp    %eax,%edx
c010086a:	73 22                	jae    c010088e <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010086c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010086f:	89 c2                	mov    %eax,%edx
c0100871:	89 d0                	mov    %edx,%eax
c0100873:	01 c0                	add    %eax,%eax
c0100875:	01 d0                	add    %edx,%eax
c0100877:	c1 e0 02             	shl    $0x2,%eax
c010087a:	89 c2                	mov    %eax,%edx
c010087c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010087f:	01 d0                	add    %edx,%eax
c0100881:	8b 10                	mov    (%eax),%edx
c0100883:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100886:	01 c2                	add    %eax,%edx
c0100888:	8b 45 0c             	mov    0xc(%ebp),%eax
c010088b:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c010088e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	89 d0                	mov    %edx,%eax
c0100895:	01 c0                	add    %eax,%eax
c0100897:	01 d0                	add    %edx,%eax
c0100899:	c1 e0 02             	shl    $0x2,%eax
c010089c:	89 c2                	mov    %eax,%edx
c010089e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008a1:	01 d0                	add    %edx,%eax
c01008a3:	8b 50 08             	mov    0x8(%eax),%edx
c01008a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008a9:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01008ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008af:	8b 40 10             	mov    0x10(%eax),%eax
c01008b2:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01008b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01008bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01008be:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01008c1:	eb 15                	jmp    c01008d8 <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01008c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008c6:	8b 55 08             	mov    0x8(%ebp),%edx
c01008c9:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01008cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01008d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008d5:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01008d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008db:	8b 40 08             	mov    0x8(%eax),%eax
c01008de:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01008e5:	00 
c01008e6:	89 04 24             	mov    %eax,(%esp)
c01008e9:	e8 b5 44 01 00       	call   c0114da3 <strfind>
c01008ee:	89 c2                	mov    %eax,%edx
c01008f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008f3:	8b 40 08             	mov    0x8(%eax),%eax
c01008f6:	29 c2                	sub    %eax,%edx
c01008f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008fb:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0100901:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100905:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010090c:	00 
c010090d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100910:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100914:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100917:	89 44 24 04          	mov    %eax,0x4(%esp)
c010091b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091e:	89 04 24             	mov    %eax,(%esp)
c0100921:	e8 c1 fb ff ff       	call   c01004e7 <stab_binsearch>
    if (lline <= rline) {
c0100926:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100929:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010092c:	39 c2                	cmp    %eax,%edx
c010092e:	7f 24                	jg     c0100954 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100930:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100933:	89 c2                	mov    %eax,%edx
c0100935:	89 d0                	mov    %edx,%eax
c0100937:	01 c0                	add    %eax,%eax
c0100939:	01 d0                	add    %edx,%eax
c010093b:	c1 e0 02             	shl    $0x2,%eax
c010093e:	89 c2                	mov    %eax,%edx
c0100940:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100943:	01 d0                	add    %edx,%eax
c0100945:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100949:	0f b7 d0             	movzwl %ax,%edx
c010094c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094f:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100952:	eb 13                	jmp    c0100967 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100954:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100959:	e9 12 01 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c010095e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100961:	83 e8 01             	sub    $0x1,%eax
c0100964:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100967:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010096a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010096d:	39 c2                	cmp    %eax,%edx
c010096f:	7c 56                	jl     c01009c7 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100971:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100974:	89 c2                	mov    %eax,%edx
c0100976:	89 d0                	mov    %edx,%eax
c0100978:	01 c0                	add    %eax,%eax
c010097a:	01 d0                	add    %edx,%eax
c010097c:	c1 e0 02             	shl    $0x2,%eax
c010097f:	89 c2                	mov    %eax,%edx
c0100981:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100984:	01 d0                	add    %edx,%eax
c0100986:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010098a:	3c 84                	cmp    $0x84,%al
c010098c:	74 39                	je     c01009c7 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c010098e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100991:	89 c2                	mov    %eax,%edx
c0100993:	89 d0                	mov    %edx,%eax
c0100995:	01 c0                	add    %eax,%eax
c0100997:	01 d0                	add    %edx,%eax
c0100999:	c1 e0 02             	shl    $0x2,%eax
c010099c:	89 c2                	mov    %eax,%edx
c010099e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a1:	01 d0                	add    %edx,%eax
c01009a3:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01009a7:	3c 64                	cmp    $0x64,%al
c01009a9:	75 b3                	jne    c010095e <debuginfo_eip+0x321>
c01009ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ae:	89 c2                	mov    %eax,%edx
c01009b0:	89 d0                	mov    %edx,%eax
c01009b2:	01 c0                	add    %eax,%eax
c01009b4:	01 d0                	add    %edx,%eax
c01009b6:	c1 e0 02             	shl    $0x2,%eax
c01009b9:	89 c2                	mov    %eax,%edx
c01009bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009be:	01 d0                	add    %edx,%eax
c01009c0:	8b 40 08             	mov    0x8(%eax),%eax
c01009c3:	85 c0                	test   %eax,%eax
c01009c5:	74 97                	je     c010095e <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01009c7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009cd:	39 c2                	cmp    %eax,%edx
c01009cf:	7c 46                	jl     c0100a17 <debuginfo_eip+0x3da>
c01009d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009d4:	89 c2                	mov    %eax,%edx
c01009d6:	89 d0                	mov    %edx,%eax
c01009d8:	01 c0                	add    %eax,%eax
c01009da:	01 d0                	add    %edx,%eax
c01009dc:	c1 e0 02             	shl    $0x2,%eax
c01009df:	89 c2                	mov    %eax,%edx
c01009e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009e4:	01 d0                	add    %edx,%eax
c01009e6:	8b 10                	mov    (%eax),%edx
c01009e8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01009eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009ee:	29 c1                	sub    %eax,%ecx
c01009f0:	89 c8                	mov    %ecx,%eax
c01009f2:	39 c2                	cmp    %eax,%edx
c01009f4:	73 21                	jae    c0100a17 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c01009f6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009f9:	89 c2                	mov    %eax,%edx
c01009fb:	89 d0                	mov    %edx,%eax
c01009fd:	01 c0                	add    %eax,%eax
c01009ff:	01 d0                	add    %edx,%eax
c0100a01:	c1 e0 02             	shl    $0x2,%eax
c0100a04:	89 c2                	mov    %eax,%edx
c0100a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a09:	01 d0                	add    %edx,%eax
c0100a0b:	8b 10                	mov    (%eax),%edx
c0100a0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a10:	01 c2                	add    %eax,%edx
c0100a12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a15:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100a17:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100a1a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a1d:	39 c2                	cmp    %eax,%edx
c0100a1f:	7d 4a                	jge    c0100a6b <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100a21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100a24:	83 c0 01             	add    $0x1,%eax
c0100a27:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100a2a:	eb 18                	jmp    c0100a44 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100a2c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a2f:	8b 40 14             	mov    0x14(%eax),%eax
c0100a32:	8d 50 01             	lea    0x1(%eax),%edx
c0100a35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a38:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100a3b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a3e:	83 c0 01             	add    $0x1,%eax
c0100a41:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a44:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a47:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100a4a:	39 c2                	cmp    %eax,%edx
c0100a4c:	7d 1d                	jge    c0100a6b <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a4e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a51:	89 c2                	mov    %eax,%edx
c0100a53:	89 d0                	mov    %edx,%eax
c0100a55:	01 c0                	add    %eax,%eax
c0100a57:	01 d0                	add    %edx,%eax
c0100a59:	c1 e0 02             	shl    $0x2,%eax
c0100a5c:	89 c2                	mov    %eax,%edx
c0100a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a61:	01 d0                	add    %edx,%eax
c0100a63:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a67:	3c a0                	cmp    $0xa0,%al
c0100a69:	74 c1                	je     c0100a2c <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a70:	c9                   	leave  
c0100a71:	c3                   	ret    

c0100a72 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a72:	55                   	push   %ebp
c0100a73:	89 e5                	mov    %esp,%ebp
c0100a75:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a78:	c7 04 24 76 51 11 c0 	movl   $0xc0115176,(%esp)
c0100a7f:	e8 e1 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a84:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c0100a8b:	c0 
c0100a8c:	c7 04 24 8f 51 11 c0 	movl   $0xc011518f,(%esp)
c0100a93:	e8 cd f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a98:	c7 44 24 04 b8 50 11 	movl   $0xc01150b8,0x4(%esp)
c0100a9f:	c0 
c0100aa0:	c7 04 24 a7 51 11 c0 	movl   $0xc01151a7,(%esp)
c0100aa7:	e8 b9 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100aac:	c7 44 24 04 d0 ee 14 	movl   $0xc014eed0,0x4(%esp)
c0100ab3:	c0 
c0100ab4:	c7 04 24 bf 51 11 c0 	movl   $0xc01151bf,(%esp)
c0100abb:	e8 a5 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0100ac0:	c7 44 24 04 04 32 15 	movl   $0xc0153204,0x4(%esp)
c0100ac7:	c0 
c0100ac8:	c7 04 24 d7 51 11 c0 	movl   $0xc01151d7,(%esp)
c0100acf:	e8 91 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100ad4:	b8 04 32 15 c0       	mov    $0xc0153204,%eax
c0100ad9:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100adf:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100ae4:	29 c2                	sub    %eax,%edx
c0100ae6:	89 d0                	mov    %edx,%eax
c0100ae8:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100aee:	85 c0                	test   %eax,%eax
c0100af0:	0f 48 c2             	cmovs  %edx,%eax
c0100af3:	c1 f8 0a             	sar    $0xa,%eax
c0100af6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100afa:	c7 04 24 f0 51 11 c0 	movl   $0xc01151f0,(%esp)
c0100b01:	e8 5f f8 ff ff       	call   c0100365 <cprintf>
}
c0100b06:	c9                   	leave  
c0100b07:	c3                   	ret    

c0100b08 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100b08:	55                   	push   %ebp
c0100b09:	89 e5                	mov    %esp,%ebp
c0100b0b:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100b11:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100b14:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b18:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b1b:	89 04 24             	mov    %eax,(%esp)
c0100b1e:	e8 1a fb ff ff       	call   c010063d <debuginfo_eip>
c0100b23:	85 c0                	test   %eax,%eax
c0100b25:	74 15                	je     c0100b3c <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100b27:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b2e:	c7 04 24 1a 52 11 c0 	movl   $0xc011521a,(%esp)
c0100b35:	e8 2b f8 ff ff       	call   c0100365 <cprintf>
c0100b3a:	eb 6d                	jmp    c0100ba9 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100b43:	eb 1c                	jmp    c0100b61 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100b45:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b4b:	01 d0                	add    %edx,%eax
c0100b4d:	0f b6 00             	movzbl (%eax),%eax
c0100b50:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100b59:	01 ca                	add    %ecx,%edx
c0100b5b:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b5d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b61:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b67:	7f dc                	jg     c0100b45 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b69:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b72:	01 d0                	add    %edx,%eax
c0100b74:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b77:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b7a:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b7d:	89 d1                	mov    %edx,%ecx
c0100b7f:	29 c1                	sub    %eax,%ecx
c0100b81:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b84:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b87:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100b8b:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b91:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100b95:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100b99:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b9d:	c7 04 24 36 52 11 c0 	movl   $0xc0115236,(%esp)
c0100ba4:	e8 bc f7 ff ff       	call   c0100365 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100ba9:	c9                   	leave  
c0100baa:	c3                   	ret    

c0100bab <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100bab:	55                   	push   %ebp
c0100bac:	89 e5                	mov    %esp,%ebp
c0100bae:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100bb1:	8b 45 04             	mov    0x4(%ebp),%eax
c0100bb4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100bb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100bba:	c9                   	leave  
c0100bbb:	c3                   	ret    

c0100bbc <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100bbc:	55                   	push   %ebp
c0100bbd:	89 e5                	mov    %esp,%ebp
c0100bbf:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100bc2:	89 e8                	mov    %ebp,%eax
c0100bc4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100bc7:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp();
c0100bca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t eip = read_eip();
c0100bcd:	e8 d9 ff ff ff       	call   c0100bab <read_eip>
c0100bd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int i;
    for (i = 0; i < STACKFRAME_DEPTH && ebp; i++) {
c0100bd5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100bdc:	e9 88 00 00 00       	jmp    c0100c69 <print_stackframe+0xad>
        uint32_t *args = (uint32_t *)ebp + 2;
c0100be1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100be4:	83 c0 08             	add    $0x8,%eax
c0100be7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int j;
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100bea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100bed:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100bf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bf8:	c7 04 24 48 52 11 c0 	movl   $0xc0115248,(%esp)
c0100bff:	e8 61 f7 ff ff       	call   c0100365 <cprintf>
        for (j = 0; j < 4; j++)
c0100c04:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100c0b:	eb 25                	jmp    c0100c32 <print_stackframe+0x76>
            cprintf("0x%08x ", args[j]);
c0100c0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c10:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100c1a:	01 d0                	add    %edx,%eax
c0100c1c:	8b 00                	mov    (%eax),%eax
c0100c1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c22:	c7 04 24 64 52 11 c0 	movl   $0xc0115264,(%esp)
c0100c29:	e8 37 f7 ff ff       	call   c0100365 <cprintf>
    int i;
    for (i = 0; i < STACKFRAME_DEPTH && ebp; i++) {
        uint32_t *args = (uint32_t *)ebp + 2;
        int j;
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        for (j = 0; j < 4; j++)
c0100c2e:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100c32:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100c36:	7e d5                	jle    c0100c0d <print_stackframe+0x51>
            cprintf("0x%08x ", args[j]);
        cprintf("\n");
c0100c38:	c7 04 24 6c 52 11 c0 	movl   $0xc011526c,(%esp)
c0100c3f:	e8 21 f7 ff ff       	call   c0100365 <cprintf>
        print_debuginfo(eip - 1);
c0100c44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c47:	83 e8 01             	sub    $0x1,%eax
c0100c4a:	89 04 24             	mov    %eax,(%esp)
c0100c4d:	e8 b6 fe ff ff       	call   c0100b08 <print_debuginfo>
        eip = *(uint32_t *)(ebp + 4);
c0100c52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c55:	83 c0 04             	add    $0x4,%eax
c0100c58:	8b 00                	mov    (%eax),%eax
c0100c5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = *(uint32_t *)ebp;
c0100c5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c60:	8b 00                	mov    (%eax),%eax
c0100c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp();
    uint32_t eip = read_eip();
    int i;
    for (i = 0; i < STACKFRAME_DEPTH && ebp; i++) {
c0100c65:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c69:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c6d:	7f 0a                	jg     c0100c79 <print_stackframe+0xbd>
c0100c6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c73:	0f 85 68 ff ff ff    	jne    c0100be1 <print_stackframe+0x25>
        cprintf("\n");
        print_debuginfo(eip - 1);
        eip = *(uint32_t *)(ebp + 4);
        ebp = *(uint32_t *)ebp;
    }
}
c0100c79:	c9                   	leave  
c0100c7a:	c3                   	ret    

c0100c7b <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c7b:	55                   	push   %ebp
c0100c7c:	89 e5                	mov    %esp,%ebp
c0100c7e:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100c81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c88:	eb 0c                	jmp    c0100c96 <parse+0x1b>
            *buf ++ = '\0';
c0100c8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c8d:	8d 50 01             	lea    0x1(%eax),%edx
c0100c90:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c93:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c96:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c99:	0f b6 00             	movzbl (%eax),%eax
c0100c9c:	84 c0                	test   %al,%al
c0100c9e:	74 1d                	je     c0100cbd <parse+0x42>
c0100ca0:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ca3:	0f b6 00             	movzbl (%eax),%eax
c0100ca6:	0f be c0             	movsbl %al,%eax
c0100ca9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cad:	c7 04 24 f0 52 11 c0 	movl   $0xc01152f0,(%esp)
c0100cb4:	e8 b7 40 01 00       	call   c0114d70 <strchr>
c0100cb9:	85 c0                	test   %eax,%eax
c0100cbb:	75 cd                	jne    c0100c8a <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100cbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cc0:	0f b6 00             	movzbl (%eax),%eax
c0100cc3:	84 c0                	test   %al,%al
c0100cc5:	75 02                	jne    c0100cc9 <parse+0x4e>
            break;
c0100cc7:	eb 67                	jmp    c0100d30 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100cc9:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100ccd:	75 14                	jne    c0100ce3 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100ccf:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100cd6:	00 
c0100cd7:	c7 04 24 f5 52 11 c0 	movl   $0xc01152f5,(%esp)
c0100cde:	e8 82 f6 ff ff       	call   c0100365 <cprintf>
        }
        argv[argc ++] = buf;
c0100ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ce6:	8d 50 01             	lea    0x1(%eax),%edx
c0100ce9:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100cec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100cf6:	01 c2                	add    %eax,%edx
c0100cf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cfb:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100cfd:	eb 04                	jmp    c0100d03 <parse+0x88>
            buf ++;
c0100cff:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100d03:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d06:	0f b6 00             	movzbl (%eax),%eax
c0100d09:	84 c0                	test   %al,%al
c0100d0b:	74 1d                	je     c0100d2a <parse+0xaf>
c0100d0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d10:	0f b6 00             	movzbl (%eax),%eax
c0100d13:	0f be c0             	movsbl %al,%eax
c0100d16:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d1a:	c7 04 24 f0 52 11 c0 	movl   $0xc01152f0,(%esp)
c0100d21:	e8 4a 40 01 00       	call   c0114d70 <strchr>
c0100d26:	85 c0                	test   %eax,%eax
c0100d28:	74 d5                	je     c0100cff <parse+0x84>
            buf ++;
        }
    }
c0100d2a:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d2b:	e9 66 ff ff ff       	jmp    c0100c96 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100d33:	c9                   	leave  
c0100d34:	c3                   	ret    

c0100d35 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100d35:	55                   	push   %ebp
c0100d36:	89 e5                	mov    %esp,%ebp
c0100d38:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100d3b:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d42:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d45:	89 04 24             	mov    %eax,(%esp)
c0100d48:	e8 2e ff ff ff       	call   c0100c7b <parse>
c0100d4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100d50:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100d54:	75 0a                	jne    c0100d60 <runcmd+0x2b>
        return 0;
c0100d56:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d5b:	e9 85 00 00 00       	jmp    c0100de5 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d67:	eb 5c                	jmp    c0100dc5 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d69:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d6f:	89 d0                	mov    %edx,%eax
c0100d71:	01 c0                	add    %eax,%eax
c0100d73:	01 d0                	add    %edx,%eax
c0100d75:	c1 e0 02             	shl    $0x2,%eax
c0100d78:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100d7d:	8b 00                	mov    (%eax),%eax
c0100d7f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100d83:	89 04 24             	mov    %eax,(%esp)
c0100d86:	e8 46 3f 01 00       	call   c0114cd1 <strcmp>
c0100d8b:	85 c0                	test   %eax,%eax
c0100d8d:	75 32                	jne    c0100dc1 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d92:	89 d0                	mov    %edx,%eax
c0100d94:	01 c0                	add    %eax,%eax
c0100d96:	01 d0                	add    %edx,%eax
c0100d98:	c1 e0 02             	shl    $0x2,%eax
c0100d9b:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100da0:	8b 40 08             	mov    0x8(%eax),%eax
c0100da3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100da6:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100da9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100dac:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100db0:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100db3:	83 c2 04             	add    $0x4,%edx
c0100db6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100dba:	89 0c 24             	mov    %ecx,(%esp)
c0100dbd:	ff d0                	call   *%eax
c0100dbf:	eb 24                	jmp    c0100de5 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100dc1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100dc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dc8:	83 f8 02             	cmp    $0x2,%eax
c0100dcb:	76 9c                	jbe    c0100d69 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100dcd:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100dd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100dd4:	c7 04 24 13 53 11 c0 	movl   $0xc0115313,(%esp)
c0100ddb:	e8 85 f5 ff ff       	call   c0100365 <cprintf>
    return 0;
c0100de0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100de5:	c9                   	leave  
c0100de6:	c3                   	ret    

c0100de7 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100de7:	55                   	push   %ebp
c0100de8:	89 e5                	mov    %esp,%ebp
c0100dea:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100ded:	c7 04 24 2c 53 11 c0 	movl   $0xc011532c,(%esp)
c0100df4:	e8 6c f5 ff ff       	call   c0100365 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100df9:	c7 04 24 54 53 11 c0 	movl   $0xc0115354,(%esp)
c0100e00:	e8 60 f5 ff ff       	call   c0100365 <cprintf>

    if (tf != NULL) {
c0100e05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100e09:	74 0b                	je     c0100e16 <kmonitor+0x2f>
        print_trapframe(tf);
c0100e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e0e:	89 04 24             	mov    %eax,(%esp)
c0100e11:	e8 74 16 00 00       	call   c010248a <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100e16:	c7 04 24 79 53 11 c0 	movl   $0xc0115379,(%esp)
c0100e1d:	e8 32 f4 ff ff       	call   c0100254 <readline>
c0100e22:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100e25:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100e29:	74 18                	je     c0100e43 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100e2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e35:	89 04 24             	mov    %eax,(%esp)
c0100e38:	e8 f8 fe ff ff       	call   c0100d35 <runcmd>
c0100e3d:	85 c0                	test   %eax,%eax
c0100e3f:	79 02                	jns    c0100e43 <kmonitor+0x5c>
                break;
c0100e41:	eb 02                	jmp    c0100e45 <kmonitor+0x5e>
            }
        }
    }
c0100e43:	eb d1                	jmp    c0100e16 <kmonitor+0x2f>
}
c0100e45:	c9                   	leave  
c0100e46:	c3                   	ret    

c0100e47 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100e47:	55                   	push   %ebp
c0100e48:	89 e5                	mov    %esp,%ebp
c0100e4a:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e54:	eb 3f                	jmp    c0100e95 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e59:	89 d0                	mov    %edx,%eax
c0100e5b:	01 c0                	add    %eax,%eax
c0100e5d:	01 d0                	add    %edx,%eax
c0100e5f:	c1 e0 02             	shl    $0x2,%eax
c0100e62:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100e67:	8b 48 04             	mov    0x4(%eax),%ecx
c0100e6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e6d:	89 d0                	mov    %edx,%eax
c0100e6f:	01 c0                	add    %eax,%eax
c0100e71:	01 d0                	add    %edx,%eax
c0100e73:	c1 e0 02             	shl    $0x2,%eax
c0100e76:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100e7b:	8b 00                	mov    (%eax),%eax
c0100e7d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100e81:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e85:	c7 04 24 7d 53 11 c0 	movl   $0xc011537d,(%esp)
c0100e8c:	e8 d4 f4 ff ff       	call   c0100365 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e91:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e98:	83 f8 02             	cmp    $0x2,%eax
c0100e9b:	76 b9                	jbe    c0100e56 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ea2:	c9                   	leave  
c0100ea3:	c3                   	ret    

c0100ea4 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100ea4:	55                   	push   %ebp
c0100ea5:	89 e5                	mov    %esp,%ebp
c0100ea7:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100eaa:	e8 c3 fb ff ff       	call   c0100a72 <print_kerninfo>
    return 0;
c0100eaf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100eb4:	c9                   	leave  
c0100eb5:	c3                   	ret    

c0100eb6 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100eb6:	55                   	push   %ebp
c0100eb7:	89 e5                	mov    %esp,%ebp
c0100eb9:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100ebc:	e8 fb fc ff ff       	call   c0100bbc <print_stackframe>
    return 0;
c0100ec1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ec6:	c9                   	leave  
c0100ec7:	c3                   	ret    

c0100ec8 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100ec8:	55                   	push   %ebp
c0100ec9:	89 e5                	mov    %esp,%ebp
c0100ecb:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100ece:	a1 00 f3 14 c0       	mov    0xc014f300,%eax
c0100ed3:	85 c0                	test   %eax,%eax
c0100ed5:	74 02                	je     c0100ed9 <__panic+0x11>
        goto panic_dead;
c0100ed7:	eb 48                	jmp    c0100f21 <__panic+0x59>
    }
    is_panic = 1;
c0100ed9:	c7 05 00 f3 14 c0 01 	movl   $0x1,0xc014f300
c0100ee0:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100ee3:	8d 45 14             	lea    0x14(%ebp),%eax
c0100ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100ee9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100eec:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100ef0:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ef3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ef7:	c7 04 24 86 53 11 c0 	movl   $0xc0115386,(%esp)
c0100efe:	e8 62 f4 ff ff       	call   c0100365 <cprintf>
    vcprintf(fmt, ap);
c0100f03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f0a:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f0d:	89 04 24             	mov    %eax,(%esp)
c0100f10:	e8 15 f4 ff ff       	call   c010032a <vcprintf>
    cprintf("\n");
c0100f15:	c7 04 24 a2 53 11 c0 	movl   $0xc01153a2,(%esp)
c0100f1c:	e8 44 f4 ff ff       	call   c0100365 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100f21:	e8 04 12 00 00       	call   c010212a <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100f26:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100f2d:	e8 b5 fe ff ff       	call   c0100de7 <kmonitor>
    }
c0100f32:	eb f2                	jmp    c0100f26 <__panic+0x5e>

c0100f34 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100f34:	55                   	push   %ebp
c0100f35:	89 e5                	mov    %esp,%ebp
c0100f37:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100f3a:	8d 45 14             	lea    0x14(%ebp),%eax
c0100f3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100f40:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f43:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100f47:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f4e:	c7 04 24 a4 53 11 c0 	movl   $0xc01153a4,(%esp)
c0100f55:	e8 0b f4 ff ff       	call   c0100365 <cprintf>
    vcprintf(fmt, ap);
c0100f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f5d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f61:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f64:	89 04 24             	mov    %eax,(%esp)
c0100f67:	e8 be f3 ff ff       	call   c010032a <vcprintf>
    cprintf("\n");
c0100f6c:	c7 04 24 a2 53 11 c0 	movl   $0xc01153a2,(%esp)
c0100f73:	e8 ed f3 ff ff       	call   c0100365 <cprintf>
    va_end(ap);
}
c0100f78:	c9                   	leave  
c0100f79:	c3                   	ret    

c0100f7a <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100f7a:	55                   	push   %ebp
c0100f7b:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100f7d:	a1 00 f3 14 c0       	mov    0xc014f300,%eax
}
c0100f82:	5d                   	pop    %ebp
c0100f83:	c3                   	ret    

c0100f84 <SYSTEM_READ_TIMER>:
#define TIMER_RATEGEN   0x04                    // mode 2, rate generator
#define TIMER_16BIT     0x30                    // r/w counter 16 bits, LSB first

volatile size_t ticks;

long SYSTEM_READ_TIMER( void ){
c0100f84:	55                   	push   %ebp
c0100f85:	89 e5                	mov    %esp,%ebp
    return ticks;
c0100f87:	a1 10 30 15 c0       	mov    0xc0153010,%eax
}
c0100f8c:	5d                   	pop    %ebp
c0100f8d:	c3                   	ret    

c0100f8e <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100f8e:	55                   	push   %ebp
c0100f8f:	89 e5                	mov    %esp,%ebp
c0100f91:	83 ec 28             	sub    $0x28,%esp
c0100f94:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100f9a:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f9e:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100fa2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100fa6:	ee                   	out    %al,(%dx)
c0100fa7:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100fad:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100fb1:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fb5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fb9:	ee                   	out    %al,(%dx)
c0100fba:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100fc0:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100fc4:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100fc8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100fcc:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100fcd:	c7 05 10 30 15 c0 00 	movl   $0x0,0xc0153010
c0100fd4:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100fd7:	c7 04 24 c2 53 11 c0 	movl   $0xc01153c2,(%esp)
c0100fde:	e8 82 f3 ff ff       	call   c0100365 <cprintf>
    pic_enable(IRQ_TIMER);
c0100fe3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100fea:	e8 99 11 00 00       	call   c0102188 <pic_enable>
}
c0100fef:	c9                   	leave  
c0100ff0:	c3                   	ret    

c0100ff1 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100ff1:	55                   	push   %ebp
c0100ff2:	89 e5                	mov    %esp,%ebp
c0100ff4:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100ff7:	9c                   	pushf  
c0100ff8:	58                   	pop    %eax
c0100ff9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100ffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100fff:	25 00 02 00 00       	and    $0x200,%eax
c0101004:	85 c0                	test   %eax,%eax
c0101006:	74 0c                	je     c0101014 <__intr_save+0x23>
        intr_disable();
c0101008:	e8 1d 11 00 00       	call   c010212a <intr_disable>
        return 1;
c010100d:	b8 01 00 00 00       	mov    $0x1,%eax
c0101012:	eb 05                	jmp    c0101019 <__intr_save+0x28>
    }
    return 0;
c0101014:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101019:	c9                   	leave  
c010101a:	c3                   	ret    

c010101b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010101b:	55                   	push   %ebp
c010101c:	89 e5                	mov    %esp,%ebp
c010101e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101021:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101025:	74 05                	je     c010102c <__intr_restore+0x11>
        intr_enable();
c0101027:	e8 f8 10 00 00       	call   c0102124 <intr_enable>
    }
}
c010102c:	c9                   	leave  
c010102d:	c3                   	ret    

c010102e <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c010102e:	55                   	push   %ebp
c010102f:	89 e5                	mov    %esp,%ebp
c0101031:	83 ec 10             	sub    $0x10,%esp
c0101034:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010103a:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010103e:	89 c2                	mov    %eax,%edx
c0101040:	ec                   	in     (%dx),%al
c0101041:	88 45 fd             	mov    %al,-0x3(%ebp)
c0101044:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c010104a:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010104e:	89 c2                	mov    %eax,%edx
c0101050:	ec                   	in     (%dx),%al
c0101051:	88 45 f9             	mov    %al,-0x7(%ebp)
c0101054:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c010105a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010105e:	89 c2                	mov    %eax,%edx
c0101060:	ec                   	in     (%dx),%al
c0101061:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101064:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c010106a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010106e:	89 c2                	mov    %eax,%edx
c0101070:	ec                   	in     (%dx),%al
c0101071:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0101074:	c9                   	leave  
c0101075:	c3                   	ret    

c0101076 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0101076:	55                   	push   %ebp
c0101077:	89 e5                	mov    %esp,%ebp
c0101079:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c010107c:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0101083:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101086:	0f b7 00             	movzwl (%eax),%eax
c0101089:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c010108d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101090:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0101095:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101098:	0f b7 00             	movzwl (%eax),%eax
c010109b:	66 3d 5a a5          	cmp    $0xa55a,%ax
c010109f:	74 12                	je     c01010b3 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01010a1:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01010a8:	66 c7 05 26 f3 14 c0 	movw   $0x3b4,0xc014f326
c01010af:	b4 03 
c01010b1:	eb 13                	jmp    c01010c6 <cga_init+0x50>
    } else {
        *cp = was;
c01010b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01010b6:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01010ba:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01010bd:	66 c7 05 26 f3 14 c0 	movw   $0x3d4,0xc014f326
c01010c4:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01010c6:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c01010cd:	0f b7 c0             	movzwl %ax,%eax
c01010d0:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01010d4:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010d8:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01010dc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01010e0:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c01010e1:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c01010e8:	83 c0 01             	add    $0x1,%eax
c01010eb:	0f b7 c0             	movzwl %ax,%eax
c01010ee:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01010f2:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c01010f6:	89 c2                	mov    %eax,%edx
c01010f8:	ec                   	in     (%dx),%al
c01010f9:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c01010fc:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101100:	0f b6 c0             	movzbl %al,%eax
c0101103:	c1 e0 08             	shl    $0x8,%eax
c0101106:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101109:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c0101110:	0f b7 c0             	movzwl %ax,%eax
c0101113:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101117:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010111b:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010111f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101123:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101124:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c010112b:	83 c0 01             	add    $0x1,%eax
c010112e:	0f b7 c0             	movzwl %ax,%eax
c0101131:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101135:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101139:	89 c2                	mov    %eax,%edx
c010113b:	ec                   	in     (%dx),%al
c010113c:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c010113f:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101143:	0f b6 c0             	movzbl %al,%eax
c0101146:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101149:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010114c:	a3 20 f3 14 c0       	mov    %eax,0xc014f320
    crt_pos = pos;
c0101151:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101154:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
}
c010115a:	c9                   	leave  
c010115b:	c3                   	ret    

c010115c <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010115c:	55                   	push   %ebp
c010115d:	89 e5                	mov    %esp,%ebp
c010115f:	83 ec 48             	sub    $0x48,%esp
c0101162:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101168:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010116c:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101170:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101174:	ee                   	out    %al,(%dx)
c0101175:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c010117b:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c010117f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101183:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101187:	ee                   	out    %al,(%dx)
c0101188:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c010118e:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c0101192:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101196:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010119a:	ee                   	out    %al,(%dx)
c010119b:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01011a1:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01011a5:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01011a9:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01011ad:	ee                   	out    %al,(%dx)
c01011ae:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01011b4:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01011b8:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01011bc:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01011c0:	ee                   	out    %al,(%dx)
c01011c1:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01011c7:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01011cb:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01011cf:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01011d3:	ee                   	out    %al,(%dx)
c01011d4:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01011da:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c01011de:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01011e2:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01011e6:	ee                   	out    %al,(%dx)
c01011e7:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01011ed:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01011f1:	89 c2                	mov    %eax,%edx
c01011f3:	ec                   	in     (%dx),%al
c01011f4:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c01011f7:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c01011fb:	3c ff                	cmp    $0xff,%al
c01011fd:	0f 95 c0             	setne  %al
c0101200:	0f b6 c0             	movzbl %al,%eax
c0101203:	a3 28 f3 14 c0       	mov    %eax,0xc014f328
c0101208:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010120e:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c0101212:	89 c2                	mov    %eax,%edx
c0101214:	ec                   	in     (%dx),%al
c0101215:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101218:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c010121e:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c0101222:	89 c2                	mov    %eax,%edx
c0101224:	ec                   	in     (%dx),%al
c0101225:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101228:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c010122d:	85 c0                	test   %eax,%eax
c010122f:	74 0c                	je     c010123d <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101231:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101238:	e8 4b 0f 00 00       	call   c0102188 <pic_enable>
    }
}
c010123d:	c9                   	leave  
c010123e:	c3                   	ret    

c010123f <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c010123f:	55                   	push   %ebp
c0101240:	89 e5                	mov    %esp,%ebp
c0101242:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101245:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010124c:	eb 09                	jmp    c0101257 <lpt_putc_sub+0x18>
        delay();
c010124e:	e8 db fd ff ff       	call   c010102e <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101253:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101257:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c010125d:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101261:	89 c2                	mov    %eax,%edx
c0101263:	ec                   	in     (%dx),%al
c0101264:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101267:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010126b:	84 c0                	test   %al,%al
c010126d:	78 09                	js     c0101278 <lpt_putc_sub+0x39>
c010126f:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101276:	7e d6                	jle    c010124e <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101278:	8b 45 08             	mov    0x8(%ebp),%eax
c010127b:	0f b6 c0             	movzbl %al,%eax
c010127e:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c0101284:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101287:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010128b:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010128f:	ee                   	out    %al,(%dx)
c0101290:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c0101296:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c010129a:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010129e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01012a2:	ee                   	out    %al,(%dx)
c01012a3:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01012a9:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01012ad:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01012b1:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01012b5:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01012b6:	c9                   	leave  
c01012b7:	c3                   	ret    

c01012b8 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01012b8:	55                   	push   %ebp
c01012b9:	89 e5                	mov    %esp,%ebp
c01012bb:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01012be:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01012c2:	74 0d                	je     c01012d1 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01012c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01012c7:	89 04 24             	mov    %eax,(%esp)
c01012ca:	e8 70 ff ff ff       	call   c010123f <lpt_putc_sub>
c01012cf:	eb 24                	jmp    c01012f5 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01012d1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012d8:	e8 62 ff ff ff       	call   c010123f <lpt_putc_sub>
        lpt_putc_sub(' ');
c01012dd:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01012e4:	e8 56 ff ff ff       	call   c010123f <lpt_putc_sub>
        lpt_putc_sub('\b');
c01012e9:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012f0:	e8 4a ff ff ff       	call   c010123f <lpt_putc_sub>
    }
}
c01012f5:	c9                   	leave  
c01012f6:	c3                   	ret    

c01012f7 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c01012f7:	55                   	push   %ebp
c01012f8:	89 e5                	mov    %esp,%ebp
c01012fa:	53                   	push   %ebx
c01012fb:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c01012fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0101301:	b0 00                	mov    $0x0,%al
c0101303:	85 c0                	test   %eax,%eax
c0101305:	75 07                	jne    c010130e <cga_putc+0x17>
        c |= 0x0700;
c0101307:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c010130e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101311:	0f b6 c0             	movzbl %al,%eax
c0101314:	83 f8 0a             	cmp    $0xa,%eax
c0101317:	74 4c                	je     c0101365 <cga_putc+0x6e>
c0101319:	83 f8 0d             	cmp    $0xd,%eax
c010131c:	74 57                	je     c0101375 <cga_putc+0x7e>
c010131e:	83 f8 08             	cmp    $0x8,%eax
c0101321:	0f 85 88 00 00 00    	jne    c01013af <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c0101327:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010132e:	66 85 c0             	test   %ax,%ax
c0101331:	74 30                	je     c0101363 <cga_putc+0x6c>
            crt_pos --;
c0101333:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010133a:	83 e8 01             	sub    $0x1,%eax
c010133d:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101343:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c0101348:	0f b7 15 24 f3 14 c0 	movzwl 0xc014f324,%edx
c010134f:	0f b7 d2             	movzwl %dx,%edx
c0101352:	01 d2                	add    %edx,%edx
c0101354:	01 c2                	add    %eax,%edx
c0101356:	8b 45 08             	mov    0x8(%ebp),%eax
c0101359:	b0 00                	mov    $0x0,%al
c010135b:	83 c8 20             	or     $0x20,%eax
c010135e:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101361:	eb 72                	jmp    c01013d5 <cga_putc+0xde>
c0101363:	eb 70                	jmp    c01013d5 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c0101365:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010136c:	83 c0 50             	add    $0x50,%eax
c010136f:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101375:	0f b7 1d 24 f3 14 c0 	movzwl 0xc014f324,%ebx
c010137c:	0f b7 0d 24 f3 14 c0 	movzwl 0xc014f324,%ecx
c0101383:	0f b7 c1             	movzwl %cx,%eax
c0101386:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c010138c:	c1 e8 10             	shr    $0x10,%eax
c010138f:	89 c2                	mov    %eax,%edx
c0101391:	66 c1 ea 06          	shr    $0x6,%dx
c0101395:	89 d0                	mov    %edx,%eax
c0101397:	c1 e0 02             	shl    $0x2,%eax
c010139a:	01 d0                	add    %edx,%eax
c010139c:	c1 e0 04             	shl    $0x4,%eax
c010139f:	29 c1                	sub    %eax,%ecx
c01013a1:	89 ca                	mov    %ecx,%edx
c01013a3:	89 d8                	mov    %ebx,%eax
c01013a5:	29 d0                	sub    %edx,%eax
c01013a7:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
        break;
c01013ad:	eb 26                	jmp    c01013d5 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01013af:	8b 0d 20 f3 14 c0    	mov    0xc014f320,%ecx
c01013b5:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c01013bc:	8d 50 01             	lea    0x1(%eax),%edx
c01013bf:	66 89 15 24 f3 14 c0 	mov    %dx,0xc014f324
c01013c6:	0f b7 c0             	movzwl %ax,%eax
c01013c9:	01 c0                	add    %eax,%eax
c01013cb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01013ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01013d1:	66 89 02             	mov    %ax,(%edx)
        break;
c01013d4:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01013d5:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c01013dc:	66 3d cf 07          	cmp    $0x7cf,%ax
c01013e0:	76 5b                	jbe    c010143d <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c01013e2:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c01013e7:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c01013ed:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c01013f2:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c01013f9:	00 
c01013fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01013fe:	89 04 24             	mov    %eax,(%esp)
c0101401:	e8 68 3b 01 00       	call   c0114f6e <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101406:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c010140d:	eb 15                	jmp    c0101424 <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c010140f:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c0101414:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101417:	01 d2                	add    %edx,%edx
c0101419:	01 d0                	add    %edx,%eax
c010141b:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101420:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101424:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c010142b:	7e e2                	jle    c010140f <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c010142d:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c0101434:	83 e8 50             	sub    $0x50,%eax
c0101437:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c010143d:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c0101444:	0f b7 c0             	movzwl %ax,%eax
c0101447:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010144b:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c010144f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101453:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101457:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101458:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010145f:	66 c1 e8 08          	shr    $0x8,%ax
c0101463:	0f b6 c0             	movzbl %al,%eax
c0101466:	0f b7 15 26 f3 14 c0 	movzwl 0xc014f326,%edx
c010146d:	83 c2 01             	add    $0x1,%edx
c0101470:	0f b7 d2             	movzwl %dx,%edx
c0101473:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c0101477:	88 45 ed             	mov    %al,-0x13(%ebp)
c010147a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010147e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101482:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101483:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c010148a:	0f b7 c0             	movzwl %ax,%eax
c010148d:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101491:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c0101495:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101499:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010149d:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c010149e:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c01014a5:	0f b6 c0             	movzbl %al,%eax
c01014a8:	0f b7 15 26 f3 14 c0 	movzwl 0xc014f326,%edx
c01014af:	83 c2 01             	add    $0x1,%edx
c01014b2:	0f b7 d2             	movzwl %dx,%edx
c01014b5:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01014b9:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01014bc:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01014c0:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01014c4:	ee                   	out    %al,(%dx)
}
c01014c5:	83 c4 34             	add    $0x34,%esp
c01014c8:	5b                   	pop    %ebx
c01014c9:	5d                   	pop    %ebp
c01014ca:	c3                   	ret    

c01014cb <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01014cb:	55                   	push   %ebp
c01014cc:	89 e5                	mov    %esp,%ebp
c01014ce:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01014d8:	eb 09                	jmp    c01014e3 <serial_putc_sub+0x18>
        delay();
c01014da:	e8 4f fb ff ff       	call   c010102e <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014df:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01014e3:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014e9:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014ed:	89 c2                	mov    %eax,%edx
c01014ef:	ec                   	in     (%dx),%al
c01014f0:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014f3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01014f7:	0f b6 c0             	movzbl %al,%eax
c01014fa:	83 e0 20             	and    $0x20,%eax
c01014fd:	85 c0                	test   %eax,%eax
c01014ff:	75 09                	jne    c010150a <serial_putc_sub+0x3f>
c0101501:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101508:	7e d0                	jle    c01014da <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c010150a:	8b 45 08             	mov    0x8(%ebp),%eax
c010150d:	0f b6 c0             	movzbl %al,%eax
c0101510:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0101516:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101519:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010151d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101521:	ee                   	out    %al,(%dx)
}
c0101522:	c9                   	leave  
c0101523:	c3                   	ret    

c0101524 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101524:	55                   	push   %ebp
c0101525:	89 e5                	mov    %esp,%ebp
c0101527:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c010152a:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010152e:	74 0d                	je     c010153d <serial_putc+0x19>
        serial_putc_sub(c);
c0101530:	8b 45 08             	mov    0x8(%ebp),%eax
c0101533:	89 04 24             	mov    %eax,(%esp)
c0101536:	e8 90 ff ff ff       	call   c01014cb <serial_putc_sub>
c010153b:	eb 24                	jmp    c0101561 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c010153d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101544:	e8 82 ff ff ff       	call   c01014cb <serial_putc_sub>
        serial_putc_sub(' ');
c0101549:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101550:	e8 76 ff ff ff       	call   c01014cb <serial_putc_sub>
        serial_putc_sub('\b');
c0101555:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010155c:	e8 6a ff ff ff       	call   c01014cb <serial_putc_sub>
    }
}
c0101561:	c9                   	leave  
c0101562:	c3                   	ret    

c0101563 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101563:	55                   	push   %ebp
c0101564:	89 e5                	mov    %esp,%ebp
c0101566:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101569:	eb 33                	jmp    c010159e <cons_intr+0x3b>
        if (c != 0) {
c010156b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010156f:	74 2d                	je     c010159e <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101571:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c0101576:	8d 50 01             	lea    0x1(%eax),%edx
c0101579:	89 15 44 f5 14 c0    	mov    %edx,0xc014f544
c010157f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101582:	88 90 40 f3 14 c0    	mov    %dl,-0x3feb0cc0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101588:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c010158d:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101592:	75 0a                	jne    c010159e <cons_intr+0x3b>
                cons.wpos = 0;
c0101594:	c7 05 44 f5 14 c0 00 	movl   $0x0,0xc014f544
c010159b:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c010159e:	8b 45 08             	mov    0x8(%ebp),%eax
c01015a1:	ff d0                	call   *%eax
c01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01015a6:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01015aa:	75 bf                	jne    c010156b <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01015ac:	c9                   	leave  
c01015ad:	c3                   	ret    

c01015ae <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01015ae:	55                   	push   %ebp
c01015af:	89 e5                	mov    %esp,%ebp
c01015b1:	83 ec 10             	sub    $0x10,%esp
c01015b4:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015ba:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01015be:	89 c2                	mov    %eax,%edx
c01015c0:	ec                   	in     (%dx),%al
c01015c1:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01015c4:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01015c8:	0f b6 c0             	movzbl %al,%eax
c01015cb:	83 e0 01             	and    $0x1,%eax
c01015ce:	85 c0                	test   %eax,%eax
c01015d0:	75 07                	jne    c01015d9 <serial_proc_data+0x2b>
        return -1;
c01015d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01015d7:	eb 2a                	jmp    c0101603 <serial_proc_data+0x55>
c01015d9:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015df:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01015e3:	89 c2                	mov    %eax,%edx
c01015e5:	ec                   	in     (%dx),%al
c01015e6:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c01015e9:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c01015ed:	0f b6 c0             	movzbl %al,%eax
c01015f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c01015f3:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c01015f7:	75 07                	jne    c0101600 <serial_proc_data+0x52>
        c = '\b';
c01015f9:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101600:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101603:	c9                   	leave  
c0101604:	c3                   	ret    

c0101605 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101605:	55                   	push   %ebp
c0101606:	89 e5                	mov    %esp,%ebp
c0101608:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c010160b:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c0101610:	85 c0                	test   %eax,%eax
c0101612:	74 0c                	je     c0101620 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101614:	c7 04 24 ae 15 10 c0 	movl   $0xc01015ae,(%esp)
c010161b:	e8 43 ff ff ff       	call   c0101563 <cons_intr>
    }
}
c0101620:	c9                   	leave  
c0101621:	c3                   	ret    

c0101622 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101622:	55                   	push   %ebp
c0101623:	89 e5                	mov    %esp,%ebp
c0101625:	83 ec 38             	sub    $0x38,%esp
c0101628:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010162e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101632:	89 c2                	mov    %eax,%edx
c0101634:	ec                   	in     (%dx),%al
c0101635:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101638:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c010163c:	0f b6 c0             	movzbl %al,%eax
c010163f:	83 e0 01             	and    $0x1,%eax
c0101642:	85 c0                	test   %eax,%eax
c0101644:	75 0a                	jne    c0101650 <kbd_proc_data+0x2e>
        return -1;
c0101646:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010164b:	e9 59 01 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
c0101650:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101656:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010165a:	89 c2                	mov    %eax,%edx
c010165c:	ec                   	in     (%dx),%al
c010165d:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101660:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101664:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101667:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c010166b:	75 17                	jne    c0101684 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c010166d:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101672:	83 c8 40             	or     $0x40,%eax
c0101675:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
        return 0;
c010167a:	b8 00 00 00 00       	mov    $0x0,%eax
c010167f:	e9 25 01 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0101684:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101688:	84 c0                	test   %al,%al
c010168a:	79 47                	jns    c01016d3 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c010168c:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101691:	83 e0 40             	and    $0x40,%eax
c0101694:	85 c0                	test   %eax,%eax
c0101696:	75 09                	jne    c01016a1 <kbd_proc_data+0x7f>
c0101698:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010169c:	83 e0 7f             	and    $0x7f,%eax
c010169f:	eb 04                	jmp    c01016a5 <kbd_proc_data+0x83>
c01016a1:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016a5:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01016a8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016ac:	0f b6 80 60 e0 14 c0 	movzbl -0x3feb1fa0(%eax),%eax
c01016b3:	83 c8 40             	or     $0x40,%eax
c01016b6:	0f b6 c0             	movzbl %al,%eax
c01016b9:	f7 d0                	not    %eax
c01016bb:	89 c2                	mov    %eax,%edx
c01016bd:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016c2:	21 d0                	and    %edx,%eax
c01016c4:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
        return 0;
c01016c9:	b8 00 00 00 00       	mov    $0x0,%eax
c01016ce:	e9 d6 00 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01016d3:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016d8:	83 e0 40             	and    $0x40,%eax
c01016db:	85 c0                	test   %eax,%eax
c01016dd:	74 11                	je     c01016f0 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01016df:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01016e3:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016e8:	83 e0 bf             	and    $0xffffffbf,%eax
c01016eb:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
    }

    shift |= shiftcode[data];
c01016f0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016f4:	0f b6 80 60 e0 14 c0 	movzbl -0x3feb1fa0(%eax),%eax
c01016fb:	0f b6 d0             	movzbl %al,%edx
c01016fe:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101703:	09 d0                	or     %edx,%eax
c0101705:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
    shift ^= togglecode[data];
c010170a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010170e:	0f b6 80 60 e1 14 c0 	movzbl -0x3feb1ea0(%eax),%eax
c0101715:	0f b6 d0             	movzbl %al,%edx
c0101718:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c010171d:	31 d0                	xor    %edx,%eax
c010171f:	a3 48 f5 14 c0       	mov    %eax,0xc014f548

    c = charcode[shift & (CTL | SHIFT)][data];
c0101724:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101729:	83 e0 03             	and    $0x3,%eax
c010172c:	8b 14 85 60 e5 14 c0 	mov    -0x3feb1aa0(,%eax,4),%edx
c0101733:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101737:	01 d0                	add    %edx,%eax
c0101739:	0f b6 00             	movzbl (%eax),%eax
c010173c:	0f b6 c0             	movzbl %al,%eax
c010173f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101742:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101747:	83 e0 08             	and    $0x8,%eax
c010174a:	85 c0                	test   %eax,%eax
c010174c:	74 22                	je     c0101770 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c010174e:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101752:	7e 0c                	jle    c0101760 <kbd_proc_data+0x13e>
c0101754:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101758:	7f 06                	jg     c0101760 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c010175a:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c010175e:	eb 10                	jmp    c0101770 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101760:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101764:	7e 0a                	jle    c0101770 <kbd_proc_data+0x14e>
c0101766:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c010176a:	7f 04                	jg     c0101770 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c010176c:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101770:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101775:	f7 d0                	not    %eax
c0101777:	83 e0 06             	and    $0x6,%eax
c010177a:	85 c0                	test   %eax,%eax
c010177c:	75 28                	jne    c01017a6 <kbd_proc_data+0x184>
c010177e:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101785:	75 1f                	jne    c01017a6 <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0101787:	c7 04 24 dd 53 11 c0 	movl   $0xc01153dd,(%esp)
c010178e:	e8 d2 eb ff ff       	call   c0100365 <cprintf>
c0101793:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c0101799:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010179d:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01017a1:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01017a5:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01017a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017a9:	c9                   	leave  
c01017aa:	c3                   	ret    

c01017ab <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01017ab:	55                   	push   %ebp
c01017ac:	89 e5                	mov    %esp,%ebp
c01017ae:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01017b1:	c7 04 24 22 16 10 c0 	movl   $0xc0101622,(%esp)
c01017b8:	e8 a6 fd ff ff       	call   c0101563 <cons_intr>
}
c01017bd:	c9                   	leave  
c01017be:	c3                   	ret    

c01017bf <kbd_init>:

static void
kbd_init(void) {
c01017bf:	55                   	push   %ebp
c01017c0:	89 e5                	mov    %esp,%ebp
c01017c2:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01017c5:	e8 e1 ff ff ff       	call   c01017ab <kbd_intr>
    pic_enable(IRQ_KBD);
c01017ca:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01017d1:	e8 b2 09 00 00       	call   c0102188 <pic_enable>
}
c01017d6:	c9                   	leave  
c01017d7:	c3                   	ret    

c01017d8 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01017d8:	55                   	push   %ebp
c01017d9:	89 e5                	mov    %esp,%ebp
c01017db:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01017de:	e8 93 f8 ff ff       	call   c0101076 <cga_init>
    serial_init();
c01017e3:	e8 74 f9 ff ff       	call   c010115c <serial_init>
    kbd_init();
c01017e8:	e8 d2 ff ff ff       	call   c01017bf <kbd_init>
    if (!serial_exists) {
c01017ed:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c01017f2:	85 c0                	test   %eax,%eax
c01017f4:	75 0c                	jne    c0101802 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c01017f6:	c7 04 24 e9 53 11 c0 	movl   $0xc01153e9,(%esp)
c01017fd:	e8 63 eb ff ff       	call   c0100365 <cprintf>
    }
}
c0101802:	c9                   	leave  
c0101803:	c3                   	ret    

c0101804 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101804:	55                   	push   %ebp
c0101805:	89 e5                	mov    %esp,%ebp
c0101807:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010180a:	e8 e2 f7 ff ff       	call   c0100ff1 <__intr_save>
c010180f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101812:	8b 45 08             	mov    0x8(%ebp),%eax
c0101815:	89 04 24             	mov    %eax,(%esp)
c0101818:	e8 9b fa ff ff       	call   c01012b8 <lpt_putc>
        cga_putc(c);
c010181d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101820:	89 04 24             	mov    %eax,(%esp)
c0101823:	e8 cf fa ff ff       	call   c01012f7 <cga_putc>
        serial_putc(c);
c0101828:	8b 45 08             	mov    0x8(%ebp),%eax
c010182b:	89 04 24             	mov    %eax,(%esp)
c010182e:	e8 f1 fc ff ff       	call   c0101524 <serial_putc>
    }
    local_intr_restore(intr_flag);
c0101833:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101836:	89 04 24             	mov    %eax,(%esp)
c0101839:	e8 dd f7 ff ff       	call   c010101b <__intr_restore>
}
c010183e:	c9                   	leave  
c010183f:	c3                   	ret    

c0101840 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101840:	55                   	push   %ebp
c0101841:	89 e5                	mov    %esp,%ebp
c0101843:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0101846:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c010184d:	e8 9f f7 ff ff       	call   c0100ff1 <__intr_save>
c0101852:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101855:	e8 ab fd ff ff       	call   c0101605 <serial_intr>
        kbd_intr();
c010185a:	e8 4c ff ff ff       	call   c01017ab <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c010185f:	8b 15 40 f5 14 c0    	mov    0xc014f540,%edx
c0101865:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c010186a:	39 c2                	cmp    %eax,%edx
c010186c:	74 31                	je     c010189f <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c010186e:	a1 40 f5 14 c0       	mov    0xc014f540,%eax
c0101873:	8d 50 01             	lea    0x1(%eax),%edx
c0101876:	89 15 40 f5 14 c0    	mov    %edx,0xc014f540
c010187c:	0f b6 80 40 f3 14 c0 	movzbl -0x3feb0cc0(%eax),%eax
c0101883:	0f b6 c0             	movzbl %al,%eax
c0101886:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101889:	a1 40 f5 14 c0       	mov    0xc014f540,%eax
c010188e:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101893:	75 0a                	jne    c010189f <cons_getc+0x5f>
                cons.rpos = 0;
c0101895:	c7 05 40 f5 14 c0 00 	movl   $0x0,0xc014f540
c010189c:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c010189f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018a2:	89 04 24             	mov    %eax,(%esp)
c01018a5:	e8 71 f7 ff ff       	call   c010101b <__intr_restore>
    return c;
c01018aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01018ad:	c9                   	leave  
c01018ae:	c3                   	ret    

c01018af <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01018af:	55                   	push   %ebp
c01018b0:	89 e5                	mov    %esp,%ebp
c01018b2:	83 ec 14             	sub    $0x14,%esp
c01018b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01018b8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01018bc:	90                   	nop
c01018bd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01018c1:	83 c0 07             	add    $0x7,%eax
c01018c4:	0f b7 c0             	movzwl %ax,%eax
c01018c7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018cb:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01018cf:	89 c2                	mov    %eax,%edx
c01018d1:	ec                   	in     (%dx),%al
c01018d2:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01018d5:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01018d9:	0f b6 c0             	movzbl %al,%eax
c01018dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01018df:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018e2:	25 80 00 00 00       	and    $0x80,%eax
c01018e7:	85 c0                	test   %eax,%eax
c01018e9:	75 d2                	jne    c01018bd <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01018eb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01018ef:	74 11                	je     c0101902 <ide_wait_ready+0x53>
c01018f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018f4:	83 e0 21             	and    $0x21,%eax
c01018f7:	85 c0                	test   %eax,%eax
c01018f9:	74 07                	je     c0101902 <ide_wait_ready+0x53>
        return -1;
c01018fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101900:	eb 05                	jmp    c0101907 <ide_wait_ready+0x58>
    }
    return 0;
c0101902:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101907:	c9                   	leave  
c0101908:	c3                   	ret    

c0101909 <ide_init>:

void
ide_init(void) {
c0101909:	55                   	push   %ebp
c010190a:	89 e5                	mov    %esp,%ebp
c010190c:	57                   	push   %edi
c010190d:	53                   	push   %ebx
c010190e:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101914:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c010191a:	e9 d6 02 00 00       	jmp    c0101bf5 <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c010191f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101923:	c1 e0 03             	shl    $0x3,%eax
c0101926:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010192d:	29 c2                	sub    %eax,%edx
c010192f:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101935:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0101938:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010193c:	66 d1 e8             	shr    %ax
c010193f:	0f b7 c0             	movzwl %ax,%eax
c0101942:	0f b7 04 85 08 54 11 	movzwl -0x3feeabf8(,%eax,4),%eax
c0101949:	c0 
c010194a:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c010194e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101952:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101959:	00 
c010195a:	89 04 24             	mov    %eax,(%esp)
c010195d:	e8 4d ff ff ff       	call   c01018af <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101962:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101966:	83 e0 01             	and    $0x1,%eax
c0101969:	c1 e0 04             	shl    $0x4,%eax
c010196c:	83 c8 e0             	or     $0xffffffe0,%eax
c010196f:	0f b6 c0             	movzbl %al,%eax
c0101972:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101976:	83 c2 06             	add    $0x6,%edx
c0101979:	0f b7 d2             	movzwl %dx,%edx
c010197c:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101980:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101983:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101987:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c010198b:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c010198c:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101990:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101997:	00 
c0101998:	89 04 24             	mov    %eax,(%esp)
c010199b:	e8 0f ff ff ff       	call   c01018af <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01019a0:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019a4:	83 c0 07             	add    $0x7,%eax
c01019a7:	0f b7 c0             	movzwl %ax,%eax
c01019aa:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01019ae:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01019b2:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01019b6:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01019ba:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01019bb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01019c6:	00 
c01019c7:	89 04 24             	mov    %eax,(%esp)
c01019ca:	e8 e0 fe ff ff       	call   c01018af <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01019cf:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019d3:	83 c0 07             	add    $0x7,%eax
c01019d6:	0f b7 c0             	movzwl %ax,%eax
c01019d9:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01019dd:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01019e1:	89 c2                	mov    %eax,%edx
c01019e3:	ec                   	in     (%dx),%al
c01019e4:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01019e7:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01019eb:	84 c0                	test   %al,%al
c01019ed:	0f 84 f7 01 00 00    	je     c0101bea <ide_init+0x2e1>
c01019f3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019f7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01019fe:	00 
c01019ff:	89 04 24             	mov    %eax,(%esp)
c0101a02:	e8 a8 fe ff ff       	call   c01018af <ide_wait_ready>
c0101a07:	85 c0                	test   %eax,%eax
c0101a09:	0f 85 db 01 00 00    	jne    c0101bea <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101a0f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a13:	c1 e0 03             	shl    $0x3,%eax
c0101a16:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a1d:	29 c2                	sub    %eax,%edx
c0101a1f:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101a25:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101a28:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101a2c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101a2f:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a35:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101a38:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101a3f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101a42:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101a45:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101a48:	89 cb                	mov    %ecx,%ebx
c0101a4a:	89 df                	mov    %ebx,%edi
c0101a4c:	89 c1                	mov    %eax,%ecx
c0101a4e:	fc                   	cld    
c0101a4f:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101a51:	89 c8                	mov    %ecx,%eax
c0101a53:	89 fb                	mov    %edi,%ebx
c0101a55:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101a58:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101a5b:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101a64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a67:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101a6d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101a70:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a73:	25 00 00 00 04       	and    $0x4000000,%eax
c0101a78:	85 c0                	test   %eax,%eax
c0101a7a:	74 0e                	je     c0101a8a <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101a7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a7f:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101a85:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101a88:	eb 09                	jmp    c0101a93 <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101a8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a8d:	8b 40 78             	mov    0x78(%eax),%eax
c0101a90:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101a93:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a97:	c1 e0 03             	shl    $0x3,%eax
c0101a9a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101aa1:	29 c2                	sub    %eax,%edx
c0101aa3:	81 c2 60 f5 14 c0    	add    $0xc014f560,%edx
c0101aa9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101aac:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0101aaf:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ab3:	c1 e0 03             	shl    $0x3,%eax
c0101ab6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101abd:	29 c2                	sub    %eax,%edx
c0101abf:	81 c2 60 f5 14 c0    	add    $0xc014f560,%edx
c0101ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101ac8:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101acb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101ace:	83 c0 62             	add    $0x62,%eax
c0101ad1:	0f b7 00             	movzwl (%eax),%eax
c0101ad4:	0f b7 c0             	movzwl %ax,%eax
c0101ad7:	25 00 02 00 00       	and    $0x200,%eax
c0101adc:	85 c0                	test   %eax,%eax
c0101ade:	75 24                	jne    c0101b04 <ide_init+0x1fb>
c0101ae0:	c7 44 24 0c 10 54 11 	movl   $0xc0115410,0xc(%esp)
c0101ae7:	c0 
c0101ae8:	c7 44 24 08 53 54 11 	movl   $0xc0115453,0x8(%esp)
c0101aef:	c0 
c0101af0:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101af7:	00 
c0101af8:	c7 04 24 68 54 11 c0 	movl   $0xc0115468,(%esp)
c0101aff:	e8 c4 f3 ff ff       	call   c0100ec8 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101b04:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101b08:	c1 e0 03             	shl    $0x3,%eax
c0101b0b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b12:	29 c2                	sub    %eax,%edx
c0101b14:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101b1a:	83 c0 0c             	add    $0xc,%eax
c0101b1d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101b20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101b23:	83 c0 36             	add    $0x36,%eax
c0101b26:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101b29:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101b30:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101b37:	eb 34                	jmp    c0101b6d <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101b39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b3c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b3f:	01 c2                	add    %eax,%edx
c0101b41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b44:	8d 48 01             	lea    0x1(%eax),%ecx
c0101b47:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101b4a:	01 c8                	add    %ecx,%eax
c0101b4c:	0f b6 00             	movzbl (%eax),%eax
c0101b4f:	88 02                	mov    %al,(%edx)
c0101b51:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b54:	8d 50 01             	lea    0x1(%eax),%edx
c0101b57:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b5a:	01 c2                	add    %eax,%edx
c0101b5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b5f:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101b62:	01 c8                	add    %ecx,%eax
c0101b64:	0f b6 00             	movzbl (%eax),%eax
c0101b67:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101b69:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101b6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b70:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101b73:	72 c4                	jb     c0101b39 <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101b75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b78:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b7b:	01 d0                	add    %edx,%eax
c0101b7d:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101b80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b83:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101b86:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101b89:	85 c0                	test   %eax,%eax
c0101b8b:	74 0f                	je     c0101b9c <ide_init+0x293>
c0101b8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b90:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b93:	01 d0                	add    %edx,%eax
c0101b95:	0f b6 00             	movzbl (%eax),%eax
c0101b98:	3c 20                	cmp    $0x20,%al
c0101b9a:	74 d9                	je     c0101b75 <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101b9c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ba0:	c1 e0 03             	shl    $0x3,%eax
c0101ba3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101baa:	29 c2                	sub    %eax,%edx
c0101bac:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101bb2:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101bb5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bb9:	c1 e0 03             	shl    $0x3,%eax
c0101bbc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bc3:	29 c2                	sub    %eax,%edx
c0101bc5:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101bcb:	8b 50 08             	mov    0x8(%eax),%edx
c0101bce:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bd2:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101bd6:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101bda:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101bde:	c7 04 24 7a 54 11 c0 	movl   $0xc011547a,(%esp)
c0101be5:	e8 7b e7 ff ff       	call   c0100365 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101bea:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bee:	83 c0 01             	add    $0x1,%eax
c0101bf1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101bf5:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101bfa:	0f 86 1f fd ff ff    	jbe    c010191f <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101c00:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101c07:	e8 7c 05 00 00       	call   c0102188 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101c0c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101c13:	e8 70 05 00 00       	call   c0102188 <pic_enable>
}
c0101c18:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101c1e:	5b                   	pop    %ebx
c0101c1f:	5f                   	pop    %edi
c0101c20:	5d                   	pop    %ebp
c0101c21:	c3                   	ret    

c0101c22 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101c22:	55                   	push   %ebp
c0101c23:	89 e5                	mov    %esp,%ebp
c0101c25:	83 ec 04             	sub    $0x4,%esp
c0101c28:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c2b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101c2f:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101c34:	77 24                	ja     c0101c5a <ide_device_valid+0x38>
c0101c36:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c3a:	c1 e0 03             	shl    $0x3,%eax
c0101c3d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c44:	29 c2                	sub    %eax,%edx
c0101c46:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101c4c:	0f b6 00             	movzbl (%eax),%eax
c0101c4f:	84 c0                	test   %al,%al
c0101c51:	74 07                	je     c0101c5a <ide_device_valid+0x38>
c0101c53:	b8 01 00 00 00       	mov    $0x1,%eax
c0101c58:	eb 05                	jmp    c0101c5f <ide_device_valid+0x3d>
c0101c5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c5f:	c9                   	leave  
c0101c60:	c3                   	ret    

c0101c61 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101c61:	55                   	push   %ebp
c0101c62:	89 e5                	mov    %esp,%ebp
c0101c64:	83 ec 08             	sub    $0x8,%esp
c0101c67:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c6a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101c6e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c72:	89 04 24             	mov    %eax,(%esp)
c0101c75:	e8 a8 ff ff ff       	call   c0101c22 <ide_device_valid>
c0101c7a:	85 c0                	test   %eax,%eax
c0101c7c:	74 1b                	je     c0101c99 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101c7e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c82:	c1 e0 03             	shl    $0x3,%eax
c0101c85:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c8c:	29 c2                	sub    %eax,%edx
c0101c8e:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101c94:	8b 40 08             	mov    0x8(%eax),%eax
c0101c97:	eb 05                	jmp    c0101c9e <ide_device_size+0x3d>
    }
    return 0;
c0101c99:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c9e:	c9                   	leave  
c0101c9f:	c3                   	ret    

c0101ca0 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101ca0:	55                   	push   %ebp
c0101ca1:	89 e5                	mov    %esp,%ebp
c0101ca3:	57                   	push   %edi
c0101ca4:	53                   	push   %ebx
c0101ca5:	83 ec 50             	sub    $0x50,%esp
c0101ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cab:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101caf:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101cb6:	77 24                	ja     c0101cdc <ide_read_secs+0x3c>
c0101cb8:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101cbd:	77 1d                	ja     c0101cdc <ide_read_secs+0x3c>
c0101cbf:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101cc3:	c1 e0 03             	shl    $0x3,%eax
c0101cc6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ccd:	29 c2                	sub    %eax,%edx
c0101ccf:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101cd5:	0f b6 00             	movzbl (%eax),%eax
c0101cd8:	84 c0                	test   %al,%al
c0101cda:	75 24                	jne    c0101d00 <ide_read_secs+0x60>
c0101cdc:	c7 44 24 0c 98 54 11 	movl   $0xc0115498,0xc(%esp)
c0101ce3:	c0 
c0101ce4:	c7 44 24 08 53 54 11 	movl   $0xc0115453,0x8(%esp)
c0101ceb:	c0 
c0101cec:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101cf3:	00 
c0101cf4:	c7 04 24 68 54 11 c0 	movl   $0xc0115468,(%esp)
c0101cfb:	e8 c8 f1 ff ff       	call   c0100ec8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101d00:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101d07:	77 0f                	ja     c0101d18 <ide_read_secs+0x78>
c0101d09:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d0c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101d0f:	01 d0                	add    %edx,%eax
c0101d11:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101d16:	76 24                	jbe    c0101d3c <ide_read_secs+0x9c>
c0101d18:	c7 44 24 0c c0 54 11 	movl   $0xc01154c0,0xc(%esp)
c0101d1f:	c0 
c0101d20:	c7 44 24 08 53 54 11 	movl   $0xc0115453,0x8(%esp)
c0101d27:	c0 
c0101d28:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101d2f:	00 
c0101d30:	c7 04 24 68 54 11 c0 	movl   $0xc0115468,(%esp)
c0101d37:	e8 8c f1 ff ff       	call   c0100ec8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101d3c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d40:	66 d1 e8             	shr    %ax
c0101d43:	0f b7 c0             	movzwl %ax,%eax
c0101d46:	0f b7 04 85 08 54 11 	movzwl -0x3feeabf8(,%eax,4),%eax
c0101d4d:	c0 
c0101d4e:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101d52:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d56:	66 d1 e8             	shr    %ax
c0101d59:	0f b7 c0             	movzwl %ax,%eax
c0101d5c:	0f b7 04 85 0a 54 11 	movzwl -0x3feeabf6(,%eax,4),%eax
c0101d63:	c0 
c0101d64:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101d68:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d6c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101d73:	00 
c0101d74:	89 04 24             	mov    %eax,(%esp)
c0101d77:	e8 33 fb ff ff       	call   c01018af <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101d7c:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101d80:	83 c0 02             	add    $0x2,%eax
c0101d83:	0f b7 c0             	movzwl %ax,%eax
c0101d86:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101d8a:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d8e:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101d92:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101d96:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101d97:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d9a:	0f b6 c0             	movzbl %al,%eax
c0101d9d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101da1:	83 c2 02             	add    $0x2,%edx
c0101da4:	0f b7 d2             	movzwl %dx,%edx
c0101da7:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101dab:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101dae:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101db2:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101db6:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101db7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dba:	0f b6 c0             	movzbl %al,%eax
c0101dbd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101dc1:	83 c2 03             	add    $0x3,%edx
c0101dc4:	0f b7 d2             	movzwl %dx,%edx
c0101dc7:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101dcb:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101dce:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101dd2:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101dd6:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101dd7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dda:	c1 e8 08             	shr    $0x8,%eax
c0101ddd:	0f b6 c0             	movzbl %al,%eax
c0101de0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101de4:	83 c2 04             	add    $0x4,%edx
c0101de7:	0f b7 d2             	movzwl %dx,%edx
c0101dea:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101dee:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101df1:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101df5:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101df9:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101dfa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dfd:	c1 e8 10             	shr    $0x10,%eax
c0101e00:	0f b6 c0             	movzbl %al,%eax
c0101e03:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e07:	83 c2 05             	add    $0x5,%edx
c0101e0a:	0f b7 d2             	movzwl %dx,%edx
c0101e0d:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101e11:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101e14:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101e18:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101e1c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101e1d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e21:	83 e0 01             	and    $0x1,%eax
c0101e24:	c1 e0 04             	shl    $0x4,%eax
c0101e27:	89 c2                	mov    %eax,%edx
c0101e29:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e2c:	c1 e8 18             	shr    $0x18,%eax
c0101e2f:	83 e0 0f             	and    $0xf,%eax
c0101e32:	09 d0                	or     %edx,%eax
c0101e34:	83 c8 e0             	or     $0xffffffe0,%eax
c0101e37:	0f b6 c0             	movzbl %al,%eax
c0101e3a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e3e:	83 c2 06             	add    $0x6,%edx
c0101e41:	0f b7 d2             	movzwl %dx,%edx
c0101e44:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101e48:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101e4b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101e4f:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101e53:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101e54:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e58:	83 c0 07             	add    $0x7,%eax
c0101e5b:	0f b7 c0             	movzwl %ax,%eax
c0101e5e:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101e62:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101e66:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101e6a:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101e6e:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101e6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101e76:	eb 5a                	jmp    c0101ed2 <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101e78:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e7c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101e83:	00 
c0101e84:	89 04 24             	mov    %eax,(%esp)
c0101e87:	e8 23 fa ff ff       	call   c01018af <ide_wait_ready>
c0101e8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101e8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101e93:	74 02                	je     c0101e97 <ide_read_secs+0x1f7>
            goto out;
c0101e95:	eb 41                	jmp    c0101ed8 <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101e97:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101e9e:	8b 45 10             	mov    0x10(%ebp),%eax
c0101ea1:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101ea4:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101eab:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101eae:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101eb1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101eb4:	89 cb                	mov    %ecx,%ebx
c0101eb6:	89 df                	mov    %ebx,%edi
c0101eb8:	89 c1                	mov    %eax,%ecx
c0101eba:	fc                   	cld    
c0101ebb:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101ebd:	89 c8                	mov    %ecx,%eax
c0101ebf:	89 fb                	mov    %edi,%ebx
c0101ec1:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101ec4:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101ec7:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101ecb:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101ed2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101ed6:	75 a0                	jne    c0101e78 <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101ed8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101edb:	83 c4 50             	add    $0x50,%esp
c0101ede:	5b                   	pop    %ebx
c0101edf:	5f                   	pop    %edi
c0101ee0:	5d                   	pop    %ebp
c0101ee1:	c3                   	ret    

c0101ee2 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101ee2:	55                   	push   %ebp
c0101ee3:	89 e5                	mov    %esp,%ebp
c0101ee5:	56                   	push   %esi
c0101ee6:	53                   	push   %ebx
c0101ee7:	83 ec 50             	sub    $0x50,%esp
c0101eea:	8b 45 08             	mov    0x8(%ebp),%eax
c0101eed:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101ef1:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101ef8:	77 24                	ja     c0101f1e <ide_write_secs+0x3c>
c0101efa:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101eff:	77 1d                	ja     c0101f1e <ide_write_secs+0x3c>
c0101f01:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f05:	c1 e0 03             	shl    $0x3,%eax
c0101f08:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101f0f:	29 c2                	sub    %eax,%edx
c0101f11:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101f17:	0f b6 00             	movzbl (%eax),%eax
c0101f1a:	84 c0                	test   %al,%al
c0101f1c:	75 24                	jne    c0101f42 <ide_write_secs+0x60>
c0101f1e:	c7 44 24 0c 98 54 11 	movl   $0xc0115498,0xc(%esp)
c0101f25:	c0 
c0101f26:	c7 44 24 08 53 54 11 	movl   $0xc0115453,0x8(%esp)
c0101f2d:	c0 
c0101f2e:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101f35:	00 
c0101f36:	c7 04 24 68 54 11 c0 	movl   $0xc0115468,(%esp)
c0101f3d:	e8 86 ef ff ff       	call   c0100ec8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101f42:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101f49:	77 0f                	ja     c0101f5a <ide_write_secs+0x78>
c0101f4b:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f4e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101f51:	01 d0                	add    %edx,%eax
c0101f53:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101f58:	76 24                	jbe    c0101f7e <ide_write_secs+0x9c>
c0101f5a:	c7 44 24 0c c0 54 11 	movl   $0xc01154c0,0xc(%esp)
c0101f61:	c0 
c0101f62:	c7 44 24 08 53 54 11 	movl   $0xc0115453,0x8(%esp)
c0101f69:	c0 
c0101f6a:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101f71:	00 
c0101f72:	c7 04 24 68 54 11 c0 	movl   $0xc0115468,(%esp)
c0101f79:	e8 4a ef ff ff       	call   c0100ec8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101f7e:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f82:	66 d1 e8             	shr    %ax
c0101f85:	0f b7 c0             	movzwl %ax,%eax
c0101f88:	0f b7 04 85 08 54 11 	movzwl -0x3feeabf8(,%eax,4),%eax
c0101f8f:	c0 
c0101f90:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101f94:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f98:	66 d1 e8             	shr    %ax
c0101f9b:	0f b7 c0             	movzwl %ax,%eax
c0101f9e:	0f b7 04 85 0a 54 11 	movzwl -0x3feeabf6(,%eax,4),%eax
c0101fa5:	c0 
c0101fa6:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101faa:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fae:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101fb5:	00 
c0101fb6:	89 04 24             	mov    %eax,(%esp)
c0101fb9:	e8 f1 f8 ff ff       	call   c01018af <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101fbe:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101fc2:	83 c0 02             	add    $0x2,%eax
c0101fc5:	0f b7 c0             	movzwl %ax,%eax
c0101fc8:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101fcc:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101fd0:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101fd4:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101fd8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101fd9:	8b 45 14             	mov    0x14(%ebp),%eax
c0101fdc:	0f b6 c0             	movzbl %al,%eax
c0101fdf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101fe3:	83 c2 02             	add    $0x2,%edx
c0101fe6:	0f b7 d2             	movzwl %dx,%edx
c0101fe9:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101fed:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101ff0:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ff4:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101ff8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101ff9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ffc:	0f b6 c0             	movzbl %al,%eax
c0101fff:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102003:	83 c2 03             	add    $0x3,%edx
c0102006:	0f b7 d2             	movzwl %dx,%edx
c0102009:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010200d:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0102010:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102014:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102018:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0102019:	8b 45 0c             	mov    0xc(%ebp),%eax
c010201c:	c1 e8 08             	shr    $0x8,%eax
c010201f:	0f b6 c0             	movzbl %al,%eax
c0102022:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102026:	83 c2 04             	add    $0x4,%edx
c0102029:	0f b7 d2             	movzwl %dx,%edx
c010202c:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0102030:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0102033:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102037:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010203b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010203c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010203f:	c1 e8 10             	shr    $0x10,%eax
c0102042:	0f b6 c0             	movzbl %al,%eax
c0102045:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102049:	83 c2 05             	add    $0x5,%edx
c010204c:	0f b7 d2             	movzwl %dx,%edx
c010204f:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0102053:	88 45 dd             	mov    %al,-0x23(%ebp)
c0102056:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010205a:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010205e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c010205f:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0102063:	83 e0 01             	and    $0x1,%eax
c0102066:	c1 e0 04             	shl    $0x4,%eax
c0102069:	89 c2                	mov    %eax,%edx
c010206b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010206e:	c1 e8 18             	shr    $0x18,%eax
c0102071:	83 e0 0f             	and    $0xf,%eax
c0102074:	09 d0                	or     %edx,%eax
c0102076:	83 c8 e0             	or     $0xffffffe0,%eax
c0102079:	0f b6 c0             	movzbl %al,%eax
c010207c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102080:	83 c2 06             	add    $0x6,%edx
c0102083:	0f b7 d2             	movzwl %dx,%edx
c0102086:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c010208a:	88 45 d9             	mov    %al,-0x27(%ebp)
c010208d:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102091:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102095:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0102096:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010209a:	83 c0 07             	add    $0x7,%eax
c010209d:	0f b7 c0             	movzwl %ax,%eax
c01020a0:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c01020a4:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c01020a8:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01020ac:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01020b0:	ee                   	out    %al,(%dx)

    int ret = 0;
c01020b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01020b8:	eb 5a                	jmp    c0102114 <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01020ba:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020be:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01020c5:	00 
c01020c6:	89 04 24             	mov    %eax,(%esp)
c01020c9:	e8 e1 f7 ff ff       	call   c01018af <ide_wait_ready>
c01020ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01020d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01020d5:	74 02                	je     c01020d9 <ide_write_secs+0x1f7>
            goto out;
c01020d7:	eb 41                	jmp    c010211a <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c01020d9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01020e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01020e3:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01020e6:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c01020ed:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01020f0:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01020f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01020f6:	89 cb                	mov    %ecx,%ebx
c01020f8:	89 de                	mov    %ebx,%esi
c01020fa:	89 c1                	mov    %eax,%ecx
c01020fc:	fc                   	cld    
c01020fd:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c01020ff:	89 c8                	mov    %ecx,%eax
c0102101:	89 f3                	mov    %esi,%ebx
c0102103:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0102106:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102109:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c010210d:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0102114:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102118:	75 a0                	jne    c01020ba <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c010211a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010211d:	83 c4 50             	add    $0x50,%esp
c0102120:	5b                   	pop    %ebx
c0102121:	5e                   	pop    %esi
c0102122:	5d                   	pop    %ebp
c0102123:	c3                   	ret    

c0102124 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c0102124:	55                   	push   %ebp
c0102125:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c0102127:	fb                   	sti    
    sti();
}
c0102128:	5d                   	pop    %ebp
c0102129:	c3                   	ret    

c010212a <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c010212a:	55                   	push   %ebp
c010212b:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c010212d:	fa                   	cli    
    cli();
}
c010212e:	5d                   	pop    %ebp
c010212f:	c3                   	ret    

c0102130 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102130:	55                   	push   %ebp
c0102131:	89 e5                	mov    %esp,%ebp
c0102133:	83 ec 14             	sub    $0x14,%esp
c0102136:	8b 45 08             	mov    0x8(%ebp),%eax
c0102139:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c010213d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102141:	66 a3 70 e5 14 c0    	mov    %ax,0xc014e570
    if (did_init) {
c0102147:	a1 40 f6 14 c0       	mov    0xc014f640,%eax
c010214c:	85 c0                	test   %eax,%eax
c010214e:	74 36                	je     c0102186 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102150:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102154:	0f b6 c0             	movzbl %al,%eax
c0102157:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010215d:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102160:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102164:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102168:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102169:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010216d:	66 c1 e8 08          	shr    $0x8,%ax
c0102171:	0f b6 c0             	movzbl %al,%eax
c0102174:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c010217a:	88 45 f9             	mov    %al,-0x7(%ebp)
c010217d:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102181:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102185:	ee                   	out    %al,(%dx)
    }
}
c0102186:	c9                   	leave  
c0102187:	c3                   	ret    

c0102188 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102188:	55                   	push   %ebp
c0102189:	89 e5                	mov    %esp,%ebp
c010218b:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c010218e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102191:	ba 01 00 00 00       	mov    $0x1,%edx
c0102196:	89 c1                	mov    %eax,%ecx
c0102198:	d3 e2                	shl    %cl,%edx
c010219a:	89 d0                	mov    %edx,%eax
c010219c:	f7 d0                	not    %eax
c010219e:	89 c2                	mov    %eax,%edx
c01021a0:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c01021a7:	21 d0                	and    %edx,%eax
c01021a9:	0f b7 c0             	movzwl %ax,%eax
c01021ac:	89 04 24             	mov    %eax,(%esp)
c01021af:	e8 7c ff ff ff       	call   c0102130 <pic_setmask>
}
c01021b4:	c9                   	leave  
c01021b5:	c3                   	ret    

c01021b6 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01021b6:	55                   	push   %ebp
c01021b7:	89 e5                	mov    %esp,%ebp
c01021b9:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01021bc:	c7 05 40 f6 14 c0 01 	movl   $0x1,0xc014f640
c01021c3:	00 00 00 
c01021c6:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01021cc:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01021d0:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01021d4:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01021d8:	ee                   	out    %al,(%dx)
c01021d9:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01021df:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01021e3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01021e7:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01021eb:	ee                   	out    %al,(%dx)
c01021ec:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01021f2:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01021f6:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01021fa:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01021fe:	ee                   	out    %al,(%dx)
c01021ff:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c0102205:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0102209:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010220d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102211:	ee                   	out    %al,(%dx)
c0102212:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c0102218:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c010221c:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102220:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102224:	ee                   	out    %al,(%dx)
c0102225:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c010222b:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c010222f:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102233:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102237:	ee                   	out    %al,(%dx)
c0102238:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c010223e:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102242:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102246:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010224a:	ee                   	out    %al,(%dx)
c010224b:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102251:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c0102255:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102259:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010225d:	ee                   	out    %al,(%dx)
c010225e:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c0102264:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c0102268:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010226c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102270:	ee                   	out    %al,(%dx)
c0102271:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c0102277:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c010227b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010227f:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102283:	ee                   	out    %al,(%dx)
c0102284:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c010228a:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c010228e:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102292:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0102296:	ee                   	out    %al,(%dx)
c0102297:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c010229d:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01022a1:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01022a5:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01022a9:	ee                   	out    %al,(%dx)
c01022aa:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01022b0:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01022b4:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01022b8:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01022bc:	ee                   	out    %al,(%dx)
c01022bd:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01022c3:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01022c7:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01022cb:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01022cf:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01022d0:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c01022d7:	66 83 f8 ff          	cmp    $0xffff,%ax
c01022db:	74 12                	je     c01022ef <pic_init+0x139>
        pic_setmask(irq_mask);
c01022dd:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c01022e4:	0f b7 c0             	movzwl %ax,%eax
c01022e7:	89 04 24             	mov    %eax,(%esp)
c01022ea:	e8 41 fe ff ff       	call   c0102130 <pic_setmask>
    }
}
c01022ef:	c9                   	leave  
c01022f0:	c3                   	ret    

c01022f1 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01022f1:	55                   	push   %ebp
c01022f2:	89 e5                	mov    %esp,%ebp
c01022f4:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01022f7:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01022fe:	00 
c01022ff:	c7 04 24 00 55 11 c0 	movl   $0xc0115500,(%esp)
c0102306:	e8 5a e0 ff ff       	call   c0100365 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c010230b:	c7 04 24 0a 55 11 c0 	movl   $0xc011550a,(%esp)
c0102312:	e8 4e e0 ff ff       	call   c0100365 <cprintf>
    panic("EOT: kernel seems ok.");
c0102317:	c7 44 24 08 18 55 11 	movl   $0xc0115518,0x8(%esp)
c010231e:	c0 
c010231f:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c0102326:	00 
c0102327:	c7 04 24 2e 55 11 c0 	movl   $0xc011552e,(%esp)
c010232e:	e8 95 eb ff ff       	call   c0100ec8 <__panic>

c0102333 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0102333:	55                   	push   %ebp
c0102334:	89 e5                	mov    %esp,%ebp
c0102336:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 2012012017 */
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < 256; i++)
c0102339:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102340:	e9 e2 00 00 00       	jmp    c0102427 <idt_init+0xf4>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], i == T_SYSCALL ? DPL_USER : DPL_KERNEL);
c0102345:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102348:	8b 04 85 00 e6 14 c0 	mov    -0x3feb1a00(,%eax,4),%eax
c010234f:	89 c2                	mov    %eax,%edx
c0102351:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102354:	66 89 14 c5 60 f6 14 	mov    %dx,-0x3feb09a0(,%eax,8)
c010235b:	c0 
c010235c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010235f:	66 c7 04 c5 62 f6 14 	movw   $0x8,-0x3feb099e(,%eax,8)
c0102366:	c0 08 00 
c0102369:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010236c:	0f b6 14 c5 64 f6 14 	movzbl -0x3feb099c(,%eax,8),%edx
c0102373:	c0 
c0102374:	83 e2 e0             	and    $0xffffffe0,%edx
c0102377:	88 14 c5 64 f6 14 c0 	mov    %dl,-0x3feb099c(,%eax,8)
c010237e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102381:	0f b6 14 c5 64 f6 14 	movzbl -0x3feb099c(,%eax,8),%edx
c0102388:	c0 
c0102389:	83 e2 1f             	and    $0x1f,%edx
c010238c:	88 14 c5 64 f6 14 c0 	mov    %dl,-0x3feb099c(,%eax,8)
c0102393:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102396:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c010239d:	c0 
c010239e:	83 e2 f0             	and    $0xfffffff0,%edx
c01023a1:	83 ca 0e             	or     $0xe,%edx
c01023a4:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c01023ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023ae:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c01023b5:	c0 
c01023b6:	83 e2 ef             	and    $0xffffffef,%edx
c01023b9:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c01023c0:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%ebp)
c01023c7:	75 07                	jne    c01023d0 <idt_init+0x9d>
c01023c9:	ba 03 00 00 00       	mov    $0x3,%edx
c01023ce:	eb 05                	jmp    c01023d5 <idt_init+0xa2>
c01023d0:	ba 00 00 00 00       	mov    $0x0,%edx
c01023d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023d8:	83 e2 03             	and    $0x3,%edx
c01023db:	89 d1                	mov    %edx,%ecx
c01023dd:	c1 e1 05             	shl    $0x5,%ecx
c01023e0:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c01023e7:	c0 
c01023e8:	83 e2 9f             	and    $0xffffff9f,%edx
c01023eb:	09 ca                	or     %ecx,%edx
c01023ed:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c01023f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023f7:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c01023fe:	c0 
c01023ff:	83 ca 80             	or     $0xffffff80,%edx
c0102402:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c0102409:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010240c:	8b 04 85 00 e6 14 c0 	mov    -0x3feb1a00(,%eax,4),%eax
c0102413:	c1 e8 10             	shr    $0x10,%eax
c0102416:	89 c2                	mov    %eax,%edx
c0102418:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010241b:	66 89 14 c5 66 f6 14 	mov    %dx,-0x3feb099a(,%eax,8)
c0102422:	c0 
     /* LAB5 2012012017 */
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < 256; i++)
c0102423:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102427:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c010242e:	0f 8e 11 ff ff ff    	jle    c0102345 <idt_init+0x12>
c0102434:	c7 45 f8 80 e5 14 c0 	movl   $0xc014e580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c010243b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010243e:	0f 01 18             	lidtl  (%eax)
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], i == T_SYSCALL ? DPL_USER : DPL_KERNEL);
    lidt(&idt_pd);
}
c0102441:	c9                   	leave  
c0102442:	c3                   	ret    

c0102443 <trapname>:

static const char *
trapname(int trapno) {
c0102443:	55                   	push   %ebp
c0102444:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c0102446:	8b 45 08             	mov    0x8(%ebp),%eax
c0102449:	83 f8 13             	cmp    $0x13,%eax
c010244c:	77 0c                	ja     c010245a <trapname+0x17>
        return excnames[trapno];
c010244e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102451:	8b 04 85 80 59 11 c0 	mov    -0x3feea680(,%eax,4),%eax
c0102458:	eb 18                	jmp    c0102472 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c010245a:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c010245e:	7e 0d                	jle    c010246d <trapname+0x2a>
c0102460:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0102464:	7f 07                	jg     c010246d <trapname+0x2a>
        return "Hardware Interrupt";
c0102466:	b8 3f 55 11 c0       	mov    $0xc011553f,%eax
c010246b:	eb 05                	jmp    c0102472 <trapname+0x2f>
    }
    return "(unknown trap)";
c010246d:	b8 52 55 11 c0       	mov    $0xc0115552,%eax
}
c0102472:	5d                   	pop    %ebp
c0102473:	c3                   	ret    

c0102474 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0102474:	55                   	push   %ebp
c0102475:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c0102477:	8b 45 08             	mov    0x8(%ebp),%eax
c010247a:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010247e:	66 83 f8 08          	cmp    $0x8,%ax
c0102482:	0f 94 c0             	sete   %al
c0102485:	0f b6 c0             	movzbl %al,%eax
}
c0102488:	5d                   	pop    %ebp
c0102489:	c3                   	ret    

c010248a <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c010248a:	55                   	push   %ebp
c010248b:	89 e5                	mov    %esp,%ebp
c010248d:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c0102490:	8b 45 08             	mov    0x8(%ebp),%eax
c0102493:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102497:	c7 04 24 93 55 11 c0 	movl   $0xc0115593,(%esp)
c010249e:	e8 c2 de ff ff       	call   c0100365 <cprintf>
    print_regs(&tf->tf_regs);
c01024a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a6:	89 04 24             	mov    %eax,(%esp)
c01024a9:	e8 a1 01 00 00       	call   c010264f <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01024ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01024b1:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01024b5:	0f b7 c0             	movzwl %ax,%eax
c01024b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024bc:	c7 04 24 a4 55 11 c0 	movl   $0xc01155a4,(%esp)
c01024c3:	e8 9d de ff ff       	call   c0100365 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c01024c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01024cb:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c01024cf:	0f b7 c0             	movzwl %ax,%eax
c01024d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024d6:	c7 04 24 b7 55 11 c0 	movl   $0xc01155b7,(%esp)
c01024dd:	e8 83 de ff ff       	call   c0100365 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c01024e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01024e5:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c01024e9:	0f b7 c0             	movzwl %ax,%eax
c01024ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024f0:	c7 04 24 ca 55 11 c0 	movl   $0xc01155ca,(%esp)
c01024f7:	e8 69 de ff ff       	call   c0100365 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c01024fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ff:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102503:	0f b7 c0             	movzwl %ax,%eax
c0102506:	89 44 24 04          	mov    %eax,0x4(%esp)
c010250a:	c7 04 24 dd 55 11 c0 	movl   $0xc01155dd,(%esp)
c0102511:	e8 4f de ff ff       	call   c0100365 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0102516:	8b 45 08             	mov    0x8(%ebp),%eax
c0102519:	8b 40 30             	mov    0x30(%eax),%eax
c010251c:	89 04 24             	mov    %eax,(%esp)
c010251f:	e8 1f ff ff ff       	call   c0102443 <trapname>
c0102524:	8b 55 08             	mov    0x8(%ebp),%edx
c0102527:	8b 52 30             	mov    0x30(%edx),%edx
c010252a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010252e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102532:	c7 04 24 f0 55 11 c0 	movl   $0xc01155f0,(%esp)
c0102539:	e8 27 de ff ff       	call   c0100365 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c010253e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102541:	8b 40 34             	mov    0x34(%eax),%eax
c0102544:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102548:	c7 04 24 02 56 11 c0 	movl   $0xc0115602,(%esp)
c010254f:	e8 11 de ff ff       	call   c0100365 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0102554:	8b 45 08             	mov    0x8(%ebp),%eax
c0102557:	8b 40 38             	mov    0x38(%eax),%eax
c010255a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010255e:	c7 04 24 11 56 11 c0 	movl   $0xc0115611,(%esp)
c0102565:	e8 fb dd ff ff       	call   c0100365 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c010256a:	8b 45 08             	mov    0x8(%ebp),%eax
c010256d:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102571:	0f b7 c0             	movzwl %ax,%eax
c0102574:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102578:	c7 04 24 20 56 11 c0 	movl   $0xc0115620,(%esp)
c010257f:	e8 e1 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c0102584:	8b 45 08             	mov    0x8(%ebp),%eax
c0102587:	8b 40 40             	mov    0x40(%eax),%eax
c010258a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010258e:	c7 04 24 33 56 11 c0 	movl   $0xc0115633,(%esp)
c0102595:	e8 cb dd ff ff       	call   c0100365 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010259a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01025a1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01025a8:	eb 3e                	jmp    c01025e8 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01025aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ad:	8b 50 40             	mov    0x40(%eax),%edx
c01025b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025b3:	21 d0                	and    %edx,%eax
c01025b5:	85 c0                	test   %eax,%eax
c01025b7:	74 28                	je     c01025e1 <print_trapframe+0x157>
c01025b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025bc:	8b 04 85 a0 e5 14 c0 	mov    -0x3feb1a60(,%eax,4),%eax
c01025c3:	85 c0                	test   %eax,%eax
c01025c5:	74 1a                	je     c01025e1 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c01025c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025ca:	8b 04 85 a0 e5 14 c0 	mov    -0x3feb1a60(,%eax,4),%eax
c01025d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025d5:	c7 04 24 42 56 11 c0 	movl   $0xc0115642,(%esp)
c01025dc:	e8 84 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01025e1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01025e5:	d1 65 f0             	shll   -0x10(%ebp)
c01025e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025eb:	83 f8 17             	cmp    $0x17,%eax
c01025ee:	76 ba                	jbe    c01025aa <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c01025f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01025f3:	8b 40 40             	mov    0x40(%eax),%eax
c01025f6:	25 00 30 00 00       	and    $0x3000,%eax
c01025fb:	c1 e8 0c             	shr    $0xc,%eax
c01025fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102602:	c7 04 24 46 56 11 c0 	movl   $0xc0115646,(%esp)
c0102609:	e8 57 dd ff ff       	call   c0100365 <cprintf>

    if (!trap_in_kernel(tf)) {
c010260e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102611:	89 04 24             	mov    %eax,(%esp)
c0102614:	e8 5b fe ff ff       	call   c0102474 <trap_in_kernel>
c0102619:	85 c0                	test   %eax,%eax
c010261b:	75 30                	jne    c010264d <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c010261d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102620:	8b 40 44             	mov    0x44(%eax),%eax
c0102623:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102627:	c7 04 24 4f 56 11 c0 	movl   $0xc011564f,(%esp)
c010262e:	e8 32 dd ff ff       	call   c0100365 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0102633:	8b 45 08             	mov    0x8(%ebp),%eax
c0102636:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c010263a:	0f b7 c0             	movzwl %ax,%eax
c010263d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102641:	c7 04 24 5e 56 11 c0 	movl   $0xc011565e,(%esp)
c0102648:	e8 18 dd ff ff       	call   c0100365 <cprintf>
    }
}
c010264d:	c9                   	leave  
c010264e:	c3                   	ret    

c010264f <print_regs>:

void
print_regs(struct pushregs *regs) {
c010264f:	55                   	push   %ebp
c0102650:	89 e5                	mov    %esp,%ebp
c0102652:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102655:	8b 45 08             	mov    0x8(%ebp),%eax
c0102658:	8b 00                	mov    (%eax),%eax
c010265a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010265e:	c7 04 24 71 56 11 c0 	movl   $0xc0115671,(%esp)
c0102665:	e8 fb dc ff ff       	call   c0100365 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c010266a:	8b 45 08             	mov    0x8(%ebp),%eax
c010266d:	8b 40 04             	mov    0x4(%eax),%eax
c0102670:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102674:	c7 04 24 80 56 11 c0 	movl   $0xc0115680,(%esp)
c010267b:	e8 e5 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0102680:	8b 45 08             	mov    0x8(%ebp),%eax
c0102683:	8b 40 08             	mov    0x8(%eax),%eax
c0102686:	89 44 24 04          	mov    %eax,0x4(%esp)
c010268a:	c7 04 24 8f 56 11 c0 	movl   $0xc011568f,(%esp)
c0102691:	e8 cf dc ff ff       	call   c0100365 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0102696:	8b 45 08             	mov    0x8(%ebp),%eax
c0102699:	8b 40 0c             	mov    0xc(%eax),%eax
c010269c:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026a0:	c7 04 24 9e 56 11 c0 	movl   $0xc011569e,(%esp)
c01026a7:	e8 b9 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01026ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01026af:	8b 40 10             	mov    0x10(%eax),%eax
c01026b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026b6:	c7 04 24 ad 56 11 c0 	movl   $0xc01156ad,(%esp)
c01026bd:	e8 a3 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c01026c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01026c5:	8b 40 14             	mov    0x14(%eax),%eax
c01026c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026cc:	c7 04 24 bc 56 11 c0 	movl   $0xc01156bc,(%esp)
c01026d3:	e8 8d dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c01026d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01026db:	8b 40 18             	mov    0x18(%eax),%eax
c01026de:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026e2:	c7 04 24 cb 56 11 c0 	movl   $0xc01156cb,(%esp)
c01026e9:	e8 77 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c01026ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01026f1:	8b 40 1c             	mov    0x1c(%eax),%eax
c01026f4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026f8:	c7 04 24 da 56 11 c0 	movl   $0xc01156da,(%esp)
c01026ff:	e8 61 dc ff ff       	call   c0100365 <cprintf>
}
c0102704:	c9                   	leave  
c0102705:	c3                   	ret    

c0102706 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0102706:	55                   	push   %ebp
c0102707:	89 e5                	mov    %esp,%ebp
c0102709:	53                   	push   %ebx
c010270a:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c010270d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102710:	8b 40 34             	mov    0x34(%eax),%eax
c0102713:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102716:	85 c0                	test   %eax,%eax
c0102718:	74 07                	je     c0102721 <print_pgfault+0x1b>
c010271a:	b9 e9 56 11 c0       	mov    $0xc01156e9,%ecx
c010271f:	eb 05                	jmp    c0102726 <print_pgfault+0x20>
c0102721:	b9 fa 56 11 c0       	mov    $0xc01156fa,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0102726:	8b 45 08             	mov    0x8(%ebp),%eax
c0102729:	8b 40 34             	mov    0x34(%eax),%eax
c010272c:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010272f:	85 c0                	test   %eax,%eax
c0102731:	74 07                	je     c010273a <print_pgfault+0x34>
c0102733:	ba 57 00 00 00       	mov    $0x57,%edx
c0102738:	eb 05                	jmp    c010273f <print_pgfault+0x39>
c010273a:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c010273f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102742:	8b 40 34             	mov    0x34(%eax),%eax
c0102745:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102748:	85 c0                	test   %eax,%eax
c010274a:	74 07                	je     c0102753 <print_pgfault+0x4d>
c010274c:	b8 55 00 00 00       	mov    $0x55,%eax
c0102751:	eb 05                	jmp    c0102758 <print_pgfault+0x52>
c0102753:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102758:	0f 20 d3             	mov    %cr2,%ebx
c010275b:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c010275e:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0102761:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0102765:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0102769:	89 44 24 08          	mov    %eax,0x8(%esp)
c010276d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0102771:	c7 04 24 08 57 11 c0 	movl   $0xc0115708,(%esp)
c0102778:	e8 e8 db ff ff       	call   c0100365 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c010277d:	83 c4 34             	add    $0x34,%esp
c0102780:	5b                   	pop    %ebx
c0102781:	5d                   	pop    %ebp
c0102782:	c3                   	ret    

c0102783 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0102783:	55                   	push   %ebp
c0102784:	89 e5                	mov    %esp,%ebp
c0102786:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0102789:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c010278e:	85 c0                	test   %eax,%eax
c0102790:	74 0b                	je     c010279d <pgfault_handler+0x1a>
            print_pgfault(tf);
c0102792:	8b 45 08             	mov    0x8(%ebp),%eax
c0102795:	89 04 24             	mov    %eax,(%esp)
c0102798:	e8 69 ff ff ff       	call   c0102706 <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c010279d:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01027a2:	85 c0                	test   %eax,%eax
c01027a4:	74 3d                	je     c01027e3 <pgfault_handler+0x60>
        assert(current == idleproc);
c01027a6:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c01027ac:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c01027b1:	39 c2                	cmp    %eax,%edx
c01027b3:	74 24                	je     c01027d9 <pgfault_handler+0x56>
c01027b5:	c7 44 24 0c 2b 57 11 	movl   $0xc011572b,0xc(%esp)
c01027bc:	c0 
c01027bd:	c7 44 24 08 3f 57 11 	movl   $0xc011573f,0x8(%esp)
c01027c4:	c0 
c01027c5:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c01027cc:	00 
c01027cd:	c7 04 24 2e 55 11 c0 	movl   $0xc011552e,(%esp)
c01027d4:	e8 ef e6 ff ff       	call   c0100ec8 <__panic>
        mm = check_mm_struct;
c01027d9:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01027de:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01027e1:	eb 46                	jmp    c0102829 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c01027e3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01027e8:	85 c0                	test   %eax,%eax
c01027ea:	75 32                	jne    c010281e <pgfault_handler+0x9b>
            print_trapframe(tf);
c01027ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01027ef:	89 04 24             	mov    %eax,(%esp)
c01027f2:	e8 93 fc ff ff       	call   c010248a <print_trapframe>
            print_pgfault(tf);
c01027f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01027fa:	89 04 24             	mov    %eax,(%esp)
c01027fd:	e8 04 ff ff ff       	call   c0102706 <print_pgfault>
            panic("unhandled page fault.\n");
c0102802:	c7 44 24 08 54 57 11 	movl   $0xc0115754,0x8(%esp)
c0102809:	c0 
c010280a:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c0102811:	00 
c0102812:	c7 04 24 2e 55 11 c0 	movl   $0xc011552e,(%esp)
c0102819:	e8 aa e6 ff ff       	call   c0100ec8 <__panic>
        }
        mm = current->mm;
c010281e:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102823:	8b 40 18             	mov    0x18(%eax),%eax
c0102826:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102829:	0f 20 d0             	mov    %cr2,%eax
c010282c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c010282f:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0102832:	89 c2                	mov    %eax,%edx
c0102834:	8b 45 08             	mov    0x8(%ebp),%eax
c0102837:	8b 40 34             	mov    0x34(%eax),%eax
c010283a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010283e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102842:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102845:	89 04 24             	mov    %eax,(%esp)
c0102848:	e8 a7 62 00 00       	call   c0108af4 <do_pgfault>
}
c010284d:	c9                   	leave  
c010284e:	c3                   	ret    

c010284f <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c010284f:	55                   	push   %ebp
c0102850:	89 e5                	mov    %esp,%ebp
c0102852:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c0102855:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c010285c:	8b 45 08             	mov    0x8(%ebp),%eax
c010285f:	8b 40 30             	mov    0x30(%eax),%eax
c0102862:	83 f8 2f             	cmp    $0x2f,%eax
c0102865:	77 38                	ja     c010289f <trap_dispatch+0x50>
c0102867:	83 f8 2e             	cmp    $0x2e,%eax
c010286a:	0f 83 9e 01 00 00    	jae    c0102a0e <trap_dispatch+0x1bf>
c0102870:	83 f8 20             	cmp    $0x20,%eax
c0102873:	0f 84 07 01 00 00    	je     c0102980 <trap_dispatch+0x131>
c0102879:	83 f8 20             	cmp    $0x20,%eax
c010287c:	77 0a                	ja     c0102888 <trap_dispatch+0x39>
c010287e:	83 f8 0e             	cmp    $0xe,%eax
c0102881:	74 3e                	je     c01028c1 <trap_dispatch+0x72>
c0102883:	e9 3e 01 00 00       	jmp    c01029c6 <trap_dispatch+0x177>
c0102888:	83 f8 21             	cmp    $0x21,%eax
c010288b:	0f 84 03 01 00 00    	je     c0102994 <trap_dispatch+0x145>
c0102891:	83 f8 24             	cmp    $0x24,%eax
c0102894:	0f 84 fa 00 00 00    	je     c0102994 <trap_dispatch+0x145>
c010289a:	e9 27 01 00 00       	jmp    c01029c6 <trap_dispatch+0x177>
c010289f:	83 f8 78             	cmp    $0x78,%eax
c01028a2:	0f 82 1e 01 00 00    	jb     c01029c6 <trap_dispatch+0x177>
c01028a8:	83 f8 79             	cmp    $0x79,%eax
c01028ab:	0f 86 f9 00 00 00    	jbe    c01029aa <trap_dispatch+0x15b>
c01028b1:	3d 80 00 00 00       	cmp    $0x80,%eax
c01028b6:	0f 84 ba 00 00 00    	je     c0102976 <trap_dispatch+0x127>
c01028bc:	e9 05 01 00 00       	jmp    c01029c6 <trap_dispatch+0x177>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c01028c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01028c4:	89 04 24             	mov    %eax,(%esp)
c01028c7:	e8 b7 fe ff ff       	call   c0102783 <pgfault_handler>
c01028cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01028cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01028d3:	0f 84 98 00 00 00    	je     c0102971 <trap_dispatch+0x122>
            print_trapframe(tf);
c01028d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01028dc:	89 04 24             	mov    %eax,(%esp)
c01028df:	e8 a6 fb ff ff       	call   c010248a <print_trapframe>
            if (current == NULL) {
c01028e4:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01028e9:	85 c0                	test   %eax,%eax
c01028eb:	75 23                	jne    c0102910 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c01028ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028f0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01028f4:	c7 44 24 08 6c 57 11 	movl   $0xc011576c,0x8(%esp)
c01028fb:	c0 
c01028fc:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0102903:	00 
c0102904:	c7 04 24 2e 55 11 c0 	movl   $0xc011552e,(%esp)
c010290b:	e8 b8 e5 ff ff       	call   c0100ec8 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102910:	8b 45 08             	mov    0x8(%ebp),%eax
c0102913:	89 04 24             	mov    %eax,(%esp)
c0102916:	e8 59 fb ff ff       	call   c0102474 <trap_in_kernel>
c010291b:	85 c0                	test   %eax,%eax
c010291d:	74 23                	je     c0102942 <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c010291f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102922:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102926:	c7 44 24 08 8c 57 11 	movl   $0xc011578c,0x8(%esp)
c010292d:	c0 
c010292e:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0102935:	00 
c0102936:	c7 04 24 2e 55 11 c0 	movl   $0xc011552e,(%esp)
c010293d:	e8 86 e5 ff ff       	call   c0100ec8 <__panic>
                }
                cprintf("killed by kernel.\n");
c0102942:	c7 04 24 ba 57 11 c0 	movl   $0xc01157ba,(%esp)
c0102949:	e8 17 da ff ff       	call   c0100365 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c010294e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102951:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102955:	c7 44 24 08 d0 57 11 	movl   $0xc01157d0,0x8(%esp)
c010295c:	c0 
c010295d:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0102964:	00 
c0102965:	c7 04 24 2e 55 11 c0 	movl   $0xc011552e,(%esp)
c010296c:	e8 57 e5 ff ff       	call   c0100ec8 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c0102971:	e9 99 00 00 00       	jmp    c0102a0f <trap_dispatch+0x1c0>
    case T_SYSCALL:
        syscall();
c0102976:	e8 9f be 00 00       	call   c010e81a <syscall>
        break;
c010297b:	e9 8f 00 00 00       	jmp    c0102a0f <trap_dispatch+0x1c0>
        /* LAB7 2012012017 */
        /* you should upate you lab6 code
         * IMPORTANT FUNCTIONS:
	     * run_timer_list
         */
        ticks++;
c0102980:	a1 10 30 15 c0       	mov    0xc0153010,%eax
c0102985:	83 c0 01             	add    $0x1,%eax
c0102988:	a3 10 30 15 c0       	mov    %eax,0xc0153010
        run_timer_list();
c010298d:	e8 13 ba 00 00       	call   c010e3a5 <run_timer_list>
        break;
c0102992:	eb 7b                	jmp    c0102a0f <trap_dispatch+0x1c0>
    case IRQ_OFFSET + IRQ_COM1:
    case IRQ_OFFSET + IRQ_KBD:
        // There are user level shell in LAB8, so we need change COM/KBD interrupt processing.
        c = cons_getc();
c0102994:	e8 a7 ee ff ff       	call   c0101840 <cons_getc>
c0102999:	88 45 f3             	mov    %al,-0xd(%ebp)
        {
          extern void dev_stdin_write(char c);
          dev_stdin_write(c);
c010299c:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c01029a0:	89 04 24             	mov    %eax,(%esp)
c01029a3:	e8 74 e1 00 00       	call   c0110b1c <dev_stdin_write>
        }
        break;
c01029a8:	eb 65                	jmp    c0102a0f <trap_dispatch+0x1c0>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c01029aa:	c7 44 24 08 f9 57 11 	movl   $0xc01157f9,0x8(%esp)
c01029b1:	c0 
c01029b2:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c01029b9:	00 
c01029ba:	c7 04 24 2e 55 11 c0 	movl   $0xc011552e,(%esp)
c01029c1:	e8 02 e5 ff ff       	call   c0100ec8 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c01029c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01029c9:	89 04 24             	mov    %eax,(%esp)
c01029cc:	e8 b9 fa ff ff       	call   c010248a <print_trapframe>
        if (current != NULL) {
c01029d1:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01029d6:	85 c0                	test   %eax,%eax
c01029d8:	74 18                	je     c01029f2 <trap_dispatch+0x1a3>
            cprintf("unhandled trap.\n");
c01029da:	c7 04 24 09 58 11 c0 	movl   $0xc0115809,(%esp)
c01029e1:	e8 7f d9 ff ff       	call   c0100365 <cprintf>
            do_exit(-E_KILLED);
c01029e6:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c01029ed:	e8 cb 9c 00 00       	call   c010c6bd <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c01029f2:	c7 44 24 08 1a 58 11 	movl   $0xc011581a,0x8(%esp)
c01029f9:	c0 
c01029fa:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c0102a01:	00 
c0102a02:	c7 04 24 2e 55 11 c0 	movl   $0xc011552e,(%esp)
c0102a09:	e8 ba e4 ff ff       	call   c0100ec8 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a0e:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a0f:	c9                   	leave  
c0102a10:	c3                   	ret    

c0102a11 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a11:	55                   	push   %ebp
c0102a12:	89 e5                	mov    %esp,%ebp
c0102a14:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102a17:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a1c:	85 c0                	test   %eax,%eax
c0102a1e:	75 0d                	jne    c0102a2d <trap+0x1c>
        trap_dispatch(tf);
c0102a20:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a23:	89 04 24             	mov    %eax,(%esp)
c0102a26:	e8 24 fe ff ff       	call   c010284f <trap_dispatch>
c0102a2b:	eb 6c                	jmp    c0102a99 <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102a2d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a32:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102a35:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102a38:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a3d:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a40:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102a43:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a46:	89 04 24             	mov    %eax,(%esp)
c0102a49:	e8 26 fa ff ff       	call   c0102474 <trap_in_kernel>
c0102a4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102a51:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a54:	89 04 24             	mov    %eax,(%esp)
c0102a57:	e8 f3 fd ff ff       	call   c010284f <trap_dispatch>
    
        current->tf = otf;
c0102a5c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a61:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102a64:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102a67:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102a6b:	75 2c                	jne    c0102a99 <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102a6d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a72:	8b 40 44             	mov    0x44(%eax),%eax
c0102a75:	83 e0 01             	and    $0x1,%eax
c0102a78:	85 c0                	test   %eax,%eax
c0102a7a:	74 0c                	je     c0102a88 <trap+0x77>
                do_exit(-E_KILLED);
c0102a7c:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a83:	e8 35 9c 00 00       	call   c010c6bd <do_exit>
            }
            if (current->need_resched) {
c0102a88:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a8d:	8b 40 10             	mov    0x10(%eax),%eax
c0102a90:	85 c0                	test   %eax,%eax
c0102a92:	74 05                	je     c0102a99 <trap+0x88>
                schedule();
c0102a94:	e8 7f b6 00 00       	call   c010e118 <schedule>
            }
        }
    }
}
c0102a99:	c9                   	leave  
c0102a9a:	c3                   	ret    

c0102a9b <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102a9b:	1e                   	push   %ds
    pushl %es
c0102a9c:	06                   	push   %es
    pushl %fs
c0102a9d:	0f a0                	push   %fs
    pushl %gs
c0102a9f:	0f a8                	push   %gs
    pushal
c0102aa1:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102aa2:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102aa7:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102aa9:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102aab:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102aac:	e8 60 ff ff ff       	call   c0102a11 <trap>

    # pop the pushed stack pointer
    popl %esp
c0102ab1:	5c                   	pop    %esp

c0102ab2 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102ab2:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102ab3:	0f a9                	pop    %gs
    popl %fs
c0102ab5:	0f a1                	pop    %fs
    popl %es
c0102ab7:	07                   	pop    %es
    popl %ds
c0102ab8:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102ab9:	83 c4 08             	add    $0x8,%esp
    iret
c0102abc:	cf                   	iret   

c0102abd <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102abd:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102ac1:	e9 ec ff ff ff       	jmp    c0102ab2 <__trapret>

c0102ac6 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102ac6:	6a 00                	push   $0x0
  pushl $0
c0102ac8:	6a 00                	push   $0x0
  jmp __alltraps
c0102aca:	e9 cc ff ff ff       	jmp    c0102a9b <__alltraps>

c0102acf <vector1>:
.globl vector1
vector1:
  pushl $0
c0102acf:	6a 00                	push   $0x0
  pushl $1
c0102ad1:	6a 01                	push   $0x1
  jmp __alltraps
c0102ad3:	e9 c3 ff ff ff       	jmp    c0102a9b <__alltraps>

c0102ad8 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102ad8:	6a 00                	push   $0x0
  pushl $2
c0102ada:	6a 02                	push   $0x2
  jmp __alltraps
c0102adc:	e9 ba ff ff ff       	jmp    c0102a9b <__alltraps>

c0102ae1 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102ae1:	6a 00                	push   $0x0
  pushl $3
c0102ae3:	6a 03                	push   $0x3
  jmp __alltraps
c0102ae5:	e9 b1 ff ff ff       	jmp    c0102a9b <__alltraps>

c0102aea <vector4>:
.globl vector4
vector4:
  pushl $0
c0102aea:	6a 00                	push   $0x0
  pushl $4
c0102aec:	6a 04                	push   $0x4
  jmp __alltraps
c0102aee:	e9 a8 ff ff ff       	jmp    c0102a9b <__alltraps>

c0102af3 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102af3:	6a 00                	push   $0x0
  pushl $5
c0102af5:	6a 05                	push   $0x5
  jmp __alltraps
c0102af7:	e9 9f ff ff ff       	jmp    c0102a9b <__alltraps>

c0102afc <vector6>:
.globl vector6
vector6:
  pushl $0
c0102afc:	6a 00                	push   $0x0
  pushl $6
c0102afe:	6a 06                	push   $0x6
  jmp __alltraps
c0102b00:	e9 96 ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b05 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b05:	6a 00                	push   $0x0
  pushl $7
c0102b07:	6a 07                	push   $0x7
  jmp __alltraps
c0102b09:	e9 8d ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b0e <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b0e:	6a 08                	push   $0x8
  jmp __alltraps
c0102b10:	e9 86 ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b15 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102b15:	6a 09                	push   $0x9
  jmp __alltraps
c0102b17:	e9 7f ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b1c <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b1c:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b1e:	e9 78 ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b23 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102b23:	6a 0b                	push   $0xb
  jmp __alltraps
c0102b25:	e9 71 ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b2a <vector12>:
.globl vector12
vector12:
  pushl $12
c0102b2a:	6a 0c                	push   $0xc
  jmp __alltraps
c0102b2c:	e9 6a ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b31 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102b31:	6a 0d                	push   $0xd
  jmp __alltraps
c0102b33:	e9 63 ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b38 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102b38:	6a 0e                	push   $0xe
  jmp __alltraps
c0102b3a:	e9 5c ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b3f <vector15>:
.globl vector15
vector15:
  pushl $0
c0102b3f:	6a 00                	push   $0x0
  pushl $15
c0102b41:	6a 0f                	push   $0xf
  jmp __alltraps
c0102b43:	e9 53 ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b48 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102b48:	6a 00                	push   $0x0
  pushl $16
c0102b4a:	6a 10                	push   $0x10
  jmp __alltraps
c0102b4c:	e9 4a ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b51 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102b51:	6a 11                	push   $0x11
  jmp __alltraps
c0102b53:	e9 43 ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b58 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102b58:	6a 00                	push   $0x0
  pushl $18
c0102b5a:	6a 12                	push   $0x12
  jmp __alltraps
c0102b5c:	e9 3a ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b61 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102b61:	6a 00                	push   $0x0
  pushl $19
c0102b63:	6a 13                	push   $0x13
  jmp __alltraps
c0102b65:	e9 31 ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b6a <vector20>:
.globl vector20
vector20:
  pushl $0
c0102b6a:	6a 00                	push   $0x0
  pushl $20
c0102b6c:	6a 14                	push   $0x14
  jmp __alltraps
c0102b6e:	e9 28 ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b73 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102b73:	6a 00                	push   $0x0
  pushl $21
c0102b75:	6a 15                	push   $0x15
  jmp __alltraps
c0102b77:	e9 1f ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b7c <vector22>:
.globl vector22
vector22:
  pushl $0
c0102b7c:	6a 00                	push   $0x0
  pushl $22
c0102b7e:	6a 16                	push   $0x16
  jmp __alltraps
c0102b80:	e9 16 ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b85 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102b85:	6a 00                	push   $0x0
  pushl $23
c0102b87:	6a 17                	push   $0x17
  jmp __alltraps
c0102b89:	e9 0d ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b8e <vector24>:
.globl vector24
vector24:
  pushl $0
c0102b8e:	6a 00                	push   $0x0
  pushl $24
c0102b90:	6a 18                	push   $0x18
  jmp __alltraps
c0102b92:	e9 04 ff ff ff       	jmp    c0102a9b <__alltraps>

c0102b97 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102b97:	6a 00                	push   $0x0
  pushl $25
c0102b99:	6a 19                	push   $0x19
  jmp __alltraps
c0102b9b:	e9 fb fe ff ff       	jmp    c0102a9b <__alltraps>

c0102ba0 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102ba0:	6a 00                	push   $0x0
  pushl $26
c0102ba2:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102ba4:	e9 f2 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102ba9 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102ba9:	6a 00                	push   $0x0
  pushl $27
c0102bab:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102bad:	e9 e9 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102bb2 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102bb2:	6a 00                	push   $0x0
  pushl $28
c0102bb4:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102bb6:	e9 e0 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102bbb <vector29>:
.globl vector29
vector29:
  pushl $0
c0102bbb:	6a 00                	push   $0x0
  pushl $29
c0102bbd:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102bbf:	e9 d7 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102bc4 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102bc4:	6a 00                	push   $0x0
  pushl $30
c0102bc6:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102bc8:	e9 ce fe ff ff       	jmp    c0102a9b <__alltraps>

c0102bcd <vector31>:
.globl vector31
vector31:
  pushl $0
c0102bcd:	6a 00                	push   $0x0
  pushl $31
c0102bcf:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102bd1:	e9 c5 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102bd6 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102bd6:	6a 00                	push   $0x0
  pushl $32
c0102bd8:	6a 20                	push   $0x20
  jmp __alltraps
c0102bda:	e9 bc fe ff ff       	jmp    c0102a9b <__alltraps>

c0102bdf <vector33>:
.globl vector33
vector33:
  pushl $0
c0102bdf:	6a 00                	push   $0x0
  pushl $33
c0102be1:	6a 21                	push   $0x21
  jmp __alltraps
c0102be3:	e9 b3 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102be8 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102be8:	6a 00                	push   $0x0
  pushl $34
c0102bea:	6a 22                	push   $0x22
  jmp __alltraps
c0102bec:	e9 aa fe ff ff       	jmp    c0102a9b <__alltraps>

c0102bf1 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102bf1:	6a 00                	push   $0x0
  pushl $35
c0102bf3:	6a 23                	push   $0x23
  jmp __alltraps
c0102bf5:	e9 a1 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102bfa <vector36>:
.globl vector36
vector36:
  pushl $0
c0102bfa:	6a 00                	push   $0x0
  pushl $36
c0102bfc:	6a 24                	push   $0x24
  jmp __alltraps
c0102bfe:	e9 98 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c03 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c03:	6a 00                	push   $0x0
  pushl $37
c0102c05:	6a 25                	push   $0x25
  jmp __alltraps
c0102c07:	e9 8f fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c0c <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c0c:	6a 00                	push   $0x0
  pushl $38
c0102c0e:	6a 26                	push   $0x26
  jmp __alltraps
c0102c10:	e9 86 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c15 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c15:	6a 00                	push   $0x0
  pushl $39
c0102c17:	6a 27                	push   $0x27
  jmp __alltraps
c0102c19:	e9 7d fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c1e <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c1e:	6a 00                	push   $0x0
  pushl $40
c0102c20:	6a 28                	push   $0x28
  jmp __alltraps
c0102c22:	e9 74 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c27 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102c27:	6a 00                	push   $0x0
  pushl $41
c0102c29:	6a 29                	push   $0x29
  jmp __alltraps
c0102c2b:	e9 6b fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c30 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102c30:	6a 00                	push   $0x0
  pushl $42
c0102c32:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102c34:	e9 62 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c39 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102c39:	6a 00                	push   $0x0
  pushl $43
c0102c3b:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102c3d:	e9 59 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c42 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102c42:	6a 00                	push   $0x0
  pushl $44
c0102c44:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102c46:	e9 50 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c4b <vector45>:
.globl vector45
vector45:
  pushl $0
c0102c4b:	6a 00                	push   $0x0
  pushl $45
c0102c4d:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102c4f:	e9 47 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c54 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102c54:	6a 00                	push   $0x0
  pushl $46
c0102c56:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102c58:	e9 3e fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c5d <vector47>:
.globl vector47
vector47:
  pushl $0
c0102c5d:	6a 00                	push   $0x0
  pushl $47
c0102c5f:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102c61:	e9 35 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c66 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102c66:	6a 00                	push   $0x0
  pushl $48
c0102c68:	6a 30                	push   $0x30
  jmp __alltraps
c0102c6a:	e9 2c fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c6f <vector49>:
.globl vector49
vector49:
  pushl $0
c0102c6f:	6a 00                	push   $0x0
  pushl $49
c0102c71:	6a 31                	push   $0x31
  jmp __alltraps
c0102c73:	e9 23 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c78 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102c78:	6a 00                	push   $0x0
  pushl $50
c0102c7a:	6a 32                	push   $0x32
  jmp __alltraps
c0102c7c:	e9 1a fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c81 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102c81:	6a 00                	push   $0x0
  pushl $51
c0102c83:	6a 33                	push   $0x33
  jmp __alltraps
c0102c85:	e9 11 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c8a <vector52>:
.globl vector52
vector52:
  pushl $0
c0102c8a:	6a 00                	push   $0x0
  pushl $52
c0102c8c:	6a 34                	push   $0x34
  jmp __alltraps
c0102c8e:	e9 08 fe ff ff       	jmp    c0102a9b <__alltraps>

c0102c93 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102c93:	6a 00                	push   $0x0
  pushl $53
c0102c95:	6a 35                	push   $0x35
  jmp __alltraps
c0102c97:	e9 ff fd ff ff       	jmp    c0102a9b <__alltraps>

c0102c9c <vector54>:
.globl vector54
vector54:
  pushl $0
c0102c9c:	6a 00                	push   $0x0
  pushl $54
c0102c9e:	6a 36                	push   $0x36
  jmp __alltraps
c0102ca0:	e9 f6 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102ca5 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102ca5:	6a 00                	push   $0x0
  pushl $55
c0102ca7:	6a 37                	push   $0x37
  jmp __alltraps
c0102ca9:	e9 ed fd ff ff       	jmp    c0102a9b <__alltraps>

c0102cae <vector56>:
.globl vector56
vector56:
  pushl $0
c0102cae:	6a 00                	push   $0x0
  pushl $56
c0102cb0:	6a 38                	push   $0x38
  jmp __alltraps
c0102cb2:	e9 e4 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102cb7 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102cb7:	6a 00                	push   $0x0
  pushl $57
c0102cb9:	6a 39                	push   $0x39
  jmp __alltraps
c0102cbb:	e9 db fd ff ff       	jmp    c0102a9b <__alltraps>

c0102cc0 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102cc0:	6a 00                	push   $0x0
  pushl $58
c0102cc2:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102cc4:	e9 d2 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102cc9 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102cc9:	6a 00                	push   $0x0
  pushl $59
c0102ccb:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102ccd:	e9 c9 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102cd2 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102cd2:	6a 00                	push   $0x0
  pushl $60
c0102cd4:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102cd6:	e9 c0 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102cdb <vector61>:
.globl vector61
vector61:
  pushl $0
c0102cdb:	6a 00                	push   $0x0
  pushl $61
c0102cdd:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102cdf:	e9 b7 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102ce4 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102ce4:	6a 00                	push   $0x0
  pushl $62
c0102ce6:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102ce8:	e9 ae fd ff ff       	jmp    c0102a9b <__alltraps>

c0102ced <vector63>:
.globl vector63
vector63:
  pushl $0
c0102ced:	6a 00                	push   $0x0
  pushl $63
c0102cef:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102cf1:	e9 a5 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102cf6 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102cf6:	6a 00                	push   $0x0
  pushl $64
c0102cf8:	6a 40                	push   $0x40
  jmp __alltraps
c0102cfa:	e9 9c fd ff ff       	jmp    c0102a9b <__alltraps>

c0102cff <vector65>:
.globl vector65
vector65:
  pushl $0
c0102cff:	6a 00                	push   $0x0
  pushl $65
c0102d01:	6a 41                	push   $0x41
  jmp __alltraps
c0102d03:	e9 93 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d08 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d08:	6a 00                	push   $0x0
  pushl $66
c0102d0a:	6a 42                	push   $0x42
  jmp __alltraps
c0102d0c:	e9 8a fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d11 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d11:	6a 00                	push   $0x0
  pushl $67
c0102d13:	6a 43                	push   $0x43
  jmp __alltraps
c0102d15:	e9 81 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d1a <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d1a:	6a 00                	push   $0x0
  pushl $68
c0102d1c:	6a 44                	push   $0x44
  jmp __alltraps
c0102d1e:	e9 78 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d23 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102d23:	6a 00                	push   $0x0
  pushl $69
c0102d25:	6a 45                	push   $0x45
  jmp __alltraps
c0102d27:	e9 6f fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d2c <vector70>:
.globl vector70
vector70:
  pushl $0
c0102d2c:	6a 00                	push   $0x0
  pushl $70
c0102d2e:	6a 46                	push   $0x46
  jmp __alltraps
c0102d30:	e9 66 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d35 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102d35:	6a 00                	push   $0x0
  pushl $71
c0102d37:	6a 47                	push   $0x47
  jmp __alltraps
c0102d39:	e9 5d fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d3e <vector72>:
.globl vector72
vector72:
  pushl $0
c0102d3e:	6a 00                	push   $0x0
  pushl $72
c0102d40:	6a 48                	push   $0x48
  jmp __alltraps
c0102d42:	e9 54 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d47 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102d47:	6a 00                	push   $0x0
  pushl $73
c0102d49:	6a 49                	push   $0x49
  jmp __alltraps
c0102d4b:	e9 4b fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d50 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102d50:	6a 00                	push   $0x0
  pushl $74
c0102d52:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102d54:	e9 42 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d59 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102d59:	6a 00                	push   $0x0
  pushl $75
c0102d5b:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102d5d:	e9 39 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d62 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102d62:	6a 00                	push   $0x0
  pushl $76
c0102d64:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102d66:	e9 30 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d6b <vector77>:
.globl vector77
vector77:
  pushl $0
c0102d6b:	6a 00                	push   $0x0
  pushl $77
c0102d6d:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102d6f:	e9 27 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d74 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102d74:	6a 00                	push   $0x0
  pushl $78
c0102d76:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102d78:	e9 1e fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d7d <vector79>:
.globl vector79
vector79:
  pushl $0
c0102d7d:	6a 00                	push   $0x0
  pushl $79
c0102d7f:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102d81:	e9 15 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d86 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102d86:	6a 00                	push   $0x0
  pushl $80
c0102d88:	6a 50                	push   $0x50
  jmp __alltraps
c0102d8a:	e9 0c fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d8f <vector81>:
.globl vector81
vector81:
  pushl $0
c0102d8f:	6a 00                	push   $0x0
  pushl $81
c0102d91:	6a 51                	push   $0x51
  jmp __alltraps
c0102d93:	e9 03 fd ff ff       	jmp    c0102a9b <__alltraps>

c0102d98 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102d98:	6a 00                	push   $0x0
  pushl $82
c0102d9a:	6a 52                	push   $0x52
  jmp __alltraps
c0102d9c:	e9 fa fc ff ff       	jmp    c0102a9b <__alltraps>

c0102da1 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102da1:	6a 00                	push   $0x0
  pushl $83
c0102da3:	6a 53                	push   $0x53
  jmp __alltraps
c0102da5:	e9 f1 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102daa <vector84>:
.globl vector84
vector84:
  pushl $0
c0102daa:	6a 00                	push   $0x0
  pushl $84
c0102dac:	6a 54                	push   $0x54
  jmp __alltraps
c0102dae:	e9 e8 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102db3 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102db3:	6a 00                	push   $0x0
  pushl $85
c0102db5:	6a 55                	push   $0x55
  jmp __alltraps
c0102db7:	e9 df fc ff ff       	jmp    c0102a9b <__alltraps>

c0102dbc <vector86>:
.globl vector86
vector86:
  pushl $0
c0102dbc:	6a 00                	push   $0x0
  pushl $86
c0102dbe:	6a 56                	push   $0x56
  jmp __alltraps
c0102dc0:	e9 d6 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102dc5 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102dc5:	6a 00                	push   $0x0
  pushl $87
c0102dc7:	6a 57                	push   $0x57
  jmp __alltraps
c0102dc9:	e9 cd fc ff ff       	jmp    c0102a9b <__alltraps>

c0102dce <vector88>:
.globl vector88
vector88:
  pushl $0
c0102dce:	6a 00                	push   $0x0
  pushl $88
c0102dd0:	6a 58                	push   $0x58
  jmp __alltraps
c0102dd2:	e9 c4 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102dd7 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102dd7:	6a 00                	push   $0x0
  pushl $89
c0102dd9:	6a 59                	push   $0x59
  jmp __alltraps
c0102ddb:	e9 bb fc ff ff       	jmp    c0102a9b <__alltraps>

c0102de0 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102de0:	6a 00                	push   $0x0
  pushl $90
c0102de2:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102de4:	e9 b2 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102de9 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102de9:	6a 00                	push   $0x0
  pushl $91
c0102deb:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102ded:	e9 a9 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102df2 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102df2:	6a 00                	push   $0x0
  pushl $92
c0102df4:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102df6:	e9 a0 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102dfb <vector93>:
.globl vector93
vector93:
  pushl $0
c0102dfb:	6a 00                	push   $0x0
  pushl $93
c0102dfd:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102dff:	e9 97 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e04 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e04:	6a 00                	push   $0x0
  pushl $94
c0102e06:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e08:	e9 8e fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e0d <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e0d:	6a 00                	push   $0x0
  pushl $95
c0102e0f:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e11:	e9 85 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e16 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e16:	6a 00                	push   $0x0
  pushl $96
c0102e18:	6a 60                	push   $0x60
  jmp __alltraps
c0102e1a:	e9 7c fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e1f <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e1f:	6a 00                	push   $0x0
  pushl $97
c0102e21:	6a 61                	push   $0x61
  jmp __alltraps
c0102e23:	e9 73 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e28 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102e28:	6a 00                	push   $0x0
  pushl $98
c0102e2a:	6a 62                	push   $0x62
  jmp __alltraps
c0102e2c:	e9 6a fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e31 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102e31:	6a 00                	push   $0x0
  pushl $99
c0102e33:	6a 63                	push   $0x63
  jmp __alltraps
c0102e35:	e9 61 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e3a <vector100>:
.globl vector100
vector100:
  pushl $0
c0102e3a:	6a 00                	push   $0x0
  pushl $100
c0102e3c:	6a 64                	push   $0x64
  jmp __alltraps
c0102e3e:	e9 58 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e43 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102e43:	6a 00                	push   $0x0
  pushl $101
c0102e45:	6a 65                	push   $0x65
  jmp __alltraps
c0102e47:	e9 4f fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e4c <vector102>:
.globl vector102
vector102:
  pushl $0
c0102e4c:	6a 00                	push   $0x0
  pushl $102
c0102e4e:	6a 66                	push   $0x66
  jmp __alltraps
c0102e50:	e9 46 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e55 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102e55:	6a 00                	push   $0x0
  pushl $103
c0102e57:	6a 67                	push   $0x67
  jmp __alltraps
c0102e59:	e9 3d fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e5e <vector104>:
.globl vector104
vector104:
  pushl $0
c0102e5e:	6a 00                	push   $0x0
  pushl $104
c0102e60:	6a 68                	push   $0x68
  jmp __alltraps
c0102e62:	e9 34 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e67 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102e67:	6a 00                	push   $0x0
  pushl $105
c0102e69:	6a 69                	push   $0x69
  jmp __alltraps
c0102e6b:	e9 2b fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e70 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102e70:	6a 00                	push   $0x0
  pushl $106
c0102e72:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102e74:	e9 22 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e79 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102e79:	6a 00                	push   $0x0
  pushl $107
c0102e7b:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102e7d:	e9 19 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e82 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102e82:	6a 00                	push   $0x0
  pushl $108
c0102e84:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102e86:	e9 10 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e8b <vector109>:
.globl vector109
vector109:
  pushl $0
c0102e8b:	6a 00                	push   $0x0
  pushl $109
c0102e8d:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102e8f:	e9 07 fc ff ff       	jmp    c0102a9b <__alltraps>

c0102e94 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102e94:	6a 00                	push   $0x0
  pushl $110
c0102e96:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102e98:	e9 fe fb ff ff       	jmp    c0102a9b <__alltraps>

c0102e9d <vector111>:
.globl vector111
vector111:
  pushl $0
c0102e9d:	6a 00                	push   $0x0
  pushl $111
c0102e9f:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102ea1:	e9 f5 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102ea6 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102ea6:	6a 00                	push   $0x0
  pushl $112
c0102ea8:	6a 70                	push   $0x70
  jmp __alltraps
c0102eaa:	e9 ec fb ff ff       	jmp    c0102a9b <__alltraps>

c0102eaf <vector113>:
.globl vector113
vector113:
  pushl $0
c0102eaf:	6a 00                	push   $0x0
  pushl $113
c0102eb1:	6a 71                	push   $0x71
  jmp __alltraps
c0102eb3:	e9 e3 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102eb8 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102eb8:	6a 00                	push   $0x0
  pushl $114
c0102eba:	6a 72                	push   $0x72
  jmp __alltraps
c0102ebc:	e9 da fb ff ff       	jmp    c0102a9b <__alltraps>

c0102ec1 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102ec1:	6a 00                	push   $0x0
  pushl $115
c0102ec3:	6a 73                	push   $0x73
  jmp __alltraps
c0102ec5:	e9 d1 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102eca <vector116>:
.globl vector116
vector116:
  pushl $0
c0102eca:	6a 00                	push   $0x0
  pushl $116
c0102ecc:	6a 74                	push   $0x74
  jmp __alltraps
c0102ece:	e9 c8 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102ed3 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102ed3:	6a 00                	push   $0x0
  pushl $117
c0102ed5:	6a 75                	push   $0x75
  jmp __alltraps
c0102ed7:	e9 bf fb ff ff       	jmp    c0102a9b <__alltraps>

c0102edc <vector118>:
.globl vector118
vector118:
  pushl $0
c0102edc:	6a 00                	push   $0x0
  pushl $118
c0102ede:	6a 76                	push   $0x76
  jmp __alltraps
c0102ee0:	e9 b6 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102ee5 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102ee5:	6a 00                	push   $0x0
  pushl $119
c0102ee7:	6a 77                	push   $0x77
  jmp __alltraps
c0102ee9:	e9 ad fb ff ff       	jmp    c0102a9b <__alltraps>

c0102eee <vector120>:
.globl vector120
vector120:
  pushl $0
c0102eee:	6a 00                	push   $0x0
  pushl $120
c0102ef0:	6a 78                	push   $0x78
  jmp __alltraps
c0102ef2:	e9 a4 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102ef7 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102ef7:	6a 00                	push   $0x0
  pushl $121
c0102ef9:	6a 79                	push   $0x79
  jmp __alltraps
c0102efb:	e9 9b fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f00 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f00:	6a 00                	push   $0x0
  pushl $122
c0102f02:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f04:	e9 92 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f09 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f09:	6a 00                	push   $0x0
  pushl $123
c0102f0b:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f0d:	e9 89 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f12 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f12:	6a 00                	push   $0x0
  pushl $124
c0102f14:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f16:	e9 80 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f1b <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f1b:	6a 00                	push   $0x0
  pushl $125
c0102f1d:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f1f:	e9 77 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f24 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102f24:	6a 00                	push   $0x0
  pushl $126
c0102f26:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102f28:	e9 6e fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f2d <vector127>:
.globl vector127
vector127:
  pushl $0
c0102f2d:	6a 00                	push   $0x0
  pushl $127
c0102f2f:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102f31:	e9 65 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f36 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102f36:	6a 00                	push   $0x0
  pushl $128
c0102f38:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102f3d:	e9 59 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f42 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102f42:	6a 00                	push   $0x0
  pushl $129
c0102f44:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102f49:	e9 4d fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f4e <vector130>:
.globl vector130
vector130:
  pushl $0
c0102f4e:	6a 00                	push   $0x0
  pushl $130
c0102f50:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102f55:	e9 41 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f5a <vector131>:
.globl vector131
vector131:
  pushl $0
c0102f5a:	6a 00                	push   $0x0
  pushl $131
c0102f5c:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102f61:	e9 35 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f66 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102f66:	6a 00                	push   $0x0
  pushl $132
c0102f68:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102f6d:	e9 29 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f72 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102f72:	6a 00                	push   $0x0
  pushl $133
c0102f74:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102f79:	e9 1d fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f7e <vector134>:
.globl vector134
vector134:
  pushl $0
c0102f7e:	6a 00                	push   $0x0
  pushl $134
c0102f80:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102f85:	e9 11 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f8a <vector135>:
.globl vector135
vector135:
  pushl $0
c0102f8a:	6a 00                	push   $0x0
  pushl $135
c0102f8c:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102f91:	e9 05 fb ff ff       	jmp    c0102a9b <__alltraps>

c0102f96 <vector136>:
.globl vector136
vector136:
  pushl $0
c0102f96:	6a 00                	push   $0x0
  pushl $136
c0102f98:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0102f9d:	e9 f9 fa ff ff       	jmp    c0102a9b <__alltraps>

c0102fa2 <vector137>:
.globl vector137
vector137:
  pushl $0
c0102fa2:	6a 00                	push   $0x0
  pushl $137
c0102fa4:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0102fa9:	e9 ed fa ff ff       	jmp    c0102a9b <__alltraps>

c0102fae <vector138>:
.globl vector138
vector138:
  pushl $0
c0102fae:	6a 00                	push   $0x0
  pushl $138
c0102fb0:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0102fb5:	e9 e1 fa ff ff       	jmp    c0102a9b <__alltraps>

c0102fba <vector139>:
.globl vector139
vector139:
  pushl $0
c0102fba:	6a 00                	push   $0x0
  pushl $139
c0102fbc:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0102fc1:	e9 d5 fa ff ff       	jmp    c0102a9b <__alltraps>

c0102fc6 <vector140>:
.globl vector140
vector140:
  pushl $0
c0102fc6:	6a 00                	push   $0x0
  pushl $140
c0102fc8:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0102fcd:	e9 c9 fa ff ff       	jmp    c0102a9b <__alltraps>

c0102fd2 <vector141>:
.globl vector141
vector141:
  pushl $0
c0102fd2:	6a 00                	push   $0x0
  pushl $141
c0102fd4:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0102fd9:	e9 bd fa ff ff       	jmp    c0102a9b <__alltraps>

c0102fde <vector142>:
.globl vector142
vector142:
  pushl $0
c0102fde:	6a 00                	push   $0x0
  pushl $142
c0102fe0:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0102fe5:	e9 b1 fa ff ff       	jmp    c0102a9b <__alltraps>

c0102fea <vector143>:
.globl vector143
vector143:
  pushl $0
c0102fea:	6a 00                	push   $0x0
  pushl $143
c0102fec:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0102ff1:	e9 a5 fa ff ff       	jmp    c0102a9b <__alltraps>

c0102ff6 <vector144>:
.globl vector144
vector144:
  pushl $0
c0102ff6:	6a 00                	push   $0x0
  pushl $144
c0102ff8:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0102ffd:	e9 99 fa ff ff       	jmp    c0102a9b <__alltraps>

c0103002 <vector145>:
.globl vector145
vector145:
  pushl $0
c0103002:	6a 00                	push   $0x0
  pushl $145
c0103004:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0103009:	e9 8d fa ff ff       	jmp    c0102a9b <__alltraps>

c010300e <vector146>:
.globl vector146
vector146:
  pushl $0
c010300e:	6a 00                	push   $0x0
  pushl $146
c0103010:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0103015:	e9 81 fa ff ff       	jmp    c0102a9b <__alltraps>

c010301a <vector147>:
.globl vector147
vector147:
  pushl $0
c010301a:	6a 00                	push   $0x0
  pushl $147
c010301c:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0103021:	e9 75 fa ff ff       	jmp    c0102a9b <__alltraps>

c0103026 <vector148>:
.globl vector148
vector148:
  pushl $0
c0103026:	6a 00                	push   $0x0
  pushl $148
c0103028:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c010302d:	e9 69 fa ff ff       	jmp    c0102a9b <__alltraps>

c0103032 <vector149>:
.globl vector149
vector149:
  pushl $0
c0103032:	6a 00                	push   $0x0
  pushl $149
c0103034:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0103039:	e9 5d fa ff ff       	jmp    c0102a9b <__alltraps>

c010303e <vector150>:
.globl vector150
vector150:
  pushl $0
c010303e:	6a 00                	push   $0x0
  pushl $150
c0103040:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0103045:	e9 51 fa ff ff       	jmp    c0102a9b <__alltraps>

c010304a <vector151>:
.globl vector151
vector151:
  pushl $0
c010304a:	6a 00                	push   $0x0
  pushl $151
c010304c:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c0103051:	e9 45 fa ff ff       	jmp    c0102a9b <__alltraps>

c0103056 <vector152>:
.globl vector152
vector152:
  pushl $0
c0103056:	6a 00                	push   $0x0
  pushl $152
c0103058:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c010305d:	e9 39 fa ff ff       	jmp    c0102a9b <__alltraps>

c0103062 <vector153>:
.globl vector153
vector153:
  pushl $0
c0103062:	6a 00                	push   $0x0
  pushl $153
c0103064:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c0103069:	e9 2d fa ff ff       	jmp    c0102a9b <__alltraps>

c010306e <vector154>:
.globl vector154
vector154:
  pushl $0
c010306e:	6a 00                	push   $0x0
  pushl $154
c0103070:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c0103075:	e9 21 fa ff ff       	jmp    c0102a9b <__alltraps>

c010307a <vector155>:
.globl vector155
vector155:
  pushl $0
c010307a:	6a 00                	push   $0x0
  pushl $155
c010307c:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c0103081:	e9 15 fa ff ff       	jmp    c0102a9b <__alltraps>

c0103086 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103086:	6a 00                	push   $0x0
  pushl $156
c0103088:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c010308d:	e9 09 fa ff ff       	jmp    c0102a9b <__alltraps>

c0103092 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103092:	6a 00                	push   $0x0
  pushl $157
c0103094:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103099:	e9 fd f9 ff ff       	jmp    c0102a9b <__alltraps>

c010309e <vector158>:
.globl vector158
vector158:
  pushl $0
c010309e:	6a 00                	push   $0x0
  pushl $158
c01030a0:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c01030a5:	e9 f1 f9 ff ff       	jmp    c0102a9b <__alltraps>

c01030aa <vector159>:
.globl vector159
vector159:
  pushl $0
c01030aa:	6a 00                	push   $0x0
  pushl $159
c01030ac:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c01030b1:	e9 e5 f9 ff ff       	jmp    c0102a9b <__alltraps>

c01030b6 <vector160>:
.globl vector160
vector160:
  pushl $0
c01030b6:	6a 00                	push   $0x0
  pushl $160
c01030b8:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c01030bd:	e9 d9 f9 ff ff       	jmp    c0102a9b <__alltraps>

c01030c2 <vector161>:
.globl vector161
vector161:
  pushl $0
c01030c2:	6a 00                	push   $0x0
  pushl $161
c01030c4:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c01030c9:	e9 cd f9 ff ff       	jmp    c0102a9b <__alltraps>

c01030ce <vector162>:
.globl vector162
vector162:
  pushl $0
c01030ce:	6a 00                	push   $0x0
  pushl $162
c01030d0:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c01030d5:	e9 c1 f9 ff ff       	jmp    c0102a9b <__alltraps>

c01030da <vector163>:
.globl vector163
vector163:
  pushl $0
c01030da:	6a 00                	push   $0x0
  pushl $163
c01030dc:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c01030e1:	e9 b5 f9 ff ff       	jmp    c0102a9b <__alltraps>

c01030e6 <vector164>:
.globl vector164
vector164:
  pushl $0
c01030e6:	6a 00                	push   $0x0
  pushl $164
c01030e8:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c01030ed:	e9 a9 f9 ff ff       	jmp    c0102a9b <__alltraps>

c01030f2 <vector165>:
.globl vector165
vector165:
  pushl $0
c01030f2:	6a 00                	push   $0x0
  pushl $165
c01030f4:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c01030f9:	e9 9d f9 ff ff       	jmp    c0102a9b <__alltraps>

c01030fe <vector166>:
.globl vector166
vector166:
  pushl $0
c01030fe:	6a 00                	push   $0x0
  pushl $166
c0103100:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103105:	e9 91 f9 ff ff       	jmp    c0102a9b <__alltraps>

c010310a <vector167>:
.globl vector167
vector167:
  pushl $0
c010310a:	6a 00                	push   $0x0
  pushl $167
c010310c:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0103111:	e9 85 f9 ff ff       	jmp    c0102a9b <__alltraps>

c0103116 <vector168>:
.globl vector168
vector168:
  pushl $0
c0103116:	6a 00                	push   $0x0
  pushl $168
c0103118:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c010311d:	e9 79 f9 ff ff       	jmp    c0102a9b <__alltraps>

c0103122 <vector169>:
.globl vector169
vector169:
  pushl $0
c0103122:	6a 00                	push   $0x0
  pushl $169
c0103124:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c0103129:	e9 6d f9 ff ff       	jmp    c0102a9b <__alltraps>

c010312e <vector170>:
.globl vector170
vector170:
  pushl $0
c010312e:	6a 00                	push   $0x0
  pushl $170
c0103130:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c0103135:	e9 61 f9 ff ff       	jmp    c0102a9b <__alltraps>

c010313a <vector171>:
.globl vector171
vector171:
  pushl $0
c010313a:	6a 00                	push   $0x0
  pushl $171
c010313c:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c0103141:	e9 55 f9 ff ff       	jmp    c0102a9b <__alltraps>

c0103146 <vector172>:
.globl vector172
vector172:
  pushl $0
c0103146:	6a 00                	push   $0x0
  pushl $172
c0103148:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c010314d:	e9 49 f9 ff ff       	jmp    c0102a9b <__alltraps>

c0103152 <vector173>:
.globl vector173
vector173:
  pushl $0
c0103152:	6a 00                	push   $0x0
  pushl $173
c0103154:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c0103159:	e9 3d f9 ff ff       	jmp    c0102a9b <__alltraps>

c010315e <vector174>:
.globl vector174
vector174:
  pushl $0
c010315e:	6a 00                	push   $0x0
  pushl $174
c0103160:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c0103165:	e9 31 f9 ff ff       	jmp    c0102a9b <__alltraps>

c010316a <vector175>:
.globl vector175
vector175:
  pushl $0
c010316a:	6a 00                	push   $0x0
  pushl $175
c010316c:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c0103171:	e9 25 f9 ff ff       	jmp    c0102a9b <__alltraps>

c0103176 <vector176>:
.globl vector176
vector176:
  pushl $0
c0103176:	6a 00                	push   $0x0
  pushl $176
c0103178:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c010317d:	e9 19 f9 ff ff       	jmp    c0102a9b <__alltraps>

c0103182 <vector177>:
.globl vector177
vector177:
  pushl $0
c0103182:	6a 00                	push   $0x0
  pushl $177
c0103184:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0103189:	e9 0d f9 ff ff       	jmp    c0102a9b <__alltraps>

c010318e <vector178>:
.globl vector178
vector178:
  pushl $0
c010318e:	6a 00                	push   $0x0
  pushl $178
c0103190:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103195:	e9 01 f9 ff ff       	jmp    c0102a9b <__alltraps>

c010319a <vector179>:
.globl vector179
vector179:
  pushl $0
c010319a:	6a 00                	push   $0x0
  pushl $179
c010319c:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c01031a1:	e9 f5 f8 ff ff       	jmp    c0102a9b <__alltraps>

c01031a6 <vector180>:
.globl vector180
vector180:
  pushl $0
c01031a6:	6a 00                	push   $0x0
  pushl $180
c01031a8:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c01031ad:	e9 e9 f8 ff ff       	jmp    c0102a9b <__alltraps>

c01031b2 <vector181>:
.globl vector181
vector181:
  pushl $0
c01031b2:	6a 00                	push   $0x0
  pushl $181
c01031b4:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c01031b9:	e9 dd f8 ff ff       	jmp    c0102a9b <__alltraps>

c01031be <vector182>:
.globl vector182
vector182:
  pushl $0
c01031be:	6a 00                	push   $0x0
  pushl $182
c01031c0:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c01031c5:	e9 d1 f8 ff ff       	jmp    c0102a9b <__alltraps>

c01031ca <vector183>:
.globl vector183
vector183:
  pushl $0
c01031ca:	6a 00                	push   $0x0
  pushl $183
c01031cc:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c01031d1:	e9 c5 f8 ff ff       	jmp    c0102a9b <__alltraps>

c01031d6 <vector184>:
.globl vector184
vector184:
  pushl $0
c01031d6:	6a 00                	push   $0x0
  pushl $184
c01031d8:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c01031dd:	e9 b9 f8 ff ff       	jmp    c0102a9b <__alltraps>

c01031e2 <vector185>:
.globl vector185
vector185:
  pushl $0
c01031e2:	6a 00                	push   $0x0
  pushl $185
c01031e4:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c01031e9:	e9 ad f8 ff ff       	jmp    c0102a9b <__alltraps>

c01031ee <vector186>:
.globl vector186
vector186:
  pushl $0
c01031ee:	6a 00                	push   $0x0
  pushl $186
c01031f0:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c01031f5:	e9 a1 f8 ff ff       	jmp    c0102a9b <__alltraps>

c01031fa <vector187>:
.globl vector187
vector187:
  pushl $0
c01031fa:	6a 00                	push   $0x0
  pushl $187
c01031fc:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0103201:	e9 95 f8 ff ff       	jmp    c0102a9b <__alltraps>

c0103206 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103206:	6a 00                	push   $0x0
  pushl $188
c0103208:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c010320d:	e9 89 f8 ff ff       	jmp    c0102a9b <__alltraps>

c0103212 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103212:	6a 00                	push   $0x0
  pushl $189
c0103214:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0103219:	e9 7d f8 ff ff       	jmp    c0102a9b <__alltraps>

c010321e <vector190>:
.globl vector190
vector190:
  pushl $0
c010321e:	6a 00                	push   $0x0
  pushl $190
c0103220:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c0103225:	e9 71 f8 ff ff       	jmp    c0102a9b <__alltraps>

c010322a <vector191>:
.globl vector191
vector191:
  pushl $0
c010322a:	6a 00                	push   $0x0
  pushl $191
c010322c:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c0103231:	e9 65 f8 ff ff       	jmp    c0102a9b <__alltraps>

c0103236 <vector192>:
.globl vector192
vector192:
  pushl $0
c0103236:	6a 00                	push   $0x0
  pushl $192
c0103238:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c010323d:	e9 59 f8 ff ff       	jmp    c0102a9b <__alltraps>

c0103242 <vector193>:
.globl vector193
vector193:
  pushl $0
c0103242:	6a 00                	push   $0x0
  pushl $193
c0103244:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c0103249:	e9 4d f8 ff ff       	jmp    c0102a9b <__alltraps>

c010324e <vector194>:
.globl vector194
vector194:
  pushl $0
c010324e:	6a 00                	push   $0x0
  pushl $194
c0103250:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c0103255:	e9 41 f8 ff ff       	jmp    c0102a9b <__alltraps>

c010325a <vector195>:
.globl vector195
vector195:
  pushl $0
c010325a:	6a 00                	push   $0x0
  pushl $195
c010325c:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c0103261:	e9 35 f8 ff ff       	jmp    c0102a9b <__alltraps>

c0103266 <vector196>:
.globl vector196
vector196:
  pushl $0
c0103266:	6a 00                	push   $0x0
  pushl $196
c0103268:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c010326d:	e9 29 f8 ff ff       	jmp    c0102a9b <__alltraps>

c0103272 <vector197>:
.globl vector197
vector197:
  pushl $0
c0103272:	6a 00                	push   $0x0
  pushl $197
c0103274:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c0103279:	e9 1d f8 ff ff       	jmp    c0102a9b <__alltraps>

c010327e <vector198>:
.globl vector198
vector198:
  pushl $0
c010327e:	6a 00                	push   $0x0
  pushl $198
c0103280:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103285:	e9 11 f8 ff ff       	jmp    c0102a9b <__alltraps>

c010328a <vector199>:
.globl vector199
vector199:
  pushl $0
c010328a:	6a 00                	push   $0x0
  pushl $199
c010328c:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c0103291:	e9 05 f8 ff ff       	jmp    c0102a9b <__alltraps>

c0103296 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103296:	6a 00                	push   $0x0
  pushl $200
c0103298:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c010329d:	e9 f9 f7 ff ff       	jmp    c0102a9b <__alltraps>

c01032a2 <vector201>:
.globl vector201
vector201:
  pushl $0
c01032a2:	6a 00                	push   $0x0
  pushl $201
c01032a4:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c01032a9:	e9 ed f7 ff ff       	jmp    c0102a9b <__alltraps>

c01032ae <vector202>:
.globl vector202
vector202:
  pushl $0
c01032ae:	6a 00                	push   $0x0
  pushl $202
c01032b0:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c01032b5:	e9 e1 f7 ff ff       	jmp    c0102a9b <__alltraps>

c01032ba <vector203>:
.globl vector203
vector203:
  pushl $0
c01032ba:	6a 00                	push   $0x0
  pushl $203
c01032bc:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c01032c1:	e9 d5 f7 ff ff       	jmp    c0102a9b <__alltraps>

c01032c6 <vector204>:
.globl vector204
vector204:
  pushl $0
c01032c6:	6a 00                	push   $0x0
  pushl $204
c01032c8:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c01032cd:	e9 c9 f7 ff ff       	jmp    c0102a9b <__alltraps>

c01032d2 <vector205>:
.globl vector205
vector205:
  pushl $0
c01032d2:	6a 00                	push   $0x0
  pushl $205
c01032d4:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c01032d9:	e9 bd f7 ff ff       	jmp    c0102a9b <__alltraps>

c01032de <vector206>:
.globl vector206
vector206:
  pushl $0
c01032de:	6a 00                	push   $0x0
  pushl $206
c01032e0:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c01032e5:	e9 b1 f7 ff ff       	jmp    c0102a9b <__alltraps>

c01032ea <vector207>:
.globl vector207
vector207:
  pushl $0
c01032ea:	6a 00                	push   $0x0
  pushl $207
c01032ec:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c01032f1:	e9 a5 f7 ff ff       	jmp    c0102a9b <__alltraps>

c01032f6 <vector208>:
.globl vector208
vector208:
  pushl $0
c01032f6:	6a 00                	push   $0x0
  pushl $208
c01032f8:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c01032fd:	e9 99 f7 ff ff       	jmp    c0102a9b <__alltraps>

c0103302 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103302:	6a 00                	push   $0x0
  pushl $209
c0103304:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0103309:	e9 8d f7 ff ff       	jmp    c0102a9b <__alltraps>

c010330e <vector210>:
.globl vector210
vector210:
  pushl $0
c010330e:	6a 00                	push   $0x0
  pushl $210
c0103310:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103315:	e9 81 f7 ff ff       	jmp    c0102a9b <__alltraps>

c010331a <vector211>:
.globl vector211
vector211:
  pushl $0
c010331a:	6a 00                	push   $0x0
  pushl $211
c010331c:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0103321:	e9 75 f7 ff ff       	jmp    c0102a9b <__alltraps>

c0103326 <vector212>:
.globl vector212
vector212:
  pushl $0
c0103326:	6a 00                	push   $0x0
  pushl $212
c0103328:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c010332d:	e9 69 f7 ff ff       	jmp    c0102a9b <__alltraps>

c0103332 <vector213>:
.globl vector213
vector213:
  pushl $0
c0103332:	6a 00                	push   $0x0
  pushl $213
c0103334:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c0103339:	e9 5d f7 ff ff       	jmp    c0102a9b <__alltraps>

c010333e <vector214>:
.globl vector214
vector214:
  pushl $0
c010333e:	6a 00                	push   $0x0
  pushl $214
c0103340:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c0103345:	e9 51 f7 ff ff       	jmp    c0102a9b <__alltraps>

c010334a <vector215>:
.globl vector215
vector215:
  pushl $0
c010334a:	6a 00                	push   $0x0
  pushl $215
c010334c:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c0103351:	e9 45 f7 ff ff       	jmp    c0102a9b <__alltraps>

c0103356 <vector216>:
.globl vector216
vector216:
  pushl $0
c0103356:	6a 00                	push   $0x0
  pushl $216
c0103358:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c010335d:	e9 39 f7 ff ff       	jmp    c0102a9b <__alltraps>

c0103362 <vector217>:
.globl vector217
vector217:
  pushl $0
c0103362:	6a 00                	push   $0x0
  pushl $217
c0103364:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c0103369:	e9 2d f7 ff ff       	jmp    c0102a9b <__alltraps>

c010336e <vector218>:
.globl vector218
vector218:
  pushl $0
c010336e:	6a 00                	push   $0x0
  pushl $218
c0103370:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c0103375:	e9 21 f7 ff ff       	jmp    c0102a9b <__alltraps>

c010337a <vector219>:
.globl vector219
vector219:
  pushl $0
c010337a:	6a 00                	push   $0x0
  pushl $219
c010337c:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c0103381:	e9 15 f7 ff ff       	jmp    c0102a9b <__alltraps>

c0103386 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103386:	6a 00                	push   $0x0
  pushl $220
c0103388:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c010338d:	e9 09 f7 ff ff       	jmp    c0102a9b <__alltraps>

c0103392 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103392:	6a 00                	push   $0x0
  pushl $221
c0103394:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103399:	e9 fd f6 ff ff       	jmp    c0102a9b <__alltraps>

c010339e <vector222>:
.globl vector222
vector222:
  pushl $0
c010339e:	6a 00                	push   $0x0
  pushl $222
c01033a0:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c01033a5:	e9 f1 f6 ff ff       	jmp    c0102a9b <__alltraps>

c01033aa <vector223>:
.globl vector223
vector223:
  pushl $0
c01033aa:	6a 00                	push   $0x0
  pushl $223
c01033ac:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c01033b1:	e9 e5 f6 ff ff       	jmp    c0102a9b <__alltraps>

c01033b6 <vector224>:
.globl vector224
vector224:
  pushl $0
c01033b6:	6a 00                	push   $0x0
  pushl $224
c01033b8:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c01033bd:	e9 d9 f6 ff ff       	jmp    c0102a9b <__alltraps>

c01033c2 <vector225>:
.globl vector225
vector225:
  pushl $0
c01033c2:	6a 00                	push   $0x0
  pushl $225
c01033c4:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c01033c9:	e9 cd f6 ff ff       	jmp    c0102a9b <__alltraps>

c01033ce <vector226>:
.globl vector226
vector226:
  pushl $0
c01033ce:	6a 00                	push   $0x0
  pushl $226
c01033d0:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c01033d5:	e9 c1 f6 ff ff       	jmp    c0102a9b <__alltraps>

c01033da <vector227>:
.globl vector227
vector227:
  pushl $0
c01033da:	6a 00                	push   $0x0
  pushl $227
c01033dc:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c01033e1:	e9 b5 f6 ff ff       	jmp    c0102a9b <__alltraps>

c01033e6 <vector228>:
.globl vector228
vector228:
  pushl $0
c01033e6:	6a 00                	push   $0x0
  pushl $228
c01033e8:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c01033ed:	e9 a9 f6 ff ff       	jmp    c0102a9b <__alltraps>

c01033f2 <vector229>:
.globl vector229
vector229:
  pushl $0
c01033f2:	6a 00                	push   $0x0
  pushl $229
c01033f4:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c01033f9:	e9 9d f6 ff ff       	jmp    c0102a9b <__alltraps>

c01033fe <vector230>:
.globl vector230
vector230:
  pushl $0
c01033fe:	6a 00                	push   $0x0
  pushl $230
c0103400:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103405:	e9 91 f6 ff ff       	jmp    c0102a9b <__alltraps>

c010340a <vector231>:
.globl vector231
vector231:
  pushl $0
c010340a:	6a 00                	push   $0x0
  pushl $231
c010340c:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0103411:	e9 85 f6 ff ff       	jmp    c0102a9b <__alltraps>

c0103416 <vector232>:
.globl vector232
vector232:
  pushl $0
c0103416:	6a 00                	push   $0x0
  pushl $232
c0103418:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c010341d:	e9 79 f6 ff ff       	jmp    c0102a9b <__alltraps>

c0103422 <vector233>:
.globl vector233
vector233:
  pushl $0
c0103422:	6a 00                	push   $0x0
  pushl $233
c0103424:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c0103429:	e9 6d f6 ff ff       	jmp    c0102a9b <__alltraps>

c010342e <vector234>:
.globl vector234
vector234:
  pushl $0
c010342e:	6a 00                	push   $0x0
  pushl $234
c0103430:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c0103435:	e9 61 f6 ff ff       	jmp    c0102a9b <__alltraps>

c010343a <vector235>:
.globl vector235
vector235:
  pushl $0
c010343a:	6a 00                	push   $0x0
  pushl $235
c010343c:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c0103441:	e9 55 f6 ff ff       	jmp    c0102a9b <__alltraps>

c0103446 <vector236>:
.globl vector236
vector236:
  pushl $0
c0103446:	6a 00                	push   $0x0
  pushl $236
c0103448:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c010344d:	e9 49 f6 ff ff       	jmp    c0102a9b <__alltraps>

c0103452 <vector237>:
.globl vector237
vector237:
  pushl $0
c0103452:	6a 00                	push   $0x0
  pushl $237
c0103454:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c0103459:	e9 3d f6 ff ff       	jmp    c0102a9b <__alltraps>

c010345e <vector238>:
.globl vector238
vector238:
  pushl $0
c010345e:	6a 00                	push   $0x0
  pushl $238
c0103460:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c0103465:	e9 31 f6 ff ff       	jmp    c0102a9b <__alltraps>

c010346a <vector239>:
.globl vector239
vector239:
  pushl $0
c010346a:	6a 00                	push   $0x0
  pushl $239
c010346c:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c0103471:	e9 25 f6 ff ff       	jmp    c0102a9b <__alltraps>

c0103476 <vector240>:
.globl vector240
vector240:
  pushl $0
c0103476:	6a 00                	push   $0x0
  pushl $240
c0103478:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c010347d:	e9 19 f6 ff ff       	jmp    c0102a9b <__alltraps>

c0103482 <vector241>:
.globl vector241
vector241:
  pushl $0
c0103482:	6a 00                	push   $0x0
  pushl $241
c0103484:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0103489:	e9 0d f6 ff ff       	jmp    c0102a9b <__alltraps>

c010348e <vector242>:
.globl vector242
vector242:
  pushl $0
c010348e:	6a 00                	push   $0x0
  pushl $242
c0103490:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103495:	e9 01 f6 ff ff       	jmp    c0102a9b <__alltraps>

c010349a <vector243>:
.globl vector243
vector243:
  pushl $0
c010349a:	6a 00                	push   $0x0
  pushl $243
c010349c:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c01034a1:	e9 f5 f5 ff ff       	jmp    c0102a9b <__alltraps>

c01034a6 <vector244>:
.globl vector244
vector244:
  pushl $0
c01034a6:	6a 00                	push   $0x0
  pushl $244
c01034a8:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c01034ad:	e9 e9 f5 ff ff       	jmp    c0102a9b <__alltraps>

c01034b2 <vector245>:
.globl vector245
vector245:
  pushl $0
c01034b2:	6a 00                	push   $0x0
  pushl $245
c01034b4:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c01034b9:	e9 dd f5 ff ff       	jmp    c0102a9b <__alltraps>

c01034be <vector246>:
.globl vector246
vector246:
  pushl $0
c01034be:	6a 00                	push   $0x0
  pushl $246
c01034c0:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c01034c5:	e9 d1 f5 ff ff       	jmp    c0102a9b <__alltraps>

c01034ca <vector247>:
.globl vector247
vector247:
  pushl $0
c01034ca:	6a 00                	push   $0x0
  pushl $247
c01034cc:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c01034d1:	e9 c5 f5 ff ff       	jmp    c0102a9b <__alltraps>

c01034d6 <vector248>:
.globl vector248
vector248:
  pushl $0
c01034d6:	6a 00                	push   $0x0
  pushl $248
c01034d8:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c01034dd:	e9 b9 f5 ff ff       	jmp    c0102a9b <__alltraps>

c01034e2 <vector249>:
.globl vector249
vector249:
  pushl $0
c01034e2:	6a 00                	push   $0x0
  pushl $249
c01034e4:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c01034e9:	e9 ad f5 ff ff       	jmp    c0102a9b <__alltraps>

c01034ee <vector250>:
.globl vector250
vector250:
  pushl $0
c01034ee:	6a 00                	push   $0x0
  pushl $250
c01034f0:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c01034f5:	e9 a1 f5 ff ff       	jmp    c0102a9b <__alltraps>

c01034fa <vector251>:
.globl vector251
vector251:
  pushl $0
c01034fa:	6a 00                	push   $0x0
  pushl $251
c01034fc:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0103501:	e9 95 f5 ff ff       	jmp    c0102a9b <__alltraps>

c0103506 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103506:	6a 00                	push   $0x0
  pushl $252
c0103508:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c010350d:	e9 89 f5 ff ff       	jmp    c0102a9b <__alltraps>

c0103512 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103512:	6a 00                	push   $0x0
  pushl $253
c0103514:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0103519:	e9 7d f5 ff ff       	jmp    c0102a9b <__alltraps>

c010351e <vector254>:
.globl vector254
vector254:
  pushl $0
c010351e:	6a 00                	push   $0x0
  pushl $254
c0103520:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c0103525:	e9 71 f5 ff ff       	jmp    c0102a9b <__alltraps>

c010352a <vector255>:
.globl vector255
vector255:
  pushl $0
c010352a:	6a 00                	push   $0x0
  pushl $255
c010352c:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c0103531:	e9 65 f5 ff ff       	jmp    c0102a9b <__alltraps>

c0103536 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0103536:	55                   	push   %ebp
c0103537:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0103539:	8b 55 08             	mov    0x8(%ebp),%edx
c010353c:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0103541:	29 c2                	sub    %eax,%edx
c0103543:	89 d0                	mov    %edx,%eax
c0103545:	c1 f8 05             	sar    $0x5,%eax
}
c0103548:	5d                   	pop    %ebp
c0103549:	c3                   	ret    

c010354a <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010354a:	55                   	push   %ebp
c010354b:	89 e5                	mov    %esp,%ebp
c010354d:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0103550:	8b 45 08             	mov    0x8(%ebp),%eax
c0103553:	89 04 24             	mov    %eax,(%esp)
c0103556:	e8 db ff ff ff       	call   c0103536 <page2ppn>
c010355b:	c1 e0 0c             	shl    $0xc,%eax
}
c010355e:	c9                   	leave  
c010355f:	c3                   	ret    

c0103560 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0103560:	55                   	push   %ebp
c0103561:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0103563:	8b 45 08             	mov    0x8(%ebp),%eax
c0103566:	8b 00                	mov    (%eax),%eax
}
c0103568:	5d                   	pop    %ebp
c0103569:	c3                   	ret    

c010356a <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c010356a:	55                   	push   %ebp
c010356b:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c010356d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103570:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103573:	89 10                	mov    %edx,(%eax)
}
c0103575:	5d                   	pop    %ebp
c0103576:	c3                   	ret    

c0103577 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0103577:	55                   	push   %ebp
c0103578:	89 e5                	mov    %esp,%ebp
c010357a:	83 ec 10             	sub    $0x10,%esp
c010357d:	c7 45 fc 14 30 15 c0 	movl   $0xc0153014,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103584:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103587:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010358a:	89 50 04             	mov    %edx,0x4(%eax)
c010358d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103590:	8b 50 04             	mov    0x4(%eax),%edx
c0103593:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103596:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0103598:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c010359f:	00 00 00 
}
c01035a2:	c9                   	leave  
c01035a3:	c3                   	ret    

c01035a4 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c01035a4:	55                   	push   %ebp
c01035a5:	89 e5                	mov    %esp,%ebp
c01035a7:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c01035aa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01035ae:	75 24                	jne    c01035d4 <default_alloc_pages+0x30>
c01035b0:	c7 44 24 0c d0 59 11 	movl   $0xc01159d0,0xc(%esp)
c01035b7:	c0 
c01035b8:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c01035bf:	c0 
c01035c0:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c01035c7:	00 
c01035c8:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c01035cf:	e8 f4 d8 ff ff       	call   c0100ec8 <__panic>
    if (n > nr_free) {
c01035d4:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c01035d9:	3b 45 08             	cmp    0x8(%ebp),%eax
c01035dc:	73 0a                	jae    c01035e8 <default_alloc_pages+0x44>
        return NULL;
c01035de:	b8 00 00 00 00       	mov    $0x0,%eax
c01035e3:	e9 0d 01 00 00       	jmp    c01036f5 <default_alloc_pages+0x151>
    }
    struct Page *page = NULL;
c01035e8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    list_entry_t *le = &free_list;
c01035ef:	c7 45 f4 14 30 15 c0 	movl   $0xc0153014,-0xc(%ebp)
    list_entry_t *temp;
    while ((le = list_next(le)) != &free_list) {
c01035f6:	e9 d9 00 00 00       	jmp    c01036d4 <default_alloc_pages+0x130>
        page = le2page(le, page_link);
c01035fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035fe:	83 e8 0c             	sub    $0xc,%eax
c0103601:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (page->property >= n) {
c0103604:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103607:	8b 40 08             	mov    0x8(%eax),%eax
c010360a:	3b 45 08             	cmp    0x8(%ebp),%eax
c010360d:	0f 82 c1 00 00 00    	jb     c01036d4 <default_alloc_pages+0x130>
            int i;
            for (i=0; i<n; i++) {
c0103613:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010361a:	eb 7c                	jmp    c0103698 <default_alloc_pages+0xf4>
                 struct Page* tempp = le2page(le, page_link);
c010361c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010361f:	83 e8 0c             	sub    $0xc,%eax
c0103622:	89 45 e8             	mov    %eax,-0x18(%ebp)
                 SetPageReserved(tempp);
c0103625:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103628:	83 c0 04             	add    $0x4,%eax
c010362b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0103632:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103635:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103638:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010363b:	0f ab 10             	bts    %edx,(%eax)
                 ClearPageProperty(tempp);
c010363e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103641:	83 c0 04             	add    $0x4,%eax
c0103644:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c010364b:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010364e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103651:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103654:	0f b3 10             	btr    %edx,(%eax)
c0103657:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010365a:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010365d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103660:	8b 40 04             	mov    0x4(%eax),%eax
                 temp = list_next(le);
c0103663:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103666:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103669:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010366c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010366f:	8b 40 04             	mov    0x4(%eax),%eax
c0103672:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103675:	8b 12                	mov    (%edx),%edx
c0103677:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c010367a:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010367d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103680:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103683:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103686:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0103689:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010368c:	89 10                	mov    %edx,(%eax)
                 list_del(le);
                 le = temp;
c010368e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103691:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *temp;
    while ((le = list_next(le)) != &free_list) {
        page = le2page(le, page_link);
        if (page->property >= n) {
            int i;
            for (i=0; i<n; i++) {
c0103694:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0103698:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010369b:	3b 45 08             	cmp    0x8(%ebp),%eax
c010369e:	0f 82 78 ff ff ff    	jb     c010361c <default_alloc_pages+0x78>
                 ClearPageProperty(tempp);
                 temp = list_next(le);
                 list_del(le);
                 le = temp;
            }
            size_t rest = page->property - n;
c01036a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01036a7:	8b 40 08             	mov    0x8(%eax),%eax
c01036aa:	2b 45 08             	sub    0x8(%ebp),%eax
c01036ad:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if (rest > 0) {
c01036b0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01036b4:	74 0c                	je     c01036c2 <default_alloc_pages+0x11e>
                (le2page(le, page_link))->property = rest;
c01036b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036b9:	8d 50 f4             	lea    -0xc(%eax),%edx
c01036bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01036bf:	89 42 08             	mov    %eax,0x8(%edx)
            }
            nr_free -= n;
c01036c2:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c01036c7:	2b 45 08             	sub    0x8(%ebp),%eax
c01036ca:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
            return page;
c01036cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01036d2:	eb 21                	jmp    c01036f5 <default_alloc_pages+0x151>
c01036d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036d7:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01036da:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01036dd:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    list_entry_t *temp;
    while ((le = list_next(le)) != &free_list) {
c01036e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01036e3:	81 7d f4 14 30 15 c0 	cmpl   $0xc0153014,-0xc(%ebp)
c01036ea:	0f 85 0b ff ff ff    	jne    c01035fb <default_alloc_pages+0x57>
            }
            nr_free -= n;
            return page;
        }
    }
    return NULL;
c01036f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01036f5:	c9                   	leave  
c01036f6:	c3                   	ret    

c01036f7 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01036f7:	55                   	push   %ebp
c01036f8:	89 e5                	mov    %esp,%ebp
c01036fa:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c01036fd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103701:	75 24                	jne    c0103727 <default_free_pages+0x30>
c0103703:	c7 44 24 0c d0 59 11 	movl   $0xc01159d0,0xc(%esp)
c010370a:	c0 
c010370b:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103712:	c0 
c0103713:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c010371a:	00 
c010371b:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103722:	e8 a1 d7 ff ff       	call   c0100ec8 <__panic>
    struct Page *p = base;
c0103727:	8b 45 08             	mov    0x8(%ebp),%eax
c010372a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *le = &free_list;
c010372d:	c7 45 f0 14 30 15 c0 	movl   $0xc0153014,-0x10(%ebp)
    while ((le=list_next(le)) != &free_list) {
c0103734:	eb 0d                	jmp    c0103743 <default_free_pages+0x4c>
        if ((le2page(le, page_link)) > base)
c0103736:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103739:	83 e8 0c             	sub    $0xc,%eax
c010373c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010373f:	76 02                	jbe    c0103743 <default_free_pages+0x4c>
            break;
c0103741:	eb 18                	jmp    c010375b <default_free_pages+0x64>
c0103743:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103746:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103749:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010374c:	8b 40 04             	mov    0x4(%eax),%eax
static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    list_entry_t *le = &free_list;
    while ((le=list_next(le)) != &free_list) {
c010374f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103752:	81 7d f0 14 30 15 c0 	cmpl   $0xc0153014,-0x10(%ebp)
c0103759:	75 db                	jne    c0103736 <default_free_pages+0x3f>
        if ((le2page(le, page_link)) > base)
            break;
    }
    for (; p != base + n; p++) {
c010375b:	e9 8d 00 00 00       	jmp    c01037ed <default_free_pages+0xf6>
        p->flags = p->property = 0;
c0103760:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103763:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c010376a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010376d:	8b 50 08             	mov    0x8(%eax),%edx
c0103770:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103773:	89 50 04             	mov    %edx,0x4(%eax)
        SetPageProperty(p);
c0103776:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103779:	83 c0 04             	add    $0x4,%eax
c010377c:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c0103783:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103786:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103789:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010378c:	0f ab 10             	bts    %edx,(%eax)
        set_page_ref(p, 0);
c010378f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103796:	00 
c0103797:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010379a:	89 04 24             	mov    %eax,(%esp)
c010379d:	e8 c8 fd ff ff       	call   c010356a <set_page_ref>
        list_add_before(le, &(p->page_link));
c01037a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037a5:	8d 50 0c             	lea    0xc(%eax),%edx
c01037a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01037ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01037b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037b4:	8b 00                	mov    (%eax),%eax
c01037b6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01037b9:	89 55 d8             	mov    %edx,-0x28(%ebp)
c01037bc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01037bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01037c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01037c8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01037cb:	89 10                	mov    %edx,(%eax)
c01037cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01037d0:	8b 10                	mov    (%eax),%edx
c01037d2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01037d5:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01037d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01037db:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01037de:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01037e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01037e4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01037e7:	89 10                	mov    %edx,(%eax)
    list_entry_t *le = &free_list;
    while ((le=list_next(le)) != &free_list) {
        if ((le2page(le, page_link)) > base)
            break;
    }
    for (; p != base + n; p++) {
c01037e9:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c01037ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01037f0:	c1 e0 05             	shl    $0x5,%eax
c01037f3:	89 c2                	mov    %eax,%edx
c01037f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01037f8:	01 d0                	add    %edx,%eax
c01037fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01037fd:	0f 85 5d ff ff ff    	jne    c0103760 <default_free_pages+0x69>
        p->flags = p->property = 0;
        SetPageProperty(p);
        set_page_ref(p, 0);
        list_add_before(le, &(p->page_link));
    }
    base->property = n;
c0103803:	8b 45 08             	mov    0x8(%ebp),%eax
c0103806:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103809:	89 50 08             	mov    %edx,0x8(%eax)
    p = le2page(le, page_link);
c010380c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010380f:	83 e8 0c             	sub    $0xc,%eax
c0103812:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (base + n == p) {
c0103815:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103818:	c1 e0 05             	shl    $0x5,%eax
c010381b:	89 c2                	mov    %eax,%edx
c010381d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103820:	01 d0                	add    %edx,%eax
c0103822:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103825:	75 1e                	jne    c0103845 <default_free_pages+0x14e>
        base->property += p->property;
c0103827:	8b 45 08             	mov    0x8(%ebp),%eax
c010382a:	8b 50 08             	mov    0x8(%eax),%edx
c010382d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103830:	8b 40 08             	mov    0x8(%eax),%eax
c0103833:	01 c2                	add    %eax,%edx
c0103835:	8b 45 08             	mov    0x8(%ebp),%eax
c0103838:	89 50 08             	mov    %edx,0x8(%eax)
        p->property = 0;
c010383b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010383e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    le = list_prev(&base->page_link);
c0103845:	8b 45 08             	mov    0x8(%ebp),%eax
c0103848:	83 c0 0c             	add    $0xc,%eax
c010384b:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010384e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103851:	8b 00                	mov    (%eax),%eax
c0103853:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((le != &free_list) && (le2page(le, page_link) + 1 == base)) {
c0103856:	81 7d f0 14 30 15 c0 	cmpl   $0xc0153014,-0x10(%ebp)
c010385d:	74 57                	je     c01038b6 <default_free_pages+0x1bf>
c010385f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103862:	83 c0 14             	add    $0x14,%eax
c0103865:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103868:	75 4c                	jne    c01038b6 <default_free_pages+0x1bf>
        while (le != &free_list) {
c010386a:	eb 41                	jmp    c01038ad <default_free_pages+0x1b6>
            p = le2page(le, page_link);
c010386c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010386f:	83 e8 0c             	sub    $0xc,%eax
c0103872:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (p->property > 0) {
c0103875:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103878:	8b 40 08             	mov    0x8(%eax),%eax
c010387b:	85 c0                	test   %eax,%eax
c010387d:	74 20                	je     c010389f <default_free_pages+0x1a8>
                p->property += base->property;
c010387f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103882:	8b 50 08             	mov    0x8(%eax),%edx
c0103885:	8b 45 08             	mov    0x8(%ebp),%eax
c0103888:	8b 40 08             	mov    0x8(%eax),%eax
c010388b:	01 c2                	add    %eax,%edx
c010388d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103890:	89 50 08             	mov    %edx,0x8(%eax)
                base->property = 0;
c0103893:	8b 45 08             	mov    0x8(%ebp),%eax
c0103896:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                break;
c010389d:	eb 17                	jmp    c01038b6 <default_free_pages+0x1bf>
c010389f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038a2:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01038a5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01038a8:	8b 00                	mov    (%eax),%eax
            }
            le = list_prev(le);
c01038aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
        base->property += p->property;
        p->property = 0;
    }
    le = list_prev(&base->page_link);
    if ((le != &free_list) && (le2page(le, page_link) + 1 == base)) {
        while (le != &free_list) {
c01038ad:	81 7d f0 14 30 15 c0 	cmpl   $0xc0153014,-0x10(%ebp)
c01038b4:	75 b6                	jne    c010386c <default_free_pages+0x175>
                break;
            }
            le = list_prev(le);
        }
    }
    nr_free += n;
c01038b6:	8b 15 1c 30 15 c0    	mov    0xc015301c,%edx
c01038bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038bf:	01 d0                	add    %edx,%eax
c01038c1:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
}
c01038c6:	c9                   	leave  
c01038c7:	c3                   	ret    

c01038c8 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c01038c8:	55                   	push   %ebp
c01038c9:	89 e5                	mov    %esp,%ebp
    return nr_free;
c01038cb:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
}
c01038d0:	5d                   	pop    %ebp
c01038d1:	c3                   	ret    

c01038d2 <basic_check>:

static void
basic_check(void) {
c01038d2:	55                   	push   %ebp
c01038d3:	89 e5                	mov    %esp,%ebp
c01038d5:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c01038d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01038df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01038e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c01038eb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01038f2:	e8 dc 15 00 00       	call   c0104ed3 <alloc_pages>
c01038f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01038fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01038fe:	75 24                	jne    c0103924 <basic_check+0x52>
c0103900:	c7 44 24 0c 01 5a 11 	movl   $0xc0115a01,0xc(%esp)
c0103907:	c0 
c0103908:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c010390f:	c0 
c0103910:	c7 44 24 04 91 00 00 	movl   $0x91,0x4(%esp)
c0103917:	00 
c0103918:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c010391f:	e8 a4 d5 ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103924:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010392b:	e8 a3 15 00 00       	call   c0104ed3 <alloc_pages>
c0103930:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103933:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103937:	75 24                	jne    c010395d <basic_check+0x8b>
c0103939:	c7 44 24 0c 1d 5a 11 	movl   $0xc0115a1d,0xc(%esp)
c0103940:	c0 
c0103941:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103948:	c0 
c0103949:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c0103950:	00 
c0103951:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103958:	e8 6b d5 ff ff       	call   c0100ec8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c010395d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103964:	e8 6a 15 00 00       	call   c0104ed3 <alloc_pages>
c0103969:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010396c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103970:	75 24                	jne    c0103996 <basic_check+0xc4>
c0103972:	c7 44 24 0c 39 5a 11 	movl   $0xc0115a39,0xc(%esp)
c0103979:	c0 
c010397a:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103981:	c0 
c0103982:	c7 44 24 04 93 00 00 	movl   $0x93,0x4(%esp)
c0103989:	00 
c010398a:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103991:	e8 32 d5 ff ff       	call   c0100ec8 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103996:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103999:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010399c:	74 10                	je     c01039ae <basic_check+0xdc>
c010399e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01039a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01039a4:	74 08                	je     c01039ae <basic_check+0xdc>
c01039a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01039ac:	75 24                	jne    c01039d2 <basic_check+0x100>
c01039ae:	c7 44 24 0c 58 5a 11 	movl   $0xc0115a58,0xc(%esp)
c01039b5:	c0 
c01039b6:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c01039bd:	c0 
c01039be:	c7 44 24 04 95 00 00 	movl   $0x95,0x4(%esp)
c01039c5:	00 
c01039c6:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c01039cd:	e8 f6 d4 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c01039d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01039d5:	89 04 24             	mov    %eax,(%esp)
c01039d8:	e8 83 fb ff ff       	call   c0103560 <page_ref>
c01039dd:	85 c0                	test   %eax,%eax
c01039df:	75 1e                	jne    c01039ff <basic_check+0x12d>
c01039e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039e4:	89 04 24             	mov    %eax,(%esp)
c01039e7:	e8 74 fb ff ff       	call   c0103560 <page_ref>
c01039ec:	85 c0                	test   %eax,%eax
c01039ee:	75 0f                	jne    c01039ff <basic_check+0x12d>
c01039f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039f3:	89 04 24             	mov    %eax,(%esp)
c01039f6:	e8 65 fb ff ff       	call   c0103560 <page_ref>
c01039fb:	85 c0                	test   %eax,%eax
c01039fd:	74 24                	je     c0103a23 <basic_check+0x151>
c01039ff:	c7 44 24 0c 7c 5a 11 	movl   $0xc0115a7c,0xc(%esp)
c0103a06:	c0 
c0103a07:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103a0e:	c0 
c0103a0f:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c0103a16:	00 
c0103a17:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103a1e:	e8 a5 d4 ff ff       	call   c0100ec8 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103a23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103a26:	89 04 24             	mov    %eax,(%esp)
c0103a29:	e8 1c fb ff ff       	call   c010354a <page2pa>
c0103a2e:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103a34:	c1 e2 0c             	shl    $0xc,%edx
c0103a37:	39 d0                	cmp    %edx,%eax
c0103a39:	72 24                	jb     c0103a5f <basic_check+0x18d>
c0103a3b:	c7 44 24 0c b8 5a 11 	movl   $0xc0115ab8,0xc(%esp)
c0103a42:	c0 
c0103a43:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103a4a:	c0 
c0103a4b:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0103a52:	00 
c0103a53:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103a5a:	e8 69 d4 ff ff       	call   c0100ec8 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103a5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a62:	89 04 24             	mov    %eax,(%esp)
c0103a65:	e8 e0 fa ff ff       	call   c010354a <page2pa>
c0103a6a:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103a70:	c1 e2 0c             	shl    $0xc,%edx
c0103a73:	39 d0                	cmp    %edx,%eax
c0103a75:	72 24                	jb     c0103a9b <basic_check+0x1c9>
c0103a77:	c7 44 24 0c d5 5a 11 	movl   $0xc0115ad5,0xc(%esp)
c0103a7e:	c0 
c0103a7f:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103a86:	c0 
c0103a87:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
c0103a8e:	00 
c0103a8f:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103a96:	e8 2d d4 ff ff       	call   c0100ec8 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a9e:	89 04 24             	mov    %eax,(%esp)
c0103aa1:	e8 a4 fa ff ff       	call   c010354a <page2pa>
c0103aa6:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103aac:	c1 e2 0c             	shl    $0xc,%edx
c0103aaf:	39 d0                	cmp    %edx,%eax
c0103ab1:	72 24                	jb     c0103ad7 <basic_check+0x205>
c0103ab3:	c7 44 24 0c f2 5a 11 	movl   $0xc0115af2,0xc(%esp)
c0103aba:	c0 
c0103abb:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103ac2:	c0 
c0103ac3:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c0103aca:	00 
c0103acb:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103ad2:	e8 f1 d3 ff ff       	call   c0100ec8 <__panic>

    list_entry_t free_list_store = free_list;
c0103ad7:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c0103adc:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c0103ae2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103ae5:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103ae8:	c7 45 e0 14 30 15 c0 	movl   $0xc0153014,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103aef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103af2:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103af5:	89 50 04             	mov    %edx,0x4(%eax)
c0103af8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103afb:	8b 50 04             	mov    0x4(%eax),%edx
c0103afe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103b01:	89 10                	mov    %edx,(%eax)
c0103b03:	c7 45 dc 14 30 15 c0 	movl   $0xc0153014,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103b0a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103b0d:	8b 40 04             	mov    0x4(%eax),%eax
c0103b10:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103b13:	0f 94 c0             	sete   %al
c0103b16:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103b19:	85 c0                	test   %eax,%eax
c0103b1b:	75 24                	jne    c0103b41 <basic_check+0x26f>
c0103b1d:	c7 44 24 0c 0f 5b 11 	movl   $0xc0115b0f,0xc(%esp)
c0103b24:	c0 
c0103b25:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103b2c:	c0 
c0103b2d:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c0103b34:	00 
c0103b35:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103b3c:	e8 87 d3 ff ff       	call   c0100ec8 <__panic>

    unsigned int nr_free_store = nr_free;
c0103b41:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103b46:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103b49:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c0103b50:	00 00 00 

    assert(alloc_page() == NULL);
c0103b53:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b5a:	e8 74 13 00 00       	call   c0104ed3 <alloc_pages>
c0103b5f:	85 c0                	test   %eax,%eax
c0103b61:	74 24                	je     c0103b87 <basic_check+0x2b5>
c0103b63:	c7 44 24 0c 26 5b 11 	movl   $0xc0115b26,0xc(%esp)
c0103b6a:	c0 
c0103b6b:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103b72:	c0 
c0103b73:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c0103b7a:	00 
c0103b7b:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103b82:	e8 41 d3 ff ff       	call   c0100ec8 <__panic>

    free_page(p0);
c0103b87:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103b8e:	00 
c0103b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b92:	89 04 24             	mov    %eax,(%esp)
c0103b95:	e8 a4 13 00 00       	call   c0104f3e <free_pages>
    free_page(p1);
c0103b9a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103ba1:	00 
c0103ba2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ba5:	89 04 24             	mov    %eax,(%esp)
c0103ba8:	e8 91 13 00 00       	call   c0104f3e <free_pages>
    free_page(p2);
c0103bad:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103bb4:	00 
c0103bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bb8:	89 04 24             	mov    %eax,(%esp)
c0103bbb:	e8 7e 13 00 00       	call   c0104f3e <free_pages>
    assert(nr_free == 3);
c0103bc0:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103bc5:	83 f8 03             	cmp    $0x3,%eax
c0103bc8:	74 24                	je     c0103bee <basic_check+0x31c>
c0103bca:	c7 44 24 0c 3b 5b 11 	movl   $0xc0115b3b,0xc(%esp)
c0103bd1:	c0 
c0103bd2:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103bd9:	c0 
c0103bda:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c0103be1:	00 
c0103be2:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103be9:	e8 da d2 ff ff       	call   c0100ec8 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103bee:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103bf5:	e8 d9 12 00 00       	call   c0104ed3 <alloc_pages>
c0103bfa:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103bfd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103c01:	75 24                	jne    c0103c27 <basic_check+0x355>
c0103c03:	c7 44 24 0c 01 5a 11 	movl   $0xc0115a01,0xc(%esp)
c0103c0a:	c0 
c0103c0b:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103c12:	c0 
c0103c13:	c7 44 24 04 aa 00 00 	movl   $0xaa,0x4(%esp)
c0103c1a:	00 
c0103c1b:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103c22:	e8 a1 d2 ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103c27:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103c2e:	e8 a0 12 00 00       	call   c0104ed3 <alloc_pages>
c0103c33:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103c36:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103c3a:	75 24                	jne    c0103c60 <basic_check+0x38e>
c0103c3c:	c7 44 24 0c 1d 5a 11 	movl   $0xc0115a1d,0xc(%esp)
c0103c43:	c0 
c0103c44:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103c4b:	c0 
c0103c4c:	c7 44 24 04 ab 00 00 	movl   $0xab,0x4(%esp)
c0103c53:	00 
c0103c54:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103c5b:	e8 68 d2 ff ff       	call   c0100ec8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103c60:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103c67:	e8 67 12 00 00       	call   c0104ed3 <alloc_pages>
c0103c6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103c6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103c73:	75 24                	jne    c0103c99 <basic_check+0x3c7>
c0103c75:	c7 44 24 0c 39 5a 11 	movl   $0xc0115a39,0xc(%esp)
c0103c7c:	c0 
c0103c7d:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103c84:	c0 
c0103c85:	c7 44 24 04 ac 00 00 	movl   $0xac,0x4(%esp)
c0103c8c:	00 
c0103c8d:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103c94:	e8 2f d2 ff ff       	call   c0100ec8 <__panic>

    assert(alloc_page() == NULL);
c0103c99:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ca0:	e8 2e 12 00 00       	call   c0104ed3 <alloc_pages>
c0103ca5:	85 c0                	test   %eax,%eax
c0103ca7:	74 24                	je     c0103ccd <basic_check+0x3fb>
c0103ca9:	c7 44 24 0c 26 5b 11 	movl   $0xc0115b26,0xc(%esp)
c0103cb0:	c0 
c0103cb1:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103cb8:	c0 
c0103cb9:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c0103cc0:	00 
c0103cc1:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103cc8:	e8 fb d1 ff ff       	call   c0100ec8 <__panic>

    free_page(p0);
c0103ccd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103cd4:	00 
c0103cd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103cd8:	89 04 24             	mov    %eax,(%esp)
c0103cdb:	e8 5e 12 00 00       	call   c0104f3e <free_pages>
c0103ce0:	c7 45 d8 14 30 15 c0 	movl   $0xc0153014,-0x28(%ebp)
c0103ce7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103cea:	8b 40 04             	mov    0x4(%eax),%eax
c0103ced:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103cf0:	0f 94 c0             	sete   %al
c0103cf3:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103cf6:	85 c0                	test   %eax,%eax
c0103cf8:	74 24                	je     c0103d1e <basic_check+0x44c>
c0103cfa:	c7 44 24 0c 48 5b 11 	movl   $0xc0115b48,0xc(%esp)
c0103d01:	c0 
c0103d02:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103d09:	c0 
c0103d0a:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0103d11:	00 
c0103d12:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103d19:	e8 aa d1 ff ff       	call   c0100ec8 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103d1e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103d25:	e8 a9 11 00 00       	call   c0104ed3 <alloc_pages>
c0103d2a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103d2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103d30:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103d33:	74 24                	je     c0103d59 <basic_check+0x487>
c0103d35:	c7 44 24 0c 60 5b 11 	movl   $0xc0115b60,0xc(%esp)
c0103d3c:	c0 
c0103d3d:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103d44:	c0 
c0103d45:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c0103d4c:	00 
c0103d4d:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103d54:	e8 6f d1 ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0103d59:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103d60:	e8 6e 11 00 00       	call   c0104ed3 <alloc_pages>
c0103d65:	85 c0                	test   %eax,%eax
c0103d67:	74 24                	je     c0103d8d <basic_check+0x4bb>
c0103d69:	c7 44 24 0c 26 5b 11 	movl   $0xc0115b26,0xc(%esp)
c0103d70:	c0 
c0103d71:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103d78:	c0 
c0103d79:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c0103d80:	00 
c0103d81:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103d88:	e8 3b d1 ff ff       	call   c0100ec8 <__panic>

    assert(nr_free == 0);
c0103d8d:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103d92:	85 c0                	test   %eax,%eax
c0103d94:	74 24                	je     c0103dba <basic_check+0x4e8>
c0103d96:	c7 44 24 0c 79 5b 11 	movl   $0xc0115b79,0xc(%esp)
c0103d9d:	c0 
c0103d9e:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103da5:	c0 
c0103da6:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0103dad:	00 
c0103dae:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103db5:	e8 0e d1 ff ff       	call   c0100ec8 <__panic>
    free_list = free_list_store;
c0103dba:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103dbd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103dc0:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c0103dc5:	89 15 18 30 15 c0    	mov    %edx,0xc0153018
    nr_free = nr_free_store;
c0103dcb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103dce:	a3 1c 30 15 c0       	mov    %eax,0xc015301c

    free_page(p);
c0103dd3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103dda:	00 
c0103ddb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103dde:	89 04 24             	mov    %eax,(%esp)
c0103de1:	e8 58 11 00 00       	call   c0104f3e <free_pages>
    free_page(p1);
c0103de6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103ded:	00 
c0103dee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103df1:	89 04 24             	mov    %eax,(%esp)
c0103df4:	e8 45 11 00 00       	call   c0104f3e <free_pages>
    free_page(p2);
c0103df9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e00:	00 
c0103e01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e04:	89 04 24             	mov    %eax,(%esp)
c0103e07:	e8 32 11 00 00       	call   c0104f3e <free_pages>
}
c0103e0c:	c9                   	leave  
c0103e0d:	c3                   	ret    

c0103e0e <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0103e0e:	55                   	push   %ebp
c0103e0f:	89 e5                	mov    %esp,%ebp
c0103e11:	53                   	push   %ebx
c0103e12:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0103e18:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103e1f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0103e26:	c7 45 ec 14 30 15 c0 	movl   $0xc0153014,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0103e2d:	eb 6b                	jmp    c0103e9a <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0103e2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103e32:	83 e8 0c             	sub    $0xc,%eax
c0103e35:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0103e38:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e3b:	83 c0 04             	add    $0x4,%eax
c0103e3e:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0103e45:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103e48:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103e4b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103e4e:	0f a3 10             	bt     %edx,(%eax)
c0103e51:	19 c0                	sbb    %eax,%eax
c0103e53:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c0103e56:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0103e5a:	0f 95 c0             	setne  %al
c0103e5d:	0f b6 c0             	movzbl %al,%eax
c0103e60:	85 c0                	test   %eax,%eax
c0103e62:	75 24                	jne    c0103e88 <default_check+0x7a>
c0103e64:	c7 44 24 0c 86 5b 11 	movl   $0xc0115b86,0xc(%esp)
c0103e6b:	c0 
c0103e6c:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103e73:	c0 
c0103e74:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0103e7b:	00 
c0103e7c:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103e83:	e8 40 d0 ff ff       	call   c0100ec8 <__panic>
        count ++, total += p->property;
c0103e88:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103e8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e8f:	8b 50 08             	mov    0x8(%eax),%edx
c0103e92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103e95:	01 d0                	add    %edx,%eax
c0103e97:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103e9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103e9d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103ea0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103ea3:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0103ea6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103ea9:	81 7d ec 14 30 15 c0 	cmpl   $0xc0153014,-0x14(%ebp)
c0103eb0:	0f 85 79 ff ff ff    	jne    c0103e2f <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0103eb6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0103eb9:	e8 b2 10 00 00       	call   c0104f70 <nr_free_pages>
c0103ebe:	39 c3                	cmp    %eax,%ebx
c0103ec0:	74 24                	je     c0103ee6 <default_check+0xd8>
c0103ec2:	c7 44 24 0c 96 5b 11 	movl   $0xc0115b96,0xc(%esp)
c0103ec9:	c0 
c0103eca:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103ed1:	c0 
c0103ed2:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0103ed9:	00 
c0103eda:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103ee1:	e8 e2 cf ff ff       	call   c0100ec8 <__panic>

    basic_check();
c0103ee6:	e8 e7 f9 ff ff       	call   c01038d2 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0103eeb:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0103ef2:	e8 dc 0f 00 00       	call   c0104ed3 <alloc_pages>
c0103ef7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0103efa:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0103efe:	75 24                	jne    c0103f24 <default_check+0x116>
c0103f00:	c7 44 24 0c af 5b 11 	movl   $0xc0115baf,0xc(%esp)
c0103f07:	c0 
c0103f08:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103f0f:	c0 
c0103f10:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103f17:	00 
c0103f18:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103f1f:	e8 a4 cf ff ff       	call   c0100ec8 <__panic>
    assert(!PageProperty(p0));
c0103f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f27:	83 c0 04             	add    $0x4,%eax
c0103f2a:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103f31:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103f34:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103f37:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103f3a:	0f a3 10             	bt     %edx,(%eax)
c0103f3d:	19 c0                	sbb    %eax,%eax
c0103f3f:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0103f42:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0103f46:	0f 95 c0             	setne  %al
c0103f49:	0f b6 c0             	movzbl %al,%eax
c0103f4c:	85 c0                	test   %eax,%eax
c0103f4e:	74 24                	je     c0103f74 <default_check+0x166>
c0103f50:	c7 44 24 0c ba 5b 11 	movl   $0xc0115bba,0xc(%esp)
c0103f57:	c0 
c0103f58:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103f5f:	c0 
c0103f60:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0103f67:	00 
c0103f68:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103f6f:	e8 54 cf ff ff       	call   c0100ec8 <__panic>

    list_entry_t free_list_store = free_list;
c0103f74:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c0103f79:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c0103f7f:	89 45 80             	mov    %eax,-0x80(%ebp)
c0103f82:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0103f85:	c7 45 b4 14 30 15 c0 	movl   $0xc0153014,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103f8c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103f8f:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0103f92:	89 50 04             	mov    %edx,0x4(%eax)
c0103f95:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103f98:	8b 50 04             	mov    0x4(%eax),%edx
c0103f9b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103f9e:	89 10                	mov    %edx,(%eax)
c0103fa0:	c7 45 b0 14 30 15 c0 	movl   $0xc0153014,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103fa7:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0103faa:	8b 40 04             	mov    0x4(%eax),%eax
c0103fad:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c0103fb0:	0f 94 c0             	sete   %al
c0103fb3:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103fb6:	85 c0                	test   %eax,%eax
c0103fb8:	75 24                	jne    c0103fde <default_check+0x1d0>
c0103fba:	c7 44 24 0c 0f 5b 11 	movl   $0xc0115b0f,0xc(%esp)
c0103fc1:	c0 
c0103fc2:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103fc9:	c0 
c0103fca:	c7 44 24 04 d5 00 00 	movl   $0xd5,0x4(%esp)
c0103fd1:	00 
c0103fd2:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0103fd9:	e8 ea ce ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0103fde:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fe5:	e8 e9 0e 00 00       	call   c0104ed3 <alloc_pages>
c0103fea:	85 c0                	test   %eax,%eax
c0103fec:	74 24                	je     c0104012 <default_check+0x204>
c0103fee:	c7 44 24 0c 26 5b 11 	movl   $0xc0115b26,0xc(%esp)
c0103ff5:	c0 
c0103ff6:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0103ffd:	c0 
c0103ffe:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0104005:	00 
c0104006:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c010400d:	e8 b6 ce ff ff       	call   c0100ec8 <__panic>

    unsigned int nr_free_store = nr_free;
c0104012:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0104017:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c010401a:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c0104021:	00 00 00 

    free_pages(p0 + 2, 3);
c0104024:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104027:	83 c0 40             	add    $0x40,%eax
c010402a:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0104031:	00 
c0104032:	89 04 24             	mov    %eax,(%esp)
c0104035:	e8 04 0f 00 00       	call   c0104f3e <free_pages>
    assert(alloc_pages(4) == NULL);
c010403a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0104041:	e8 8d 0e 00 00       	call   c0104ed3 <alloc_pages>
c0104046:	85 c0                	test   %eax,%eax
c0104048:	74 24                	je     c010406e <default_check+0x260>
c010404a:	c7 44 24 0c cc 5b 11 	movl   $0xc0115bcc,0xc(%esp)
c0104051:	c0 
c0104052:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0104059:	c0 
c010405a:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0104061:	00 
c0104062:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0104069:	e8 5a ce ff ff       	call   c0100ec8 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c010406e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104071:	83 c0 40             	add    $0x40,%eax
c0104074:	83 c0 04             	add    $0x4,%eax
c0104077:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c010407e:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104081:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0104084:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0104087:	0f a3 10             	bt     %edx,(%eax)
c010408a:	19 c0                	sbb    %eax,%eax
c010408c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c010408f:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c0104093:	0f 95 c0             	setne  %al
c0104096:	0f b6 c0             	movzbl %al,%eax
c0104099:	85 c0                	test   %eax,%eax
c010409b:	74 0e                	je     c01040ab <default_check+0x29d>
c010409d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01040a0:	83 c0 40             	add    $0x40,%eax
c01040a3:	8b 40 08             	mov    0x8(%eax),%eax
c01040a6:	83 f8 03             	cmp    $0x3,%eax
c01040a9:	74 24                	je     c01040cf <default_check+0x2c1>
c01040ab:	c7 44 24 0c e4 5b 11 	movl   $0xc0115be4,0xc(%esp)
c01040b2:	c0 
c01040b3:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c01040ba:	c0 
c01040bb:	c7 44 24 04 dd 00 00 	movl   $0xdd,0x4(%esp)
c01040c2:	00 
c01040c3:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c01040ca:	e8 f9 cd ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c01040cf:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c01040d6:	e8 f8 0d 00 00       	call   c0104ed3 <alloc_pages>
c01040db:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01040de:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01040e2:	75 24                	jne    c0104108 <default_check+0x2fa>
c01040e4:	c7 44 24 0c 10 5c 11 	movl   $0xc0115c10,0xc(%esp)
c01040eb:	c0 
c01040ec:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c01040f3:	c0 
c01040f4:	c7 44 24 04 de 00 00 	movl   $0xde,0x4(%esp)
c01040fb:	00 
c01040fc:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0104103:	e8 c0 cd ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0104108:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010410f:	e8 bf 0d 00 00       	call   c0104ed3 <alloc_pages>
c0104114:	85 c0                	test   %eax,%eax
c0104116:	74 24                	je     c010413c <default_check+0x32e>
c0104118:	c7 44 24 0c 26 5b 11 	movl   $0xc0115b26,0xc(%esp)
c010411f:	c0 
c0104120:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0104127:	c0 
c0104128:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
c010412f:	00 
c0104130:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0104137:	e8 8c cd ff ff       	call   c0100ec8 <__panic>
    assert(p0 + 2 == p1);
c010413c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010413f:	83 c0 40             	add    $0x40,%eax
c0104142:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0104145:	74 24                	je     c010416b <default_check+0x35d>
c0104147:	c7 44 24 0c 2e 5c 11 	movl   $0xc0115c2e,0xc(%esp)
c010414e:	c0 
c010414f:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0104156:	c0 
c0104157:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c010415e:	00 
c010415f:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0104166:	e8 5d cd ff ff       	call   c0100ec8 <__panic>

    p2 = p0 + 1;
c010416b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010416e:	83 c0 20             	add    $0x20,%eax
c0104171:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c0104174:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010417b:	00 
c010417c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010417f:	89 04 24             	mov    %eax,(%esp)
c0104182:	e8 b7 0d 00 00       	call   c0104f3e <free_pages>
    free_pages(p1, 3);
c0104187:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010418e:	00 
c010418f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104192:	89 04 24             	mov    %eax,(%esp)
c0104195:	e8 a4 0d 00 00       	call   c0104f3e <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c010419a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010419d:	83 c0 04             	add    $0x4,%eax
c01041a0:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01041a7:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01041aa:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01041ad:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01041b0:	0f a3 10             	bt     %edx,(%eax)
c01041b3:	19 c0                	sbb    %eax,%eax
c01041b5:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c01041b8:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c01041bc:	0f 95 c0             	setne  %al
c01041bf:	0f b6 c0             	movzbl %al,%eax
c01041c2:	85 c0                	test   %eax,%eax
c01041c4:	74 0b                	je     c01041d1 <default_check+0x3c3>
c01041c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01041c9:	8b 40 08             	mov    0x8(%eax),%eax
c01041cc:	83 f8 01             	cmp    $0x1,%eax
c01041cf:	74 24                	je     c01041f5 <default_check+0x3e7>
c01041d1:	c7 44 24 0c 3c 5c 11 	movl   $0xc0115c3c,0xc(%esp)
c01041d8:	c0 
c01041d9:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c01041e0:	c0 
c01041e1:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
c01041e8:	00 
c01041e9:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c01041f0:	e8 d3 cc ff ff       	call   c0100ec8 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c01041f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01041f8:	83 c0 04             	add    $0x4,%eax
c01041fb:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c0104202:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104205:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104208:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010420b:	0f a3 10             	bt     %edx,(%eax)
c010420e:	19 c0                	sbb    %eax,%eax
c0104210:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c0104213:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0104217:	0f 95 c0             	setne  %al
c010421a:	0f b6 c0             	movzbl %al,%eax
c010421d:	85 c0                	test   %eax,%eax
c010421f:	74 0b                	je     c010422c <default_check+0x41e>
c0104221:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104224:	8b 40 08             	mov    0x8(%eax),%eax
c0104227:	83 f8 03             	cmp    $0x3,%eax
c010422a:	74 24                	je     c0104250 <default_check+0x442>
c010422c:	c7 44 24 0c 64 5c 11 	movl   $0xc0115c64,0xc(%esp)
c0104233:	c0 
c0104234:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c010423b:	c0 
c010423c:	c7 44 24 04 e6 00 00 	movl   $0xe6,0x4(%esp)
c0104243:	00 
c0104244:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c010424b:	e8 78 cc ff ff       	call   c0100ec8 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0104250:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104257:	e8 77 0c 00 00       	call   c0104ed3 <alloc_pages>
c010425c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010425f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104262:	83 e8 20             	sub    $0x20,%eax
c0104265:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0104268:	74 24                	je     c010428e <default_check+0x480>
c010426a:	c7 44 24 0c 8a 5c 11 	movl   $0xc0115c8a,0xc(%esp)
c0104271:	c0 
c0104272:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0104279:	c0 
c010427a:	c7 44 24 04 e8 00 00 	movl   $0xe8,0x4(%esp)
c0104281:	00 
c0104282:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0104289:	e8 3a cc ff ff       	call   c0100ec8 <__panic>
    free_page(p0);
c010428e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104295:	00 
c0104296:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104299:	89 04 24             	mov    %eax,(%esp)
c010429c:	e8 9d 0c 00 00       	call   c0104f3e <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01042a1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01042a8:	e8 26 0c 00 00       	call   c0104ed3 <alloc_pages>
c01042ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01042b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01042b3:	83 c0 20             	add    $0x20,%eax
c01042b6:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01042b9:	74 24                	je     c01042df <default_check+0x4d1>
c01042bb:	c7 44 24 0c a8 5c 11 	movl   $0xc0115ca8,0xc(%esp)
c01042c2:	c0 
c01042c3:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c01042ca:	c0 
c01042cb:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c01042d2:	00 
c01042d3:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c01042da:	e8 e9 cb ff ff       	call   c0100ec8 <__panic>

    free_pages(p0, 2);
c01042df:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c01042e6:	00 
c01042e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042ea:	89 04 24             	mov    %eax,(%esp)
c01042ed:	e8 4c 0c 00 00       	call   c0104f3e <free_pages>
    free_page(p2);
c01042f2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01042f9:	00 
c01042fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01042fd:	89 04 24             	mov    %eax,(%esp)
c0104300:	e8 39 0c 00 00       	call   c0104f3e <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c0104305:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010430c:	e8 c2 0b 00 00       	call   c0104ed3 <alloc_pages>
c0104311:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104314:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104318:	75 24                	jne    c010433e <default_check+0x530>
c010431a:	c7 44 24 0c c8 5c 11 	movl   $0xc0115cc8,0xc(%esp)
c0104321:	c0 
c0104322:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0104329:	c0 
c010432a:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c0104331:	00 
c0104332:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0104339:	e8 8a cb ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c010433e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104345:	e8 89 0b 00 00       	call   c0104ed3 <alloc_pages>
c010434a:	85 c0                	test   %eax,%eax
c010434c:	74 24                	je     c0104372 <default_check+0x564>
c010434e:	c7 44 24 0c 26 5b 11 	movl   $0xc0115b26,0xc(%esp)
c0104355:	c0 
c0104356:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c010435d:	c0 
c010435e:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
c0104365:	00 
c0104366:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c010436d:	e8 56 cb ff ff       	call   c0100ec8 <__panic>

    assert(nr_free == 0);
c0104372:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0104377:	85 c0                	test   %eax,%eax
c0104379:	74 24                	je     c010439f <default_check+0x591>
c010437b:	c7 44 24 0c 79 5b 11 	movl   $0xc0115b79,0xc(%esp)
c0104382:	c0 
c0104383:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c010438a:	c0 
c010438b:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0104392:	00 
c0104393:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c010439a:	e8 29 cb ff ff       	call   c0100ec8 <__panic>
    nr_free = nr_free_store;
c010439f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01043a2:	a3 1c 30 15 c0       	mov    %eax,0xc015301c

    free_list = free_list_store;
c01043a7:	8b 45 80             	mov    -0x80(%ebp),%eax
c01043aa:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01043ad:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c01043b2:	89 15 18 30 15 c0    	mov    %edx,0xc0153018
    free_pages(p0, 5);
c01043b8:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01043bf:	00 
c01043c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043c3:	89 04 24             	mov    %eax,(%esp)
c01043c6:	e8 73 0b 00 00       	call   c0104f3e <free_pages>

    le = &free_list;
c01043cb:	c7 45 ec 14 30 15 c0 	movl   $0xc0153014,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01043d2:	eb 1d                	jmp    c01043f1 <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c01043d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043d7:	83 e8 0c             	sub    $0xc,%eax
c01043da:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c01043dd:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01043e1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01043e4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01043e7:	8b 40 08             	mov    0x8(%eax),%eax
c01043ea:	29 c2                	sub    %eax,%edx
c01043ec:	89 d0                	mov    %edx,%eax
c01043ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01043f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043f4:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01043f7:	8b 45 88             	mov    -0x78(%ebp),%eax
c01043fa:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01043fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104400:	81 7d ec 14 30 15 c0 	cmpl   $0xc0153014,-0x14(%ebp)
c0104407:	75 cb                	jne    c01043d4 <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0104409:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010440d:	74 24                	je     c0104433 <default_check+0x625>
c010440f:	c7 44 24 0c e6 5c 11 	movl   $0xc0115ce6,0xc(%esp)
c0104416:	c0 
c0104417:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c010441e:	c0 
c010441f:	c7 44 24 04 fd 00 00 	movl   $0xfd,0x4(%esp)
c0104426:	00 
c0104427:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c010442e:	e8 95 ca ff ff       	call   c0100ec8 <__panic>
    assert(total == 0);
c0104433:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104437:	74 24                	je     c010445d <default_check+0x64f>
c0104439:	c7 44 24 0c f1 5c 11 	movl   $0xc0115cf1,0xc(%esp)
c0104440:	c0 
c0104441:	c7 44 24 08 d6 59 11 	movl   $0xc01159d6,0x8(%esp)
c0104448:	c0 
c0104449:	c7 44 24 04 fe 00 00 	movl   $0xfe,0x4(%esp)
c0104450:	00 
c0104451:	c7 04 24 eb 59 11 c0 	movl   $0xc01159eb,(%esp)
c0104458:	e8 6b ca ff ff       	call   c0100ec8 <__panic>
}
c010445d:	81 c4 94 00 00 00    	add    $0x94,%esp
c0104463:	5b                   	pop    %ebx
c0104464:	5d                   	pop    %ebp
c0104465:	c3                   	ret    

c0104466 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104466:	55                   	push   %ebp
c0104467:	89 e5                	mov    %esp,%ebp
c0104469:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010446c:	9c                   	pushf  
c010446d:	58                   	pop    %eax
c010446e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104471:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104474:	25 00 02 00 00       	and    $0x200,%eax
c0104479:	85 c0                	test   %eax,%eax
c010447b:	74 0c                	je     c0104489 <__intr_save+0x23>
        intr_disable();
c010447d:	e8 a8 dc ff ff       	call   c010212a <intr_disable>
        return 1;
c0104482:	b8 01 00 00 00       	mov    $0x1,%eax
c0104487:	eb 05                	jmp    c010448e <__intr_save+0x28>
    }
    return 0;
c0104489:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010448e:	c9                   	leave  
c010448f:	c3                   	ret    

c0104490 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104490:	55                   	push   %ebp
c0104491:	89 e5                	mov    %esp,%ebp
c0104493:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104496:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010449a:	74 05                	je     c01044a1 <__intr_restore+0x11>
        intr_enable();
c010449c:	e8 83 dc ff ff       	call   c0102124 <intr_enable>
    }
}
c01044a1:	c9                   	leave  
c01044a2:	c3                   	ret    

c01044a3 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01044a3:	55                   	push   %ebp
c01044a4:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01044a6:	8b 55 08             	mov    0x8(%ebp),%edx
c01044a9:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c01044ae:	29 c2                	sub    %eax,%edx
c01044b0:	89 d0                	mov    %edx,%eax
c01044b2:	c1 f8 05             	sar    $0x5,%eax
}
c01044b5:	5d                   	pop    %ebp
c01044b6:	c3                   	ret    

c01044b7 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01044b7:	55                   	push   %ebp
c01044b8:	89 e5                	mov    %esp,%ebp
c01044ba:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01044bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01044c0:	89 04 24             	mov    %eax,(%esp)
c01044c3:	e8 db ff ff ff       	call   c01044a3 <page2ppn>
c01044c8:	c1 e0 0c             	shl    $0xc,%eax
}
c01044cb:	c9                   	leave  
c01044cc:	c3                   	ret    

c01044cd <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c01044cd:	55                   	push   %ebp
c01044ce:	89 e5                	mov    %esp,%ebp
c01044d0:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01044d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01044d6:	c1 e8 0c             	shr    $0xc,%eax
c01044d9:	89 c2                	mov    %eax,%edx
c01044db:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01044e0:	39 c2                	cmp    %eax,%edx
c01044e2:	72 1c                	jb     c0104500 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c01044e4:	c7 44 24 08 2c 5d 11 	movl   $0xc0115d2c,0x8(%esp)
c01044eb:	c0 
c01044ec:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c01044f3:	00 
c01044f4:	c7 04 24 4b 5d 11 c0 	movl   $0xc0115d4b,(%esp)
c01044fb:	e8 c8 c9 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0104500:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104505:	8b 55 08             	mov    0x8(%ebp),%edx
c0104508:	c1 ea 0c             	shr    $0xc,%edx
c010450b:	c1 e2 05             	shl    $0x5,%edx
c010450e:	01 d0                	add    %edx,%eax
}
c0104510:	c9                   	leave  
c0104511:	c3                   	ret    

c0104512 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104512:	55                   	push   %ebp
c0104513:	89 e5                	mov    %esp,%ebp
c0104515:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104518:	8b 45 08             	mov    0x8(%ebp),%eax
c010451b:	89 04 24             	mov    %eax,(%esp)
c010451e:	e8 94 ff ff ff       	call   c01044b7 <page2pa>
c0104523:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104526:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104529:	c1 e8 0c             	shr    $0xc,%eax
c010452c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010452f:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104534:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104537:	72 23                	jb     c010455c <page2kva+0x4a>
c0104539:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010453c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104540:	c7 44 24 08 5c 5d 11 	movl   $0xc0115d5c,0x8(%esp)
c0104547:	c0 
c0104548:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010454f:	00 
c0104550:	c7 04 24 4b 5d 11 c0 	movl   $0xc0115d4b,(%esp)
c0104557:	e8 6c c9 ff ff       	call   c0100ec8 <__panic>
c010455c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010455f:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104564:	c9                   	leave  
c0104565:	c3                   	ret    

c0104566 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0104566:	55                   	push   %ebp
c0104567:	89 e5                	mov    %esp,%ebp
c0104569:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010456c:	8b 45 08             	mov    0x8(%ebp),%eax
c010456f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104572:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0104579:	77 23                	ja     c010459e <kva2page+0x38>
c010457b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010457e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104582:	c7 44 24 08 80 5d 11 	movl   $0xc0115d80,0x8(%esp)
c0104589:	c0 
c010458a:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0104591:	00 
c0104592:	c7 04 24 4b 5d 11 c0 	movl   $0xc0115d4b,(%esp)
c0104599:	e8 2a c9 ff ff       	call   c0100ec8 <__panic>
c010459e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01045a1:	05 00 00 00 40       	add    $0x40000000,%eax
c01045a6:	89 04 24             	mov    %eax,(%esp)
c01045a9:	e8 1f ff ff ff       	call   c01044cd <pa2page>
}
c01045ae:	c9                   	leave  
c01045af:	c3                   	ret    

c01045b0 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c01045b0:	55                   	push   %ebp
c01045b1:	89 e5                	mov    %esp,%ebp
c01045b3:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c01045b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01045b9:	ba 01 00 00 00       	mov    $0x1,%edx
c01045be:	89 c1                	mov    %eax,%ecx
c01045c0:	d3 e2                	shl    %cl,%edx
c01045c2:	89 d0                	mov    %edx,%eax
c01045c4:	89 04 24             	mov    %eax,(%esp)
c01045c7:	e8 07 09 00 00       	call   c0104ed3 <alloc_pages>
c01045cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c01045cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01045d3:	75 07                	jne    c01045dc <__slob_get_free_pages+0x2c>
    return NULL;
c01045d5:	b8 00 00 00 00       	mov    $0x0,%eax
c01045da:	eb 0b                	jmp    c01045e7 <__slob_get_free_pages+0x37>
  return page2kva(page);
c01045dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01045df:	89 04 24             	mov    %eax,(%esp)
c01045e2:	e8 2b ff ff ff       	call   c0104512 <page2kva>
}
c01045e7:	c9                   	leave  
c01045e8:	c3                   	ret    

c01045e9 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c01045e9:	55                   	push   %ebp
c01045ea:	89 e5                	mov    %esp,%ebp
c01045ec:	53                   	push   %ebx
c01045ed:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c01045f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01045f3:	ba 01 00 00 00       	mov    $0x1,%edx
c01045f8:	89 c1                	mov    %eax,%ecx
c01045fa:	d3 e2                	shl    %cl,%edx
c01045fc:	89 d0                	mov    %edx,%eax
c01045fe:	89 c3                	mov    %eax,%ebx
c0104600:	8b 45 08             	mov    0x8(%ebp),%eax
c0104603:	89 04 24             	mov    %eax,(%esp)
c0104606:	e8 5b ff ff ff       	call   c0104566 <kva2page>
c010460b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010460f:	89 04 24             	mov    %eax,(%esp)
c0104612:	e8 27 09 00 00       	call   c0104f3e <free_pages>
}
c0104617:	83 c4 14             	add    $0x14,%esp
c010461a:	5b                   	pop    %ebx
c010461b:	5d                   	pop    %ebp
c010461c:	c3                   	ret    

c010461d <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c010461d:	55                   	push   %ebp
c010461e:	89 e5                	mov    %esp,%ebp
c0104620:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104623:	8b 45 08             	mov    0x8(%ebp),%eax
c0104626:	83 c0 08             	add    $0x8,%eax
c0104629:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010462e:	76 24                	jbe    c0104654 <slob_alloc+0x37>
c0104630:	c7 44 24 0c a4 5d 11 	movl   $0xc0115da4,0xc(%esp)
c0104637:	c0 
c0104638:	c7 44 24 08 c3 5d 11 	movl   $0xc0115dc3,0x8(%esp)
c010463f:	c0 
c0104640:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0104647:	00 
c0104648:	c7 04 24 d8 5d 11 c0 	movl   $0xc0115dd8,(%esp)
c010464f:	e8 74 c8 ff ff       	call   c0100ec8 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0104654:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c010465b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0104662:	8b 45 08             	mov    0x8(%ebp),%eax
c0104665:	83 c0 07             	add    $0x7,%eax
c0104668:	c1 e8 03             	shr    $0x3,%eax
c010466b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c010466e:	e8 f3 fd ff ff       	call   c0104466 <__intr_save>
c0104673:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0104676:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c010467b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c010467e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104681:	8b 40 04             	mov    0x4(%eax),%eax
c0104684:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0104687:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010468b:	74 25                	je     c01046b2 <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c010468d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104690:	8b 45 10             	mov    0x10(%ebp),%eax
c0104693:	01 d0                	add    %edx,%eax
c0104695:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104698:	8b 45 10             	mov    0x10(%ebp),%eax
c010469b:	f7 d8                	neg    %eax
c010469d:	21 d0                	and    %edx,%eax
c010469f:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c01046a2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01046a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01046a8:	29 c2                	sub    %eax,%edx
c01046aa:	89 d0                	mov    %edx,%eax
c01046ac:	c1 f8 03             	sar    $0x3,%eax
c01046af:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c01046b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01046b5:	8b 00                	mov    (%eax),%eax
c01046b7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01046ba:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01046bd:	01 ca                	add    %ecx,%edx
c01046bf:	39 d0                	cmp    %edx,%eax
c01046c1:	0f 8c aa 00 00 00    	jl     c0104771 <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c01046c7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01046cb:	74 38                	je     c0104705 <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c01046cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01046d0:	8b 00                	mov    (%eax),%eax
c01046d2:	2b 45 e8             	sub    -0x18(%ebp),%eax
c01046d5:	89 c2                	mov    %eax,%edx
c01046d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01046da:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c01046dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01046df:	8b 50 04             	mov    0x4(%eax),%edx
c01046e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01046e5:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c01046e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01046eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01046ee:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c01046f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01046f4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01046f7:	89 10                	mov    %edx,(%eax)
				prev = cur;
c01046f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01046fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c01046ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104702:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104705:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104708:	8b 00                	mov    (%eax),%eax
c010470a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010470d:	75 0e                	jne    c010471d <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c010470f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104712:	8b 50 04             	mov    0x4(%eax),%edx
c0104715:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104718:	89 50 04             	mov    %edx,0x4(%eax)
c010471b:	eb 3c                	jmp    c0104759 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c010471d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104720:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104727:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010472a:	01 c2                	add    %eax,%edx
c010472c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010472f:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104732:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104735:	8b 40 04             	mov    0x4(%eax),%eax
c0104738:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010473b:	8b 12                	mov    (%edx),%edx
c010473d:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104740:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104742:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104745:	8b 40 04             	mov    0x4(%eax),%eax
c0104748:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010474b:	8b 52 04             	mov    0x4(%edx),%edx
c010474e:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104751:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104754:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104757:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104759:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010475c:	a3 08 ea 14 c0       	mov    %eax,0xc014ea08
			spin_unlock_irqrestore(&slob_lock, flags);
c0104761:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104764:	89 04 24             	mov    %eax,(%esp)
c0104767:	e8 24 fd ff ff       	call   c0104490 <__intr_restore>
			return cur;
c010476c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010476f:	eb 7f                	jmp    c01047f0 <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c0104771:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c0104776:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104779:	75 61                	jne    c01047dc <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c010477b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010477e:	89 04 24             	mov    %eax,(%esp)
c0104781:	e8 0a fd ff ff       	call   c0104490 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104786:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c010478d:	75 07                	jne    c0104796 <slob_alloc+0x179>
				return 0;
c010478f:	b8 00 00 00 00       	mov    $0x0,%eax
c0104794:	eb 5a                	jmp    c01047f0 <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104796:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010479d:	00 
c010479e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01047a1:	89 04 24             	mov    %eax,(%esp)
c01047a4:	e8 07 fe ff ff       	call   c01045b0 <__slob_get_free_pages>
c01047a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c01047ac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01047b0:	75 07                	jne    c01047b9 <slob_alloc+0x19c>
				return 0;
c01047b2:	b8 00 00 00 00       	mov    $0x0,%eax
c01047b7:	eb 37                	jmp    c01047f0 <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c01047b9:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01047c0:	00 
c01047c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01047c4:	89 04 24             	mov    %eax,(%esp)
c01047c7:	e8 26 00 00 00       	call   c01047f2 <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c01047cc:	e8 95 fc ff ff       	call   c0104466 <__intr_save>
c01047d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c01047d4:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c01047d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01047dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01047df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01047e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01047e5:	8b 40 04             	mov    0x4(%eax),%eax
c01047e8:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c01047eb:	e9 97 fe ff ff       	jmp    c0104687 <slob_alloc+0x6a>
}
c01047f0:	c9                   	leave  
c01047f1:	c3                   	ret    

c01047f2 <slob_free>:

static void slob_free(void *block, int size)
{
c01047f2:	55                   	push   %ebp
c01047f3:	89 e5                	mov    %esp,%ebp
c01047f5:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c01047f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01047fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c01047fe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104802:	75 05                	jne    c0104809 <slob_free+0x17>
		return;
c0104804:	e9 ff 00 00 00       	jmp    c0104908 <slob_free+0x116>

	if (size)
c0104809:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010480d:	74 10                	je     c010481f <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c010480f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104812:	83 c0 07             	add    $0x7,%eax
c0104815:	c1 e8 03             	shr    $0x3,%eax
c0104818:	89 c2                	mov    %eax,%edx
c010481a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010481d:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c010481f:	e8 42 fc ff ff       	call   c0104466 <__intr_save>
c0104824:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104827:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c010482c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010482f:	eb 27                	jmp    c0104858 <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104831:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104834:	8b 40 04             	mov    0x4(%eax),%eax
c0104837:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010483a:	77 13                	ja     c010484f <slob_free+0x5d>
c010483c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010483f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104842:	77 27                	ja     c010486b <slob_free+0x79>
c0104844:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104847:	8b 40 04             	mov    0x4(%eax),%eax
c010484a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010484d:	77 1c                	ja     c010486b <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c010484f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104852:	8b 40 04             	mov    0x4(%eax),%eax
c0104855:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104858:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010485b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010485e:	76 d1                	jbe    c0104831 <slob_free+0x3f>
c0104860:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104863:	8b 40 04             	mov    0x4(%eax),%eax
c0104866:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104869:	76 c6                	jbe    c0104831 <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c010486b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010486e:	8b 00                	mov    (%eax),%eax
c0104870:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104877:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010487a:	01 c2                	add    %eax,%edx
c010487c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010487f:	8b 40 04             	mov    0x4(%eax),%eax
c0104882:	39 c2                	cmp    %eax,%edx
c0104884:	75 25                	jne    c01048ab <slob_free+0xb9>
		b->units += cur->next->units;
c0104886:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104889:	8b 10                	mov    (%eax),%edx
c010488b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010488e:	8b 40 04             	mov    0x4(%eax),%eax
c0104891:	8b 00                	mov    (%eax),%eax
c0104893:	01 c2                	add    %eax,%edx
c0104895:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104898:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c010489a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010489d:	8b 40 04             	mov    0x4(%eax),%eax
c01048a0:	8b 50 04             	mov    0x4(%eax),%edx
c01048a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048a6:	89 50 04             	mov    %edx,0x4(%eax)
c01048a9:	eb 0c                	jmp    c01048b7 <slob_free+0xc5>
	} else
		b->next = cur->next;
c01048ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048ae:	8b 50 04             	mov    0x4(%eax),%edx
c01048b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048b4:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c01048b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048ba:	8b 00                	mov    (%eax),%eax
c01048bc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01048c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048c6:	01 d0                	add    %edx,%eax
c01048c8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01048cb:	75 1f                	jne    c01048ec <slob_free+0xfa>
		cur->units += b->units;
c01048cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048d0:	8b 10                	mov    (%eax),%edx
c01048d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048d5:	8b 00                	mov    (%eax),%eax
c01048d7:	01 c2                	add    %eax,%edx
c01048d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048dc:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c01048de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048e1:	8b 50 04             	mov    0x4(%eax),%edx
c01048e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048e7:	89 50 04             	mov    %edx,0x4(%eax)
c01048ea:	eb 09                	jmp    c01048f5 <slob_free+0x103>
	} else
		cur->next = b;
c01048ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01048f2:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c01048f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048f8:	a3 08 ea 14 c0       	mov    %eax,0xc014ea08

	spin_unlock_irqrestore(&slob_lock, flags);
c01048fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104900:	89 04 24             	mov    %eax,(%esp)
c0104903:	e8 88 fb ff ff       	call   c0104490 <__intr_restore>
}
c0104908:	c9                   	leave  
c0104909:	c3                   	ret    

c010490a <slob_init>:



void
slob_init(void) {
c010490a:	55                   	push   %ebp
c010490b:	89 e5                	mov    %esp,%ebp
c010490d:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104910:	c7 04 24 ea 5d 11 c0 	movl   $0xc0115dea,(%esp)
c0104917:	e8 49 ba ff ff       	call   c0100365 <cprintf>
}
c010491c:	c9                   	leave  
c010491d:	c3                   	ret    

c010491e <kmalloc_init>:

inline void 
kmalloc_init(void) {
c010491e:	55                   	push   %ebp
c010491f:	89 e5                	mov    %esp,%ebp
c0104921:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104924:	e8 e1 ff ff ff       	call   c010490a <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104929:	c7 04 24 fe 5d 11 c0 	movl   $0xc0115dfe,(%esp)
c0104930:	e8 30 ba ff ff       	call   c0100365 <cprintf>
}
c0104935:	c9                   	leave  
c0104936:	c3                   	ret    

c0104937 <slob_allocated>:

size_t
slob_allocated(void) {
c0104937:	55                   	push   %ebp
c0104938:	89 e5                	mov    %esp,%ebp
  return 0;
c010493a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010493f:	5d                   	pop    %ebp
c0104940:	c3                   	ret    

c0104941 <kallocated>:

size_t
kallocated(void) {
c0104941:	55                   	push   %ebp
c0104942:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104944:	e8 ee ff ff ff       	call   c0104937 <slob_allocated>
}
c0104949:	5d                   	pop    %ebp
c010494a:	c3                   	ret    

c010494b <find_order>:

static int find_order(int size)
{
c010494b:	55                   	push   %ebp
c010494c:	89 e5                	mov    %esp,%ebp
c010494e:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104951:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104958:	eb 07                	jmp    c0104961 <find_order+0x16>
		order++;
c010495a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c010495e:	d1 7d 08             	sarl   0x8(%ebp)
c0104961:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104968:	7f f0                	jg     c010495a <find_order+0xf>
		order++;
	return order;
c010496a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010496d:	c9                   	leave  
c010496e:	c3                   	ret    

c010496f <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c010496f:	55                   	push   %ebp
c0104970:	89 e5                	mov    %esp,%ebp
c0104972:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104975:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c010497c:	77 38                	ja     c01049b6 <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c010497e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104981:	8d 50 08             	lea    0x8(%eax),%edx
c0104984:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010498b:	00 
c010498c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010498f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104993:	89 14 24             	mov    %edx,(%esp)
c0104996:	e8 82 fc ff ff       	call   c010461d <slob_alloc>
c010499b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c010499e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01049a2:	74 08                	je     c01049ac <__kmalloc+0x3d>
c01049a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049a7:	83 c0 08             	add    $0x8,%eax
c01049aa:	eb 05                	jmp    c01049b1 <__kmalloc+0x42>
c01049ac:	b8 00 00 00 00       	mov    $0x0,%eax
c01049b1:	e9 a6 00 00 00       	jmp    c0104a5c <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c01049b6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01049bd:	00 
c01049be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01049c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01049c5:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c01049cc:	e8 4c fc ff ff       	call   c010461d <slob_alloc>
c01049d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c01049d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01049d8:	75 07                	jne    c01049e1 <__kmalloc+0x72>
		return 0;
c01049da:	b8 00 00 00 00       	mov    $0x0,%eax
c01049df:	eb 7b                	jmp    c0104a5c <__kmalloc+0xed>

	bb->order = find_order(size);
c01049e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01049e4:	89 04 24             	mov    %eax,(%esp)
c01049e7:	e8 5f ff ff ff       	call   c010494b <find_order>
c01049ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049ef:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c01049f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049f4:	8b 00                	mov    (%eax),%eax
c01049f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01049fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01049fd:	89 04 24             	mov    %eax,(%esp)
c0104a00:	e8 ab fb ff ff       	call   c01045b0 <__slob_get_free_pages>
c0104a05:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104a08:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104a0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a0e:	8b 40 04             	mov    0x4(%eax),%eax
c0104a11:	85 c0                	test   %eax,%eax
c0104a13:	74 2f                	je     c0104a44 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104a15:	e8 4c fa ff ff       	call   c0104466 <__intr_save>
c0104a1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104a1d:	8b 15 64 fe 14 c0    	mov    0xc014fe64,%edx
c0104a23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a26:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104a29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a2c:	a3 64 fe 14 c0       	mov    %eax,0xc014fe64
		spin_unlock_irqrestore(&block_lock, flags);
c0104a31:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a34:	89 04 24             	mov    %eax,(%esp)
c0104a37:	e8 54 fa ff ff       	call   c0104490 <__intr_restore>
		return bb->pages;
c0104a3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a3f:	8b 40 04             	mov    0x4(%eax),%eax
c0104a42:	eb 18                	jmp    c0104a5c <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104a44:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104a4b:	00 
c0104a4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a4f:	89 04 24             	mov    %eax,(%esp)
c0104a52:	e8 9b fd ff ff       	call   c01047f2 <slob_free>
	return 0;
c0104a57:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104a5c:	c9                   	leave  
c0104a5d:	c3                   	ret    

c0104a5e <kmalloc>:

void *
kmalloc(size_t size)
{
c0104a5e:	55                   	push   %ebp
c0104a5f:	89 e5                	mov    %esp,%ebp
c0104a61:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104a64:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104a6b:	00 
c0104a6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a6f:	89 04 24             	mov    %eax,(%esp)
c0104a72:	e8 f8 fe ff ff       	call   c010496f <__kmalloc>
}
c0104a77:	c9                   	leave  
c0104a78:	c3                   	ret    

c0104a79 <kfree>:


void kfree(void *block)
{
c0104a79:	55                   	push   %ebp
c0104a7a:	89 e5                	mov    %esp,%ebp
c0104a7c:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104a7f:	c7 45 f0 64 fe 14 c0 	movl   $0xc014fe64,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104a86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104a8a:	75 05                	jne    c0104a91 <kfree+0x18>
		return;
c0104a8c:	e9 a2 00 00 00       	jmp    c0104b33 <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104a91:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a94:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104a99:	85 c0                	test   %eax,%eax
c0104a9b:	75 7f                	jne    c0104b1c <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104a9d:	e8 c4 f9 ff ff       	call   c0104466 <__intr_save>
c0104aa2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104aa5:	a1 64 fe 14 c0       	mov    0xc014fe64,%eax
c0104aaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104aad:	eb 5c                	jmp    c0104b0b <kfree+0x92>
			if (bb->pages == block) {
c0104aaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ab2:	8b 40 04             	mov    0x4(%eax),%eax
c0104ab5:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104ab8:	75 3f                	jne    c0104af9 <kfree+0x80>
				*last = bb->next;
c0104aba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104abd:	8b 50 08             	mov    0x8(%eax),%edx
c0104ac0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ac3:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ac8:	89 04 24             	mov    %eax,(%esp)
c0104acb:	e8 c0 f9 ff ff       	call   c0104490 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104ad0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ad3:	8b 10                	mov    (%eax),%edx
c0104ad5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ad8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104adc:	89 04 24             	mov    %eax,(%esp)
c0104adf:	e8 05 fb ff ff       	call   c01045e9 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104ae4:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104aeb:	00 
c0104aec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aef:	89 04 24             	mov    %eax,(%esp)
c0104af2:	e8 fb fc ff ff       	call   c01047f2 <slob_free>
				return;
c0104af7:	eb 3a                	jmp    c0104b33 <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104afc:	83 c0 08             	add    $0x8,%eax
c0104aff:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104b02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b05:	8b 40 08             	mov    0x8(%eax),%eax
c0104b08:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104b0b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104b0f:	75 9e                	jne    c0104aaf <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104b11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b14:	89 04 24             	mov    %eax,(%esp)
c0104b17:	e8 74 f9 ff ff       	call   c0104490 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104b1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b1f:	83 e8 08             	sub    $0x8,%eax
c0104b22:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104b29:	00 
c0104b2a:	89 04 24             	mov    %eax,(%esp)
c0104b2d:	e8 c0 fc ff ff       	call   c01047f2 <slob_free>
	return;
c0104b32:	90                   	nop
}
c0104b33:	c9                   	leave  
c0104b34:	c3                   	ret    

c0104b35 <ksize>:


unsigned int ksize(const void *block)
{
c0104b35:	55                   	push   %ebp
c0104b36:	89 e5                	mov    %esp,%ebp
c0104b38:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104b3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104b3f:	75 07                	jne    c0104b48 <ksize+0x13>
		return 0;
c0104b41:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b46:	eb 6b                	jmp    c0104bb3 <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104b48:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b4b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104b50:	85 c0                	test   %eax,%eax
c0104b52:	75 54                	jne    c0104ba8 <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104b54:	e8 0d f9 ff ff       	call   c0104466 <__intr_save>
c0104b59:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104b5c:	a1 64 fe 14 c0       	mov    0xc014fe64,%eax
c0104b61:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104b64:	eb 31                	jmp    c0104b97 <ksize+0x62>
			if (bb->pages == block) {
c0104b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b69:	8b 40 04             	mov    0x4(%eax),%eax
c0104b6c:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104b6f:	75 1d                	jne    c0104b8e <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104b71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b74:	89 04 24             	mov    %eax,(%esp)
c0104b77:	e8 14 f9 ff ff       	call   c0104490 <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104b7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b7f:	8b 00                	mov    (%eax),%eax
c0104b81:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104b86:	89 c1                	mov    %eax,%ecx
c0104b88:	d3 e2                	shl    %cl,%edx
c0104b8a:	89 d0                	mov    %edx,%eax
c0104b8c:	eb 25                	jmp    c0104bb3 <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104b8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b91:	8b 40 08             	mov    0x8(%eax),%eax
c0104b94:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104b97:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104b9b:	75 c9                	jne    c0104b66 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104b9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ba0:	89 04 24             	mov    %eax,(%esp)
c0104ba3:	e8 e8 f8 ff ff       	call   c0104490 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104ba8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bab:	83 e8 08             	sub    $0x8,%eax
c0104bae:	8b 00                	mov    (%eax),%eax
c0104bb0:	c1 e0 03             	shl    $0x3,%eax
}
c0104bb3:	c9                   	leave  
c0104bb4:	c3                   	ret    

c0104bb5 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104bb5:	55                   	push   %ebp
c0104bb6:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104bb8:	8b 55 08             	mov    0x8(%ebp),%edx
c0104bbb:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104bc0:	29 c2                	sub    %eax,%edx
c0104bc2:	89 d0                	mov    %edx,%eax
c0104bc4:	c1 f8 05             	sar    $0x5,%eax
}
c0104bc7:	5d                   	pop    %ebp
c0104bc8:	c3                   	ret    

c0104bc9 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104bc9:	55                   	push   %ebp
c0104bca:	89 e5                	mov    %esp,%ebp
c0104bcc:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104bcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bd2:	89 04 24             	mov    %eax,(%esp)
c0104bd5:	e8 db ff ff ff       	call   c0104bb5 <page2ppn>
c0104bda:	c1 e0 0c             	shl    $0xc,%eax
}
c0104bdd:	c9                   	leave  
c0104bde:	c3                   	ret    

c0104bdf <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104bdf:	55                   	push   %ebp
c0104be0:	89 e5                	mov    %esp,%ebp
c0104be2:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104be5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104be8:	c1 e8 0c             	shr    $0xc,%eax
c0104beb:	89 c2                	mov    %eax,%edx
c0104bed:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104bf2:	39 c2                	cmp    %eax,%edx
c0104bf4:	72 1c                	jb     c0104c12 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104bf6:	c7 44 24 08 1c 5e 11 	movl   $0xc0115e1c,0x8(%esp)
c0104bfd:	c0 
c0104bfe:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104c05:	00 
c0104c06:	c7 04 24 3b 5e 11 c0 	movl   $0xc0115e3b,(%esp)
c0104c0d:	e8 b6 c2 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0104c12:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104c17:	8b 55 08             	mov    0x8(%ebp),%edx
c0104c1a:	c1 ea 0c             	shr    $0xc,%edx
c0104c1d:	c1 e2 05             	shl    $0x5,%edx
c0104c20:	01 d0                	add    %edx,%eax
}
c0104c22:	c9                   	leave  
c0104c23:	c3                   	ret    

c0104c24 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104c24:	55                   	push   %ebp
c0104c25:	89 e5                	mov    %esp,%ebp
c0104c27:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104c2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c2d:	89 04 24             	mov    %eax,(%esp)
c0104c30:	e8 94 ff ff ff       	call   c0104bc9 <page2pa>
c0104c35:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c3b:	c1 e8 0c             	shr    $0xc,%eax
c0104c3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104c41:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104c46:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104c49:	72 23                	jb     c0104c6e <page2kva+0x4a>
c0104c4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c4e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104c52:	c7 44 24 08 4c 5e 11 	movl   $0xc0115e4c,0x8(%esp)
c0104c59:	c0 
c0104c5a:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104c61:	00 
c0104c62:	c7 04 24 3b 5e 11 c0 	movl   $0xc0115e3b,(%esp)
c0104c69:	e8 5a c2 ff ff       	call   c0100ec8 <__panic>
c0104c6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c71:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104c76:	c9                   	leave  
c0104c77:	c3                   	ret    

c0104c78 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104c78:	55                   	push   %ebp
c0104c79:	89 e5                	mov    %esp,%ebp
c0104c7b:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104c7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c81:	83 e0 01             	and    $0x1,%eax
c0104c84:	85 c0                	test   %eax,%eax
c0104c86:	75 1c                	jne    c0104ca4 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104c88:	c7 44 24 08 70 5e 11 	movl   $0xc0115e70,0x8(%esp)
c0104c8f:	c0 
c0104c90:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104c97:	00 
c0104c98:	c7 04 24 3b 5e 11 c0 	movl   $0xc0115e3b,(%esp)
c0104c9f:	e8 24 c2 ff ff       	call   c0100ec8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104ca4:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ca7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104cac:	89 04 24             	mov    %eax,(%esp)
c0104caf:	e8 2b ff ff ff       	call   c0104bdf <pa2page>
}
c0104cb4:	c9                   	leave  
c0104cb5:	c3                   	ret    

c0104cb6 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104cb6:	55                   	push   %ebp
c0104cb7:	89 e5                	mov    %esp,%ebp
c0104cb9:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104cbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cbf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104cc4:	89 04 24             	mov    %eax,(%esp)
c0104cc7:	e8 13 ff ff ff       	call   c0104bdf <pa2page>
}
c0104ccc:	c9                   	leave  
c0104ccd:	c3                   	ret    

c0104cce <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104cce:	55                   	push   %ebp
c0104ccf:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104cd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cd4:	8b 00                	mov    (%eax),%eax
}
c0104cd6:	5d                   	pop    %ebp
c0104cd7:	c3                   	ret    

c0104cd8 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104cd8:	55                   	push   %ebp
c0104cd9:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104cdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cde:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104ce1:	89 10                	mov    %edx,(%eax)
}
c0104ce3:	5d                   	pop    %ebp
c0104ce4:	c3                   	ret    

c0104ce5 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104ce5:	55                   	push   %ebp
c0104ce6:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104ce8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ceb:	8b 00                	mov    (%eax),%eax
c0104ced:	8d 50 01             	lea    0x1(%eax),%edx
c0104cf0:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cf3:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104cf5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cf8:	8b 00                	mov    (%eax),%eax
}
c0104cfa:	5d                   	pop    %ebp
c0104cfb:	c3                   	ret    

c0104cfc <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104cfc:	55                   	push   %ebp
c0104cfd:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104cff:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d02:	8b 00                	mov    (%eax),%eax
c0104d04:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104d07:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d0a:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104d0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d0f:	8b 00                	mov    (%eax),%eax
}
c0104d11:	5d                   	pop    %ebp
c0104d12:	c3                   	ret    

c0104d13 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104d13:	55                   	push   %ebp
c0104d14:	89 e5                	mov    %esp,%ebp
c0104d16:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104d19:	9c                   	pushf  
c0104d1a:	58                   	pop    %eax
c0104d1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104d1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104d21:	25 00 02 00 00       	and    $0x200,%eax
c0104d26:	85 c0                	test   %eax,%eax
c0104d28:	74 0c                	je     c0104d36 <__intr_save+0x23>
        intr_disable();
c0104d2a:	e8 fb d3 ff ff       	call   c010212a <intr_disable>
        return 1;
c0104d2f:	b8 01 00 00 00       	mov    $0x1,%eax
c0104d34:	eb 05                	jmp    c0104d3b <__intr_save+0x28>
    }
    return 0;
c0104d36:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104d3b:	c9                   	leave  
c0104d3c:	c3                   	ret    

c0104d3d <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104d3d:	55                   	push   %ebp
c0104d3e:	89 e5                	mov    %esp,%ebp
c0104d40:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104d43:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104d47:	74 05                	je     c0104d4e <__intr_restore+0x11>
        intr_enable();
c0104d49:	e8 d6 d3 ff ff       	call   c0102124 <intr_enable>
    }
}
c0104d4e:	c9                   	leave  
c0104d4f:	c3                   	ret    

c0104d50 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104d50:	55                   	push   %ebp
c0104d51:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104d53:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d56:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104d59:	b8 23 00 00 00       	mov    $0x23,%eax
c0104d5e:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0104d60:	b8 23 00 00 00       	mov    $0x23,%eax
c0104d65:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104d67:	b8 10 00 00 00       	mov    $0x10,%eax
c0104d6c:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0104d6e:	b8 10 00 00 00       	mov    $0x10,%eax
c0104d73:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0104d75:	b8 10 00 00 00       	mov    $0x10,%eax
c0104d7a:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0104d7c:	ea 83 4d 10 c0 08 00 	ljmp   $0x8,$0xc0104d83
}
c0104d83:	5d                   	pop    %ebp
c0104d84:	c3                   	ret    

c0104d85 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0104d85:	55                   	push   %ebp
c0104d86:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0104d88:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d8b:	a3 a4 fe 14 c0       	mov    %eax,0xc014fea4
}
c0104d90:	5d                   	pop    %ebp
c0104d91:	c3                   	ret    

c0104d92 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0104d92:	55                   	push   %ebp
c0104d93:	89 e5                	mov    %esp,%ebp
c0104d95:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0104d98:	b8 00 e0 14 c0       	mov    $0xc014e000,%eax
c0104d9d:	89 04 24             	mov    %eax,(%esp)
c0104da0:	e8 e0 ff ff ff       	call   c0104d85 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0104da5:	66 c7 05 a8 fe 14 c0 	movw   $0x10,0xc014fea8
c0104dac:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0104dae:	66 c7 05 48 ea 14 c0 	movw   $0x68,0xc014ea48
c0104db5:	68 00 
c0104db7:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c0104dbc:	66 a3 4a ea 14 c0    	mov    %ax,0xc014ea4a
c0104dc2:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c0104dc7:	c1 e8 10             	shr    $0x10,%eax
c0104dca:	a2 4c ea 14 c0       	mov    %al,0xc014ea4c
c0104dcf:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0104dd6:	83 e0 f0             	and    $0xfffffff0,%eax
c0104dd9:	83 c8 09             	or     $0x9,%eax
c0104ddc:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c0104de1:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0104de8:	83 e0 ef             	and    $0xffffffef,%eax
c0104deb:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c0104df0:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0104df7:	83 e0 9f             	and    $0xffffff9f,%eax
c0104dfa:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c0104dff:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0104e06:	83 c8 80             	or     $0xffffff80,%eax
c0104e09:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c0104e0e:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c0104e15:	83 e0 f0             	and    $0xfffffff0,%eax
c0104e18:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c0104e1d:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c0104e24:	83 e0 ef             	and    $0xffffffef,%eax
c0104e27:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c0104e2c:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c0104e33:	83 e0 df             	and    $0xffffffdf,%eax
c0104e36:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c0104e3b:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c0104e42:	83 c8 40             	or     $0x40,%eax
c0104e45:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c0104e4a:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c0104e51:	83 e0 7f             	and    $0x7f,%eax
c0104e54:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c0104e59:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c0104e5e:	c1 e8 18             	shr    $0x18,%eax
c0104e61:	a2 4f ea 14 c0       	mov    %al,0xc014ea4f

    // reload all segment registers
    lgdt(&gdt_pd);
c0104e66:	c7 04 24 50 ea 14 c0 	movl   $0xc014ea50,(%esp)
c0104e6d:	e8 de fe ff ff       	call   c0104d50 <lgdt>
c0104e72:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0104e78:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0104e7c:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0104e7f:	c9                   	leave  
c0104e80:	c3                   	ret    

c0104e81 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0104e81:	55                   	push   %ebp
c0104e82:	89 e5                	mov    %esp,%ebp
c0104e84:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c0104e87:	c7 05 20 30 15 c0 10 	movl   $0xc0115d10,0xc0153020
c0104e8e:	5d 11 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0104e91:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0104e96:	8b 00                	mov    (%eax),%eax
c0104e98:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104e9c:	c7 04 24 9c 5e 11 c0 	movl   $0xc0115e9c,(%esp)
c0104ea3:	e8 bd b4 ff ff       	call   c0100365 <cprintf>
    pmm_manager->init();
c0104ea8:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0104ead:	8b 40 04             	mov    0x4(%eax),%eax
c0104eb0:	ff d0                	call   *%eax
}
c0104eb2:	c9                   	leave  
c0104eb3:	c3                   	ret    

c0104eb4 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0104eb4:	55                   	push   %ebp
c0104eb5:	89 e5                	mov    %esp,%ebp
c0104eb7:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0104eba:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0104ebf:	8b 40 08             	mov    0x8(%eax),%eax
c0104ec2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104ec5:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104ec9:	8b 55 08             	mov    0x8(%ebp),%edx
c0104ecc:	89 14 24             	mov    %edx,(%esp)
c0104ecf:	ff d0                	call   *%eax
}
c0104ed1:	c9                   	leave  
c0104ed2:	c3                   	ret    

c0104ed3 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0104ed3:	55                   	push   %ebp
c0104ed4:	89 e5                	mov    %esp,%ebp
c0104ed6:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0104ed9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0104ee0:	e8 2e fe ff ff       	call   c0104d13 <__intr_save>
c0104ee5:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0104ee8:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0104eed:	8b 40 0c             	mov    0xc(%eax),%eax
c0104ef0:	8b 55 08             	mov    0x8(%ebp),%edx
c0104ef3:	89 14 24             	mov    %edx,(%esp)
c0104ef6:	ff d0                	call   *%eax
c0104ef8:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0104efb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104efe:	89 04 24             	mov    %eax,(%esp)
c0104f01:	e8 37 fe ff ff       	call   c0104d3d <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0104f06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104f0a:	75 2d                	jne    c0104f39 <alloc_pages+0x66>
c0104f0c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0104f10:	77 27                	ja     c0104f39 <alloc_pages+0x66>
c0104f12:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0104f17:	85 c0                	test   %eax,%eax
c0104f19:	74 1e                	je     c0104f39 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0104f1b:	8b 55 08             	mov    0x8(%ebp),%edx
c0104f1e:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0104f23:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104f2a:	00 
c0104f2b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104f2f:	89 04 24             	mov    %eax,(%esp)
c0104f32:	e8 a6 1d 00 00       	call   c0106cdd <swap_out>
    }
c0104f37:	eb a7                	jmp    c0104ee0 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0104f39:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104f3c:	c9                   	leave  
c0104f3d:	c3                   	ret    

c0104f3e <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0104f3e:	55                   	push   %ebp
c0104f3f:	89 e5                	mov    %esp,%ebp
c0104f41:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0104f44:	e8 ca fd ff ff       	call   c0104d13 <__intr_save>
c0104f49:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0104f4c:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0104f51:	8b 40 10             	mov    0x10(%eax),%eax
c0104f54:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104f57:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104f5b:	8b 55 08             	mov    0x8(%ebp),%edx
c0104f5e:	89 14 24             	mov    %edx,(%esp)
c0104f61:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c0104f63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f66:	89 04 24             	mov    %eax,(%esp)
c0104f69:	e8 cf fd ff ff       	call   c0104d3d <__intr_restore>
}
c0104f6e:	c9                   	leave  
c0104f6f:	c3                   	ret    

c0104f70 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0104f70:	55                   	push   %ebp
c0104f71:	89 e5                	mov    %esp,%ebp
c0104f73:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0104f76:	e8 98 fd ff ff       	call   c0104d13 <__intr_save>
c0104f7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0104f7e:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0104f83:	8b 40 14             	mov    0x14(%eax),%eax
c0104f86:	ff d0                	call   *%eax
c0104f88:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0104f8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f8e:	89 04 24             	mov    %eax,(%esp)
c0104f91:	e8 a7 fd ff ff       	call   c0104d3d <__intr_restore>
    return ret;
c0104f96:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0104f99:	c9                   	leave  
c0104f9a:	c3                   	ret    

c0104f9b <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0104f9b:	55                   	push   %ebp
c0104f9c:	89 e5                	mov    %esp,%ebp
c0104f9e:	57                   	push   %edi
c0104f9f:	56                   	push   %esi
c0104fa0:	53                   	push   %ebx
c0104fa1:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0104fa7:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0104fae:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0104fb5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0104fbc:	c7 04 24 b3 5e 11 c0 	movl   $0xc0115eb3,(%esp)
c0104fc3:	e8 9d b3 ff ff       	call   c0100365 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0104fc8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0104fcf:	e9 15 01 00 00       	jmp    c01050e9 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0104fd4:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104fd7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104fda:	89 d0                	mov    %edx,%eax
c0104fdc:	c1 e0 02             	shl    $0x2,%eax
c0104fdf:	01 d0                	add    %edx,%eax
c0104fe1:	c1 e0 02             	shl    $0x2,%eax
c0104fe4:	01 c8                	add    %ecx,%eax
c0104fe6:	8b 50 08             	mov    0x8(%eax),%edx
c0104fe9:	8b 40 04             	mov    0x4(%eax),%eax
c0104fec:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0104fef:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0104ff2:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104ff5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104ff8:	89 d0                	mov    %edx,%eax
c0104ffa:	c1 e0 02             	shl    $0x2,%eax
c0104ffd:	01 d0                	add    %edx,%eax
c0104fff:	c1 e0 02             	shl    $0x2,%eax
c0105002:	01 c8                	add    %ecx,%eax
c0105004:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105007:	8b 58 10             	mov    0x10(%eax),%ebx
c010500a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010500d:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0105010:	01 c8                	add    %ecx,%eax
c0105012:	11 da                	adc    %ebx,%edx
c0105014:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0105017:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c010501a:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010501d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105020:	89 d0                	mov    %edx,%eax
c0105022:	c1 e0 02             	shl    $0x2,%eax
c0105025:	01 d0                	add    %edx,%eax
c0105027:	c1 e0 02             	shl    $0x2,%eax
c010502a:	01 c8                	add    %ecx,%eax
c010502c:	83 c0 14             	add    $0x14,%eax
c010502f:	8b 00                	mov    (%eax),%eax
c0105031:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c0105037:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010503a:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010503d:	83 c0 ff             	add    $0xffffffff,%eax
c0105040:	83 d2 ff             	adc    $0xffffffff,%edx
c0105043:	89 c6                	mov    %eax,%esi
c0105045:	89 d7                	mov    %edx,%edi
c0105047:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010504a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010504d:	89 d0                	mov    %edx,%eax
c010504f:	c1 e0 02             	shl    $0x2,%eax
c0105052:	01 d0                	add    %edx,%eax
c0105054:	c1 e0 02             	shl    $0x2,%eax
c0105057:	01 c8                	add    %ecx,%eax
c0105059:	8b 48 0c             	mov    0xc(%eax),%ecx
c010505c:	8b 58 10             	mov    0x10(%eax),%ebx
c010505f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0105065:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0105069:	89 74 24 14          	mov    %esi,0x14(%esp)
c010506d:	89 7c 24 18          	mov    %edi,0x18(%esp)
c0105071:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105074:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0105077:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010507b:	89 54 24 10          	mov    %edx,0x10(%esp)
c010507f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0105083:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0105087:	c7 04 24 c0 5e 11 c0 	movl   $0xc0115ec0,(%esp)
c010508e:	e8 d2 b2 ff ff       	call   c0100365 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0105093:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105096:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105099:	89 d0                	mov    %edx,%eax
c010509b:	c1 e0 02             	shl    $0x2,%eax
c010509e:	01 d0                	add    %edx,%eax
c01050a0:	c1 e0 02             	shl    $0x2,%eax
c01050a3:	01 c8                	add    %ecx,%eax
c01050a5:	83 c0 14             	add    $0x14,%eax
c01050a8:	8b 00                	mov    (%eax),%eax
c01050aa:	83 f8 01             	cmp    $0x1,%eax
c01050ad:	75 36                	jne    c01050e5 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c01050af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01050b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01050b5:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01050b8:	77 2b                	ja     c01050e5 <page_init+0x14a>
c01050ba:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01050bd:	72 05                	jb     c01050c4 <page_init+0x129>
c01050bf:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c01050c2:	73 21                	jae    c01050e5 <page_init+0x14a>
c01050c4:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01050c8:	77 1b                	ja     c01050e5 <page_init+0x14a>
c01050ca:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01050ce:	72 09                	jb     c01050d9 <page_init+0x13e>
c01050d0:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c01050d7:	77 0c                	ja     c01050e5 <page_init+0x14a>
                maxpa = end;
c01050d9:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01050dc:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01050df:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01050e2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01050e5:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01050e9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01050ec:	8b 00                	mov    (%eax),%eax
c01050ee:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01050f1:	0f 8f dd fe ff ff    	jg     c0104fd4 <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c01050f7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01050fb:	72 1d                	jb     c010511a <page_init+0x17f>
c01050fd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105101:	77 09                	ja     c010510c <page_init+0x171>
c0105103:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c010510a:	76 0e                	jbe    c010511a <page_init+0x17f>
        maxpa = KMEMSIZE;
c010510c:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0105113:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c010511a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010511d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105120:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105124:	c1 ea 0c             	shr    $0xc,%edx
c0105127:	a3 80 fe 14 c0       	mov    %eax,0xc014fe80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c010512c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c0105133:	b8 04 32 15 c0       	mov    $0xc0153204,%eax
c0105138:	8d 50 ff             	lea    -0x1(%eax),%edx
c010513b:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010513e:	01 d0                	add    %edx,%eax
c0105140:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0105143:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105146:	ba 00 00 00 00       	mov    $0x0,%edx
c010514b:	f7 75 ac             	divl   -0x54(%ebp)
c010514e:	89 d0                	mov    %edx,%eax
c0105150:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0105153:	29 c2                	sub    %eax,%edx
c0105155:	89 d0                	mov    %edx,%eax
c0105157:	a3 28 30 15 c0       	mov    %eax,0xc0153028

    for (i = 0; i < npage; i ++) {
c010515c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105163:	eb 27                	jmp    c010518c <page_init+0x1f1>
        SetPageReserved(pages + i);
c0105165:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010516a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010516d:	c1 e2 05             	shl    $0x5,%edx
c0105170:	01 d0                	add    %edx,%eax
c0105172:	83 c0 04             	add    $0x4,%eax
c0105175:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c010517c:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010517f:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0105182:	8b 55 90             	mov    -0x70(%ebp),%edx
c0105185:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c0105188:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010518c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010518f:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0105194:	39 c2                	cmp    %eax,%edx
c0105196:	72 cd                	jb     c0105165 <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0105198:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010519d:	c1 e0 05             	shl    $0x5,%eax
c01051a0:	89 c2                	mov    %eax,%edx
c01051a2:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c01051a7:	01 d0                	add    %edx,%eax
c01051a9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c01051ac:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c01051b3:	77 23                	ja     c01051d8 <page_init+0x23d>
c01051b5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01051b8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01051bc:	c7 44 24 08 f0 5e 11 	movl   $0xc0115ef0,0x8(%esp)
c01051c3:	c0 
c01051c4:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c01051cb:	00 
c01051cc:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01051d3:	e8 f0 bc ff ff       	call   c0100ec8 <__panic>
c01051d8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01051db:	05 00 00 00 40       	add    $0x40000000,%eax
c01051e0:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c01051e3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01051ea:	e9 74 01 00 00       	jmp    c0105363 <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01051ef:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01051f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01051f5:	89 d0                	mov    %edx,%eax
c01051f7:	c1 e0 02             	shl    $0x2,%eax
c01051fa:	01 d0                	add    %edx,%eax
c01051fc:	c1 e0 02             	shl    $0x2,%eax
c01051ff:	01 c8                	add    %ecx,%eax
c0105201:	8b 50 08             	mov    0x8(%eax),%edx
c0105204:	8b 40 04             	mov    0x4(%eax),%eax
c0105207:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010520a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010520d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105210:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105213:	89 d0                	mov    %edx,%eax
c0105215:	c1 e0 02             	shl    $0x2,%eax
c0105218:	01 d0                	add    %edx,%eax
c010521a:	c1 e0 02             	shl    $0x2,%eax
c010521d:	01 c8                	add    %ecx,%eax
c010521f:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105222:	8b 58 10             	mov    0x10(%eax),%ebx
c0105225:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105228:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010522b:	01 c8                	add    %ecx,%eax
c010522d:	11 da                	adc    %ebx,%edx
c010522f:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105232:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0105235:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105238:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010523b:	89 d0                	mov    %edx,%eax
c010523d:	c1 e0 02             	shl    $0x2,%eax
c0105240:	01 d0                	add    %edx,%eax
c0105242:	c1 e0 02             	shl    $0x2,%eax
c0105245:	01 c8                	add    %ecx,%eax
c0105247:	83 c0 14             	add    $0x14,%eax
c010524a:	8b 00                	mov    (%eax),%eax
c010524c:	83 f8 01             	cmp    $0x1,%eax
c010524f:	0f 85 0a 01 00 00    	jne    c010535f <page_init+0x3c4>
            if (begin < freemem) {
c0105255:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105258:	ba 00 00 00 00       	mov    $0x0,%edx
c010525d:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0105260:	72 17                	jb     c0105279 <page_init+0x2de>
c0105262:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0105265:	77 05                	ja     c010526c <page_init+0x2d1>
c0105267:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010526a:	76 0d                	jbe    c0105279 <page_init+0x2de>
                begin = freemem;
c010526c:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010526f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105272:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0105279:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010527d:	72 1d                	jb     c010529c <page_init+0x301>
c010527f:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0105283:	77 09                	ja     c010528e <page_init+0x2f3>
c0105285:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c010528c:	76 0e                	jbe    c010529c <page_init+0x301>
                end = KMEMSIZE;
c010528e:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0105295:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c010529c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010529f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01052a2:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01052a5:	0f 87 b4 00 00 00    	ja     c010535f <page_init+0x3c4>
c01052ab:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01052ae:	72 09                	jb     c01052b9 <page_init+0x31e>
c01052b0:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01052b3:	0f 83 a6 00 00 00    	jae    c010535f <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c01052b9:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c01052c0:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01052c3:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01052c6:	01 d0                	add    %edx,%eax
c01052c8:	83 e8 01             	sub    $0x1,%eax
c01052cb:	89 45 98             	mov    %eax,-0x68(%ebp)
c01052ce:	8b 45 98             	mov    -0x68(%ebp),%eax
c01052d1:	ba 00 00 00 00       	mov    $0x0,%edx
c01052d6:	f7 75 9c             	divl   -0x64(%ebp)
c01052d9:	89 d0                	mov    %edx,%eax
c01052db:	8b 55 98             	mov    -0x68(%ebp),%edx
c01052de:	29 c2                	sub    %eax,%edx
c01052e0:	89 d0                	mov    %edx,%eax
c01052e2:	ba 00 00 00 00       	mov    $0x0,%edx
c01052e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01052ea:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c01052ed:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01052f0:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01052f3:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01052f6:	ba 00 00 00 00       	mov    $0x0,%edx
c01052fb:	89 c7                	mov    %eax,%edi
c01052fd:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c0105303:	89 7d 80             	mov    %edi,-0x80(%ebp)
c0105306:	89 d0                	mov    %edx,%eax
c0105308:	83 e0 00             	and    $0x0,%eax
c010530b:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010530e:	8b 45 80             	mov    -0x80(%ebp),%eax
c0105311:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0105314:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105317:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c010531a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010531d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105320:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105323:	77 3a                	ja     c010535f <page_init+0x3c4>
c0105325:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105328:	72 05                	jb     c010532f <page_init+0x394>
c010532a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010532d:	73 30                	jae    c010535f <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c010532f:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0105332:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c0105335:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105338:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010533b:	29 c8                	sub    %ecx,%eax
c010533d:	19 da                	sbb    %ebx,%edx
c010533f:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105343:	c1 ea 0c             	shr    $0xc,%edx
c0105346:	89 c3                	mov    %eax,%ebx
c0105348:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010534b:	89 04 24             	mov    %eax,(%esp)
c010534e:	e8 8c f8 ff ff       	call   c0104bdf <pa2page>
c0105353:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0105357:	89 04 24             	mov    %eax,(%esp)
c010535a:	e8 55 fb ff ff       	call   c0104eb4 <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c010535f:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105363:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105366:	8b 00                	mov    (%eax),%eax
c0105368:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010536b:	0f 8f 7e fe ff ff    	jg     c01051ef <page_init+0x254>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c0105371:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c0105377:	5b                   	pop    %ebx
c0105378:	5e                   	pop    %esi
c0105379:	5f                   	pop    %edi
c010537a:	5d                   	pop    %ebp
c010537b:	c3                   	ret    

c010537c <enable_paging>:

static void
enable_paging(void) {
c010537c:	55                   	push   %ebp
c010537d:	89 e5                	mov    %esp,%ebp
c010537f:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c0105382:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c0105387:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010538a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010538d:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c0105390:	0f 20 c0             	mov    %cr0,%eax
c0105393:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c0105396:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c0105399:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c010539c:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c01053a3:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c01053a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01053aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c01053ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01053b0:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c01053b3:	c9                   	leave  
c01053b4:	c3                   	ret    

c01053b5 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01053b5:	55                   	push   %ebp
c01053b6:	89 e5                	mov    %esp,%ebp
c01053b8:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c01053bb:	8b 45 14             	mov    0x14(%ebp),%eax
c01053be:	8b 55 0c             	mov    0xc(%ebp),%edx
c01053c1:	31 d0                	xor    %edx,%eax
c01053c3:	25 ff 0f 00 00       	and    $0xfff,%eax
c01053c8:	85 c0                	test   %eax,%eax
c01053ca:	74 24                	je     c01053f0 <boot_map_segment+0x3b>
c01053cc:	c7 44 24 0c 22 5f 11 	movl   $0xc0115f22,0xc(%esp)
c01053d3:	c0 
c01053d4:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c01053db:	c0 
c01053dc:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c01053e3:	00 
c01053e4:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01053eb:	e8 d8 ba ff ff       	call   c0100ec8 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c01053f0:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c01053f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01053fa:	25 ff 0f 00 00       	and    $0xfff,%eax
c01053ff:	89 c2                	mov    %eax,%edx
c0105401:	8b 45 10             	mov    0x10(%ebp),%eax
c0105404:	01 c2                	add    %eax,%edx
c0105406:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105409:	01 d0                	add    %edx,%eax
c010540b:	83 e8 01             	sub    $0x1,%eax
c010540e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105411:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105414:	ba 00 00 00 00       	mov    $0x0,%edx
c0105419:	f7 75 f0             	divl   -0x10(%ebp)
c010541c:	89 d0                	mov    %edx,%eax
c010541e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105421:	29 c2                	sub    %eax,%edx
c0105423:	89 d0                	mov    %edx,%eax
c0105425:	c1 e8 0c             	shr    $0xc,%eax
c0105428:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c010542b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010542e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105431:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105434:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105439:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c010543c:	8b 45 14             	mov    0x14(%ebp),%eax
c010543f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105442:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105445:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010544a:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c010544d:	eb 6b                	jmp    c01054ba <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c010544f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105456:	00 
c0105457:	8b 45 0c             	mov    0xc(%ebp),%eax
c010545a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010545e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105461:	89 04 24             	mov    %eax,(%esp)
c0105464:	e8 d1 01 00 00       	call   c010563a <get_pte>
c0105469:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c010546c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105470:	75 24                	jne    c0105496 <boot_map_segment+0xe1>
c0105472:	c7 44 24 0c 4e 5f 11 	movl   $0xc0115f4e,0xc(%esp)
c0105479:	c0 
c010547a:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105481:	c0 
c0105482:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0105489:	00 
c010548a:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105491:	e8 32 ba ff ff       	call   c0100ec8 <__panic>
        *ptep = pa | PTE_P | perm;
c0105496:	8b 45 18             	mov    0x18(%ebp),%eax
c0105499:	8b 55 14             	mov    0x14(%ebp),%edx
c010549c:	09 d0                	or     %edx,%eax
c010549e:	83 c8 01             	or     $0x1,%eax
c01054a1:	89 c2                	mov    %eax,%edx
c01054a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01054a6:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01054a8:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01054ac:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01054b3:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c01054ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01054be:	75 8f                	jne    c010544f <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c01054c0:	c9                   	leave  
c01054c1:	c3                   	ret    

c01054c2 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c01054c2:	55                   	push   %ebp
c01054c3:	89 e5                	mov    %esp,%ebp
c01054c5:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c01054c8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01054cf:	e8 ff f9 ff ff       	call   c0104ed3 <alloc_pages>
c01054d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c01054d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01054db:	75 1c                	jne    c01054f9 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c01054dd:	c7 44 24 08 5b 5f 11 	movl   $0xc0115f5b,0x8(%esp)
c01054e4:	c0 
c01054e5:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c01054ec:	00 
c01054ed:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01054f4:	e8 cf b9 ff ff       	call   c0100ec8 <__panic>
    }
    return page2kva(p);
c01054f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054fc:	89 04 24             	mov    %eax,(%esp)
c01054ff:	e8 20 f7 ff ff       	call   c0104c24 <page2kva>
}
c0105504:	c9                   	leave  
c0105505:	c3                   	ret    

c0105506 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0105506:	55                   	push   %ebp
c0105507:	89 e5                	mov    %esp,%ebp
c0105509:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c010550c:	e8 70 f9 ff ff       	call   c0104e81 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0105511:	e8 85 fa ff ff       	call   c0104f9b <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0105516:	e8 67 09 00 00       	call   c0105e82 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c010551b:	e8 a2 ff ff ff       	call   c01054c2 <boot_alloc_page>
c0105520:	a3 84 fe 14 c0       	mov    %eax,0xc014fe84
    memset(boot_pgdir, 0, PGSIZE);
c0105525:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010552a:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105531:	00 
c0105532:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105539:	00 
c010553a:	89 04 24             	mov    %eax,(%esp)
c010553d:	e8 ed f9 00 00       	call   c0114f2f <memset>
    boot_cr3 = PADDR(boot_pgdir);
c0105542:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105547:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010554a:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105551:	77 23                	ja     c0105576 <pmm_init+0x70>
c0105553:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105556:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010555a:	c7 44 24 08 f0 5e 11 	movl   $0xc0115ef0,0x8(%esp)
c0105561:	c0 
c0105562:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c0105569:	00 
c010556a:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105571:	e8 52 b9 ff ff       	call   c0100ec8 <__panic>
c0105576:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105579:	05 00 00 00 40       	add    $0x40000000,%eax
c010557e:	a3 24 30 15 c0       	mov    %eax,0xc0153024

    check_pgdir();
c0105583:	e8 18 09 00 00       	call   c0105ea0 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0105588:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010558d:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0105593:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105598:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010559b:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01055a2:	77 23                	ja     c01055c7 <pmm_init+0xc1>
c01055a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01055ab:	c7 44 24 08 f0 5e 11 	movl   $0xc0115ef0,0x8(%esp)
c01055b2:	c0 
c01055b3:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c01055ba:	00 
c01055bb:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01055c2:	e8 01 b9 ff ff       	call   c0100ec8 <__panic>
c01055c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055ca:	05 00 00 00 40       	add    $0x40000000,%eax
c01055cf:	83 c8 03             	or     $0x3,%eax
c01055d2:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c01055d4:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01055d9:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c01055e0:	00 
c01055e1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01055e8:	00 
c01055e9:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c01055f0:	38 
c01055f1:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c01055f8:	c0 
c01055f9:	89 04 24             	mov    %eax,(%esp)
c01055fc:	e8 b4 fd ff ff       	call   c01053b5 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c0105601:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105606:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c010560c:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c0105612:	89 10                	mov    %edx,(%eax)

    enable_paging();
c0105614:	e8 63 fd ff ff       	call   c010537c <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0105619:	e8 74 f7 ff ff       	call   c0104d92 <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c010561e:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105623:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0105629:	e8 0d 0f 00 00       	call   c010653b <check_boot_pgdir>

    print_pgdir();
c010562e:	e8 95 13 00 00       	call   c01069c8 <print_pgdir>
    
    kmalloc_init();
c0105633:	e8 e6 f2 ff ff       	call   c010491e <kmalloc_init>

}
c0105638:	c9                   	leave  
c0105639:	c3                   	ret    

c010563a <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c010563a:	55                   	push   %ebp
c010563b:	89 e5                	mov    %esp,%ebp
c010563d:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c0105640:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105643:	c1 e8 16             	shr    $0x16,%eax
c0105646:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010564d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105650:	01 d0                	add    %edx,%eax
c0105652:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c0105655:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105658:	8b 00                	mov    (%eax),%eax
c010565a:	83 e0 01             	and    $0x1,%eax
c010565d:	85 c0                	test   %eax,%eax
c010565f:	0f 85 b9 00 00 00    	jne    c010571e <get_pte+0xe4>
        if (!create) return 0;
c0105665:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105669:	75 0a                	jne    c0105675 <get_pte+0x3b>
c010566b:	b8 00 00 00 00       	mov    $0x0,%eax
c0105670:	e9 05 01 00 00       	jmp    c010577a <get_pte+0x140>
        struct Page *new_page = alloc_page();
c0105675:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010567c:	e8 52 f8 ff ff       	call   c0104ed3 <alloc_pages>
c0105681:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (!new_page) return 0;
c0105684:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105688:	75 0a                	jne    c0105694 <get_pte+0x5a>
c010568a:	b8 00 00 00 00       	mov    $0x0,%eax
c010568f:	e9 e6 00 00 00       	jmp    c010577a <get_pte+0x140>
        set_page_ref(new_page, 1);
c0105694:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010569b:	00 
c010569c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010569f:	89 04 24             	mov    %eax,(%esp)
c01056a2:	e8 31 f6 ff ff       	call   c0104cd8 <set_page_ref>
        uintptr_t pa = page2pa(new_page);
c01056a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01056aa:	89 04 24             	mov    %eax,(%esp)
c01056ad:	e8 17 f5 ff ff       	call   c0104bc9 <page2pa>
c01056b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c01056b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01056b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01056bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01056be:	c1 e8 0c             	shr    $0xc,%eax
c01056c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01056c4:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01056c9:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01056cc:	72 23                	jb     c01056f1 <get_pte+0xb7>
c01056ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01056d1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01056d5:	c7 44 24 08 4c 5e 11 	movl   $0xc0115e4c,0x8(%esp)
c01056dc:	c0 
c01056dd:	c7 44 24 04 96 01 00 	movl   $0x196,0x4(%esp)
c01056e4:	00 
c01056e5:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01056ec:	e8 d7 b7 ff ff       	call   c0100ec8 <__panic>
c01056f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01056f4:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01056f9:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105700:	00 
c0105701:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105708:	00 
c0105709:	89 04 24             	mov    %eax,(%esp)
c010570c:	e8 1e f8 00 00       	call   c0114f2f <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c0105711:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105714:	83 c8 07             	or     $0x7,%eax
c0105717:	89 c2                	mov    %eax,%edx
c0105719:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010571c:	89 10                	mov    %edx,(%eax)
    }
    return (pte_t *)KADDR(PDE_ADDR(*pdep)) + PTX(la);
c010571e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105721:	8b 00                	mov    (%eax),%eax
c0105723:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105728:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010572b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010572e:	c1 e8 0c             	shr    $0xc,%eax
c0105731:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105734:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0105739:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010573c:	72 23                	jb     c0105761 <get_pte+0x127>
c010573e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105741:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105745:	c7 44 24 08 4c 5e 11 	movl   $0xc0115e4c,0x8(%esp)
c010574c:	c0 
c010574d:	c7 44 24 04 99 01 00 	movl   $0x199,0x4(%esp)
c0105754:	00 
c0105755:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c010575c:	e8 67 b7 ff ff       	call   c0100ec8 <__panic>
c0105761:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105764:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105769:	8b 55 0c             	mov    0xc(%ebp),%edx
c010576c:	c1 ea 0c             	shr    $0xc,%edx
c010576f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0105775:	c1 e2 02             	shl    $0x2,%edx
c0105778:	01 d0                	add    %edx,%eax
}
c010577a:	c9                   	leave  
c010577b:	c3                   	ret    

c010577c <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c010577c:	55                   	push   %ebp
c010577d:	89 e5                	mov    %esp,%ebp
c010577f:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105782:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105789:	00 
c010578a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010578d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105791:	8b 45 08             	mov    0x8(%ebp),%eax
c0105794:	89 04 24             	mov    %eax,(%esp)
c0105797:	e8 9e fe ff ff       	call   c010563a <get_pte>
c010579c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c010579f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01057a3:	74 08                	je     c01057ad <get_page+0x31>
        *ptep_store = ptep;
c01057a5:	8b 45 10             	mov    0x10(%ebp),%eax
c01057a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01057ab:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c01057ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01057b1:	74 1b                	je     c01057ce <get_page+0x52>
c01057b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057b6:	8b 00                	mov    (%eax),%eax
c01057b8:	83 e0 01             	and    $0x1,%eax
c01057bb:	85 c0                	test   %eax,%eax
c01057bd:	74 0f                	je     c01057ce <get_page+0x52>
        return pte2page(*ptep);
c01057bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057c2:	8b 00                	mov    (%eax),%eax
c01057c4:	89 04 24             	mov    %eax,(%esp)
c01057c7:	e8 ac f4 ff ff       	call   c0104c78 <pte2page>
c01057cc:	eb 05                	jmp    c01057d3 <get_page+0x57>
    }
    return NULL;
c01057ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01057d3:	c9                   	leave  
c01057d4:	c3                   	ret    

c01057d5 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c01057d5:	55                   	push   %ebp
c01057d6:	89 e5                	mov    %esp,%ebp
c01057d8:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c01057db:	8b 45 10             	mov    0x10(%ebp),%eax
c01057de:	8b 00                	mov    (%eax),%eax
c01057e0:	83 e0 01             	and    $0x1,%eax
c01057e3:	85 c0                	test   %eax,%eax
c01057e5:	74 4d                	je     c0105834 <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c01057e7:	8b 45 10             	mov    0x10(%ebp),%eax
c01057ea:	8b 00                	mov    (%eax),%eax
c01057ec:	89 04 24             	mov    %eax,(%esp)
c01057ef:	e8 84 f4 ff ff       	call   c0104c78 <pte2page>
c01057f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (!page_ref_dec(page))
c01057f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057fa:	89 04 24             	mov    %eax,(%esp)
c01057fd:	e8 fa f4 ff ff       	call   c0104cfc <page_ref_dec>
c0105802:	85 c0                	test   %eax,%eax
c0105804:	75 13                	jne    c0105819 <page_remove_pte+0x44>
            free_page(page);
c0105806:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010580d:	00 
c010580e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105811:	89 04 24             	mov    %eax,(%esp)
c0105814:	e8 25 f7 ff ff       	call   c0104f3e <free_pages>
        *ptep = 0;
c0105819:	8b 45 10             	mov    0x10(%ebp),%eax
c010581c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0105822:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105825:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105829:	8b 45 08             	mov    0x8(%ebp),%eax
c010582c:	89 04 24             	mov    %eax,(%esp)
c010582f:	e8 1d 05 00 00       	call   c0105d51 <tlb_invalidate>
    }
}
c0105834:	c9                   	leave  
c0105835:	c3                   	ret    

c0105836 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105836:	55                   	push   %ebp
c0105837:	89 e5                	mov    %esp,%ebp
c0105839:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c010583c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010583f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105844:	85 c0                	test   %eax,%eax
c0105846:	75 0c                	jne    c0105854 <unmap_range+0x1e>
c0105848:	8b 45 10             	mov    0x10(%ebp),%eax
c010584b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105850:	85 c0                	test   %eax,%eax
c0105852:	74 24                	je     c0105878 <unmap_range+0x42>
c0105854:	c7 44 24 0c 74 5f 11 	movl   $0xc0115f74,0xc(%esp)
c010585b:	c0 
c010585c:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105863:	c0 
c0105864:	c7 44 24 04 d2 01 00 	movl   $0x1d2,0x4(%esp)
c010586b:	00 
c010586c:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105873:	e8 50 b6 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105878:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010587f:	76 11                	jbe    c0105892 <unmap_range+0x5c>
c0105881:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105884:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105887:	73 09                	jae    c0105892 <unmap_range+0x5c>
c0105889:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105890:	76 24                	jbe    c01058b6 <unmap_range+0x80>
c0105892:	c7 44 24 0c 9d 5f 11 	movl   $0xc0115f9d,0xc(%esp)
c0105899:	c0 
c010589a:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c01058a1:	c0 
c01058a2:	c7 44 24 04 d3 01 00 	movl   $0x1d3,0x4(%esp)
c01058a9:	00 
c01058aa:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01058b1:	e8 12 b6 ff ff       	call   c0100ec8 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c01058b6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01058bd:	00 
c01058be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01058c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01058c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01058c8:	89 04 24             	mov    %eax,(%esp)
c01058cb:	e8 6a fd ff ff       	call   c010563a <get_pte>
c01058d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c01058d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01058d7:	75 18                	jne    c01058f1 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c01058d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01058dc:	05 00 00 40 00       	add    $0x400000,%eax
c01058e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01058e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058e7:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c01058ec:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c01058ef:	eb 29                	jmp    c010591a <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c01058f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058f4:	8b 00                	mov    (%eax),%eax
c01058f6:	85 c0                	test   %eax,%eax
c01058f8:	74 19                	je     c0105913 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c01058fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058fd:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105901:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105904:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105908:	8b 45 08             	mov    0x8(%ebp),%eax
c010590b:	89 04 24             	mov    %eax,(%esp)
c010590e:	e8 c2 fe ff ff       	call   c01057d5 <page_remove_pte>
        }
        start += PGSIZE;
c0105913:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c010591a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010591e:	74 08                	je     c0105928 <unmap_range+0xf2>
c0105920:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105923:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105926:	72 8e                	jb     c01058b6 <unmap_range+0x80>
}
c0105928:	c9                   	leave  
c0105929:	c3                   	ret    

c010592a <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c010592a:	55                   	push   %ebp
c010592b:	89 e5                	mov    %esp,%ebp
c010592d:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105930:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105933:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105938:	85 c0                	test   %eax,%eax
c010593a:	75 0c                	jne    c0105948 <exit_range+0x1e>
c010593c:	8b 45 10             	mov    0x10(%ebp),%eax
c010593f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105944:	85 c0                	test   %eax,%eax
c0105946:	74 24                	je     c010596c <exit_range+0x42>
c0105948:	c7 44 24 0c 74 5f 11 	movl   $0xc0115f74,0xc(%esp)
c010594f:	c0 
c0105950:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105957:	c0 
c0105958:	c7 44 24 04 e4 01 00 	movl   $0x1e4,0x4(%esp)
c010595f:	00 
c0105960:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105967:	e8 5c b5 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c010596c:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105973:	76 11                	jbe    c0105986 <exit_range+0x5c>
c0105975:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105978:	3b 45 10             	cmp    0x10(%ebp),%eax
c010597b:	73 09                	jae    c0105986 <exit_range+0x5c>
c010597d:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105984:	76 24                	jbe    c01059aa <exit_range+0x80>
c0105986:	c7 44 24 0c 9d 5f 11 	movl   $0xc0115f9d,0xc(%esp)
c010598d:	c0 
c010598e:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105995:	c0 
c0105996:	c7 44 24 04 e5 01 00 	movl   $0x1e5,0x4(%esp)
c010599d:	00 
c010599e:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01059a5:	e8 1e b5 ff ff       	call   c0100ec8 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c01059aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01059b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059b3:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c01059b8:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c01059bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059be:	c1 e8 16             	shr    $0x16,%eax
c01059c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c01059c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059c7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01059ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01059d1:	01 d0                	add    %edx,%eax
c01059d3:	8b 00                	mov    (%eax),%eax
c01059d5:	83 e0 01             	and    $0x1,%eax
c01059d8:	85 c0                	test   %eax,%eax
c01059da:	74 3e                	je     c0105a1a <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c01059dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059df:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01059e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01059e9:	01 d0                	add    %edx,%eax
c01059eb:	8b 00                	mov    (%eax),%eax
c01059ed:	89 04 24             	mov    %eax,(%esp)
c01059f0:	e8 c1 f2 ff ff       	call   c0104cb6 <pde2page>
c01059f5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01059fc:	00 
c01059fd:	89 04 24             	mov    %eax,(%esp)
c0105a00:	e8 39 f5 ff ff       	call   c0104f3e <free_pages>
            pgdir[pde_idx] = 0;
c0105a05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a08:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105a0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a12:	01 d0                	add    %edx,%eax
c0105a14:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105a1a:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105a21:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105a25:	74 08                	je     c0105a2f <exit_range+0x105>
c0105a27:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a2a:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105a2d:	72 8c                	jb     c01059bb <exit_range+0x91>
}
c0105a2f:	c9                   	leave  
c0105a30:	c3                   	ret    

c0105a31 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105a31:	55                   	push   %ebp
c0105a32:	89 e5                	mov    %esp,%ebp
c0105a34:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105a37:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a3a:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105a3f:	85 c0                	test   %eax,%eax
c0105a41:	75 0c                	jne    c0105a4f <copy_range+0x1e>
c0105a43:	8b 45 14             	mov    0x14(%ebp),%eax
c0105a46:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105a4b:	85 c0                	test   %eax,%eax
c0105a4d:	74 24                	je     c0105a73 <copy_range+0x42>
c0105a4f:	c7 44 24 0c 74 5f 11 	movl   $0xc0115f74,0xc(%esp)
c0105a56:	c0 
c0105a57:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105a5e:	c0 
c0105a5f:	c7 44 24 04 fa 01 00 	movl   $0x1fa,0x4(%esp)
c0105a66:	00 
c0105a67:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105a6e:	e8 55 b4 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105a73:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105a7a:	76 11                	jbe    c0105a8d <copy_range+0x5c>
c0105a7c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a7f:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105a82:	73 09                	jae    c0105a8d <copy_range+0x5c>
c0105a84:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105a8b:	76 24                	jbe    c0105ab1 <copy_range+0x80>
c0105a8d:	c7 44 24 0c 9d 5f 11 	movl   $0xc0115f9d,0xc(%esp)
c0105a94:	c0 
c0105a95:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105a9c:	c0 
c0105a9d:	c7 44 24 04 fb 01 00 	movl   $0x1fb,0x4(%esp)
c0105aa4:	00 
c0105aa5:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105aac:	e8 17 b4 ff ff       	call   c0100ec8 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105ab1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105ab8:	00 
c0105ab9:	8b 45 10             	mov    0x10(%ebp),%eax
c0105abc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ac0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ac3:	89 04 24             	mov    %eax,(%esp)
c0105ac6:	e8 6f fb ff ff       	call   c010563a <get_pte>
c0105acb:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105ace:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105ad2:	75 1b                	jne    c0105aef <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105ad4:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ad7:	05 00 00 40 00       	add    $0x400000,%eax
c0105adc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105adf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ae2:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105ae7:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105aea:	e9 4c 01 00 00       	jmp    c0105c3b <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105aef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105af2:	8b 00                	mov    (%eax),%eax
c0105af4:	83 e0 01             	and    $0x1,%eax
c0105af7:	85 c0                	test   %eax,%eax
c0105af9:	0f 84 35 01 00 00    	je     c0105c34 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105aff:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105b06:	00 
c0105b07:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b11:	89 04 24             	mov    %eax,(%esp)
c0105b14:	e8 21 fb ff ff       	call   c010563a <get_pte>
c0105b19:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105b1c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105b20:	75 0a                	jne    c0105b2c <copy_range+0xfb>
                return -E_NO_MEM;
c0105b22:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105b27:	e9 26 01 00 00       	jmp    c0105c52 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105b2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b2f:	8b 00                	mov    (%eax),%eax
c0105b31:	83 e0 07             	and    $0x7,%eax
c0105b34:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105b37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b3a:	8b 00                	mov    (%eax),%eax
c0105b3c:	89 04 24             	mov    %eax,(%esp)
c0105b3f:	e8 34 f1 ff ff       	call   c0104c78 <pte2page>
c0105b44:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105b47:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105b4e:	e8 80 f3 ff ff       	call   c0104ed3 <alloc_pages>
c0105b53:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105b56:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105b5a:	75 24                	jne    c0105b80 <copy_range+0x14f>
c0105b5c:	c7 44 24 0c b5 5f 11 	movl   $0xc0115fb5,0xc(%esp)
c0105b63:	c0 
c0105b64:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105b6b:	c0 
c0105b6c:	c7 44 24 04 0e 02 00 	movl   $0x20e,0x4(%esp)
c0105b73:	00 
c0105b74:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105b7b:	e8 48 b3 ff ff       	call   c0100ec8 <__panic>
        assert(npage!=NULL);
c0105b80:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105b84:	75 24                	jne    c0105baa <copy_range+0x179>
c0105b86:	c7 44 24 0c c0 5f 11 	movl   $0xc0115fc0,0xc(%esp)
c0105b8d:	c0 
c0105b8e:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105b95:	c0 
c0105b96:	c7 44 24 04 0f 02 00 	movl   $0x20f,0x4(%esp)
c0105b9d:	00 
c0105b9e:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105ba5:	e8 1e b3 ff ff       	call   c0100ec8 <__panic>
        int ret=0;
c0105baa:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void *src_kvaddr = page2kva(page);
c0105bb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105bb4:	89 04 24             	mov    %eax,(%esp)
c0105bb7:	e8 68 f0 ff ff       	call   c0104c24 <page2kva>
c0105bbc:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void *dst_kvaddr = page2kva(npage);
c0105bbf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105bc2:	89 04 24             	mov    %eax,(%esp)
c0105bc5:	e8 5a f0 ff ff       	call   c0104c24 <page2kva>
c0105bca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0105bcd:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105bd4:	00 
c0105bd5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105bd8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105bdc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105bdf:	89 04 24             	mov    %eax,(%esp)
c0105be2:	e8 2a f4 00 00       	call   c0115011 <memcpy>
        ret = page_insert(to, npage, start, perm);
c0105be7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105bea:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105bee:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bf1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105bf5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105bf8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105bfc:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bff:	89 04 24             	mov    %eax,(%esp)
c0105c02:	e8 91 00 00 00       	call   c0105c98 <page_insert>
c0105c07:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0105c0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105c0e:	74 24                	je     c0105c34 <copy_range+0x203>
c0105c10:	c7 44 24 0c cc 5f 11 	movl   $0xc0115fcc,0xc(%esp)
c0105c17:	c0 
c0105c18:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105c1f:	c0 
c0105c20:	c7 44 24 04 23 02 00 	movl   $0x223,0x4(%esp)
c0105c27:	00 
c0105c28:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105c2f:	e8 94 b2 ff ff       	call   c0100ec8 <__panic>
        }
        start += PGSIZE;
c0105c34:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105c3b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105c3f:	74 0c                	je     c0105c4d <copy_range+0x21c>
c0105c41:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c44:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105c47:	0f 82 64 fe ff ff    	jb     c0105ab1 <copy_range+0x80>
    return 0;
c0105c4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105c52:	c9                   	leave  
c0105c53:	c3                   	ret    

c0105c54 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105c54:	55                   	push   %ebp
c0105c55:	89 e5                	mov    %esp,%ebp
c0105c57:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105c5a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105c61:	00 
c0105c62:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c65:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c69:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c6c:	89 04 24             	mov    %eax,(%esp)
c0105c6f:	e8 c6 f9 ff ff       	call   c010563a <get_pte>
c0105c74:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105c77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105c7b:	74 19                	je     c0105c96 <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105c7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c80:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105c84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c87:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c8e:	89 04 24             	mov    %eax,(%esp)
c0105c91:	e8 3f fb ff ff       	call   c01057d5 <page_remove_pte>
    }
}
c0105c96:	c9                   	leave  
c0105c97:	c3                   	ret    

c0105c98 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105c98:	55                   	push   %ebp
c0105c99:	89 e5                	mov    %esp,%ebp
c0105c9b:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105c9e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105ca5:	00 
c0105ca6:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ca9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105cad:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cb0:	89 04 24             	mov    %eax,(%esp)
c0105cb3:	e8 82 f9 ff ff       	call   c010563a <get_pte>
c0105cb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105cbb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105cbf:	75 0a                	jne    c0105ccb <page_insert+0x33>
        return -E_NO_MEM;
c0105cc1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105cc6:	e9 84 00 00 00       	jmp    c0105d4f <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105cce:	89 04 24             	mov    %eax,(%esp)
c0105cd1:	e8 0f f0 ff ff       	call   c0104ce5 <page_ref_inc>
    if (*ptep & PTE_P) {
c0105cd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105cd9:	8b 00                	mov    (%eax),%eax
c0105cdb:	83 e0 01             	and    $0x1,%eax
c0105cde:	85 c0                	test   %eax,%eax
c0105ce0:	74 3e                	je     c0105d20 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105ce2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ce5:	8b 00                	mov    (%eax),%eax
c0105ce7:	89 04 24             	mov    %eax,(%esp)
c0105cea:	e8 89 ef ff ff       	call   c0104c78 <pte2page>
c0105cef:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105cf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cf5:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105cf8:	75 0d                	jne    c0105d07 <page_insert+0x6f>
            page_ref_dec(page);
c0105cfa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105cfd:	89 04 24             	mov    %eax,(%esp)
c0105d00:	e8 f7 ef ff ff       	call   c0104cfc <page_ref_dec>
c0105d05:	eb 19                	jmp    c0105d20 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105d07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d0a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105d0e:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d11:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d15:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d18:	89 04 24             	mov    %eax,(%esp)
c0105d1b:	e8 b5 fa ff ff       	call   c01057d5 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105d20:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d23:	89 04 24             	mov    %eax,(%esp)
c0105d26:	e8 9e ee ff ff       	call   c0104bc9 <page2pa>
c0105d2b:	0b 45 14             	or     0x14(%ebp),%eax
c0105d2e:	83 c8 01             	or     $0x1,%eax
c0105d31:	89 c2                	mov    %eax,%edx
c0105d33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d36:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105d38:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d3b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d42:	89 04 24             	mov    %eax,(%esp)
c0105d45:	e8 07 00 00 00       	call   c0105d51 <tlb_invalidate>
    return 0;
c0105d4a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105d4f:	c9                   	leave  
c0105d50:	c3                   	ret    

c0105d51 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105d51:	55                   	push   %ebp
c0105d52:	89 e5                	mov    %esp,%ebp
c0105d54:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105d57:	0f 20 d8             	mov    %cr3,%eax
c0105d5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0105d5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0105d60:	89 c2                	mov    %eax,%edx
c0105d62:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d65:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105d68:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105d6f:	77 23                	ja     c0105d94 <tlb_invalidate+0x43>
c0105d71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d74:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105d78:	c7 44 24 08 f0 5e 11 	movl   $0xc0115ef0,0x8(%esp)
c0105d7f:	c0 
c0105d80:	c7 44 24 04 54 02 00 	movl   $0x254,0x4(%esp)
c0105d87:	00 
c0105d88:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105d8f:	e8 34 b1 ff ff       	call   c0100ec8 <__panic>
c0105d94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d97:	05 00 00 00 40       	add    $0x40000000,%eax
c0105d9c:	39 c2                	cmp    %eax,%edx
c0105d9e:	75 0c                	jne    c0105dac <tlb_invalidate+0x5b>
        invlpg((void *)la);
c0105da0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105da3:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0105da6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105da9:	0f 01 38             	invlpg (%eax)
    }
}
c0105dac:	c9                   	leave  
c0105dad:	c3                   	ret    

c0105dae <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0105dae:	55                   	push   %ebp
c0105daf:	89 e5                	mov    %esp,%ebp
c0105db1:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0105db4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105dbb:	e8 13 f1 ff ff       	call   c0104ed3 <alloc_pages>
c0105dc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0105dc3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105dc7:	0f 84 b0 00 00 00    	je     c0105e7d <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0105dcd:	8b 45 10             	mov    0x10(%ebp),%eax
c0105dd0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105dd4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105dd7:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105dde:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105de2:	8b 45 08             	mov    0x8(%ebp),%eax
c0105de5:	89 04 24             	mov    %eax,(%esp)
c0105de8:	e8 ab fe ff ff       	call   c0105c98 <page_insert>
c0105ded:	85 c0                	test   %eax,%eax
c0105def:	74 1a                	je     c0105e0b <pgdir_alloc_page+0x5d>
            free_page(page);
c0105df1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105df8:	00 
c0105df9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105dfc:	89 04 24             	mov    %eax,(%esp)
c0105dff:	e8 3a f1 ff ff       	call   c0104f3e <free_pages>
            return NULL;
c0105e04:	b8 00 00 00 00       	mov    $0x0,%eax
c0105e09:	eb 75                	jmp    c0105e80 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c0105e0b:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0105e10:	85 c0                	test   %eax,%eax
c0105e12:	74 69                	je     c0105e7d <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c0105e14:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0105e19:	85 c0                	test   %eax,%eax
c0105e1b:	74 60                	je     c0105e7d <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0105e1d:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0105e22:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105e29:	00 
c0105e2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105e2d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105e31:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105e34:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105e38:	89 04 24             	mov    %eax,(%esp)
c0105e3b:	e8 51 0e 00 00       	call   c0106c91 <swap_map_swappable>
                page->pra_vaddr=la;
c0105e40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e43:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105e46:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0105e49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e4c:	89 04 24             	mov    %eax,(%esp)
c0105e4f:	e8 7a ee ff ff       	call   c0104cce <page_ref>
c0105e54:	83 f8 01             	cmp    $0x1,%eax
c0105e57:	74 24                	je     c0105e7d <pgdir_alloc_page+0xcf>
c0105e59:	c7 44 24 0c d5 5f 11 	movl   $0xc0115fd5,0xc(%esp)
c0105e60:	c0 
c0105e61:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105e68:	c0 
c0105e69:	c7 44 24 04 68 02 00 	movl   $0x268,0x4(%esp)
c0105e70:	00 
c0105e71:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105e78:	e8 4b b0 ff ff       	call   c0100ec8 <__panic>
            }
        }

    }

    return page;
c0105e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105e80:	c9                   	leave  
c0105e81:	c3                   	ret    

c0105e82 <check_alloc_page>:

static void
check_alloc_page(void) {
c0105e82:	55                   	push   %ebp
c0105e83:	89 e5                	mov    %esp,%ebp
c0105e85:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c0105e88:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0105e8d:	8b 40 18             	mov    0x18(%eax),%eax
c0105e90:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0105e92:	c7 04 24 ec 5f 11 c0 	movl   $0xc0115fec,(%esp)
c0105e99:	e8 c7 a4 ff ff       	call   c0100365 <cprintf>
}
c0105e9e:	c9                   	leave  
c0105e9f:	c3                   	ret    

c0105ea0 <check_pgdir>:

static void
check_pgdir(void) {
c0105ea0:	55                   	push   %ebp
c0105ea1:	89 e5                	mov    %esp,%ebp
c0105ea3:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0105ea6:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0105eab:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0105eb0:	76 24                	jbe    c0105ed6 <check_pgdir+0x36>
c0105eb2:	c7 44 24 0c 0b 60 11 	movl   $0xc011600b,0xc(%esp)
c0105eb9:	c0 
c0105eba:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105ec1:	c0 
c0105ec2:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c0105ec9:	00 
c0105eca:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105ed1:	e8 f2 af ff ff       	call   c0100ec8 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0105ed6:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105edb:	85 c0                	test   %eax,%eax
c0105edd:	74 0e                	je     c0105eed <check_pgdir+0x4d>
c0105edf:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105ee4:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105ee9:	85 c0                	test   %eax,%eax
c0105eeb:	74 24                	je     c0105f11 <check_pgdir+0x71>
c0105eed:	c7 44 24 0c 28 60 11 	movl   $0xc0116028,0xc(%esp)
c0105ef4:	c0 
c0105ef5:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105efc:	c0 
c0105efd:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c0105f04:	00 
c0105f05:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105f0c:	e8 b7 af ff ff       	call   c0100ec8 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0105f11:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105f16:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105f1d:	00 
c0105f1e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105f25:	00 
c0105f26:	89 04 24             	mov    %eax,(%esp)
c0105f29:	e8 4e f8 ff ff       	call   c010577c <get_page>
c0105f2e:	85 c0                	test   %eax,%eax
c0105f30:	74 24                	je     c0105f56 <check_pgdir+0xb6>
c0105f32:	c7 44 24 0c 60 60 11 	movl   $0xc0116060,0xc(%esp)
c0105f39:	c0 
c0105f3a:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105f41:	c0 
c0105f42:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c0105f49:	00 
c0105f4a:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105f51:	e8 72 af ff ff       	call   c0100ec8 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c0105f56:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105f5d:	e8 71 ef ff ff       	call   c0104ed3 <alloc_pages>
c0105f62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c0105f65:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105f6a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105f71:	00 
c0105f72:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105f79:	00 
c0105f7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105f7d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105f81:	89 04 24             	mov    %eax,(%esp)
c0105f84:	e8 0f fd ff ff       	call   c0105c98 <page_insert>
c0105f89:	85 c0                	test   %eax,%eax
c0105f8b:	74 24                	je     c0105fb1 <check_pgdir+0x111>
c0105f8d:	c7 44 24 0c 88 60 11 	movl   $0xc0116088,0xc(%esp)
c0105f94:	c0 
c0105f95:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105f9c:	c0 
c0105f9d:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c0105fa4:	00 
c0105fa5:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105fac:	e8 17 af ff ff       	call   c0100ec8 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0105fb1:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105fb6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105fbd:	00 
c0105fbe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105fc5:	00 
c0105fc6:	89 04 24             	mov    %eax,(%esp)
c0105fc9:	e8 6c f6 ff ff       	call   c010563a <get_pte>
c0105fce:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105fd1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105fd5:	75 24                	jne    c0105ffb <check_pgdir+0x15b>
c0105fd7:	c7 44 24 0c b4 60 11 	movl   $0xc01160b4,0xc(%esp)
c0105fde:	c0 
c0105fdf:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0105fe6:	c0 
c0105fe7:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c0105fee:	00 
c0105fef:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0105ff6:	e8 cd ae ff ff       	call   c0100ec8 <__panic>
    assert(pte2page(*ptep) == p1);
c0105ffb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ffe:	8b 00                	mov    (%eax),%eax
c0106000:	89 04 24             	mov    %eax,(%esp)
c0106003:	e8 70 ec ff ff       	call   c0104c78 <pte2page>
c0106008:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010600b:	74 24                	je     c0106031 <check_pgdir+0x191>
c010600d:	c7 44 24 0c e1 60 11 	movl   $0xc01160e1,0xc(%esp)
c0106014:	c0 
c0106015:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c010601c:	c0 
c010601d:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c0106024:	00 
c0106025:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c010602c:	e8 97 ae ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p1) == 1);
c0106031:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106034:	89 04 24             	mov    %eax,(%esp)
c0106037:	e8 92 ec ff ff       	call   c0104cce <page_ref>
c010603c:	83 f8 01             	cmp    $0x1,%eax
c010603f:	74 24                	je     c0106065 <check_pgdir+0x1c5>
c0106041:	c7 44 24 0c f7 60 11 	movl   $0xc01160f7,0xc(%esp)
c0106048:	c0 
c0106049:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0106050:	c0 
c0106051:	c7 44 24 04 8b 02 00 	movl   $0x28b,0x4(%esp)
c0106058:	00 
c0106059:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106060:	e8 63 ae ff ff       	call   c0100ec8 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c0106065:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010606a:	8b 00                	mov    (%eax),%eax
c010606c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106071:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106074:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106077:	c1 e8 0c             	shr    $0xc,%eax
c010607a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010607d:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0106082:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0106085:	72 23                	jb     c01060aa <check_pgdir+0x20a>
c0106087:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010608a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010608e:	c7 44 24 08 4c 5e 11 	movl   $0xc0115e4c,0x8(%esp)
c0106095:	c0 
c0106096:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c010609d:	00 
c010609e:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01060a5:	e8 1e ae ff ff       	call   c0100ec8 <__panic>
c01060aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060ad:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01060b2:	83 c0 04             	add    $0x4,%eax
c01060b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c01060b8:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01060bd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01060c4:	00 
c01060c5:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01060cc:	00 
c01060cd:	89 04 24             	mov    %eax,(%esp)
c01060d0:	e8 65 f5 ff ff       	call   c010563a <get_pte>
c01060d5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01060d8:	74 24                	je     c01060fe <check_pgdir+0x25e>
c01060da:	c7 44 24 0c 0c 61 11 	movl   $0xc011610c,0xc(%esp)
c01060e1:	c0 
c01060e2:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c01060e9:	c0 
c01060ea:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c01060f1:	00 
c01060f2:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01060f9:	e8 ca ad ff ff       	call   c0100ec8 <__panic>

    p2 = alloc_page();
c01060fe:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106105:	e8 c9 ed ff ff       	call   c0104ed3 <alloc_pages>
c010610a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c010610d:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106112:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c0106119:	00 
c010611a:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106121:	00 
c0106122:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106125:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106129:	89 04 24             	mov    %eax,(%esp)
c010612c:	e8 67 fb ff ff       	call   c0105c98 <page_insert>
c0106131:	85 c0                	test   %eax,%eax
c0106133:	74 24                	je     c0106159 <check_pgdir+0x2b9>
c0106135:	c7 44 24 0c 34 61 11 	movl   $0xc0116134,0xc(%esp)
c010613c:	c0 
c010613d:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0106144:	c0 
c0106145:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c010614c:	00 
c010614d:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106154:	e8 6f ad ff ff       	call   c0100ec8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106159:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010615e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106165:	00 
c0106166:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010616d:	00 
c010616e:	89 04 24             	mov    %eax,(%esp)
c0106171:	e8 c4 f4 ff ff       	call   c010563a <get_pte>
c0106176:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106179:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010617d:	75 24                	jne    c01061a3 <check_pgdir+0x303>
c010617f:	c7 44 24 0c 6c 61 11 	movl   $0xc011616c,0xc(%esp)
c0106186:	c0 
c0106187:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c010618e:	c0 
c010618f:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c0106196:	00 
c0106197:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c010619e:	e8 25 ad ff ff       	call   c0100ec8 <__panic>
    assert(*ptep & PTE_U);
c01061a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01061a6:	8b 00                	mov    (%eax),%eax
c01061a8:	83 e0 04             	and    $0x4,%eax
c01061ab:	85 c0                	test   %eax,%eax
c01061ad:	75 24                	jne    c01061d3 <check_pgdir+0x333>
c01061af:	c7 44 24 0c 9c 61 11 	movl   $0xc011619c,0xc(%esp)
c01061b6:	c0 
c01061b7:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c01061be:	c0 
c01061bf:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
c01061c6:	00 
c01061c7:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01061ce:	e8 f5 ac ff ff       	call   c0100ec8 <__panic>
    assert(*ptep & PTE_W);
c01061d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01061d6:	8b 00                	mov    (%eax),%eax
c01061d8:	83 e0 02             	and    $0x2,%eax
c01061db:	85 c0                	test   %eax,%eax
c01061dd:	75 24                	jne    c0106203 <check_pgdir+0x363>
c01061df:	c7 44 24 0c aa 61 11 	movl   $0xc01161aa,0xc(%esp)
c01061e6:	c0 
c01061e7:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c01061ee:	c0 
c01061ef:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c01061f6:	00 
c01061f7:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01061fe:	e8 c5 ac ff ff       	call   c0100ec8 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0106203:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106208:	8b 00                	mov    (%eax),%eax
c010620a:	83 e0 04             	and    $0x4,%eax
c010620d:	85 c0                	test   %eax,%eax
c010620f:	75 24                	jne    c0106235 <check_pgdir+0x395>
c0106211:	c7 44 24 0c b8 61 11 	movl   $0xc01161b8,0xc(%esp)
c0106218:	c0 
c0106219:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0106220:	c0 
c0106221:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c0106228:	00 
c0106229:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106230:	e8 93 ac ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 1);
c0106235:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106238:	89 04 24             	mov    %eax,(%esp)
c010623b:	e8 8e ea ff ff       	call   c0104cce <page_ref>
c0106240:	83 f8 01             	cmp    $0x1,%eax
c0106243:	74 24                	je     c0106269 <check_pgdir+0x3c9>
c0106245:	c7 44 24 0c ce 61 11 	movl   $0xc01161ce,0xc(%esp)
c010624c:	c0 
c010624d:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0106254:	c0 
c0106255:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c010625c:	00 
c010625d:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106264:	e8 5f ac ff ff       	call   c0100ec8 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0106269:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010626e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106275:	00 
c0106276:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010627d:	00 
c010627e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106281:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106285:	89 04 24             	mov    %eax,(%esp)
c0106288:	e8 0b fa ff ff       	call   c0105c98 <page_insert>
c010628d:	85 c0                	test   %eax,%eax
c010628f:	74 24                	je     c01062b5 <check_pgdir+0x415>
c0106291:	c7 44 24 0c e0 61 11 	movl   $0xc01161e0,0xc(%esp)
c0106298:	c0 
c0106299:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c01062a0:	c0 
c01062a1:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c01062a8:	00 
c01062a9:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01062b0:	e8 13 ac ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p1) == 2);
c01062b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062b8:	89 04 24             	mov    %eax,(%esp)
c01062bb:	e8 0e ea ff ff       	call   c0104cce <page_ref>
c01062c0:	83 f8 02             	cmp    $0x2,%eax
c01062c3:	74 24                	je     c01062e9 <check_pgdir+0x449>
c01062c5:	c7 44 24 0c 0c 62 11 	movl   $0xc011620c,0xc(%esp)
c01062cc:	c0 
c01062cd:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c01062d4:	c0 
c01062d5:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c01062dc:	00 
c01062dd:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01062e4:	e8 df ab ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c01062e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01062ec:	89 04 24             	mov    %eax,(%esp)
c01062ef:	e8 da e9 ff ff       	call   c0104cce <page_ref>
c01062f4:	85 c0                	test   %eax,%eax
c01062f6:	74 24                	je     c010631c <check_pgdir+0x47c>
c01062f8:	c7 44 24 0c 1e 62 11 	movl   $0xc011621e,0xc(%esp)
c01062ff:	c0 
c0106300:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0106307:	c0 
c0106308:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c010630f:	00 
c0106310:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106317:	e8 ac ab ff ff       	call   c0100ec8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010631c:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106321:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106328:	00 
c0106329:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106330:	00 
c0106331:	89 04 24             	mov    %eax,(%esp)
c0106334:	e8 01 f3 ff ff       	call   c010563a <get_pte>
c0106339:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010633c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106340:	75 24                	jne    c0106366 <check_pgdir+0x4c6>
c0106342:	c7 44 24 0c 6c 61 11 	movl   $0xc011616c,0xc(%esp)
c0106349:	c0 
c010634a:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0106351:	c0 
c0106352:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
c0106359:	00 
c010635a:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106361:	e8 62 ab ff ff       	call   c0100ec8 <__panic>
    assert(pte2page(*ptep) == p1);
c0106366:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106369:	8b 00                	mov    (%eax),%eax
c010636b:	89 04 24             	mov    %eax,(%esp)
c010636e:	e8 05 e9 ff ff       	call   c0104c78 <pte2page>
c0106373:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106376:	74 24                	je     c010639c <check_pgdir+0x4fc>
c0106378:	c7 44 24 0c e1 60 11 	movl   $0xc01160e1,0xc(%esp)
c010637f:	c0 
c0106380:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0106387:	c0 
c0106388:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c010638f:	00 
c0106390:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106397:	e8 2c ab ff ff       	call   c0100ec8 <__panic>
    assert((*ptep & PTE_U) == 0);
c010639c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010639f:	8b 00                	mov    (%eax),%eax
c01063a1:	83 e0 04             	and    $0x4,%eax
c01063a4:	85 c0                	test   %eax,%eax
c01063a6:	74 24                	je     c01063cc <check_pgdir+0x52c>
c01063a8:	c7 44 24 0c 30 62 11 	movl   $0xc0116230,0xc(%esp)
c01063af:	c0 
c01063b0:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c01063b7:	c0 
c01063b8:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c01063bf:	00 
c01063c0:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01063c7:	e8 fc aa ff ff       	call   c0100ec8 <__panic>

    page_remove(boot_pgdir, 0x0);
c01063cc:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01063d1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01063d8:	00 
c01063d9:	89 04 24             	mov    %eax,(%esp)
c01063dc:	e8 73 f8 ff ff       	call   c0105c54 <page_remove>
    assert(page_ref(p1) == 1);
c01063e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063e4:	89 04 24             	mov    %eax,(%esp)
c01063e7:	e8 e2 e8 ff ff       	call   c0104cce <page_ref>
c01063ec:	83 f8 01             	cmp    $0x1,%eax
c01063ef:	74 24                	je     c0106415 <check_pgdir+0x575>
c01063f1:	c7 44 24 0c f7 60 11 	movl   $0xc01160f7,0xc(%esp)
c01063f8:	c0 
c01063f9:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0106400:	c0 
c0106401:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c0106408:	00 
c0106409:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106410:	e8 b3 aa ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c0106415:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106418:	89 04 24             	mov    %eax,(%esp)
c010641b:	e8 ae e8 ff ff       	call   c0104cce <page_ref>
c0106420:	85 c0                	test   %eax,%eax
c0106422:	74 24                	je     c0106448 <check_pgdir+0x5a8>
c0106424:	c7 44 24 0c 1e 62 11 	movl   $0xc011621e,0xc(%esp)
c010642b:	c0 
c010642c:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0106433:	c0 
c0106434:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c010643b:	00 
c010643c:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106443:	e8 80 aa ff ff       	call   c0100ec8 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0106448:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010644d:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106454:	00 
c0106455:	89 04 24             	mov    %eax,(%esp)
c0106458:	e8 f7 f7 ff ff       	call   c0105c54 <page_remove>
    assert(page_ref(p1) == 0);
c010645d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106460:	89 04 24             	mov    %eax,(%esp)
c0106463:	e8 66 e8 ff ff       	call   c0104cce <page_ref>
c0106468:	85 c0                	test   %eax,%eax
c010646a:	74 24                	je     c0106490 <check_pgdir+0x5f0>
c010646c:	c7 44 24 0c 45 62 11 	movl   $0xc0116245,0xc(%esp)
c0106473:	c0 
c0106474:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c010647b:	c0 
c010647c:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c0106483:	00 
c0106484:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c010648b:	e8 38 aa ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c0106490:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106493:	89 04 24             	mov    %eax,(%esp)
c0106496:	e8 33 e8 ff ff       	call   c0104cce <page_ref>
c010649b:	85 c0                	test   %eax,%eax
c010649d:	74 24                	je     c01064c3 <check_pgdir+0x623>
c010649f:	c7 44 24 0c 1e 62 11 	movl   $0xc011621e,0xc(%esp)
c01064a6:	c0 
c01064a7:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c01064ae:	c0 
c01064af:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
c01064b6:	00 
c01064b7:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01064be:	e8 05 aa ff ff       	call   c0100ec8 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c01064c3:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01064c8:	8b 00                	mov    (%eax),%eax
c01064ca:	89 04 24             	mov    %eax,(%esp)
c01064cd:	e8 e4 e7 ff ff       	call   c0104cb6 <pde2page>
c01064d2:	89 04 24             	mov    %eax,(%esp)
c01064d5:	e8 f4 e7 ff ff       	call   c0104cce <page_ref>
c01064da:	83 f8 01             	cmp    $0x1,%eax
c01064dd:	74 24                	je     c0106503 <check_pgdir+0x663>
c01064df:	c7 44 24 0c 58 62 11 	movl   $0xc0116258,0xc(%esp)
c01064e6:	c0 
c01064e7:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c01064ee:	c0 
c01064ef:	c7 44 24 04 a7 02 00 	movl   $0x2a7,0x4(%esp)
c01064f6:	00 
c01064f7:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01064fe:	e8 c5 a9 ff ff       	call   c0100ec8 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0106503:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106508:	8b 00                	mov    (%eax),%eax
c010650a:	89 04 24             	mov    %eax,(%esp)
c010650d:	e8 a4 e7 ff ff       	call   c0104cb6 <pde2page>
c0106512:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106519:	00 
c010651a:	89 04 24             	mov    %eax,(%esp)
c010651d:	e8 1c ea ff ff       	call   c0104f3e <free_pages>
    boot_pgdir[0] = 0;
c0106522:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106527:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c010652d:	c7 04 24 7f 62 11 c0 	movl   $0xc011627f,(%esp)
c0106534:	e8 2c 9e ff ff       	call   c0100365 <cprintf>
}
c0106539:	c9                   	leave  
c010653a:	c3                   	ret    

c010653b <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c010653b:	55                   	push   %ebp
c010653c:	89 e5                	mov    %esp,%ebp
c010653e:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106541:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106548:	e9 ca 00 00 00       	jmp    c0106617 <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c010654d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106550:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106553:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106556:	c1 e8 0c             	shr    $0xc,%eax
c0106559:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010655c:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0106561:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0106564:	72 23                	jb     c0106589 <check_boot_pgdir+0x4e>
c0106566:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106569:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010656d:	c7 44 24 08 4c 5e 11 	movl   $0xc0115e4c,0x8(%esp)
c0106574:	c0 
c0106575:	c7 44 24 04 b3 02 00 	movl   $0x2b3,0x4(%esp)
c010657c:	00 
c010657d:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106584:	e8 3f a9 ff ff       	call   c0100ec8 <__panic>
c0106589:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010658c:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106591:	89 c2                	mov    %eax,%edx
c0106593:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106598:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010659f:	00 
c01065a0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01065a4:	89 04 24             	mov    %eax,(%esp)
c01065a7:	e8 8e f0 ff ff       	call   c010563a <get_pte>
c01065ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01065af:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01065b3:	75 24                	jne    c01065d9 <check_boot_pgdir+0x9e>
c01065b5:	c7 44 24 0c 9c 62 11 	movl   $0xc011629c,0xc(%esp)
c01065bc:	c0 
c01065bd:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c01065c4:	c0 
c01065c5:	c7 44 24 04 b3 02 00 	movl   $0x2b3,0x4(%esp)
c01065cc:	00 
c01065cd:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01065d4:	e8 ef a8 ff ff       	call   c0100ec8 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c01065d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01065dc:	8b 00                	mov    (%eax),%eax
c01065de:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01065e3:	89 c2                	mov    %eax,%edx
c01065e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065e8:	39 c2                	cmp    %eax,%edx
c01065ea:	74 24                	je     c0106610 <check_boot_pgdir+0xd5>
c01065ec:	c7 44 24 0c d9 62 11 	movl   $0xc01162d9,0xc(%esp)
c01065f3:	c0 
c01065f4:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c01065fb:	c0 
c01065fc:	c7 44 24 04 b4 02 00 	movl   $0x2b4,0x4(%esp)
c0106603:	00 
c0106604:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c010660b:	e8 b8 a8 ff ff       	call   c0100ec8 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106610:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0106617:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010661a:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010661f:	39 c2                	cmp    %eax,%edx
c0106621:	0f 82 26 ff ff ff    	jb     c010654d <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0106627:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010662c:	05 ac 0f 00 00       	add    $0xfac,%eax
c0106631:	8b 00                	mov    (%eax),%eax
c0106633:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106638:	89 c2                	mov    %eax,%edx
c010663a:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010663f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106642:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0106649:	77 23                	ja     c010666e <check_boot_pgdir+0x133>
c010664b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010664e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106652:	c7 44 24 08 f0 5e 11 	movl   $0xc0115ef0,0x8(%esp)
c0106659:	c0 
c010665a:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c0106661:	00 
c0106662:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106669:	e8 5a a8 ff ff       	call   c0100ec8 <__panic>
c010666e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106671:	05 00 00 00 40       	add    $0x40000000,%eax
c0106676:	39 c2                	cmp    %eax,%edx
c0106678:	74 24                	je     c010669e <check_boot_pgdir+0x163>
c010667a:	c7 44 24 0c f0 62 11 	movl   $0xc01162f0,0xc(%esp)
c0106681:	c0 
c0106682:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0106689:	c0 
c010668a:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c0106691:	00 
c0106692:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106699:	e8 2a a8 ff ff       	call   c0100ec8 <__panic>

    assert(boot_pgdir[0] == 0);
c010669e:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01066a3:	8b 00                	mov    (%eax),%eax
c01066a5:	85 c0                	test   %eax,%eax
c01066a7:	74 24                	je     c01066cd <check_boot_pgdir+0x192>
c01066a9:	c7 44 24 0c 24 63 11 	movl   $0xc0116324,0xc(%esp)
c01066b0:	c0 
c01066b1:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c01066b8:	c0 
c01066b9:	c7 44 24 04 b9 02 00 	movl   $0x2b9,0x4(%esp)
c01066c0:	00 
c01066c1:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01066c8:	e8 fb a7 ff ff       	call   c0100ec8 <__panic>

    struct Page *p;
    p = alloc_page();
c01066cd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01066d4:	e8 fa e7 ff ff       	call   c0104ed3 <alloc_pages>
c01066d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c01066dc:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01066e1:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c01066e8:	00 
c01066e9:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c01066f0:	00 
c01066f1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01066f4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01066f8:	89 04 24             	mov    %eax,(%esp)
c01066fb:	e8 98 f5 ff ff       	call   c0105c98 <page_insert>
c0106700:	85 c0                	test   %eax,%eax
c0106702:	74 24                	je     c0106728 <check_boot_pgdir+0x1ed>
c0106704:	c7 44 24 0c 38 63 11 	movl   $0xc0116338,0xc(%esp)
c010670b:	c0 
c010670c:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0106713:	c0 
c0106714:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c010671b:	00 
c010671c:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106723:	e8 a0 a7 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p) == 1);
c0106728:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010672b:	89 04 24             	mov    %eax,(%esp)
c010672e:	e8 9b e5 ff ff       	call   c0104cce <page_ref>
c0106733:	83 f8 01             	cmp    $0x1,%eax
c0106736:	74 24                	je     c010675c <check_boot_pgdir+0x221>
c0106738:	c7 44 24 0c 66 63 11 	movl   $0xc0116366,0xc(%esp)
c010673f:	c0 
c0106740:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0106747:	c0 
c0106748:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
c010674f:	00 
c0106750:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106757:	e8 6c a7 ff ff       	call   c0100ec8 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c010675c:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106761:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106768:	00 
c0106769:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0106770:	00 
c0106771:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106774:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106778:	89 04 24             	mov    %eax,(%esp)
c010677b:	e8 18 f5 ff ff       	call   c0105c98 <page_insert>
c0106780:	85 c0                	test   %eax,%eax
c0106782:	74 24                	je     c01067a8 <check_boot_pgdir+0x26d>
c0106784:	c7 44 24 0c 78 63 11 	movl   $0xc0116378,0xc(%esp)
c010678b:	c0 
c010678c:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0106793:	c0 
c0106794:	c7 44 24 04 bf 02 00 	movl   $0x2bf,0x4(%esp)
c010679b:	00 
c010679c:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01067a3:	e8 20 a7 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p) == 2);
c01067a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01067ab:	89 04 24             	mov    %eax,(%esp)
c01067ae:	e8 1b e5 ff ff       	call   c0104cce <page_ref>
c01067b3:	83 f8 02             	cmp    $0x2,%eax
c01067b6:	74 24                	je     c01067dc <check_boot_pgdir+0x2a1>
c01067b8:	c7 44 24 0c af 63 11 	movl   $0xc01163af,0xc(%esp)
c01067bf:	c0 
c01067c0:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c01067c7:	c0 
c01067c8:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c01067cf:	00 
c01067d0:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01067d7:	e8 ec a6 ff ff       	call   c0100ec8 <__panic>

    const char *str = "ucore: Hello world!!";
c01067dc:	c7 45 dc c0 63 11 c0 	movl   $0xc01163c0,-0x24(%ebp)
    strcpy((void *)0x100, str);
c01067e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01067e6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01067ea:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c01067f1:	e8 62 e4 00 00       	call   c0114c58 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c01067f6:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c01067fd:	00 
c01067fe:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106805:	e8 c7 e4 00 00       	call   c0114cd1 <strcmp>
c010680a:	85 c0                	test   %eax,%eax
c010680c:	74 24                	je     c0106832 <check_boot_pgdir+0x2f7>
c010680e:	c7 44 24 0c d8 63 11 	movl   $0xc01163d8,0xc(%esp)
c0106815:	c0 
c0106816:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c010681d:	c0 
c010681e:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c0106825:	00 
c0106826:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c010682d:	e8 96 a6 ff ff       	call   c0100ec8 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106832:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106835:	89 04 24             	mov    %eax,(%esp)
c0106838:	e8 e7 e3 ff ff       	call   c0104c24 <page2kva>
c010683d:	05 00 01 00 00       	add    $0x100,%eax
c0106842:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106845:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c010684c:	e8 88 e3 00 00       	call   c0114bd9 <strlen>
c0106851:	85 c0                	test   %eax,%eax
c0106853:	74 24                	je     c0106879 <check_boot_pgdir+0x33e>
c0106855:	c7 44 24 0c 10 64 11 	movl   $0xc0116410,0xc(%esp)
c010685c:	c0 
c010685d:	c7 44 24 08 39 5f 11 	movl   $0xc0115f39,0x8(%esp)
c0106864:	c0 
c0106865:	c7 44 24 04 c7 02 00 	movl   $0x2c7,0x4(%esp)
c010686c:	00 
c010686d:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c0106874:	e8 4f a6 ff ff       	call   c0100ec8 <__panic>

    free_page(p);
c0106879:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106880:	00 
c0106881:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106884:	89 04 24             	mov    %eax,(%esp)
c0106887:	e8 b2 e6 ff ff       	call   c0104f3e <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c010688c:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106891:	8b 00                	mov    (%eax),%eax
c0106893:	89 04 24             	mov    %eax,(%esp)
c0106896:	e8 1b e4 ff ff       	call   c0104cb6 <pde2page>
c010689b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01068a2:	00 
c01068a3:	89 04 24             	mov    %eax,(%esp)
c01068a6:	e8 93 e6 ff ff       	call   c0104f3e <free_pages>
    boot_pgdir[0] = 0;
c01068ab:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01068b0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c01068b6:	c7 04 24 34 64 11 c0 	movl   $0xc0116434,(%esp)
c01068bd:	e8 a3 9a ff ff       	call   c0100365 <cprintf>
}
c01068c2:	c9                   	leave  
c01068c3:	c3                   	ret    

c01068c4 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c01068c4:	55                   	push   %ebp
c01068c5:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c01068c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01068ca:	83 e0 04             	and    $0x4,%eax
c01068cd:	85 c0                	test   %eax,%eax
c01068cf:	74 07                	je     c01068d8 <perm2str+0x14>
c01068d1:	b8 75 00 00 00       	mov    $0x75,%eax
c01068d6:	eb 05                	jmp    c01068dd <perm2str+0x19>
c01068d8:	b8 2d 00 00 00       	mov    $0x2d,%eax
c01068dd:	a2 08 ff 14 c0       	mov    %al,0xc014ff08
    str[1] = 'r';
c01068e2:	c6 05 09 ff 14 c0 72 	movb   $0x72,0xc014ff09
    str[2] = (perm & PTE_W) ? 'w' : '-';
c01068e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01068ec:	83 e0 02             	and    $0x2,%eax
c01068ef:	85 c0                	test   %eax,%eax
c01068f1:	74 07                	je     c01068fa <perm2str+0x36>
c01068f3:	b8 77 00 00 00       	mov    $0x77,%eax
c01068f8:	eb 05                	jmp    c01068ff <perm2str+0x3b>
c01068fa:	b8 2d 00 00 00       	mov    $0x2d,%eax
c01068ff:	a2 0a ff 14 c0       	mov    %al,0xc014ff0a
    str[3] = '\0';
c0106904:	c6 05 0b ff 14 c0 00 	movb   $0x0,0xc014ff0b
    return str;
c010690b:	b8 08 ff 14 c0       	mov    $0xc014ff08,%eax
}
c0106910:	5d                   	pop    %ebp
c0106911:	c3                   	ret    

c0106912 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106912:	55                   	push   %ebp
c0106913:	89 e5                	mov    %esp,%ebp
c0106915:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106918:	8b 45 10             	mov    0x10(%ebp),%eax
c010691b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010691e:	72 0a                	jb     c010692a <get_pgtable_items+0x18>
        return 0;
c0106920:	b8 00 00 00 00       	mov    $0x0,%eax
c0106925:	e9 9c 00 00 00       	jmp    c01069c6 <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c010692a:	eb 04                	jmp    c0106930 <get_pgtable_items+0x1e>
        start ++;
c010692c:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106930:	8b 45 10             	mov    0x10(%ebp),%eax
c0106933:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106936:	73 18                	jae    c0106950 <get_pgtable_items+0x3e>
c0106938:	8b 45 10             	mov    0x10(%ebp),%eax
c010693b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106942:	8b 45 14             	mov    0x14(%ebp),%eax
c0106945:	01 d0                	add    %edx,%eax
c0106947:	8b 00                	mov    (%eax),%eax
c0106949:	83 e0 01             	and    $0x1,%eax
c010694c:	85 c0                	test   %eax,%eax
c010694e:	74 dc                	je     c010692c <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106950:	8b 45 10             	mov    0x10(%ebp),%eax
c0106953:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106956:	73 69                	jae    c01069c1 <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106958:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010695c:	74 08                	je     c0106966 <get_pgtable_items+0x54>
            *left_store = start;
c010695e:	8b 45 18             	mov    0x18(%ebp),%eax
c0106961:	8b 55 10             	mov    0x10(%ebp),%edx
c0106964:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106966:	8b 45 10             	mov    0x10(%ebp),%eax
c0106969:	8d 50 01             	lea    0x1(%eax),%edx
c010696c:	89 55 10             	mov    %edx,0x10(%ebp)
c010696f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106976:	8b 45 14             	mov    0x14(%ebp),%eax
c0106979:	01 d0                	add    %edx,%eax
c010697b:	8b 00                	mov    (%eax),%eax
c010697d:	83 e0 07             	and    $0x7,%eax
c0106980:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106983:	eb 04                	jmp    c0106989 <get_pgtable_items+0x77>
            start ++;
c0106985:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106989:	8b 45 10             	mov    0x10(%ebp),%eax
c010698c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010698f:	73 1d                	jae    c01069ae <get_pgtable_items+0x9c>
c0106991:	8b 45 10             	mov    0x10(%ebp),%eax
c0106994:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010699b:	8b 45 14             	mov    0x14(%ebp),%eax
c010699e:	01 d0                	add    %edx,%eax
c01069a0:	8b 00                	mov    (%eax),%eax
c01069a2:	83 e0 07             	and    $0x7,%eax
c01069a5:	89 c2                	mov    %eax,%edx
c01069a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01069aa:	39 c2                	cmp    %eax,%edx
c01069ac:	74 d7                	je     c0106985 <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c01069ae:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01069b2:	74 08                	je     c01069bc <get_pgtable_items+0xaa>
            *right_store = start;
c01069b4:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01069b7:	8b 55 10             	mov    0x10(%ebp),%edx
c01069ba:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c01069bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01069bf:	eb 05                	jmp    c01069c6 <get_pgtable_items+0xb4>
    }
    return 0;
c01069c1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01069c6:	c9                   	leave  
c01069c7:	c3                   	ret    

c01069c8 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c01069c8:	55                   	push   %ebp
c01069c9:	89 e5                	mov    %esp,%ebp
c01069cb:	57                   	push   %edi
c01069cc:	56                   	push   %esi
c01069cd:	53                   	push   %ebx
c01069ce:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c01069d1:	c7 04 24 54 64 11 c0 	movl   $0xc0116454,(%esp)
c01069d8:	e8 88 99 ff ff       	call   c0100365 <cprintf>
    size_t left, right = 0, perm;
c01069dd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c01069e4:	e9 fa 00 00 00       	jmp    c0106ae3 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c01069e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01069ec:	89 04 24             	mov    %eax,(%esp)
c01069ef:	e8 d0 fe ff ff       	call   c01068c4 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c01069f4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01069f7:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01069fa:	29 d1                	sub    %edx,%ecx
c01069fc:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c01069fe:	89 d6                	mov    %edx,%esi
c0106a00:	c1 e6 16             	shl    $0x16,%esi
c0106a03:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106a06:	89 d3                	mov    %edx,%ebx
c0106a08:	c1 e3 16             	shl    $0x16,%ebx
c0106a0b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106a0e:	89 d1                	mov    %edx,%ecx
c0106a10:	c1 e1 16             	shl    $0x16,%ecx
c0106a13:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106a16:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106a19:	29 d7                	sub    %edx,%edi
c0106a1b:	89 fa                	mov    %edi,%edx
c0106a1d:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106a21:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106a25:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106a29:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106a2d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106a31:	c7 04 24 85 64 11 c0 	movl   $0xc0116485,(%esp)
c0106a38:	e8 28 99 ff ff       	call   c0100365 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106a3d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a40:	c1 e0 0a             	shl    $0xa,%eax
c0106a43:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106a46:	eb 54                	jmp    c0106a9c <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106a48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106a4b:	89 04 24             	mov    %eax,(%esp)
c0106a4e:	e8 71 fe ff ff       	call   c01068c4 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106a53:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106a56:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106a59:	29 d1                	sub    %edx,%ecx
c0106a5b:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106a5d:	89 d6                	mov    %edx,%esi
c0106a5f:	c1 e6 0c             	shl    $0xc,%esi
c0106a62:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106a65:	89 d3                	mov    %edx,%ebx
c0106a67:	c1 e3 0c             	shl    $0xc,%ebx
c0106a6a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106a6d:	c1 e2 0c             	shl    $0xc,%edx
c0106a70:	89 d1                	mov    %edx,%ecx
c0106a72:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106a75:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106a78:	29 d7                	sub    %edx,%edi
c0106a7a:	89 fa                	mov    %edi,%edx
c0106a7c:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106a80:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106a84:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106a88:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106a8c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106a90:	c7 04 24 a4 64 11 c0 	movl   $0xc01164a4,(%esp)
c0106a97:	e8 c9 98 ff ff       	call   c0100365 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106a9c:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106aa1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106aa4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106aa7:	89 ce                	mov    %ecx,%esi
c0106aa9:	c1 e6 0a             	shl    $0xa,%esi
c0106aac:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106aaf:	89 cb                	mov    %ecx,%ebx
c0106ab1:	c1 e3 0a             	shl    $0xa,%ebx
c0106ab4:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106ab7:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106abb:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106abe:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106ac2:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106ac6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106aca:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106ace:	89 1c 24             	mov    %ebx,(%esp)
c0106ad1:	e8 3c fe ff ff       	call   c0106912 <get_pgtable_items>
c0106ad6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106ad9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106add:	0f 85 65 ff ff ff    	jne    c0106a48 <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106ae3:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106ae8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106aeb:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106aee:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106af2:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106af5:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106af9:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106afd:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106b01:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106b08:	00 
c0106b09:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106b10:	e8 fd fd ff ff       	call   c0106912 <get_pgtable_items>
c0106b15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106b18:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106b1c:	0f 85 c7 fe ff ff    	jne    c01069e9 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106b22:	c7 04 24 c8 64 11 c0 	movl   $0xc01164c8,(%esp)
c0106b29:	e8 37 98 ff ff       	call   c0100365 <cprintf>
}
c0106b2e:	83 c4 4c             	add    $0x4c,%esp
c0106b31:	5b                   	pop    %ebx
c0106b32:	5e                   	pop    %esi
c0106b33:	5f                   	pop    %edi
c0106b34:	5d                   	pop    %ebp
c0106b35:	c3                   	ret    

c0106b36 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106b36:	55                   	push   %ebp
c0106b37:	89 e5                	mov    %esp,%ebp
c0106b39:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106b3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b3f:	c1 e8 0c             	shr    $0xc,%eax
c0106b42:	89 c2                	mov    %eax,%edx
c0106b44:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0106b49:	39 c2                	cmp    %eax,%edx
c0106b4b:	72 1c                	jb     c0106b69 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106b4d:	c7 44 24 08 fc 64 11 	movl   $0xc01164fc,0x8(%esp)
c0106b54:	c0 
c0106b55:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106b5c:	00 
c0106b5d:	c7 04 24 1b 65 11 c0 	movl   $0xc011651b,(%esp)
c0106b64:	e8 5f a3 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0106b69:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0106b6e:	8b 55 08             	mov    0x8(%ebp),%edx
c0106b71:	c1 ea 0c             	shr    $0xc,%edx
c0106b74:	c1 e2 05             	shl    $0x5,%edx
c0106b77:	01 d0                	add    %edx,%eax
}
c0106b79:	c9                   	leave  
c0106b7a:	c3                   	ret    

c0106b7b <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106b7b:	55                   	push   %ebp
c0106b7c:	89 e5                	mov    %esp,%ebp
c0106b7e:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106b81:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b84:	83 e0 01             	and    $0x1,%eax
c0106b87:	85 c0                	test   %eax,%eax
c0106b89:	75 1c                	jne    c0106ba7 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106b8b:	c7 44 24 08 2c 65 11 	movl   $0xc011652c,0x8(%esp)
c0106b92:	c0 
c0106b93:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106b9a:	00 
c0106b9b:	c7 04 24 1b 65 11 c0 	movl   $0xc011651b,(%esp)
c0106ba2:	e8 21 a3 ff ff       	call   c0100ec8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106ba7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106baa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106baf:	89 04 24             	mov    %eax,(%esp)
c0106bb2:	e8 7f ff ff ff       	call   c0106b36 <pa2page>
}
c0106bb7:	c9                   	leave  
c0106bb8:	c3                   	ret    

c0106bb9 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106bb9:	55                   	push   %ebp
c0106bba:	89 e5                	mov    %esp,%ebp
c0106bbc:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0106bbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bc2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106bc7:	89 04 24             	mov    %eax,(%esp)
c0106bca:	e8 67 ff ff ff       	call   c0106b36 <pa2page>
}
c0106bcf:	c9                   	leave  
c0106bd0:	c3                   	ret    

c0106bd1 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106bd1:	55                   	push   %ebp
c0106bd2:	89 e5                	mov    %esp,%ebp
c0106bd4:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106bd7:	e8 84 7d 00 00       	call   c010e960 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106bdc:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106be1:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106be6:	76 0c                	jbe    c0106bf4 <swap_init+0x23>
c0106be8:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106bed:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106bf2:	76 25                	jbe    c0106c19 <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106bf4:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106bf9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106bfd:	c7 44 24 08 4d 65 11 	movl   $0xc011654d,0x8(%esp)
c0106c04:	c0 
c0106c05:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106c0c:	00 
c0106c0d:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106c14:	e8 af a2 ff ff       	call   c0100ec8 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106c19:	c7 05 14 ff 14 c0 60 	movl   $0xc014ea60,0xc014ff14
c0106c20:	ea 14 c0 
     int r = sm->init();
c0106c23:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106c28:	8b 40 04             	mov    0x4(%eax),%eax
c0106c2b:	ff d0                	call   *%eax
c0106c2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106c30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106c34:	75 26                	jne    c0106c5c <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106c36:	c7 05 0c ff 14 c0 01 	movl   $0x1,0xc014ff0c
c0106c3d:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106c40:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106c45:	8b 00                	mov    (%eax),%eax
c0106c47:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106c4b:	c7 04 24 77 65 11 c0 	movl   $0xc0116577,(%esp)
c0106c52:	e8 0e 97 ff ff       	call   c0100365 <cprintf>
          check_swap();
c0106c57:	e8 a4 04 00 00       	call   c0107100 <check_swap>
     }

     return r;
c0106c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106c5f:	c9                   	leave  
c0106c60:	c3                   	ret    

c0106c61 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106c61:	55                   	push   %ebp
c0106c62:	89 e5                	mov    %esp,%ebp
c0106c64:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106c67:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106c6c:	8b 40 08             	mov    0x8(%eax),%eax
c0106c6f:	8b 55 08             	mov    0x8(%ebp),%edx
c0106c72:	89 14 24             	mov    %edx,(%esp)
c0106c75:	ff d0                	call   *%eax
}
c0106c77:	c9                   	leave  
c0106c78:	c3                   	ret    

c0106c79 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106c79:	55                   	push   %ebp
c0106c7a:	89 e5                	mov    %esp,%ebp
c0106c7c:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106c7f:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106c84:	8b 40 0c             	mov    0xc(%eax),%eax
c0106c87:	8b 55 08             	mov    0x8(%ebp),%edx
c0106c8a:	89 14 24             	mov    %edx,(%esp)
c0106c8d:	ff d0                	call   *%eax
}
c0106c8f:	c9                   	leave  
c0106c90:	c3                   	ret    

c0106c91 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106c91:	55                   	push   %ebp
c0106c92:	89 e5                	mov    %esp,%ebp
c0106c94:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106c97:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106c9c:	8b 40 10             	mov    0x10(%eax),%eax
c0106c9f:	8b 55 14             	mov    0x14(%ebp),%edx
c0106ca2:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106ca6:	8b 55 10             	mov    0x10(%ebp),%edx
c0106ca9:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106cad:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106cb0:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106cb4:	8b 55 08             	mov    0x8(%ebp),%edx
c0106cb7:	89 14 24             	mov    %edx,(%esp)
c0106cba:	ff d0                	call   *%eax
}
c0106cbc:	c9                   	leave  
c0106cbd:	c3                   	ret    

c0106cbe <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106cbe:	55                   	push   %ebp
c0106cbf:	89 e5                	mov    %esp,%ebp
c0106cc1:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106cc4:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106cc9:	8b 40 14             	mov    0x14(%eax),%eax
c0106ccc:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106ccf:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106cd3:	8b 55 08             	mov    0x8(%ebp),%edx
c0106cd6:	89 14 24             	mov    %edx,(%esp)
c0106cd9:	ff d0                	call   *%eax
}
c0106cdb:	c9                   	leave  
c0106cdc:	c3                   	ret    

c0106cdd <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106cdd:	55                   	push   %ebp
c0106cde:	89 e5                	mov    %esp,%ebp
c0106ce0:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106ce3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106cea:	e9 5a 01 00 00       	jmp    c0106e49 <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106cef:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106cf4:	8b 40 18             	mov    0x18(%eax),%eax
c0106cf7:	8b 55 10             	mov    0x10(%ebp),%edx
c0106cfa:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106cfe:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0106d01:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106d05:	8b 55 08             	mov    0x8(%ebp),%edx
c0106d08:	89 14 24             	mov    %edx,(%esp)
c0106d0b:	ff d0                	call   *%eax
c0106d0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106d10:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106d14:	74 18                	je     c0106d2e <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106d19:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106d1d:	c7 04 24 8c 65 11 c0 	movl   $0xc011658c,(%esp)
c0106d24:	e8 3c 96 ff ff       	call   c0100365 <cprintf>
c0106d29:	e9 27 01 00 00       	jmp    c0106e55 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106d2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d31:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106d34:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106d37:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d3a:	8b 40 0c             	mov    0xc(%eax),%eax
c0106d3d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106d44:	00 
c0106d45:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106d48:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106d4c:	89 04 24             	mov    %eax,(%esp)
c0106d4f:	e8 e6 e8 ff ff       	call   c010563a <get_pte>
c0106d54:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0106d57:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106d5a:	8b 00                	mov    (%eax),%eax
c0106d5c:	83 e0 01             	and    $0x1,%eax
c0106d5f:	85 c0                	test   %eax,%eax
c0106d61:	75 24                	jne    c0106d87 <swap_out+0xaa>
c0106d63:	c7 44 24 0c b9 65 11 	movl   $0xc01165b9,0xc(%esp)
c0106d6a:	c0 
c0106d6b:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0106d72:	c0 
c0106d73:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0106d7a:	00 
c0106d7b:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106d82:	e8 41 a1 ff ff       	call   c0100ec8 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0106d87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d8a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106d8d:	8b 52 1c             	mov    0x1c(%edx),%edx
c0106d90:	c1 ea 0c             	shr    $0xc,%edx
c0106d93:	83 c2 01             	add    $0x1,%edx
c0106d96:	c1 e2 08             	shl    $0x8,%edx
c0106d99:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106d9d:	89 14 24             	mov    %edx,(%esp)
c0106da0:	e8 75 7c 00 00       	call   c010ea1a <swapfs_write>
c0106da5:	85 c0                	test   %eax,%eax
c0106da7:	74 34                	je     c0106ddd <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0106da9:	c7 04 24 e3 65 11 c0 	movl   $0xc01165e3,(%esp)
c0106db0:	e8 b0 95 ff ff       	call   c0100365 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0106db5:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106dba:	8b 40 10             	mov    0x10(%eax),%eax
c0106dbd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106dc0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106dc7:	00 
c0106dc8:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106dcc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106dcf:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106dd3:	8b 55 08             	mov    0x8(%ebp),%edx
c0106dd6:	89 14 24             	mov    %edx,(%esp)
c0106dd9:	ff d0                	call   *%eax
c0106ddb:	eb 68                	jmp    c0106e45 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0106ddd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106de0:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106de3:	c1 e8 0c             	shr    $0xc,%eax
c0106de6:	83 c0 01             	add    $0x1,%eax
c0106de9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106ded:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106df0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106df4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106df7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106dfb:	c7 04 24 fc 65 11 c0 	movl   $0xc01165fc,(%esp)
c0106e02:	e8 5e 95 ff ff       	call   c0100365 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0106e07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106e0a:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106e0d:	c1 e8 0c             	shr    $0xc,%eax
c0106e10:	83 c0 01             	add    $0x1,%eax
c0106e13:	c1 e0 08             	shl    $0x8,%eax
c0106e16:	89 c2                	mov    %eax,%edx
c0106e18:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106e1b:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0106e1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106e20:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106e27:	00 
c0106e28:	89 04 24             	mov    %eax,(%esp)
c0106e2b:	e8 0e e1 ff ff       	call   c0104f3e <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0106e30:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e33:	8b 40 0c             	mov    0xc(%eax),%eax
c0106e36:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106e39:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e3d:	89 04 24             	mov    %eax,(%esp)
c0106e40:	e8 0c ef ff ff       	call   c0105d51 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0106e45:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106e49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e4c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106e4f:	0f 85 9a fe ff ff    	jne    c0106cef <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0106e55:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106e58:	c9                   	leave  
c0106e59:	c3                   	ret    

c0106e5a <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0106e5a:	55                   	push   %ebp
c0106e5b:	89 e5                	mov    %esp,%ebp
c0106e5d:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c0106e60:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106e67:	e8 67 e0 ff ff       	call   c0104ed3 <alloc_pages>
c0106e6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0106e6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106e73:	75 24                	jne    c0106e99 <swap_in+0x3f>
c0106e75:	c7 44 24 0c 3c 66 11 	movl   $0xc011663c,0xc(%esp)
c0106e7c:	c0 
c0106e7d:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0106e84:	c0 
c0106e85:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0106e8c:	00 
c0106e8d:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106e94:	e8 2f a0 ff ff       	call   c0100ec8 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0106e99:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e9c:	8b 40 0c             	mov    0xc(%eax),%eax
c0106e9f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106ea6:	00 
c0106ea7:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106eaa:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106eae:	89 04 24             	mov    %eax,(%esp)
c0106eb1:	e8 84 e7 ff ff       	call   c010563a <get_pte>
c0106eb6:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0106eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ebc:	8b 00                	mov    (%eax),%eax
c0106ebe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106ec1:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ec5:	89 04 24             	mov    %eax,(%esp)
c0106ec8:	e8 db 7a 00 00       	call   c010e9a8 <swapfs_read>
c0106ecd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106ed0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106ed4:	74 2a                	je     c0106f00 <swap_in+0xa6>
     {
        assert(r!=0);
c0106ed6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106eda:	75 24                	jne    c0106f00 <swap_in+0xa6>
c0106edc:	c7 44 24 0c 49 66 11 	movl   $0xc0116649,0xc(%esp)
c0106ee3:	c0 
c0106ee4:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0106eeb:	c0 
c0106eec:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0106ef3:	00 
c0106ef4:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106efb:	e8 c8 9f ff ff       	call   c0100ec8 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0106f00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f03:	8b 00                	mov    (%eax),%eax
c0106f05:	c1 e8 08             	shr    $0x8,%eax
c0106f08:	89 c2                	mov    %eax,%edx
c0106f0a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f0d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106f11:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f15:	c7 04 24 50 66 11 c0 	movl   $0xc0116650,(%esp)
c0106f1c:	e8 44 94 ff ff       	call   c0100365 <cprintf>
     *ptr_result=result;
c0106f21:	8b 45 10             	mov    0x10(%ebp),%eax
c0106f24:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106f27:	89 10                	mov    %edx,(%eax)
     return 0;
c0106f29:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106f2e:	c9                   	leave  
c0106f2f:	c3                   	ret    

c0106f30 <check_content_set>:



static inline void
check_content_set(void)
{
c0106f30:	55                   	push   %ebp
c0106f31:	89 e5                	mov    %esp,%ebp
c0106f33:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0106f36:	b8 00 10 00 00       	mov    $0x1000,%eax
c0106f3b:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0106f3e:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0106f43:	83 f8 01             	cmp    $0x1,%eax
c0106f46:	74 24                	je     c0106f6c <check_content_set+0x3c>
c0106f48:	c7 44 24 0c 8e 66 11 	movl   $0xc011668e,0xc(%esp)
c0106f4f:	c0 
c0106f50:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0106f57:	c0 
c0106f58:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c0106f5f:	00 
c0106f60:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106f67:	e8 5c 9f ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0106f6c:	b8 10 10 00 00       	mov    $0x1010,%eax
c0106f71:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0106f74:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0106f79:	83 f8 01             	cmp    $0x1,%eax
c0106f7c:	74 24                	je     c0106fa2 <check_content_set+0x72>
c0106f7e:	c7 44 24 0c 8e 66 11 	movl   $0xc011668e,0xc(%esp)
c0106f85:	c0 
c0106f86:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0106f8d:	c0 
c0106f8e:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0106f95:	00 
c0106f96:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106f9d:	e8 26 9f ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0106fa2:	b8 00 20 00 00       	mov    $0x2000,%eax
c0106fa7:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0106faa:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0106faf:	83 f8 02             	cmp    $0x2,%eax
c0106fb2:	74 24                	je     c0106fd8 <check_content_set+0xa8>
c0106fb4:	c7 44 24 0c 9d 66 11 	movl   $0xc011669d,0xc(%esp)
c0106fbb:	c0 
c0106fbc:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0106fc3:	c0 
c0106fc4:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c0106fcb:	00 
c0106fcc:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0106fd3:	e8 f0 9e ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0106fd8:	b8 10 20 00 00       	mov    $0x2010,%eax
c0106fdd:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0106fe0:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0106fe5:	83 f8 02             	cmp    $0x2,%eax
c0106fe8:	74 24                	je     c010700e <check_content_set+0xde>
c0106fea:	c7 44 24 0c 9d 66 11 	movl   $0xc011669d,0xc(%esp)
c0106ff1:	c0 
c0106ff2:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0106ff9:	c0 
c0106ffa:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0107001:	00 
c0107002:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0107009:	e8 ba 9e ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c010700e:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107013:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107016:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c010701b:	83 f8 03             	cmp    $0x3,%eax
c010701e:	74 24                	je     c0107044 <check_content_set+0x114>
c0107020:	c7 44 24 0c ac 66 11 	movl   $0xc01166ac,0xc(%esp)
c0107027:	c0 
c0107028:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c010702f:	c0 
c0107030:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c0107037:	00 
c0107038:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c010703f:	e8 84 9e ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0107044:	b8 10 30 00 00       	mov    $0x3010,%eax
c0107049:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010704c:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107051:	83 f8 03             	cmp    $0x3,%eax
c0107054:	74 24                	je     c010707a <check_content_set+0x14a>
c0107056:	c7 44 24 0c ac 66 11 	movl   $0xc01166ac,0xc(%esp)
c010705d:	c0 
c010705e:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0107065:	c0 
c0107066:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c010706d:	00 
c010706e:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0107075:	e8 4e 9e ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c010707a:	b8 00 40 00 00       	mov    $0x4000,%eax
c010707f:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107082:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107087:	83 f8 04             	cmp    $0x4,%eax
c010708a:	74 24                	je     c01070b0 <check_content_set+0x180>
c010708c:	c7 44 24 0c bb 66 11 	movl   $0xc01166bb,0xc(%esp)
c0107093:	c0 
c0107094:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c010709b:	c0 
c010709c:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c01070a3:	00 
c01070a4:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01070ab:	e8 18 9e ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c01070b0:	b8 10 40 00 00       	mov    $0x4010,%eax
c01070b5:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01070b8:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01070bd:	83 f8 04             	cmp    $0x4,%eax
c01070c0:	74 24                	je     c01070e6 <check_content_set+0x1b6>
c01070c2:	c7 44 24 0c bb 66 11 	movl   $0xc01166bb,0xc(%esp)
c01070c9:	c0 
c01070ca:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c01070d1:	c0 
c01070d2:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c01070d9:	00 
c01070da:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01070e1:	e8 e2 9d ff ff       	call   c0100ec8 <__panic>
}
c01070e6:	c9                   	leave  
c01070e7:	c3                   	ret    

c01070e8 <check_content_access>:

static inline int
check_content_access(void)
{
c01070e8:	55                   	push   %ebp
c01070e9:	89 e5                	mov    %esp,%ebp
c01070eb:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c01070ee:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c01070f3:	8b 40 1c             	mov    0x1c(%eax),%eax
c01070f6:	ff d0                	call   *%eax
c01070f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c01070fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01070fe:	c9                   	leave  
c01070ff:	c3                   	ret    

c0107100 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0107100:	55                   	push   %ebp
c0107101:	89 e5                	mov    %esp,%ebp
c0107103:	53                   	push   %ebx
c0107104:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0107107:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010710e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0107115:	c7 45 e8 14 30 15 c0 	movl   $0xc0153014,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010711c:	eb 6b                	jmp    c0107189 <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c010711e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107121:	83 e8 0c             	sub    $0xc,%eax
c0107124:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0107127:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010712a:	83 c0 04             	add    $0x4,%eax
c010712d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0107134:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107137:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010713a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010713d:	0f a3 10             	bt     %edx,(%eax)
c0107140:	19 c0                	sbb    %eax,%eax
c0107142:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c0107145:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107149:	0f 95 c0             	setne  %al
c010714c:	0f b6 c0             	movzbl %al,%eax
c010714f:	85 c0                	test   %eax,%eax
c0107151:	75 24                	jne    c0107177 <check_swap+0x77>
c0107153:	c7 44 24 0c ca 66 11 	movl   $0xc01166ca,0xc(%esp)
c010715a:	c0 
c010715b:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0107162:	c0 
c0107163:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c010716a:	00 
c010716b:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0107172:	e8 51 9d ff ff       	call   c0100ec8 <__panic>
        count ++, total += p->property;
c0107177:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010717b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010717e:	8b 50 08             	mov    0x8(%eax),%edx
c0107181:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107184:	01 d0                	add    %edx,%eax
c0107186:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107189:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010718c:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010718f:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107192:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107195:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107198:	81 7d e8 14 30 15 c0 	cmpl   $0xc0153014,-0x18(%ebp)
c010719f:	0f 85 79 ff ff ff    	jne    c010711e <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c01071a5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01071a8:	e8 c3 dd ff ff       	call   c0104f70 <nr_free_pages>
c01071ad:	39 c3                	cmp    %eax,%ebx
c01071af:	74 24                	je     c01071d5 <check_swap+0xd5>
c01071b1:	c7 44 24 0c da 66 11 	movl   $0xc01166da,0xc(%esp)
c01071b8:	c0 
c01071b9:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c01071c0:	c0 
c01071c1:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c01071c8:	00 
c01071c9:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01071d0:	e8 f3 9c ff ff       	call   c0100ec8 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c01071d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01071d8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01071dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01071df:	89 44 24 04          	mov    %eax,0x4(%esp)
c01071e3:	c7 04 24 f4 66 11 c0 	movl   $0xc01166f4,(%esp)
c01071ea:	e8 76 91 ff ff       	call   c0100365 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c01071ef:	e8 50 0a 00 00       	call   c0107c44 <mm_create>
c01071f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c01071f7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01071fb:	75 24                	jne    c0107221 <check_swap+0x121>
c01071fd:	c7 44 24 0c 1a 67 11 	movl   $0xc011671a,0xc(%esp)
c0107204:	c0 
c0107205:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c010720c:	c0 
c010720d:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0107214:	00 
c0107215:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c010721c:	e8 a7 9c ff ff       	call   c0100ec8 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107221:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0107226:	85 c0                	test   %eax,%eax
c0107228:	74 24                	je     c010724e <check_swap+0x14e>
c010722a:	c7 44 24 0c 25 67 11 	movl   $0xc0116725,0xc(%esp)
c0107231:	c0 
c0107232:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0107239:	c0 
c010723a:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0107241:	00 
c0107242:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0107249:	e8 7a 9c ff ff       	call   c0100ec8 <__panic>

     check_mm_struct = mm;
c010724e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107251:	a3 0c 31 15 c0       	mov    %eax,0xc015310c

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0107256:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c010725c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010725f:	89 50 0c             	mov    %edx,0xc(%eax)
c0107262:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107265:	8b 40 0c             	mov    0xc(%eax),%eax
c0107268:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c010726b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010726e:	8b 00                	mov    (%eax),%eax
c0107270:	85 c0                	test   %eax,%eax
c0107272:	74 24                	je     c0107298 <check_swap+0x198>
c0107274:	c7 44 24 0c 3d 67 11 	movl   $0xc011673d,0xc(%esp)
c010727b:	c0 
c010727c:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0107283:	c0 
c0107284:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c010728b:	00 
c010728c:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0107293:	e8 30 9c ff ff       	call   c0100ec8 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0107298:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c010729f:	00 
c01072a0:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c01072a7:	00 
c01072a8:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01072af:	e8 35 0a 00 00       	call   c0107ce9 <vma_create>
c01072b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c01072b7:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01072bb:	75 24                	jne    c01072e1 <check_swap+0x1e1>
c01072bd:	c7 44 24 0c 4b 67 11 	movl   $0xc011674b,0xc(%esp)
c01072c4:	c0 
c01072c5:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c01072cc:	c0 
c01072cd:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c01072d4:	00 
c01072d5:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01072dc:	e8 e7 9b ff ff       	call   c0100ec8 <__panic>

     insert_vma_struct(mm, vma);
c01072e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01072e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01072e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01072eb:	89 04 24             	mov    %eax,(%esp)
c01072ee:	e8 86 0b 00 00       	call   c0107e79 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c01072f3:	c7 04 24 58 67 11 c0 	movl   $0xc0116758,(%esp)
c01072fa:	e8 66 90 ff ff       	call   c0100365 <cprintf>
     pte_t *temp_ptep=NULL;
c01072ff:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0107306:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107309:	8b 40 0c             	mov    0xc(%eax),%eax
c010730c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107313:	00 
c0107314:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010731b:	00 
c010731c:	89 04 24             	mov    %eax,(%esp)
c010731f:	e8 16 e3 ff ff       	call   c010563a <get_pte>
c0107324:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c0107327:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c010732b:	75 24                	jne    c0107351 <check_swap+0x251>
c010732d:	c7 44 24 0c 8c 67 11 	movl   $0xc011678c,0xc(%esp)
c0107334:	c0 
c0107335:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c010733c:	c0 
c010733d:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0107344:	00 
c0107345:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c010734c:	e8 77 9b ff ff       	call   c0100ec8 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0107351:	c7 04 24 a0 67 11 c0 	movl   $0xc01167a0,(%esp)
c0107358:	e8 08 90 ff ff       	call   c0100365 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010735d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107364:	e9 a3 00 00 00       	jmp    c010740c <check_swap+0x30c>
          check_rp[i] = alloc_page();
c0107369:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107370:	e8 5e db ff ff       	call   c0104ed3 <alloc_pages>
c0107375:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107378:	89 04 95 40 30 15 c0 	mov    %eax,-0x3feacfc0(,%edx,4)
          assert(check_rp[i] != NULL );
c010737f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107382:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c0107389:	85 c0                	test   %eax,%eax
c010738b:	75 24                	jne    c01073b1 <check_swap+0x2b1>
c010738d:	c7 44 24 0c c4 67 11 	movl   $0xc01167c4,0xc(%esp)
c0107394:	c0 
c0107395:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c010739c:	c0 
c010739d:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c01073a4:	00 
c01073a5:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01073ac:	e8 17 9b ff ff       	call   c0100ec8 <__panic>
          assert(!PageProperty(check_rp[i]));
c01073b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01073b4:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c01073bb:	83 c0 04             	add    $0x4,%eax
c01073be:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c01073c5:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01073c8:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01073cb:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01073ce:	0f a3 10             	bt     %edx,(%eax)
c01073d1:	19 c0                	sbb    %eax,%eax
c01073d3:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c01073d6:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c01073da:	0f 95 c0             	setne  %al
c01073dd:	0f b6 c0             	movzbl %al,%eax
c01073e0:	85 c0                	test   %eax,%eax
c01073e2:	74 24                	je     c0107408 <check_swap+0x308>
c01073e4:	c7 44 24 0c d8 67 11 	movl   $0xc01167d8,0xc(%esp)
c01073eb:	c0 
c01073ec:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c01073f3:	c0 
c01073f4:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c01073fb:	00 
c01073fc:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0107403:	e8 c0 9a ff ff       	call   c0100ec8 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107408:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010740c:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107410:	0f 8e 53 ff ff ff    	jle    c0107369 <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0107416:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c010741b:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c0107421:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107424:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0107427:	c7 45 a8 14 30 15 c0 	movl   $0xc0153014,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010742e:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107431:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0107434:	89 50 04             	mov    %edx,0x4(%eax)
c0107437:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010743a:	8b 50 04             	mov    0x4(%eax),%edx
c010743d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107440:	89 10                	mov    %edx,(%eax)
c0107442:	c7 45 a4 14 30 15 c0 	movl   $0xc0153014,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0107449:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010744c:	8b 40 04             	mov    0x4(%eax),%eax
c010744f:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0107452:	0f 94 c0             	sete   %al
c0107455:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0107458:	85 c0                	test   %eax,%eax
c010745a:	75 24                	jne    c0107480 <check_swap+0x380>
c010745c:	c7 44 24 0c f3 67 11 	movl   $0xc01167f3,0xc(%esp)
c0107463:	c0 
c0107464:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c010746b:	c0 
c010746c:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0107473:	00 
c0107474:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c010747b:	e8 48 9a ff ff       	call   c0100ec8 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0107480:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0107485:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c0107488:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c010748f:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107492:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107499:	eb 1e                	jmp    c01074b9 <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c010749b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010749e:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c01074a5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01074ac:	00 
c01074ad:	89 04 24             	mov    %eax,(%esp)
c01074b0:	e8 89 da ff ff       	call   c0104f3e <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01074b5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01074b9:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01074bd:	7e dc                	jle    c010749b <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c01074bf:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c01074c4:	83 f8 04             	cmp    $0x4,%eax
c01074c7:	74 24                	je     c01074ed <check_swap+0x3ed>
c01074c9:	c7 44 24 0c 0c 68 11 	movl   $0xc011680c,0xc(%esp)
c01074d0:	c0 
c01074d1:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c01074d8:	c0 
c01074d9:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c01074e0:	00 
c01074e1:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01074e8:	e8 db 99 ff ff       	call   c0100ec8 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c01074ed:	c7 04 24 30 68 11 c0 	movl   $0xc0116830,(%esp)
c01074f4:	e8 6c 8e ff ff       	call   c0100365 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c01074f9:	c7 05 18 ff 14 c0 00 	movl   $0x0,0xc014ff18
c0107500:	00 00 00 
     
     check_content_set();
c0107503:	e8 28 fa ff ff       	call   c0106f30 <check_content_set>
     assert( nr_free == 0);         
c0107508:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c010750d:	85 c0                	test   %eax,%eax
c010750f:	74 24                	je     c0107535 <check_swap+0x435>
c0107511:	c7 44 24 0c 57 68 11 	movl   $0xc0116857,0xc(%esp)
c0107518:	c0 
c0107519:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0107520:	c0 
c0107521:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0107528:	00 
c0107529:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0107530:	e8 93 99 ff ff       	call   c0100ec8 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107535:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010753c:	eb 26                	jmp    c0107564 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c010753e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107541:	c7 04 85 60 30 15 c0 	movl   $0xffffffff,-0x3feacfa0(,%eax,4)
c0107548:	ff ff ff ff 
c010754c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010754f:	8b 14 85 60 30 15 c0 	mov    -0x3feacfa0(,%eax,4),%edx
c0107556:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107559:	89 14 85 a0 30 15 c0 	mov    %edx,-0x3feacf60(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107560:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107564:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0107568:	7e d4                	jle    c010753e <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010756a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107571:	e9 eb 00 00 00       	jmp    c0107661 <check_swap+0x561>
         check_ptep[i]=0;
c0107576:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107579:	c7 04 85 f4 30 15 c0 	movl   $0x0,-0x3feacf0c(,%eax,4)
c0107580:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0107584:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107587:	83 c0 01             	add    $0x1,%eax
c010758a:	c1 e0 0c             	shl    $0xc,%eax
c010758d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107594:	00 
c0107595:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107599:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010759c:	89 04 24             	mov    %eax,(%esp)
c010759f:	e8 96 e0 ff ff       	call   c010563a <get_pte>
c01075a4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01075a7:	89 04 95 f4 30 15 c0 	mov    %eax,-0x3feacf0c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c01075ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075b1:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c01075b8:	85 c0                	test   %eax,%eax
c01075ba:	75 24                	jne    c01075e0 <check_swap+0x4e0>
c01075bc:	c7 44 24 0c 64 68 11 	movl   $0xc0116864,0xc(%esp)
c01075c3:	c0 
c01075c4:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c01075cb:	c0 
c01075cc:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c01075d3:	00 
c01075d4:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01075db:	e8 e8 98 ff ff       	call   c0100ec8 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c01075e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075e3:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c01075ea:	8b 00                	mov    (%eax),%eax
c01075ec:	89 04 24             	mov    %eax,(%esp)
c01075ef:	e8 87 f5 ff ff       	call   c0106b7b <pte2page>
c01075f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01075f7:	8b 14 95 40 30 15 c0 	mov    -0x3feacfc0(,%edx,4),%edx
c01075fe:	39 d0                	cmp    %edx,%eax
c0107600:	74 24                	je     c0107626 <check_swap+0x526>
c0107602:	c7 44 24 0c 7c 68 11 	movl   $0xc011687c,0xc(%esp)
c0107609:	c0 
c010760a:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0107611:	c0 
c0107612:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0107619:	00 
c010761a:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0107621:	e8 a2 98 ff ff       	call   c0100ec8 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0107626:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107629:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c0107630:	8b 00                	mov    (%eax),%eax
c0107632:	83 e0 01             	and    $0x1,%eax
c0107635:	85 c0                	test   %eax,%eax
c0107637:	75 24                	jne    c010765d <check_swap+0x55d>
c0107639:	c7 44 24 0c a4 68 11 	movl   $0xc01168a4,0xc(%esp)
c0107640:	c0 
c0107641:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0107648:	c0 
c0107649:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0107650:	00 
c0107651:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c0107658:	e8 6b 98 ff ff       	call   c0100ec8 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010765d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107661:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107665:	0f 8e 0b ff ff ff    	jle    c0107576 <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c010766b:	c7 04 24 c0 68 11 c0 	movl   $0xc01168c0,(%esp)
c0107672:	e8 ee 8c ff ff       	call   c0100365 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0107677:	e8 6c fa ff ff       	call   c01070e8 <check_content_access>
c010767c:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c010767f:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107683:	74 24                	je     c01076a9 <check_swap+0x5a9>
c0107685:	c7 44 24 0c e6 68 11 	movl   $0xc01168e6,0xc(%esp)
c010768c:	c0 
c010768d:	c7 44 24 08 ce 65 11 	movl   $0xc01165ce,0x8(%esp)
c0107694:	c0 
c0107695:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c010769c:	00 
c010769d:	c7 04 24 68 65 11 c0 	movl   $0xc0116568,(%esp)
c01076a4:	e8 1f 98 ff ff       	call   c0100ec8 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076a9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01076b0:	eb 1e                	jmp    c01076d0 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c01076b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076b5:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c01076bc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01076c3:	00 
c01076c4:	89 04 24             	mov    %eax,(%esp)
c01076c7:	e8 72 d8 ff ff       	call   c0104f3e <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076cc:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01076d0:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01076d4:	7e dc                	jle    c01076b2 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c01076d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01076d9:	8b 00                	mov    (%eax),%eax
c01076db:	89 04 24             	mov    %eax,(%esp)
c01076de:	e8 d6 f4 ff ff       	call   c0106bb9 <pde2page>
c01076e3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01076ea:	00 
c01076eb:	89 04 24             	mov    %eax,(%esp)
c01076ee:	e8 4b d8 ff ff       	call   c0104f3e <free_pages>
     pgdir[0] = 0;
c01076f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01076f6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c01076fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01076ff:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0107706:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107709:	89 04 24             	mov    %eax,(%esp)
c010770c:	e8 98 08 00 00       	call   c0107fa9 <mm_destroy>
     check_mm_struct = NULL;
c0107711:	c7 05 0c 31 15 c0 00 	movl   $0x0,0xc015310c
c0107718:	00 00 00 
     
     nr_free = nr_free_store;
c010771b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010771e:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
     free_list = free_list_store;
c0107723:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107726:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0107729:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c010772e:	89 15 18 30 15 c0    	mov    %edx,0xc0153018

     
     le = &free_list;
c0107734:	c7 45 e8 14 30 15 c0 	movl   $0xc0153014,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010773b:	eb 1d                	jmp    c010775a <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c010773d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107740:	83 e8 0c             	sub    $0xc,%eax
c0107743:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0107746:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010774a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010774d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107750:	8b 40 08             	mov    0x8(%eax),%eax
c0107753:	29 c2                	sub    %eax,%edx
c0107755:	89 d0                	mov    %edx,%eax
c0107757:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010775a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010775d:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107760:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107763:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107766:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107769:	81 7d e8 14 30 15 c0 	cmpl   $0xc0153014,-0x18(%ebp)
c0107770:	75 cb                	jne    c010773d <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0107772:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107775:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107779:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010777c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107780:	c7 04 24 ed 68 11 c0 	movl   $0xc01168ed,(%esp)
c0107787:	e8 d9 8b ff ff       	call   c0100365 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c010778c:	c7 04 24 07 69 11 c0 	movl   $0xc0116907,(%esp)
c0107793:	e8 cd 8b ff ff       	call   c0100365 <cprintf>
}
c0107798:	83 c4 74             	add    $0x74,%esp
c010779b:	5b                   	pop    %ebx
c010779c:	5d                   	pop    %ebp
c010779d:	c3                   	ret    

c010779e <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c010779e:	55                   	push   %ebp
c010779f:	89 e5                	mov    %esp,%ebp
c01077a1:	83 ec 10             	sub    $0x10,%esp
c01077a4:	c7 45 fc 04 31 15 c0 	movl   $0xc0153104,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01077ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01077ae:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01077b1:	89 50 04             	mov    %edx,0x4(%eax)
c01077b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01077b7:	8b 50 04             	mov    0x4(%eax),%edx
c01077ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01077bd:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c01077bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01077c2:	c7 40 14 04 31 15 c0 	movl   $0xc0153104,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c01077c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01077ce:	c9                   	leave  
c01077cf:	c3                   	ret    

c01077d0 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01077d0:	55                   	push   %ebp
c01077d1:	89 e5                	mov    %esp,%ebp
c01077d3:	83 ec 38             	sub    $0x38,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01077d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01077d9:	8b 40 14             	mov    0x14(%eax),%eax
c01077dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c01077df:	8b 45 10             	mov    0x10(%ebp),%eax
c01077e2:	83 c0 14             	add    $0x14,%eax
c01077e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c01077e8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01077ec:	74 06                	je     c01077f4 <_fifo_map_swappable+0x24>
c01077ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01077f2:	75 24                	jne    c0107818 <_fifo_map_swappable+0x48>
c01077f4:	c7 44 24 0c 20 69 11 	movl   $0xc0116920,0xc(%esp)
c01077fb:	c0 
c01077fc:	c7 44 24 08 3e 69 11 	movl   $0xc011693e,0x8(%esp)
c0107803:	c0 
c0107804:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c010780b:	00 
c010780c:	c7 04 24 53 69 11 c0 	movl   $0xc0116953,(%esp)
c0107813:	e8 b0 96 ff ff       	call   c0100ec8 <__panic>
c0107818:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010781b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010781e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107821:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107824:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107827:	8b 40 04             	mov    0x4(%eax),%eax
c010782a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010782d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107830:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107833:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0107836:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107839:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010783c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010783f:	89 10                	mov    %edx,(%eax)
c0107841:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107844:	8b 10                	mov    (%eax),%edx
c0107846:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107849:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010784c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010784f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107852:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107855:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107858:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010785b:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: 2012012017*/
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_after(head, entry);
    return 0;
c010785d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107862:	c9                   	leave  
c0107863:	c3                   	ret    

c0107864 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107864:	55                   	push   %ebp
c0107865:	89 e5                	mov    %esp,%ebp
c0107867:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c010786a:	8b 45 08             	mov    0x8(%ebp),%eax
c010786d:	8b 40 14             	mov    0x14(%eax),%eax
c0107870:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107873:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107877:	75 24                	jne    c010789d <_fifo_swap_out_victim+0x39>
c0107879:	c7 44 24 0c 67 69 11 	movl   $0xc0116967,0xc(%esp)
c0107880:	c0 
c0107881:	c7 44 24 08 3e 69 11 	movl   $0xc011693e,0x8(%esp)
c0107888:	c0 
c0107889:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107890:	00 
c0107891:	c7 04 24 53 69 11 c0 	movl   $0xc0116953,(%esp)
c0107898:	e8 2b 96 ff ff       	call   c0100ec8 <__panic>
     assert(in_tick==0);
c010789d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01078a1:	74 24                	je     c01078c7 <_fifo_swap_out_victim+0x63>
c01078a3:	c7 44 24 0c 74 69 11 	movl   $0xc0116974,0xc(%esp)
c01078aa:	c0 
c01078ab:	c7 44 24 08 3e 69 11 	movl   $0xc011693e,0x8(%esp)
c01078b2:	c0 
c01078b3:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c01078ba:	00 
c01078bb:	c7 04 24 53 69 11 c0 	movl   $0xc0116953,(%esp)
c01078c2:	e8 01 96 ff ff       	call   c0100ec8 <__panic>
c01078c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01078cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078d0:	8b 00                	mov    (%eax),%eax
     /* Select the victim */
     /*LAB3 EXERCISE 2: 2012012017*/
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     list_entry_t *le = list_prev(head);
c01078d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
     *ptr_page = le2page(le, pra_page_link);
c01078d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01078d8:	8d 50 ec             	lea    -0x14(%eax),%edx
c01078db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01078de:	89 10                	mov    %edx,(%eax)
c01078e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01078e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01078e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01078e9:	8b 40 04             	mov    0x4(%eax),%eax
c01078ec:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01078ef:	8b 12                	mov    (%edx),%edx
c01078f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01078f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01078f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01078fa:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01078fd:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107900:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107903:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107906:	89 10                	mov    %edx,(%eax)
     list_del(le);
     return 0;
c0107908:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010790d:	c9                   	leave  
c010790e:	c3                   	ret    

c010790f <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c010790f:	55                   	push   %ebp
c0107910:	89 e5                	mov    %esp,%ebp
c0107912:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107915:	c7 04 24 80 69 11 c0 	movl   $0xc0116980,(%esp)
c010791c:	e8 44 8a ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107921:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107926:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107929:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c010792e:	83 f8 04             	cmp    $0x4,%eax
c0107931:	74 24                	je     c0107957 <_fifo_check_swap+0x48>
c0107933:	c7 44 24 0c a6 69 11 	movl   $0xc01169a6,0xc(%esp)
c010793a:	c0 
c010793b:	c7 44 24 08 3e 69 11 	movl   $0xc011693e,0x8(%esp)
c0107942:	c0 
c0107943:	c7 44 24 04 51 00 00 	movl   $0x51,0x4(%esp)
c010794a:	00 
c010794b:	c7 04 24 53 69 11 c0 	movl   $0xc0116953,(%esp)
c0107952:	e8 71 95 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107957:	c7 04 24 b8 69 11 c0 	movl   $0xc01169b8,(%esp)
c010795e:	e8 02 8a ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107963:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107968:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c010796b:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107970:	83 f8 04             	cmp    $0x4,%eax
c0107973:	74 24                	je     c0107999 <_fifo_check_swap+0x8a>
c0107975:	c7 44 24 0c a6 69 11 	movl   $0xc01169a6,0xc(%esp)
c010797c:	c0 
c010797d:	c7 44 24 08 3e 69 11 	movl   $0xc011693e,0x8(%esp)
c0107984:	c0 
c0107985:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c010798c:	00 
c010798d:	c7 04 24 53 69 11 c0 	movl   $0xc0116953,(%esp)
c0107994:	e8 2f 95 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107999:	c7 04 24 e0 69 11 c0 	movl   $0xc01169e0,(%esp)
c01079a0:	e8 c0 89 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c01079a5:	b8 00 40 00 00       	mov    $0x4000,%eax
c01079aa:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c01079ad:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01079b2:	83 f8 04             	cmp    $0x4,%eax
c01079b5:	74 24                	je     c01079db <_fifo_check_swap+0xcc>
c01079b7:	c7 44 24 0c a6 69 11 	movl   $0xc01169a6,0xc(%esp)
c01079be:	c0 
c01079bf:	c7 44 24 08 3e 69 11 	movl   $0xc011693e,0x8(%esp)
c01079c6:	c0 
c01079c7:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c01079ce:	00 
c01079cf:	c7 04 24 53 69 11 c0 	movl   $0xc0116953,(%esp)
c01079d6:	e8 ed 94 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c01079db:	c7 04 24 08 6a 11 c0 	movl   $0xc0116a08,(%esp)
c01079e2:	e8 7e 89 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c01079e7:	b8 00 20 00 00       	mov    $0x2000,%eax
c01079ec:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c01079ef:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01079f4:	83 f8 04             	cmp    $0x4,%eax
c01079f7:	74 24                	je     c0107a1d <_fifo_check_swap+0x10e>
c01079f9:	c7 44 24 0c a6 69 11 	movl   $0xc01169a6,0xc(%esp)
c0107a00:	c0 
c0107a01:	c7 44 24 08 3e 69 11 	movl   $0xc011693e,0x8(%esp)
c0107a08:	c0 
c0107a09:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c0107a10:	00 
c0107a11:	c7 04 24 53 69 11 c0 	movl   $0xc0116953,(%esp)
c0107a18:	e8 ab 94 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107a1d:	c7 04 24 30 6a 11 c0 	movl   $0xc0116a30,(%esp)
c0107a24:	e8 3c 89 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107a29:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107a2e:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107a31:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107a36:	83 f8 05             	cmp    $0x5,%eax
c0107a39:	74 24                	je     c0107a5f <_fifo_check_swap+0x150>
c0107a3b:	c7 44 24 0c 56 6a 11 	movl   $0xc0116a56,0xc(%esp)
c0107a42:	c0 
c0107a43:	c7 44 24 08 3e 69 11 	movl   $0xc011693e,0x8(%esp)
c0107a4a:	c0 
c0107a4b:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
c0107a52:	00 
c0107a53:	c7 04 24 53 69 11 c0 	movl   $0xc0116953,(%esp)
c0107a5a:	e8 69 94 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107a5f:	c7 04 24 08 6a 11 c0 	movl   $0xc0116a08,(%esp)
c0107a66:	e8 fa 88 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107a6b:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107a70:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107a73:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107a78:	83 f8 05             	cmp    $0x5,%eax
c0107a7b:	74 24                	je     c0107aa1 <_fifo_check_swap+0x192>
c0107a7d:	c7 44 24 0c 56 6a 11 	movl   $0xc0116a56,0xc(%esp)
c0107a84:	c0 
c0107a85:	c7 44 24 08 3e 69 11 	movl   $0xc011693e,0x8(%esp)
c0107a8c:	c0 
c0107a8d:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c0107a94:	00 
c0107a95:	c7 04 24 53 69 11 c0 	movl   $0xc0116953,(%esp)
c0107a9c:	e8 27 94 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107aa1:	c7 04 24 b8 69 11 c0 	movl   $0xc01169b8,(%esp)
c0107aa8:	e8 b8 88 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107aad:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107ab2:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107ab5:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107aba:	83 f8 06             	cmp    $0x6,%eax
c0107abd:	74 24                	je     c0107ae3 <_fifo_check_swap+0x1d4>
c0107abf:	c7 44 24 0c 65 6a 11 	movl   $0xc0116a65,0xc(%esp)
c0107ac6:	c0 
c0107ac7:	c7 44 24 08 3e 69 11 	movl   $0xc011693e,0x8(%esp)
c0107ace:	c0 
c0107acf:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0107ad6:	00 
c0107ad7:	c7 04 24 53 69 11 c0 	movl   $0xc0116953,(%esp)
c0107ade:	e8 e5 93 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107ae3:	c7 04 24 08 6a 11 c0 	movl   $0xc0116a08,(%esp)
c0107aea:	e8 76 88 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107aef:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107af4:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107af7:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107afc:	83 f8 07             	cmp    $0x7,%eax
c0107aff:	74 24                	je     c0107b25 <_fifo_check_swap+0x216>
c0107b01:	c7 44 24 0c 74 6a 11 	movl   $0xc0116a74,0xc(%esp)
c0107b08:	c0 
c0107b09:	c7 44 24 08 3e 69 11 	movl   $0xc011693e,0x8(%esp)
c0107b10:	c0 
c0107b11:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c0107b18:	00 
c0107b19:	c7 04 24 53 69 11 c0 	movl   $0xc0116953,(%esp)
c0107b20:	e8 a3 93 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107b25:	c7 04 24 80 69 11 c0 	movl   $0xc0116980,(%esp)
c0107b2c:	e8 34 88 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107b31:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107b36:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107b39:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107b3e:	83 f8 08             	cmp    $0x8,%eax
c0107b41:	74 24                	je     c0107b67 <_fifo_check_swap+0x258>
c0107b43:	c7 44 24 0c 83 6a 11 	movl   $0xc0116a83,0xc(%esp)
c0107b4a:	c0 
c0107b4b:	c7 44 24 08 3e 69 11 	movl   $0xc011693e,0x8(%esp)
c0107b52:	c0 
c0107b53:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c0107b5a:	00 
c0107b5b:	c7 04 24 53 69 11 c0 	movl   $0xc0116953,(%esp)
c0107b62:	e8 61 93 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107b67:	c7 04 24 e0 69 11 c0 	movl   $0xc01169e0,(%esp)
c0107b6e:	e8 f2 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107b73:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107b78:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107b7b:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107b80:	83 f8 09             	cmp    $0x9,%eax
c0107b83:	74 24                	je     c0107ba9 <_fifo_check_swap+0x29a>
c0107b85:	c7 44 24 0c 92 6a 11 	movl   $0xc0116a92,0xc(%esp)
c0107b8c:	c0 
c0107b8d:	c7 44 24 08 3e 69 11 	movl   $0xc011693e,0x8(%esp)
c0107b94:	c0 
c0107b95:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107b9c:	00 
c0107b9d:	c7 04 24 53 69 11 c0 	movl   $0xc0116953,(%esp)
c0107ba4:	e8 1f 93 ff ff       	call   c0100ec8 <__panic>
    return 0;
c0107ba9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107bae:	c9                   	leave  
c0107baf:	c3                   	ret    

c0107bb0 <_fifo_init>:


static int
_fifo_init(void)
{
c0107bb0:	55                   	push   %ebp
c0107bb1:	89 e5                	mov    %esp,%ebp
    return 0;
c0107bb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107bb8:	5d                   	pop    %ebp
c0107bb9:	c3                   	ret    

c0107bba <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107bba:	55                   	push   %ebp
c0107bbb:	89 e5                	mov    %esp,%ebp
    return 0;
c0107bbd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107bc2:	5d                   	pop    %ebp
c0107bc3:	c3                   	ret    

c0107bc4 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107bc4:	55                   	push   %ebp
c0107bc5:	89 e5                	mov    %esp,%ebp
c0107bc7:	b8 00 00 00 00       	mov    $0x0,%eax
c0107bcc:	5d                   	pop    %ebp
c0107bcd:	c3                   	ret    

c0107bce <mm_count>:
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
bool copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn);

static inline int
mm_count(struct mm_struct *mm) {
c0107bce:	55                   	push   %ebp
c0107bcf:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107bd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0107bd4:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107bd7:	5d                   	pop    %ebp
c0107bd8:	c3                   	ret    

c0107bd9 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107bd9:	55                   	push   %ebp
c0107bda:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107bdc:	8b 45 08             	mov    0x8(%ebp),%eax
c0107bdf:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107be2:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107be5:	5d                   	pop    %ebp
c0107be6:	c3                   	ret    

c0107be7 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107be7:	55                   	push   %ebp
c0107be8:	89 e5                	mov    %esp,%ebp
c0107bea:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107bed:	8b 45 08             	mov    0x8(%ebp),%eax
c0107bf0:	c1 e8 0c             	shr    $0xc,%eax
c0107bf3:	89 c2                	mov    %eax,%edx
c0107bf5:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0107bfa:	39 c2                	cmp    %eax,%edx
c0107bfc:	72 1c                	jb     c0107c1a <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107bfe:	c7 44 24 08 b4 6a 11 	movl   $0xc0116ab4,0x8(%esp)
c0107c05:	c0 
c0107c06:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107c0d:	00 
c0107c0e:	c7 04 24 d3 6a 11 c0 	movl   $0xc0116ad3,(%esp)
c0107c15:	e8 ae 92 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0107c1a:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0107c1f:	8b 55 08             	mov    0x8(%ebp),%edx
c0107c22:	c1 ea 0c             	shr    $0xc,%edx
c0107c25:	c1 e2 05             	shl    $0x5,%edx
c0107c28:	01 d0                	add    %edx,%eax
}
c0107c2a:	c9                   	leave  
c0107c2b:	c3                   	ret    

c0107c2c <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0107c2c:	55                   	push   %ebp
c0107c2d:	89 e5                	mov    %esp,%ebp
c0107c2f:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0107c32:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c35:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107c3a:	89 04 24             	mov    %eax,(%esp)
c0107c3d:	e8 a5 ff ff ff       	call   c0107be7 <pa2page>
}
c0107c42:	c9                   	leave  
c0107c43:	c3                   	ret    

c0107c44 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107c44:	55                   	push   %ebp
c0107c45:	89 e5                	mov    %esp,%ebp
c0107c47:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107c4a:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0107c51:	e8 08 ce ff ff       	call   c0104a5e <kmalloc>
c0107c56:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107c59:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107c5d:	0f 84 81 00 00 00    	je     c0107ce4 <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0107c63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c66:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107c69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c6c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107c6f:	89 50 04             	mov    %edx,0x4(%eax)
c0107c72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c75:	8b 50 04             	mov    0x4(%eax),%edx
c0107c78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c7b:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107c7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c80:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0107c87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c8a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0107c91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c94:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0107c9b:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0107ca0:	85 c0                	test   %eax,%eax
c0107ca2:	74 0d                	je     c0107cb1 <mm_create+0x6d>
c0107ca4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ca7:	89 04 24             	mov    %eax,(%esp)
c0107caa:	e8 b2 ef ff ff       	call   c0106c61 <swap_init_mm>
c0107caf:	eb 0a                	jmp    c0107cbb <mm_create+0x77>
        else mm->sm_priv = NULL;
c0107cb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107cb4:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0107cbb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107cc2:	00 
c0107cc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107cc6:	89 04 24             	mov    %eax,(%esp)
c0107cc9:	e8 0b ff ff ff       	call   c0107bd9 <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0107cce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107cd1:	83 c0 1c             	add    $0x1c,%eax
c0107cd4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107cdb:	00 
c0107cdc:	89 04 24             	mov    %eax,(%esp)
c0107cdf:	e8 23 1b 00 00       	call   c0109807 <sem_init>
    }    
    return mm;
c0107ce4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107ce7:	c9                   	leave  
c0107ce8:	c3                   	ret    

c0107ce9 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0107ce9:	55                   	push   %ebp
c0107cea:	89 e5                	mov    %esp,%ebp
c0107cec:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0107cef:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0107cf6:	e8 63 cd ff ff       	call   c0104a5e <kmalloc>
c0107cfb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0107cfe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107d02:	74 1b                	je     c0107d1f <vma_create+0x36>
        vma->vm_start = vm_start;
c0107d04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d07:	8b 55 08             	mov    0x8(%ebp),%edx
c0107d0a:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0107d0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d10:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107d13:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0107d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d19:	8b 55 10             	mov    0x10(%ebp),%edx
c0107d1c:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0107d1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107d22:	c9                   	leave  
c0107d23:	c3                   	ret    

c0107d24 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0107d24:	55                   	push   %ebp
c0107d25:	89 e5                	mov    %esp,%ebp
c0107d27:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0107d2a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0107d31:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107d35:	0f 84 95 00 00 00    	je     c0107dd0 <find_vma+0xac>
        vma = mm->mmap_cache;
c0107d3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d3e:	8b 40 08             	mov    0x8(%eax),%eax
c0107d41:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0107d44:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107d48:	74 16                	je     c0107d60 <find_vma+0x3c>
c0107d4a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107d4d:	8b 40 04             	mov    0x4(%eax),%eax
c0107d50:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107d53:	77 0b                	ja     c0107d60 <find_vma+0x3c>
c0107d55:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107d58:	8b 40 08             	mov    0x8(%eax),%eax
c0107d5b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107d5e:	77 61                	ja     c0107dc1 <find_vma+0x9d>
                bool found = 0;
c0107d60:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0107d67:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107d6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107d70:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0107d73:	eb 28                	jmp    c0107d9d <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0107d75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d78:	83 e8 10             	sub    $0x10,%eax
c0107d7b:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0107d7e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107d81:	8b 40 04             	mov    0x4(%eax),%eax
c0107d84:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107d87:	77 14                	ja     c0107d9d <find_vma+0x79>
c0107d89:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107d8c:	8b 40 08             	mov    0x8(%eax),%eax
c0107d8f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107d92:	76 09                	jbe    c0107d9d <find_vma+0x79>
                        found = 1;
c0107d94:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0107d9b:	eb 17                	jmp    c0107db4 <find_vma+0x90>
c0107d9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107da0:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107da6:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0107da9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107dac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107daf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107db2:	75 c1                	jne    c0107d75 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0107db4:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0107db8:	75 07                	jne    c0107dc1 <find_vma+0x9d>
                    vma = NULL;
c0107dba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0107dc1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107dc5:	74 09                	je     c0107dd0 <find_vma+0xac>
            mm->mmap_cache = vma;
c0107dc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0107dca:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107dcd:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0107dd0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0107dd3:	c9                   	leave  
c0107dd4:	c3                   	ret    

c0107dd5 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0107dd5:	55                   	push   %ebp
c0107dd6:	89 e5                	mov    %esp,%ebp
c0107dd8:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0107ddb:	8b 45 08             	mov    0x8(%ebp),%eax
c0107dde:	8b 50 04             	mov    0x4(%eax),%edx
c0107de1:	8b 45 08             	mov    0x8(%ebp),%eax
c0107de4:	8b 40 08             	mov    0x8(%eax),%eax
c0107de7:	39 c2                	cmp    %eax,%edx
c0107de9:	72 24                	jb     c0107e0f <check_vma_overlap+0x3a>
c0107deb:	c7 44 24 0c e1 6a 11 	movl   $0xc0116ae1,0xc(%esp)
c0107df2:	c0 
c0107df3:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0107dfa:	c0 
c0107dfb:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0107e02:	00 
c0107e03:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0107e0a:	e8 b9 90 ff ff       	call   c0100ec8 <__panic>
    assert(prev->vm_end <= next->vm_start);
c0107e0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e12:	8b 50 08             	mov    0x8(%eax),%edx
c0107e15:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e18:	8b 40 04             	mov    0x4(%eax),%eax
c0107e1b:	39 c2                	cmp    %eax,%edx
c0107e1d:	76 24                	jbe    c0107e43 <check_vma_overlap+0x6e>
c0107e1f:	c7 44 24 0c 24 6b 11 	movl   $0xc0116b24,0xc(%esp)
c0107e26:	c0 
c0107e27:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0107e2e:	c0 
c0107e2f:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107e36:	00 
c0107e37:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0107e3e:	e8 85 90 ff ff       	call   c0100ec8 <__panic>
    assert(next->vm_start < next->vm_end);
c0107e43:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e46:	8b 50 04             	mov    0x4(%eax),%edx
c0107e49:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e4c:	8b 40 08             	mov    0x8(%eax),%eax
c0107e4f:	39 c2                	cmp    %eax,%edx
c0107e51:	72 24                	jb     c0107e77 <check_vma_overlap+0xa2>
c0107e53:	c7 44 24 0c 43 6b 11 	movl   $0xc0116b43,0xc(%esp)
c0107e5a:	c0 
c0107e5b:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0107e62:	c0 
c0107e63:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0107e6a:	00 
c0107e6b:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0107e72:	e8 51 90 ff ff       	call   c0100ec8 <__panic>
}
c0107e77:	c9                   	leave  
c0107e78:	c3                   	ret    

c0107e79 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0107e79:	55                   	push   %ebp
c0107e7a:	89 e5                	mov    %esp,%ebp
c0107e7c:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c0107e7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e82:	8b 50 04             	mov    0x4(%eax),%edx
c0107e85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e88:	8b 40 08             	mov    0x8(%eax),%eax
c0107e8b:	39 c2                	cmp    %eax,%edx
c0107e8d:	72 24                	jb     c0107eb3 <insert_vma_struct+0x3a>
c0107e8f:	c7 44 24 0c 61 6b 11 	movl   $0xc0116b61,0xc(%esp)
c0107e96:	c0 
c0107e97:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0107e9e:	c0 
c0107e9f:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0107ea6:	00 
c0107ea7:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0107eae:	e8 15 90 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0107eb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0107eb6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0107eb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107ebc:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0107ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107ec2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0107ec5:	eb 21                	jmp    c0107ee8 <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0107ec7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107eca:	83 e8 10             	sub    $0x10,%eax
c0107ecd:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0107ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107ed3:	8b 50 04             	mov    0x4(%eax),%edx
c0107ed6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107ed9:	8b 40 04             	mov    0x4(%eax),%eax
c0107edc:	39 c2                	cmp    %eax,%edx
c0107ede:	76 02                	jbe    c0107ee2 <insert_vma_struct+0x69>
                break;
c0107ee0:	eb 1d                	jmp    c0107eff <insert_vma_struct+0x86>
            }
            le_prev = le;
c0107ee2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ee5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107ee8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107eeb:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107eee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107ef1:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c0107ef4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107ef7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107efa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0107efd:	75 c8                	jne    c0107ec7 <insert_vma_struct+0x4e>
c0107eff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f02:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0107f05:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107f08:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0107f0b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0107f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f11:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0107f14:	74 15                	je     c0107f2b <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c0107f16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f19:	8d 50 f0             	lea    -0x10(%eax),%edx
c0107f1c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107f23:	89 14 24             	mov    %edx,(%esp)
c0107f26:	e8 aa fe ff ff       	call   c0107dd5 <check_vma_overlap>
    }
    if (le_next != list) {
c0107f2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107f2e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0107f31:	74 15                	je     c0107f48 <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0107f33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107f36:	83 e8 10             	sub    $0x10,%eax
c0107f39:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107f3d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f40:	89 04 24             	mov    %eax,(%esp)
c0107f43:	e8 8d fe ff ff       	call   c0107dd5 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c0107f48:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f4b:	8b 55 08             	mov    0x8(%ebp),%edx
c0107f4e:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0107f50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f53:	8d 50 10             	lea    0x10(%eax),%edx
c0107f56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f59:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0107f5c:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107f5f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107f62:	8b 40 04             	mov    0x4(%eax),%eax
c0107f65:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107f68:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0107f6b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107f6e:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0107f71:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107f74:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107f77:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107f7a:	89 10                	mov    %edx,(%eax)
c0107f7c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107f7f:	8b 10                	mov    (%eax),%edx
c0107f81:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107f84:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107f87:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107f8a:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0107f8d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107f90:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107f93:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107f96:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0107f98:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f9b:	8b 40 10             	mov    0x10(%eax),%eax
c0107f9e:	8d 50 01             	lea    0x1(%eax),%edx
c0107fa1:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fa4:	89 50 10             	mov    %edx,0x10(%eax)
}
c0107fa7:	c9                   	leave  
c0107fa8:	c3                   	ret    

c0107fa9 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0107fa9:	55                   	push   %ebp
c0107faa:	89 e5                	mov    %esp,%ebp
c0107fac:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c0107faf:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fb2:	89 04 24             	mov    %eax,(%esp)
c0107fb5:	e8 14 fc ff ff       	call   c0107bce <mm_count>
c0107fba:	85 c0                	test   %eax,%eax
c0107fbc:	74 24                	je     c0107fe2 <mm_destroy+0x39>
c0107fbe:	c7 44 24 0c 7d 6b 11 	movl   $0xc0116b7d,0xc(%esp)
c0107fc5:	c0 
c0107fc6:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0107fcd:	c0 
c0107fce:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0107fd5:	00 
c0107fd6:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0107fdd:	e8 e6 8e ff ff       	call   c0100ec8 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c0107fe2:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fe5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0107fe8:	eb 36                	jmp    c0108020 <mm_destroy+0x77>
c0107fea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fed:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107ff0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107ff3:	8b 40 04             	mov    0x4(%eax),%eax
c0107ff6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107ff9:	8b 12                	mov    (%edx),%edx
c0107ffb:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0107ffe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0108001:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108004:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108007:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010800a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010800d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108010:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0108012:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108015:	83 e8 10             	sub    $0x10,%eax
c0108018:	89 04 24             	mov    %eax,(%esp)
c010801b:	e8 59 ca ff ff       	call   c0104a79 <kfree>
c0108020:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108023:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108026:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108029:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c010802c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010802f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108032:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108035:	75 b3                	jne    c0107fea <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0108037:	8b 45 08             	mov    0x8(%ebp),%eax
c010803a:	89 04 24             	mov    %eax,(%esp)
c010803d:	e8 37 ca ff ff       	call   c0104a79 <kfree>
    mm=NULL;
c0108042:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0108049:	c9                   	leave  
c010804a:	c3                   	ret    

c010804b <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c010804b:	55                   	push   %ebp
c010804c:	89 e5                	mov    %esp,%ebp
c010804e:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0108051:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108054:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108057:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010805a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010805f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108062:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0108069:	8b 45 10             	mov    0x10(%ebp),%eax
c010806c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010806f:	01 c2                	add    %eax,%edx
c0108071:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108074:	01 d0                	add    %edx,%eax
c0108076:	83 e8 01             	sub    $0x1,%eax
c0108079:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010807c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010807f:	ba 00 00 00 00       	mov    $0x0,%edx
c0108084:	f7 75 e8             	divl   -0x18(%ebp)
c0108087:	89 d0                	mov    %edx,%eax
c0108089:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010808c:	29 c2                	sub    %eax,%edx
c010808e:	89 d0                	mov    %edx,%eax
c0108090:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0108093:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c010809a:	76 11                	jbe    c01080ad <mm_map+0x62>
c010809c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010809f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01080a2:	73 09                	jae    c01080ad <mm_map+0x62>
c01080a4:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c01080ab:	76 0a                	jbe    c01080b7 <mm_map+0x6c>
        return -E_INVAL;
c01080ad:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01080b2:	e9 ae 00 00 00       	jmp    c0108165 <mm_map+0x11a>
    }

    assert(mm != NULL);
c01080b7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01080bb:	75 24                	jne    c01080e1 <mm_map+0x96>
c01080bd:	c7 44 24 0c 8f 6b 11 	movl   $0xc0116b8f,0xc(%esp)
c01080c4:	c0 
c01080c5:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c01080cc:	c0 
c01080cd:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c01080d4:	00 
c01080d5:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c01080dc:	e8 e7 8d ff ff       	call   c0100ec8 <__panic>

    int ret = -E_INVAL;
c01080e1:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c01080e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01080eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01080ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01080f2:	89 04 24             	mov    %eax,(%esp)
c01080f5:	e8 2a fc ff ff       	call   c0107d24 <find_vma>
c01080fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01080fd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108101:	74 0d                	je     c0108110 <mm_map+0xc5>
c0108103:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108106:	8b 40 04             	mov    0x4(%eax),%eax
c0108109:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010810c:	73 02                	jae    c0108110 <mm_map+0xc5>
        goto out;
c010810e:	eb 52                	jmp    c0108162 <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c0108110:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0108117:	8b 45 14             	mov    0x14(%ebp),%eax
c010811a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010811e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108121:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108125:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108128:	89 04 24             	mov    %eax,(%esp)
c010812b:	e8 b9 fb ff ff       	call   c0107ce9 <vma_create>
c0108130:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108133:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108137:	75 02                	jne    c010813b <mm_map+0xf0>
        goto out;
c0108139:	eb 27                	jmp    c0108162 <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c010813b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010813e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108142:	8b 45 08             	mov    0x8(%ebp),%eax
c0108145:	89 04 24             	mov    %eax,(%esp)
c0108148:	e8 2c fd ff ff       	call   c0107e79 <insert_vma_struct>
    if (vma_store != NULL) {
c010814d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0108151:	74 08                	je     c010815b <mm_map+0x110>
        *vma_store = vma;
c0108153:	8b 45 18             	mov    0x18(%ebp),%eax
c0108156:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108159:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c010815b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c0108162:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108165:	c9                   	leave  
c0108166:	c3                   	ret    

c0108167 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0108167:	55                   	push   %ebp
c0108168:	89 e5                	mov    %esp,%ebp
c010816a:	56                   	push   %esi
c010816b:	53                   	push   %ebx
c010816c:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c010816f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108173:	74 06                	je     c010817b <dup_mmap+0x14>
c0108175:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108179:	75 24                	jne    c010819f <dup_mmap+0x38>
c010817b:	c7 44 24 0c 9a 6b 11 	movl   $0xc0116b9a,0xc(%esp)
c0108182:	c0 
c0108183:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c010818a:	c0 
c010818b:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0108192:	00 
c0108193:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c010819a:	e8 29 8d ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c010819f:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01081a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c01081ab:	e9 92 00 00 00       	jmp    c0108242 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c01081b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081b3:	83 e8 10             	sub    $0x10,%eax
c01081b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c01081b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081bc:	8b 48 0c             	mov    0xc(%eax),%ecx
c01081bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081c2:	8b 50 08             	mov    0x8(%eax),%edx
c01081c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081c8:	8b 40 04             	mov    0x4(%eax),%eax
c01081cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01081cf:	89 54 24 04          	mov    %edx,0x4(%esp)
c01081d3:	89 04 24             	mov    %eax,(%esp)
c01081d6:	e8 0e fb ff ff       	call   c0107ce9 <vma_create>
c01081db:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c01081de:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01081e2:	75 07                	jne    c01081eb <dup_mmap+0x84>
            return -E_NO_MEM;
c01081e4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01081e9:	eb 76                	jmp    c0108261 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c01081eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01081ee:	89 44 24 04          	mov    %eax,0x4(%esp)
c01081f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01081f5:	89 04 24             	mov    %eax,(%esp)
c01081f8:	e8 7c fc ff ff       	call   c0107e79 <insert_vma_struct>

        bool share = 0;
c01081fd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0108204:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108207:	8b 58 08             	mov    0x8(%eax),%ebx
c010820a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010820d:	8b 48 04             	mov    0x4(%eax),%ecx
c0108210:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108213:	8b 50 0c             	mov    0xc(%eax),%edx
c0108216:	8b 45 08             	mov    0x8(%ebp),%eax
c0108219:	8b 40 0c             	mov    0xc(%eax),%eax
c010821c:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010821f:	89 74 24 10          	mov    %esi,0x10(%esp)
c0108223:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108227:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010822b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010822f:	89 04 24             	mov    %eax,(%esp)
c0108232:	e8 fa d7 ff ff       	call   c0105a31 <copy_range>
c0108237:	85 c0                	test   %eax,%eax
c0108239:	74 07                	je     c0108242 <dup_mmap+0xdb>
            return -E_NO_MEM;
c010823b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108240:	eb 1f                	jmp    c0108261 <dup_mmap+0xfa>
c0108242:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108245:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0108248:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010824b:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c010824d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108250:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108253:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108256:	0f 85 54 ff ff ff    	jne    c01081b0 <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c010825c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108261:	83 c4 40             	add    $0x40,%esp
c0108264:	5b                   	pop    %ebx
c0108265:	5e                   	pop    %esi
c0108266:	5d                   	pop    %ebp
c0108267:	c3                   	ret    

c0108268 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0108268:	55                   	push   %ebp
c0108269:	89 e5                	mov    %esp,%ebp
c010826b:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c010826e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108272:	74 0f                	je     c0108283 <exit_mmap+0x1b>
c0108274:	8b 45 08             	mov    0x8(%ebp),%eax
c0108277:	89 04 24             	mov    %eax,(%esp)
c010827a:	e8 4f f9 ff ff       	call   c0107bce <mm_count>
c010827f:	85 c0                	test   %eax,%eax
c0108281:	74 24                	je     c01082a7 <exit_mmap+0x3f>
c0108283:	c7 44 24 0c b8 6b 11 	movl   $0xc0116bb8,0xc(%esp)
c010828a:	c0 
c010828b:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0108292:	c0 
c0108293:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c010829a:	00 
c010829b:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c01082a2:	e8 21 8c ff ff       	call   c0100ec8 <__panic>
    pde_t *pgdir = mm->pgdir;
c01082a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01082aa:	8b 40 0c             	mov    0xc(%eax),%eax
c01082ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c01082b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01082b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01082b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c01082bc:	eb 28                	jmp    c01082e6 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c01082be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082c1:	83 e8 10             	sub    $0x10,%eax
c01082c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c01082c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01082ca:	8b 50 08             	mov    0x8(%eax),%edx
c01082cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01082d0:	8b 40 04             	mov    0x4(%eax),%eax
c01082d3:	89 54 24 08          	mov    %edx,0x8(%esp)
c01082d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01082db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082de:	89 04 24             	mov    %eax,(%esp)
c01082e1:	e8 50 d5 ff ff       	call   c0105836 <unmap_range>
c01082e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01082ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01082ef:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c01082f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01082f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082f8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01082fb:	75 c1                	jne    c01082be <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01082fd:	eb 28                	jmp    c0108327 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c01082ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108302:	83 e8 10             	sub    $0x10,%eax
c0108305:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0108308:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010830b:	8b 50 08             	mov    0x8(%eax),%edx
c010830e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108311:	8b 40 04             	mov    0x4(%eax),%eax
c0108314:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108318:	89 44 24 04          	mov    %eax,0x4(%esp)
c010831c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010831f:	89 04 24             	mov    %eax,(%esp)
c0108322:	e8 03 d6 ff ff       	call   c010592a <exit_range>
c0108327:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010832a:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010832d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108330:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108333:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108336:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108339:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010833c:	75 c1                	jne    c01082ff <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c010833e:	c9                   	leave  
c010833f:	c3                   	ret    

c0108340 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0108340:	55                   	push   %ebp
c0108341:	89 e5                	mov    %esp,%ebp
c0108343:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0108346:	8b 45 10             	mov    0x10(%ebp),%eax
c0108349:	8b 55 18             	mov    0x18(%ebp),%edx
c010834c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108350:	8b 55 14             	mov    0x14(%ebp),%edx
c0108353:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108357:	89 44 24 04          	mov    %eax,0x4(%esp)
c010835b:	8b 45 08             	mov    0x8(%ebp),%eax
c010835e:	89 04 24             	mov    %eax,(%esp)
c0108361:	e8 79 09 00 00       	call   c0108cdf <user_mem_check>
c0108366:	85 c0                	test   %eax,%eax
c0108368:	75 07                	jne    c0108371 <copy_from_user+0x31>
        return 0;
c010836a:	b8 00 00 00 00       	mov    $0x0,%eax
c010836f:	eb 1e                	jmp    c010838f <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c0108371:	8b 45 14             	mov    0x14(%ebp),%eax
c0108374:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108378:	8b 45 10             	mov    0x10(%ebp),%eax
c010837b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010837f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108382:	89 04 24             	mov    %eax,(%esp)
c0108385:	e8 87 cc 00 00       	call   c0115011 <memcpy>
    return 1;
c010838a:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010838f:	c9                   	leave  
c0108390:	c3                   	ret    

c0108391 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0108391:	55                   	push   %ebp
c0108392:	89 e5                	mov    %esp,%ebp
c0108394:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0108397:	8b 45 0c             	mov    0xc(%ebp),%eax
c010839a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01083a1:	00 
c01083a2:	8b 55 14             	mov    0x14(%ebp),%edx
c01083a5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01083a9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01083b0:	89 04 24             	mov    %eax,(%esp)
c01083b3:	e8 27 09 00 00       	call   c0108cdf <user_mem_check>
c01083b8:	85 c0                	test   %eax,%eax
c01083ba:	75 07                	jne    c01083c3 <copy_to_user+0x32>
        return 0;
c01083bc:	b8 00 00 00 00       	mov    $0x0,%eax
c01083c1:	eb 1e                	jmp    c01083e1 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c01083c3:	8b 45 14             	mov    0x14(%ebp),%eax
c01083c6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01083ca:	8b 45 10             	mov    0x10(%ebp),%eax
c01083cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083d4:	89 04 24             	mov    %eax,(%esp)
c01083d7:	e8 35 cc 00 00       	call   c0115011 <memcpy>
    return 1;
c01083dc:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01083e1:	c9                   	leave  
c01083e2:	c3                   	ret    

c01083e3 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c01083e3:	55                   	push   %ebp
c01083e4:	89 e5                	mov    %esp,%ebp
c01083e6:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c01083e9:	e8 02 00 00 00       	call   c01083f0 <check_vmm>
}
c01083ee:	c9                   	leave  
c01083ef:	c3                   	ret    

c01083f0 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c01083f0:	55                   	push   %ebp
c01083f1:	89 e5                	mov    %esp,%ebp
c01083f3:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01083f6:	e8 75 cb ff ff       	call   c0104f70 <nr_free_pages>
c01083fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c01083fe:	e8 13 00 00 00       	call   c0108416 <check_vma_struct>
    check_pgfault();
c0108403:	e8 a7 04 00 00       	call   c01088af <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0108408:	c7 04 24 d8 6b 11 c0 	movl   $0xc0116bd8,(%esp)
c010840f:	e8 51 7f ff ff       	call   c0100365 <cprintf>
}
c0108414:	c9                   	leave  
c0108415:	c3                   	ret    

c0108416 <check_vma_struct>:

static void
check_vma_struct(void) {
c0108416:	55                   	push   %ebp
c0108417:	89 e5                	mov    %esp,%ebp
c0108419:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010841c:	e8 4f cb ff ff       	call   c0104f70 <nr_free_pages>
c0108421:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0108424:	e8 1b f8 ff ff       	call   c0107c44 <mm_create>
c0108429:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c010842c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108430:	75 24                	jne    c0108456 <check_vma_struct+0x40>
c0108432:	c7 44 24 0c 8f 6b 11 	movl   $0xc0116b8f,0xc(%esp)
c0108439:	c0 
c010843a:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0108441:	c0 
c0108442:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c0108449:	00 
c010844a:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0108451:	e8 72 8a ff ff       	call   c0100ec8 <__panic>

    int step1 = 10, step2 = step1 * 10;
c0108456:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c010845d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108460:	89 d0                	mov    %edx,%eax
c0108462:	c1 e0 02             	shl    $0x2,%eax
c0108465:	01 d0                	add    %edx,%eax
c0108467:	01 c0                	add    %eax,%eax
c0108469:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c010846c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010846f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108472:	eb 70                	jmp    c01084e4 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108474:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108477:	89 d0                	mov    %edx,%eax
c0108479:	c1 e0 02             	shl    $0x2,%eax
c010847c:	01 d0                	add    %edx,%eax
c010847e:	83 c0 02             	add    $0x2,%eax
c0108481:	89 c1                	mov    %eax,%ecx
c0108483:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108486:	89 d0                	mov    %edx,%eax
c0108488:	c1 e0 02             	shl    $0x2,%eax
c010848b:	01 d0                	add    %edx,%eax
c010848d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108494:	00 
c0108495:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108499:	89 04 24             	mov    %eax,(%esp)
c010849c:	e8 48 f8 ff ff       	call   c0107ce9 <vma_create>
c01084a1:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c01084a4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01084a8:	75 24                	jne    c01084ce <check_vma_struct+0xb8>
c01084aa:	c7 44 24 0c f0 6b 11 	movl   $0xc0116bf0,0xc(%esp)
c01084b1:	c0 
c01084b2:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c01084b9:	c0 
c01084ba:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c01084c1:	00 
c01084c2:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c01084c9:	e8 fa 89 ff ff       	call   c0100ec8 <__panic>
        insert_vma_struct(mm, vma);
c01084ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01084d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084d8:	89 04 24             	mov    %eax,(%esp)
c01084db:	e8 99 f9 ff ff       	call   c0107e79 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c01084e0:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01084e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01084e8:	7f 8a                	jg     c0108474 <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01084ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01084ed:	83 c0 01             	add    $0x1,%eax
c01084f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01084f3:	eb 70                	jmp    c0108565 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01084f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01084f8:	89 d0                	mov    %edx,%eax
c01084fa:	c1 e0 02             	shl    $0x2,%eax
c01084fd:	01 d0                	add    %edx,%eax
c01084ff:	83 c0 02             	add    $0x2,%eax
c0108502:	89 c1                	mov    %eax,%ecx
c0108504:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108507:	89 d0                	mov    %edx,%eax
c0108509:	c1 e0 02             	shl    $0x2,%eax
c010850c:	01 d0                	add    %edx,%eax
c010850e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108515:	00 
c0108516:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010851a:	89 04 24             	mov    %eax,(%esp)
c010851d:	e8 c7 f7 ff ff       	call   c0107ce9 <vma_create>
c0108522:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0108525:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0108529:	75 24                	jne    c010854f <check_vma_struct+0x139>
c010852b:	c7 44 24 0c f0 6b 11 	movl   $0xc0116bf0,0xc(%esp)
c0108532:	c0 
c0108533:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c010853a:	c0 
c010853b:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0108542:	00 
c0108543:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c010854a:	e8 79 89 ff ff       	call   c0100ec8 <__panic>
        insert_vma_struct(mm, vma);
c010854f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108552:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108556:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108559:	89 04 24             	mov    %eax,(%esp)
c010855c:	e8 18 f9 ff ff       	call   c0107e79 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108561:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108565:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108568:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010856b:	7e 88                	jle    c01084f5 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c010856d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108570:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0108573:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108576:	8b 40 04             	mov    0x4(%eax),%eax
c0108579:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c010857c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0108583:	e9 97 00 00 00       	jmp    c010861f <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0108588:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010858b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010858e:	75 24                	jne    c01085b4 <check_vma_struct+0x19e>
c0108590:	c7 44 24 0c fc 6b 11 	movl   $0xc0116bfc,0xc(%esp)
c0108597:	c0 
c0108598:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c010859f:	c0 
c01085a0:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c01085a7:	00 
c01085a8:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c01085af:	e8 14 89 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c01085b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01085b7:	83 e8 10             	sub    $0x10,%eax
c01085ba:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c01085bd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01085c0:	8b 48 04             	mov    0x4(%eax),%ecx
c01085c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01085c6:	89 d0                	mov    %edx,%eax
c01085c8:	c1 e0 02             	shl    $0x2,%eax
c01085cb:	01 d0                	add    %edx,%eax
c01085cd:	39 c1                	cmp    %eax,%ecx
c01085cf:	75 17                	jne    c01085e8 <check_vma_struct+0x1d2>
c01085d1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01085d4:	8b 48 08             	mov    0x8(%eax),%ecx
c01085d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01085da:	89 d0                	mov    %edx,%eax
c01085dc:	c1 e0 02             	shl    $0x2,%eax
c01085df:	01 d0                	add    %edx,%eax
c01085e1:	83 c0 02             	add    $0x2,%eax
c01085e4:	39 c1                	cmp    %eax,%ecx
c01085e6:	74 24                	je     c010860c <check_vma_struct+0x1f6>
c01085e8:	c7 44 24 0c 14 6c 11 	movl   $0xc0116c14,0xc(%esp)
c01085ef:	c0 
c01085f0:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c01085f7:	c0 
c01085f8:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c01085ff:	00 
c0108600:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0108607:	e8 bc 88 ff ff       	call   c0100ec8 <__panic>
c010860c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010860f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0108612:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108615:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0108618:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c010861b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010861f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108622:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108625:	0f 8e 5d ff ff ff    	jle    c0108588 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c010862b:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0108632:	e9 cd 01 00 00       	jmp    c0108804 <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c0108637:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010863a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010863e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108641:	89 04 24             	mov    %eax,(%esp)
c0108644:	e8 db f6 ff ff       	call   c0107d24 <find_vma>
c0108649:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c010864c:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0108650:	75 24                	jne    c0108676 <check_vma_struct+0x260>
c0108652:	c7 44 24 0c 49 6c 11 	movl   $0xc0116c49,0xc(%esp)
c0108659:	c0 
c010865a:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0108661:	c0 
c0108662:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c0108669:	00 
c010866a:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0108671:	e8 52 88 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0108676:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108679:	83 c0 01             	add    $0x1,%eax
c010867c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108680:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108683:	89 04 24             	mov    %eax,(%esp)
c0108686:	e8 99 f6 ff ff       	call   c0107d24 <find_vma>
c010868b:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c010868e:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108692:	75 24                	jne    c01086b8 <check_vma_struct+0x2a2>
c0108694:	c7 44 24 0c 56 6c 11 	movl   $0xc0116c56,0xc(%esp)
c010869b:	c0 
c010869c:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c01086a3:	c0 
c01086a4:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c01086ab:	00 
c01086ac:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c01086b3:	e8 10 88 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c01086b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086bb:	83 c0 02             	add    $0x2,%eax
c01086be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01086c5:	89 04 24             	mov    %eax,(%esp)
c01086c8:	e8 57 f6 ff ff       	call   c0107d24 <find_vma>
c01086cd:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c01086d0:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01086d4:	74 24                	je     c01086fa <check_vma_struct+0x2e4>
c01086d6:	c7 44 24 0c 63 6c 11 	movl   $0xc0116c63,0xc(%esp)
c01086dd:	c0 
c01086de:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c01086e5:	c0 
c01086e6:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c01086ed:	00 
c01086ee:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c01086f5:	e8 ce 87 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c01086fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086fd:	83 c0 03             	add    $0x3,%eax
c0108700:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108704:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108707:	89 04 24             	mov    %eax,(%esp)
c010870a:	e8 15 f6 ff ff       	call   c0107d24 <find_vma>
c010870f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0108712:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0108716:	74 24                	je     c010873c <check_vma_struct+0x326>
c0108718:	c7 44 24 0c 70 6c 11 	movl   $0xc0116c70,0xc(%esp)
c010871f:	c0 
c0108720:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0108727:	c0 
c0108728:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c010872f:	00 
c0108730:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0108737:	e8 8c 87 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c010873c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010873f:	83 c0 04             	add    $0x4,%eax
c0108742:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108746:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108749:	89 04 24             	mov    %eax,(%esp)
c010874c:	e8 d3 f5 ff ff       	call   c0107d24 <find_vma>
c0108751:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0108754:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108758:	74 24                	je     c010877e <check_vma_struct+0x368>
c010875a:	c7 44 24 0c 7d 6c 11 	movl   $0xc0116c7d,0xc(%esp)
c0108761:	c0 
c0108762:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0108769:	c0 
c010876a:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108771:	00 
c0108772:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0108779:	e8 4a 87 ff ff       	call   c0100ec8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c010877e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108781:	8b 50 04             	mov    0x4(%eax),%edx
c0108784:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108787:	39 c2                	cmp    %eax,%edx
c0108789:	75 10                	jne    c010879b <check_vma_struct+0x385>
c010878b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010878e:	8b 50 08             	mov    0x8(%eax),%edx
c0108791:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108794:	83 c0 02             	add    $0x2,%eax
c0108797:	39 c2                	cmp    %eax,%edx
c0108799:	74 24                	je     c01087bf <check_vma_struct+0x3a9>
c010879b:	c7 44 24 0c 8c 6c 11 	movl   $0xc0116c8c,0xc(%esp)
c01087a2:	c0 
c01087a3:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c01087aa:	c0 
c01087ab:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c01087b2:	00 
c01087b3:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c01087ba:	e8 09 87 ff ff       	call   c0100ec8 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c01087bf:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01087c2:	8b 50 04             	mov    0x4(%eax),%edx
c01087c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087c8:	39 c2                	cmp    %eax,%edx
c01087ca:	75 10                	jne    c01087dc <check_vma_struct+0x3c6>
c01087cc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01087cf:	8b 50 08             	mov    0x8(%eax),%edx
c01087d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087d5:	83 c0 02             	add    $0x2,%eax
c01087d8:	39 c2                	cmp    %eax,%edx
c01087da:	74 24                	je     c0108800 <check_vma_struct+0x3ea>
c01087dc:	c7 44 24 0c bc 6c 11 	movl   $0xc0116cbc,0xc(%esp)
c01087e3:	c0 
c01087e4:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c01087eb:	c0 
c01087ec:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c01087f3:	00 
c01087f4:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c01087fb:	e8 c8 86 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108800:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108804:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108807:	89 d0                	mov    %edx,%eax
c0108809:	c1 e0 02             	shl    $0x2,%eax
c010880c:	01 d0                	add    %edx,%eax
c010880e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108811:	0f 8d 20 fe ff ff    	jge    c0108637 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108817:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c010881e:	eb 70                	jmp    c0108890 <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108820:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108823:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108827:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010882a:	89 04 24             	mov    %eax,(%esp)
c010882d:	e8 f2 f4 ff ff       	call   c0107d24 <find_vma>
c0108832:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108835:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108839:	74 27                	je     c0108862 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c010883b:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010883e:	8b 50 08             	mov    0x8(%eax),%edx
c0108841:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108844:	8b 40 04             	mov    0x4(%eax),%eax
c0108847:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010884b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010884f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108852:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108856:	c7 04 24 ec 6c 11 c0 	movl   $0xc0116cec,(%esp)
c010885d:	e8 03 7b ff ff       	call   c0100365 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108862:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108866:	74 24                	je     c010888c <check_vma_struct+0x476>
c0108868:	c7 44 24 0c 11 6d 11 	movl   $0xc0116d11,0xc(%esp)
c010886f:	c0 
c0108870:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0108877:	c0 
c0108878:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c010887f:	00 
c0108880:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0108887:	e8 3c 86 ff ff       	call   c0100ec8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c010888c:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108890:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108894:	79 8a                	jns    c0108820 <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108896:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108899:	89 04 24             	mov    %eax,(%esp)
c010889c:	e8 08 f7 ff ff       	call   c0107fa9 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c01088a1:	c7 04 24 28 6d 11 c0 	movl   $0xc0116d28,(%esp)
c01088a8:	e8 b8 7a ff ff       	call   c0100365 <cprintf>
}
c01088ad:	c9                   	leave  
c01088ae:	c3                   	ret    

c01088af <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c01088af:	55                   	push   %ebp
c01088b0:	89 e5                	mov    %esp,%ebp
c01088b2:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01088b5:	e8 b6 c6 ff ff       	call   c0104f70 <nr_free_pages>
c01088ba:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c01088bd:	e8 82 f3 ff ff       	call   c0107c44 <mm_create>
c01088c2:	a3 0c 31 15 c0       	mov    %eax,0xc015310c
    assert(check_mm_struct != NULL);
c01088c7:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01088cc:	85 c0                	test   %eax,%eax
c01088ce:	75 24                	jne    c01088f4 <check_pgfault+0x45>
c01088d0:	c7 44 24 0c 47 6d 11 	movl   $0xc0116d47,0xc(%esp)
c01088d7:	c0 
c01088d8:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c01088df:	c0 
c01088e0:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c01088e7:	00 
c01088e8:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c01088ef:	e8 d4 85 ff ff       	call   c0100ec8 <__panic>

    struct mm_struct *mm = check_mm_struct;
c01088f4:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01088f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c01088fc:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c0108902:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108905:	89 50 0c             	mov    %edx,0xc(%eax)
c0108908:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010890b:	8b 40 0c             	mov    0xc(%eax),%eax
c010890e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108911:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108914:	8b 00                	mov    (%eax),%eax
c0108916:	85 c0                	test   %eax,%eax
c0108918:	74 24                	je     c010893e <check_pgfault+0x8f>
c010891a:	c7 44 24 0c 5f 6d 11 	movl   $0xc0116d5f,0xc(%esp)
c0108921:	c0 
c0108922:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0108929:	c0 
c010892a:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108931:	00 
c0108932:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0108939:	e8 8a 85 ff ff       	call   c0100ec8 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c010893e:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108945:	00 
c0108946:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c010894d:	00 
c010894e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108955:	e8 8f f3 ff ff       	call   c0107ce9 <vma_create>
c010895a:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c010895d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108961:	75 24                	jne    c0108987 <check_pgfault+0xd8>
c0108963:	c7 44 24 0c f0 6b 11 	movl   $0xc0116bf0,0xc(%esp)
c010896a:	c0 
c010896b:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0108972:	c0 
c0108973:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c010897a:	00 
c010897b:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0108982:	e8 41 85 ff ff       	call   c0100ec8 <__panic>

    insert_vma_struct(mm, vma);
c0108987:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010898a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010898e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108991:	89 04 24             	mov    %eax,(%esp)
c0108994:	e8 e0 f4 ff ff       	call   c0107e79 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108999:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c01089a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01089a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089aa:	89 04 24             	mov    %eax,(%esp)
c01089ad:	e8 72 f3 ff ff       	call   c0107d24 <find_vma>
c01089b2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01089b5:	74 24                	je     c01089db <check_pgfault+0x12c>
c01089b7:	c7 44 24 0c 6d 6d 11 	movl   $0xc0116d6d,0xc(%esp)
c01089be:	c0 
c01089bf:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c01089c6:	c0 
c01089c7:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c01089ce:	00 
c01089cf:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c01089d6:	e8 ed 84 ff ff       	call   c0100ec8 <__panic>

    int i, sum = 0;
c01089db:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c01089e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01089e9:	eb 17                	jmp    c0108a02 <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c01089eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01089ee:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01089f1:	01 d0                	add    %edx,%eax
c01089f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01089f6:	88 10                	mov    %dl,(%eax)
        sum += i;
c01089f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089fb:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c01089fe:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108a02:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108a06:	7e e3                	jle    c01089eb <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108a08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108a0f:	eb 15                	jmp    c0108a26 <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108a11:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108a14:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108a17:	01 d0                	add    %edx,%eax
c0108a19:	0f b6 00             	movzbl (%eax),%eax
c0108a1c:	0f be c0             	movsbl %al,%eax
c0108a1f:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108a22:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108a26:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108a2a:	7e e5                	jle    c0108a11 <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108a2c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108a30:	74 24                	je     c0108a56 <check_pgfault+0x1a7>
c0108a32:	c7 44 24 0c 87 6d 11 	movl   $0xc0116d87,0xc(%esp)
c0108a39:	c0 
c0108a3a:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0108a41:	c0 
c0108a42:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0108a49:	00 
c0108a4a:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0108a51:	e8 72 84 ff ff       	call   c0100ec8 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108a56:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108a59:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108a5c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108a5f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108a64:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108a6b:	89 04 24             	mov    %eax,(%esp)
c0108a6e:	e8 e1 d1 ff ff       	call   c0105c54 <page_remove>
    free_page(pde2page(pgdir[0]));
c0108a73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108a76:	8b 00                	mov    (%eax),%eax
c0108a78:	89 04 24             	mov    %eax,(%esp)
c0108a7b:	e8 ac f1 ff ff       	call   c0107c2c <pde2page>
c0108a80:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108a87:	00 
c0108a88:	89 04 24             	mov    %eax,(%esp)
c0108a8b:	e8 ae c4 ff ff       	call   c0104f3e <free_pages>
    pgdir[0] = 0;
c0108a90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108a93:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108a99:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a9c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108aa3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108aa6:	89 04 24             	mov    %eax,(%esp)
c0108aa9:	e8 fb f4 ff ff       	call   c0107fa9 <mm_destroy>
    check_mm_struct = NULL;
c0108aae:	c7 05 0c 31 15 c0 00 	movl   $0x0,0xc015310c
c0108ab5:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108ab8:	e8 b3 c4 ff ff       	call   c0104f70 <nr_free_pages>
c0108abd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108ac0:	74 24                	je     c0108ae6 <check_pgfault+0x237>
c0108ac2:	c7 44 24 0c 90 6d 11 	movl   $0xc0116d90,0xc(%esp)
c0108ac9:	c0 
c0108aca:	c7 44 24 08 ff 6a 11 	movl   $0xc0116aff,0x8(%esp)
c0108ad1:	c0 
c0108ad2:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0108ad9:	00 
c0108ada:	c7 04 24 14 6b 11 c0 	movl   $0xc0116b14,(%esp)
c0108ae1:	e8 e2 83 ff ff       	call   c0100ec8 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108ae6:	c7 04 24 b7 6d 11 c0 	movl   $0xc0116db7,(%esp)
c0108aed:	e8 73 78 ff ff       	call   c0100365 <cprintf>
}
c0108af2:	c9                   	leave  
c0108af3:	c3                   	ret    

c0108af4 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108af4:	55                   	push   %ebp
c0108af5:	89 e5                	mov    %esp,%ebp
c0108af7:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108afa:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108b01:	8b 45 10             	mov    0x10(%ebp),%eax
c0108b04:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b08:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b0b:	89 04 24             	mov    %eax,(%esp)
c0108b0e:	e8 11 f2 ff ff       	call   c0107d24 <find_vma>
c0108b13:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108b16:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0108b1b:	83 c0 01             	add    $0x1,%eax
c0108b1e:	a3 18 ff 14 c0       	mov    %eax,0xc014ff18
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108b23:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108b27:	74 0b                	je     c0108b34 <do_pgfault+0x40>
c0108b29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108b2c:	8b 40 04             	mov    0x4(%eax),%eax
c0108b2f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108b32:	76 18                	jbe    c0108b4c <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108b34:	8b 45 10             	mov    0x10(%ebp),%eax
c0108b37:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b3b:	c7 04 24 d4 6d 11 c0 	movl   $0xc0116dd4,(%esp)
c0108b42:	e8 1e 78 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108b47:	e9 8e 01 00 00       	jmp    c0108cda <do_pgfault+0x1e6>
    }
    //check the error_code
    switch (error_code & 3) {
c0108b4c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108b4f:	83 e0 03             	and    $0x3,%eax
c0108b52:	85 c0                	test   %eax,%eax
c0108b54:	74 36                	je     c0108b8c <do_pgfault+0x98>
c0108b56:	83 f8 01             	cmp    $0x1,%eax
c0108b59:	74 20                	je     c0108b7b <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108b5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108b5e:	8b 40 0c             	mov    0xc(%eax),%eax
c0108b61:	83 e0 02             	and    $0x2,%eax
c0108b64:	85 c0                	test   %eax,%eax
c0108b66:	75 11                	jne    c0108b79 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108b68:	c7 04 24 04 6e 11 c0 	movl   $0xc0116e04,(%esp)
c0108b6f:	e8 f1 77 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108b74:	e9 61 01 00 00       	jmp    c0108cda <do_pgfault+0x1e6>
        }
        break;
c0108b79:	eb 2f                	jmp    c0108baa <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108b7b:	c7 04 24 64 6e 11 c0 	movl   $0xc0116e64,(%esp)
c0108b82:	e8 de 77 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108b87:	e9 4e 01 00 00       	jmp    c0108cda <do_pgfault+0x1e6>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108b8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108b8f:	8b 40 0c             	mov    0xc(%eax),%eax
c0108b92:	83 e0 05             	and    $0x5,%eax
c0108b95:	85 c0                	test   %eax,%eax
c0108b97:	75 11                	jne    c0108baa <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108b99:	c7 04 24 9c 6e 11 c0 	movl   $0xc0116e9c,(%esp)
c0108ba0:	e8 c0 77 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108ba5:	e9 30 01 00 00       	jmp    c0108cda <do_pgfault+0x1e6>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108baa:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108bb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108bb4:	8b 40 0c             	mov    0xc(%eax),%eax
c0108bb7:	83 e0 02             	and    $0x2,%eax
c0108bba:	85 c0                	test   %eax,%eax
c0108bbc:	74 04                	je     c0108bc2 <do_pgfault+0xce>
        perm |= PTE_W;
c0108bbe:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108bc2:	8b 45 10             	mov    0x10(%ebp),%eax
c0108bc5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108bc8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bcb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108bd0:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108bd3:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108bda:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    * VARIABLES:
    *   mm->pgdir : the PDT of these vma
    *
    */
    /*LAB3 EXERCISE 1: 2012012017*/
    ptep = get_pte(mm->pgdir, addr, 1); //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
c0108be1:	8b 45 08             	mov    0x8(%ebp),%eax
c0108be4:	8b 40 0c             	mov    0xc(%eax),%eax
c0108be7:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108bee:	00 
c0108bef:	8b 55 10             	mov    0x10(%ebp),%edx
c0108bf2:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108bf6:	89 04 24             	mov    %eax,(%esp)
c0108bf9:	e8 3c ca ff ff       	call   c010563a <get_pte>
c0108bfe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (!ptep) goto failed;
c0108c01:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108c05:	75 05                	jne    c0108c0c <do_pgfault+0x118>
c0108c07:	e9 ce 00 00 00       	jmp    c0108cda <do_pgfault+0x1e6>
    if (*ptep == 0) {
c0108c0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c0f:	8b 00                	mov    (%eax),%eax
c0108c11:	85 c0                	test   %eax,%eax
c0108c13:	75 2f                	jne    c0108c44 <do_pgfault+0x150>
                            //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
        struct Page *page = pgdir_alloc_page(mm->pgdir, addr, perm);
c0108c15:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c18:	8b 40 0c             	mov    0xc(%eax),%eax
c0108c1b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108c1e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108c22:	8b 55 10             	mov    0x10(%ebp),%edx
c0108c25:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108c29:	89 04 24             	mov    %eax,(%esp)
c0108c2c:	e8 7d d1 ff ff       	call   c0105dae <pgdir_alloc_page>
c0108c31:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (!page) goto failed;
c0108c34:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108c38:	75 05                	jne    c0108c3f <do_pgfault+0x14b>
c0108c3a:	e9 9b 00 00 00       	jmp    c0108cda <do_pgfault+0x1e6>
c0108c3f:	e9 8f 00 00 00       	jmp    c0108cd3 <do_pgfault+0x1df>
		     If the vma includes this addr is writable, then we can set the page writable by rewrite the *ptep.
		     This method could be used to implement the Copy on Write (COW) thchnology(a fast fork process method).
		  2) *ptep & PTE_P == 0 & but *ptep!=0, it means this pte is a  swap entry.
		     We should add the LAB3's results here.
     */
        if(swap_init_ok) {
c0108c44:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0108c49:	85 c0                	test   %eax,%eax
c0108c4b:	74 6f                	je     c0108cbc <do_pgfault+0x1c8>
            struct Page *page=NULL;
c0108c4d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
                                    //(1）According to the mm AND addr, try to load the content of right disk page
                                    //    into the memory which page managed.
                                    //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
                                    //(3) make the page swappable.
                                    //(4) [NOTICE]: you myabe need to update your lab3's implementation for LAB5's normal execution.
            ret = swap_in(mm, addr, &page);
c0108c54:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0108c57:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108c5b:	8b 45 10             	mov    0x10(%ebp),%eax
c0108c5e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c62:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c65:	89 04 24             	mov    %eax,(%esp)
c0108c68:	e8 ed e1 ff ff       	call   c0106e5a <swap_in>
c0108c6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (ret != 0) goto failed;
c0108c70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108c74:	75 64                	jne    c0108cda <do_pgfault+0x1e6>
            page_insert(mm->pgdir, page, addr, perm);
c0108c76:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108c79:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c7c:	8b 40 0c             	mov    0xc(%eax),%eax
c0108c7f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0108c82:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108c86:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0108c89:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108c8d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108c91:	89 04 24             	mov    %eax,(%esp)
c0108c94:	e8 ff cf ff ff       	call   c0105c98 <page_insert>
            swap_map_swappable(mm, addr, page, 1);
c0108c99:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c9c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0108ca3:	00 
c0108ca4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108ca8:	8b 45 10             	mov    0x10(%ebp),%eax
c0108cab:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108caf:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cb2:	89 04 24             	mov    %eax,(%esp)
c0108cb5:	e8 d7 df ff ff       	call   c0106c91 <swap_map_swappable>
c0108cba:	eb 17                	jmp    c0108cd3 <do_pgfault+0x1df>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0108cbc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108cbf:	8b 00                	mov    (%eax),%eax
c0108cc1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108cc5:	c7 04 24 00 6f 11 c0 	movl   $0xc0116f00,(%esp)
c0108ccc:	e8 94 76 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108cd1:	eb 07                	jmp    c0108cda <do_pgfault+0x1e6>
        }
   }
   ret = 0;
c0108cd3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0108cda:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108cdd:	c9                   	leave  
c0108cde:	c3                   	ret    

c0108cdf <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0108cdf:	55                   	push   %ebp
c0108ce0:	89 e5                	mov    %esp,%ebp
c0108ce2:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0108ce5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108ce9:	0f 84 e0 00 00 00    	je     c0108dcf <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0108cef:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0108cf6:	76 1c                	jbe    c0108d14 <user_mem_check+0x35>
c0108cf8:	8b 45 10             	mov    0x10(%ebp),%eax
c0108cfb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108cfe:	01 d0                	add    %edx,%eax
c0108d00:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108d03:	76 0f                	jbe    c0108d14 <user_mem_check+0x35>
c0108d05:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d08:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108d0b:	01 d0                	add    %edx,%eax
c0108d0d:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0108d12:	76 0a                	jbe    c0108d1e <user_mem_check+0x3f>
            return 0;
c0108d14:	b8 00 00 00 00       	mov    $0x0,%eax
c0108d19:	e9 e2 00 00 00       	jmp    c0108e00 <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0108d1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108d21:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0108d24:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d27:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108d2a:	01 d0                	add    %edx,%eax
c0108d2c:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0108d2f:	e9 88 00 00 00       	jmp    c0108dbc <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0108d34:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108d37:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d3e:	89 04 24             	mov    %eax,(%esp)
c0108d41:	e8 de ef ff ff       	call   c0107d24 <find_vma>
c0108d46:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108d49:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108d4d:	74 0b                	je     c0108d5a <user_mem_check+0x7b>
c0108d4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d52:	8b 40 04             	mov    0x4(%eax),%eax
c0108d55:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108d58:	76 0a                	jbe    c0108d64 <user_mem_check+0x85>
                return 0;
c0108d5a:	b8 00 00 00 00       	mov    $0x0,%eax
c0108d5f:	e9 9c 00 00 00       	jmp    c0108e00 <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0108d64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d67:	8b 50 0c             	mov    0xc(%eax),%edx
c0108d6a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108d6e:	74 07                	je     c0108d77 <user_mem_check+0x98>
c0108d70:	b8 02 00 00 00       	mov    $0x2,%eax
c0108d75:	eb 05                	jmp    c0108d7c <user_mem_check+0x9d>
c0108d77:	b8 01 00 00 00       	mov    $0x1,%eax
c0108d7c:	21 d0                	and    %edx,%eax
c0108d7e:	85 c0                	test   %eax,%eax
c0108d80:	75 07                	jne    c0108d89 <user_mem_check+0xaa>
                return 0;
c0108d82:	b8 00 00 00 00       	mov    $0x0,%eax
c0108d87:	eb 77                	jmp    c0108e00 <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0108d89:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108d8d:	74 24                	je     c0108db3 <user_mem_check+0xd4>
c0108d8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d92:	8b 40 0c             	mov    0xc(%eax),%eax
c0108d95:	83 e0 08             	and    $0x8,%eax
c0108d98:	85 c0                	test   %eax,%eax
c0108d9a:	74 17                	je     c0108db3 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0108d9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d9f:	8b 40 04             	mov    0x4(%eax),%eax
c0108da2:	05 00 10 00 00       	add    $0x1000,%eax
c0108da7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108daa:	76 07                	jbe    c0108db3 <user_mem_check+0xd4>
                    return 0;
c0108dac:	b8 00 00 00 00       	mov    $0x0,%eax
c0108db1:	eb 4d                	jmp    c0108e00 <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0108db3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108db6:	8b 40 08             	mov    0x8(%eax),%eax
c0108db9:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0108dbc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108dbf:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0108dc2:	0f 82 6c ff ff ff    	jb     c0108d34 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0108dc8:	b8 01 00 00 00       	mov    $0x1,%eax
c0108dcd:	eb 31                	jmp    c0108e00 <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c0108dcf:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0108dd6:	76 23                	jbe    c0108dfb <user_mem_check+0x11c>
c0108dd8:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ddb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108dde:	01 d0                	add    %edx,%eax
c0108de0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108de3:	76 16                	jbe    c0108dfb <user_mem_check+0x11c>
c0108de5:	8b 45 10             	mov    0x10(%ebp),%eax
c0108de8:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108deb:	01 d0                	add    %edx,%eax
c0108ded:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0108df2:	77 07                	ja     c0108dfb <user_mem_check+0x11c>
c0108df4:	b8 01 00 00 00       	mov    $0x1,%eax
c0108df9:	eb 05                	jmp    c0108e00 <user_mem_check+0x121>
c0108dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108e00:	c9                   	leave  
c0108e01:	c3                   	ret    

c0108e02 <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) {
c0108e02:	55                   	push   %ebp
c0108e03:	89 e5                	mov    %esp,%ebp
c0108e05:	83 ec 28             	sub    $0x28,%esp
    size_t alen, part = ROUNDDOWN((uintptr_t)src + PGSIZE, PGSIZE) - (uintptr_t)src;
c0108e08:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e0b:	05 00 10 00 00       	add    $0x1000,%eax
c0108e10:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108e13:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e16:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108e1b:	89 c2                	mov    %eax,%edx
c0108e1d:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e20:	29 c2                	sub    %eax,%edx
c0108e22:	89 d0                	mov    %edx,%eax
c0108e24:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (1) {
        if (part > maxn) {
c0108e27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e2a:	3b 45 14             	cmp    0x14(%ebp),%eax
c0108e2d:	76 06                	jbe    c0108e35 <copy_string+0x33>
            part = maxn;
c0108e2f:	8b 45 14             	mov    0x14(%ebp),%eax
c0108e32:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
c0108e35:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e38:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0108e3f:	00 
c0108e40:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108e43:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108e47:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e4e:	89 04 24             	mov    %eax,(%esp)
c0108e51:	e8 89 fe ff ff       	call   c0108cdf <user_mem_check>
c0108e56:	85 c0                	test   %eax,%eax
c0108e58:	75 0a                	jne    c0108e64 <copy_string+0x62>
            return 0;
c0108e5a:	b8 00 00 00 00       	mov    $0x0,%eax
c0108e5f:	e9 86 00 00 00       	jmp    c0108eea <copy_string+0xe8>
        }
        if ((alen = strnlen(src, part)) < part) {
c0108e64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e67:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e6b:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e6e:	89 04 24             	mov    %eax,(%esp)
c0108e71:	e8 8b bd 00 00       	call   c0114c01 <strnlen>
c0108e76:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108e79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e7c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108e7f:	73 23                	jae    c0108ea4 <copy_string+0xa2>
            memcpy(dst, src, alen + 1);
c0108e81:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e84:	83 c0 01             	add    $0x1,%eax
c0108e87:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108e8b:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e8e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e92:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108e95:	89 04 24             	mov    %eax,(%esp)
c0108e98:	e8 74 c1 00 00       	call   c0115011 <memcpy>
            return 1;
c0108e9d:	b8 01 00 00 00       	mov    $0x1,%eax
c0108ea2:	eb 46                	jmp    c0108eea <copy_string+0xe8>
        }
        if (part == maxn) {
c0108ea4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ea7:	3b 45 14             	cmp    0x14(%ebp),%eax
c0108eaa:	75 07                	jne    c0108eb3 <copy_string+0xb1>
            return 0;
c0108eac:	b8 00 00 00 00       	mov    $0x0,%eax
c0108eb1:	eb 37                	jmp    c0108eea <copy_string+0xe8>
        }
        memcpy(dst, src, part);
c0108eb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108eb6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108eba:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ebd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ec1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108ec4:	89 04 24             	mov    %eax,(%esp)
c0108ec7:	e8 45 c1 00 00       	call   c0115011 <memcpy>
        dst += part, src += part, maxn -= part;
c0108ecc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ecf:	01 45 0c             	add    %eax,0xc(%ebp)
c0108ed2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ed5:	01 45 10             	add    %eax,0x10(%ebp)
c0108ed8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108edb:	29 45 14             	sub    %eax,0x14(%ebp)
        part = PGSIZE;
c0108ede:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
    }
c0108ee5:	e9 3d ff ff ff       	jmp    c0108e27 <copy_string+0x25>
}
c0108eea:	c9                   	leave  
c0108eeb:	c3                   	ret    

c0108eec <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c0108eec:	55                   	push   %ebp
c0108eed:	89 e5                	mov    %esp,%ebp
c0108eef:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c0108ef2:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ef5:	8b 04 85 20 31 15 c0 	mov    -0x3feacee0(,%eax,4),%eax
c0108efc:	83 f8 01             	cmp    $0x1,%eax
c0108eff:	0f 85 85 00 00 00    	jne    c0108f8a <phi_test_sema+0x9e>
c0108f05:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f08:	8d 48 04             	lea    0x4(%eax),%ecx
c0108f0b:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108f10:	89 c8                	mov    %ecx,%eax
c0108f12:	f7 ea                	imul   %edx
c0108f14:	d1 fa                	sar    %edx
c0108f16:	89 c8                	mov    %ecx,%eax
c0108f18:	c1 f8 1f             	sar    $0x1f,%eax
c0108f1b:	29 c2                	sub    %eax,%edx
c0108f1d:	89 d0                	mov    %edx,%eax
c0108f1f:	c1 e0 02             	shl    $0x2,%eax
c0108f22:	01 d0                	add    %edx,%eax
c0108f24:	29 c1                	sub    %eax,%ecx
c0108f26:	89 ca                	mov    %ecx,%edx
c0108f28:	8b 04 95 20 31 15 c0 	mov    -0x3feacee0(,%edx,4),%eax
c0108f2f:	83 f8 02             	cmp    $0x2,%eax
c0108f32:	74 56                	je     c0108f8a <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c0108f34:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f37:	8d 48 01             	lea    0x1(%eax),%ecx
c0108f3a:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108f3f:	89 c8                	mov    %ecx,%eax
c0108f41:	f7 ea                	imul   %edx
c0108f43:	d1 fa                	sar    %edx
c0108f45:	89 c8                	mov    %ecx,%eax
c0108f47:	c1 f8 1f             	sar    $0x1f,%eax
c0108f4a:	29 c2                	sub    %eax,%edx
c0108f4c:	89 d0                	mov    %edx,%eax
c0108f4e:	c1 e0 02             	shl    $0x2,%eax
c0108f51:	01 d0                	add    %edx,%eax
c0108f53:	29 c1                	sub    %eax,%ecx
c0108f55:	89 ca                	mov    %ecx,%edx
c0108f57:	8b 04 95 20 31 15 c0 	mov    -0x3feacee0(,%edx,4),%eax
c0108f5e:	83 f8 02             	cmp    $0x2,%eax
c0108f61:	74 27                	je     c0108f8a <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c0108f63:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f66:	c7 04 85 20 31 15 c0 	movl   $0x2,-0x3feacee0(,%eax,4)
c0108f6d:	02 00 00 00 
        up(&s[i]);
c0108f71:	8b 55 08             	mov    0x8(%ebp),%edx
c0108f74:	89 d0                	mov    %edx,%eax
c0108f76:	01 c0                	add    %eax,%eax
c0108f78:	01 d0                	add    %edx,%eax
c0108f7a:	c1 e0 02             	shl    $0x2,%eax
c0108f7d:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c0108f82:	89 04 24             	mov    %eax,(%esp)
c0108f85:	e8 f0 09 00 00       	call   c010997a <up>
    }
}
c0108f8a:	c9                   	leave  
c0108f8b:	c3                   	ret    

c0108f8c <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0108f8c:	55                   	push   %ebp
c0108f8d:	89 e5                	mov    %esp,%ebp
c0108f8f:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0108f92:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c0108f99:	e8 f7 09 00 00       	call   c0109995 <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0108f9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fa1:	c7 04 85 20 31 15 c0 	movl   $0x1,-0x3feacee0(,%eax,4)
c0108fa8:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c0108fac:	8b 45 08             	mov    0x8(%ebp),%eax
c0108faf:	89 04 24             	mov    %eax,(%esp)
c0108fb2:	e8 35 ff ff ff       	call   c0108eec <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0108fb7:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c0108fbe:	e8 b7 09 00 00       	call   c010997a <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0108fc3:	8b 55 08             	mov    0x8(%ebp),%edx
c0108fc6:	89 d0                	mov    %edx,%eax
c0108fc8:	01 c0                	add    %eax,%eax
c0108fca:	01 d0                	add    %edx,%eax
c0108fcc:	c1 e0 02             	shl    $0x2,%eax
c0108fcf:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c0108fd4:	89 04 24             	mov    %eax,(%esp)
c0108fd7:	e8 b9 09 00 00       	call   c0109995 <down>
}
c0108fdc:	c9                   	leave  
c0108fdd:	c3                   	ret    

c0108fde <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0108fde:	55                   	push   %ebp
c0108fdf:	89 e5                	mov    %esp,%ebp
c0108fe1:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0108fe4:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c0108feb:	e8 a5 09 00 00       	call   c0109995 <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c0108ff0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ff3:	c7 04 85 20 31 15 c0 	movl   $0x0,-0x3feacee0(,%eax,4)
c0108ffa:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c0108ffe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109001:	8d 48 04             	lea    0x4(%eax),%ecx
c0109004:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109009:	89 c8                	mov    %ecx,%eax
c010900b:	f7 ea                	imul   %edx
c010900d:	d1 fa                	sar    %edx
c010900f:	89 c8                	mov    %ecx,%eax
c0109011:	c1 f8 1f             	sar    $0x1f,%eax
c0109014:	29 c2                	sub    %eax,%edx
c0109016:	89 d0                	mov    %edx,%eax
c0109018:	c1 e0 02             	shl    $0x2,%eax
c010901b:	01 d0                	add    %edx,%eax
c010901d:	29 c1                	sub    %eax,%ecx
c010901f:	89 ca                	mov    %ecx,%edx
c0109021:	89 14 24             	mov    %edx,(%esp)
c0109024:	e8 c3 fe ff ff       	call   c0108eec <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0109029:	8b 45 08             	mov    0x8(%ebp),%eax
c010902c:	8d 48 01             	lea    0x1(%eax),%ecx
c010902f:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109034:	89 c8                	mov    %ecx,%eax
c0109036:	f7 ea                	imul   %edx
c0109038:	d1 fa                	sar    %edx
c010903a:	89 c8                	mov    %ecx,%eax
c010903c:	c1 f8 1f             	sar    $0x1f,%eax
c010903f:	29 c2                	sub    %eax,%edx
c0109041:	89 d0                	mov    %edx,%eax
c0109043:	c1 e0 02             	shl    $0x2,%eax
c0109046:	01 d0                	add    %edx,%eax
c0109048:	29 c1                	sub    %eax,%ecx
c010904a:	89 ca                	mov    %ecx,%edx
c010904c:	89 14 24             	mov    %edx,(%esp)
c010904f:	e8 98 fe ff ff       	call   c0108eec <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109054:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c010905b:	e8 1a 09 00 00       	call   c010997a <up>
}
c0109060:	c9                   	leave  
c0109061:	c3                   	ret    

c0109062 <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c0109062:	55                   	push   %ebp
c0109063:	89 e5                	mov    %esp,%ebp
c0109065:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c0109068:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c010906f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109072:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c0109075:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109078:	89 44 24 04          	mov    %eax,0x4(%esp)
c010907c:	c7 04 24 28 6f 11 c0 	movl   $0xc0116f28,(%esp)
c0109083:	e8 dd 72 ff ff       	call   c0100365 <cprintf>
    while(iter++<TIMES)
c0109088:	eb 62                	jmp    c01090ec <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c010908a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010908d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109091:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109094:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109098:	c7 04 24 48 6f 11 c0 	movl   $0xc0116f48,(%esp)
c010909f:	e8 c1 72 ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c01090a4:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01090ab:	e8 a9 4a 00 00       	call   c010db59 <do_sleep>
        phi_take_forks_sema(i); 
c01090b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01090b3:	89 04 24             	mov    %eax,(%esp)
c01090b6:	e8 d1 fe ff ff       	call   c0108f8c <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c01090bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01090be:	89 44 24 08          	mov    %eax,0x8(%esp)
c01090c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090c9:	c7 04 24 78 6f 11 c0 	movl   $0xc0116f78,(%esp)
c01090d0:	e8 90 72 ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c01090d5:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01090dc:	e8 78 4a 00 00       	call   c010db59 <do_sleep>
        phi_put_forks_sema(i); 
c01090e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01090e4:	89 04 24             	mov    %eax,(%esp)
c01090e7:	e8 f2 fe ff ff       	call   c0108fde <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c01090ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090ef:	8d 50 01             	lea    0x1(%eax),%edx
c01090f2:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01090f5:	83 f8 03             	cmp    $0x3,%eax
c01090f8:	7e 90                	jle    c010908a <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c01090fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01090fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109101:	c7 04 24 a3 6f 11 c0 	movl   $0xc0116fa3,(%esp)
c0109108:	e8 58 72 ff ff       	call   c0100365 <cprintf>
    return 0;    
c010910d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109112:	c9                   	leave  
c0109113:	c3                   	ret    

c0109114 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c0109114:	55                   	push   %ebp
c0109115:	89 e5                	mov    %esp,%ebp
c0109117:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c010911a:	8b 45 08             	mov    0x8(%ebp),%eax
c010911d:	8b 04 85 80 31 15 c0 	mov    -0x3feace80(,%eax,4),%eax
c0109124:	83 f8 01             	cmp    $0x1,%eax
c0109127:	0f 85 b5 00 00 00    	jne    c01091e2 <phi_test_condvar+0xce>
c010912d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109130:	8d 48 04             	lea    0x4(%eax),%ecx
c0109133:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109138:	89 c8                	mov    %ecx,%eax
c010913a:	f7 ea                	imul   %edx
c010913c:	d1 fa                	sar    %edx
c010913e:	89 c8                	mov    %ecx,%eax
c0109140:	c1 f8 1f             	sar    $0x1f,%eax
c0109143:	29 c2                	sub    %eax,%edx
c0109145:	89 d0                	mov    %edx,%eax
c0109147:	c1 e0 02             	shl    $0x2,%eax
c010914a:	01 d0                	add    %edx,%eax
c010914c:	29 c1                	sub    %eax,%ecx
c010914e:	89 ca                	mov    %ecx,%edx
c0109150:	8b 04 95 80 31 15 c0 	mov    -0x3feace80(,%edx,4),%eax
c0109157:	83 f8 02             	cmp    $0x2,%eax
c010915a:	0f 84 82 00 00 00    	je     c01091e2 <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c0109160:	8b 45 08             	mov    0x8(%ebp),%eax
c0109163:	8d 48 01             	lea    0x1(%eax),%ecx
c0109166:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010916b:	89 c8                	mov    %ecx,%eax
c010916d:	f7 ea                	imul   %edx
c010916f:	d1 fa                	sar    %edx
c0109171:	89 c8                	mov    %ecx,%eax
c0109173:	c1 f8 1f             	sar    $0x1f,%eax
c0109176:	29 c2                	sub    %eax,%edx
c0109178:	89 d0                	mov    %edx,%eax
c010917a:	c1 e0 02             	shl    $0x2,%eax
c010917d:	01 d0                	add    %edx,%eax
c010917f:	29 c1                	sub    %eax,%ecx
c0109181:	89 ca                	mov    %ecx,%edx
c0109183:	8b 04 95 80 31 15 c0 	mov    -0x3feace80(,%edx,4),%eax
c010918a:	83 f8 02             	cmp    $0x2,%eax
c010918d:	74 53                	je     c01091e2 <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c010918f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109192:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109196:	c7 04 24 c0 6f 11 c0 	movl   $0xc0116fc0,(%esp)
c010919d:	e8 c3 71 ff ff       	call   c0100365 <cprintf>
        state_condvar[i] = EATING ;
c01091a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01091a5:	c7 04 85 80 31 15 c0 	movl   $0x2,-0x3feace80(,%eax,4)
c01091ac:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c01091b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01091b3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091b7:	c7 04 24 f4 6f 11 c0 	movl   $0xc0116ff4,(%esp)
c01091be:	e8 a2 71 ff ff       	call   c0100365 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c01091c3:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01091c8:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01091cb:	8b 55 08             	mov    0x8(%ebp),%edx
c01091ce:	89 d0                	mov    %edx,%eax
c01091d0:	c1 e0 02             	shl    $0x2,%eax
c01091d3:	01 d0                	add    %edx,%eax
c01091d5:	c1 e0 02             	shl    $0x2,%eax
c01091d8:	01 c8                	add    %ecx,%eax
c01091da:	89 04 24             	mov    %eax,(%esp)
c01091dd:	e8 8f 04 00 00       	call   c0109671 <cond_signal>
    }
}
c01091e2:	c9                   	leave  
c01091e3:	c3                   	ret    

c01091e4 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c01091e4:	55                   	push   %ebp
c01091e5:	89 e5                	mov    %esp,%ebp
c01091e7:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c01091ea:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01091ef:	89 04 24             	mov    %eax,(%esp)
c01091f2:	e8 9e 07 00 00       	call   c0109995 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: 2012012017
     // I am hungry
     // try to get fork
    state_condvar[i] = HUNGRY;
c01091f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01091fa:	c7 04 85 80 31 15 c0 	movl   $0x1,-0x3feace80(,%eax,4)
c0109201:	01 00 00 00 
    phi_test_condvar(i);
c0109205:	8b 45 08             	mov    0x8(%ebp),%eax
c0109208:	89 04 24             	mov    %eax,(%esp)
c010920b:	e8 04 ff ff ff       	call   c0109114 <phi_test_condvar>
    while (state_condvar[i] != EATING) {
c0109210:	eb 32                	jmp    c0109244 <phi_take_forks_condvar+0x60>
        cprintf("phi_take_forks_condvar: %d didn’t get fork and will wait\n", i);
c0109212:	8b 45 08             	mov    0x8(%ebp),%eax
c0109215:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109219:	c7 04 24 1c 70 11 c0 	movl   $0xc011701c,(%esp)
c0109220:	e8 40 71 ff ff       	call   c0100365 <cprintf>
        cond_wait(&mtp->cv[i]);
c0109225:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010922a:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010922d:	8b 55 08             	mov    0x8(%ebp),%edx
c0109230:	89 d0                	mov    %edx,%eax
c0109232:	c1 e0 02             	shl    $0x2,%eax
c0109235:	01 d0                	add    %edx,%eax
c0109237:	c1 e0 02             	shl    $0x2,%eax
c010923a:	01 c8                	add    %ecx,%eax
c010923c:	89 04 24             	mov    %eax,(%esp)
c010923f:	e8 d3 04 00 00       	call   c0109717 <cond_wait>
     // LAB7 EXERCISE1: 2012012017
     // I am hungry
     // try to get fork
    state_condvar[i] = HUNGRY;
    phi_test_condvar(i);
    while (state_condvar[i] != EATING) {
c0109244:	8b 45 08             	mov    0x8(%ebp),%eax
c0109247:	8b 04 85 80 31 15 c0 	mov    -0x3feace80(,%eax,4),%eax
c010924e:	83 f8 02             	cmp    $0x2,%eax
c0109251:	75 bf                	jne    c0109212 <phi_take_forks_condvar+0x2e>
        cprintf("phi_take_forks_condvar: %d didn’t get fork and will wait\n", i);
        cond_wait(&mtp->cv[i]);
    }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c0109253:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109258:	8b 40 18             	mov    0x18(%eax),%eax
c010925b:	85 c0                	test   %eax,%eax
c010925d:	7e 12                	jle    c0109271 <phi_take_forks_condvar+0x8d>
         up(&(mtp->next));
c010925f:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109264:	83 c0 0c             	add    $0xc,%eax
c0109267:	89 04 24             	mov    %eax,(%esp)
c010926a:	e8 0b 07 00 00       	call   c010997a <up>
c010926f:	eb 0d                	jmp    c010927e <phi_take_forks_condvar+0x9a>
      else
         up(&(mtp->mutex));
c0109271:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109276:	89 04 24             	mov    %eax,(%esp)
c0109279:	e8 fc 06 00 00       	call   c010997a <up>
}
c010927e:	c9                   	leave  
c010927f:	c3                   	ret    

c0109280 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c0109280:	55                   	push   %ebp
c0109281:	89 e5                	mov    %esp,%ebp
c0109283:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c0109286:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010928b:	89 04 24             	mov    %eax,(%esp)
c010928e:	e8 02 07 00 00       	call   c0109995 <down>

//--------into routine in monitor--------------
     // LAB7 EXERCISE1: 2012012017
     // I ate over
     // test left and right neighbors
    state_condvar[i] = THINKING;
c0109293:	8b 45 08             	mov    0x8(%ebp),%eax
c0109296:	c7 04 85 80 31 15 c0 	movl   $0x0,-0x3feace80(,%eax,4)
c010929d:	00 00 00 00 
    phi_test_condvar(LEFT);
c01092a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01092a4:	8d 48 04             	lea    0x4(%eax),%ecx
c01092a7:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01092ac:	89 c8                	mov    %ecx,%eax
c01092ae:	f7 ea                	imul   %edx
c01092b0:	d1 fa                	sar    %edx
c01092b2:	89 c8                	mov    %ecx,%eax
c01092b4:	c1 f8 1f             	sar    $0x1f,%eax
c01092b7:	29 c2                	sub    %eax,%edx
c01092b9:	89 d0                	mov    %edx,%eax
c01092bb:	c1 e0 02             	shl    $0x2,%eax
c01092be:	01 d0                	add    %edx,%eax
c01092c0:	29 c1                	sub    %eax,%ecx
c01092c2:	89 ca                	mov    %ecx,%edx
c01092c4:	89 14 24             	mov    %edx,(%esp)
c01092c7:	e8 48 fe ff ff       	call   c0109114 <phi_test_condvar>
    phi_test_condvar(RIGHT);
c01092cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01092cf:	8d 48 01             	lea    0x1(%eax),%ecx
c01092d2:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01092d7:	89 c8                	mov    %ecx,%eax
c01092d9:	f7 ea                	imul   %edx
c01092db:	d1 fa                	sar    %edx
c01092dd:	89 c8                	mov    %ecx,%eax
c01092df:	c1 f8 1f             	sar    $0x1f,%eax
c01092e2:	29 c2                	sub    %eax,%edx
c01092e4:	89 d0                	mov    %edx,%eax
c01092e6:	c1 e0 02             	shl    $0x2,%eax
c01092e9:	01 d0                	add    %edx,%eax
c01092eb:	29 c1                	sub    %eax,%ecx
c01092ed:	89 ca                	mov    %ecx,%edx
c01092ef:	89 14 24             	mov    %edx,(%esp)
c01092f2:	e8 1d fe ff ff       	call   c0109114 <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c01092f7:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01092fc:	8b 40 18             	mov    0x18(%eax),%eax
c01092ff:	85 c0                	test   %eax,%eax
c0109301:	7e 12                	jle    c0109315 <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c0109303:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109308:	83 c0 0c             	add    $0xc,%eax
c010930b:	89 04 24             	mov    %eax,(%esp)
c010930e:	e8 67 06 00 00       	call   c010997a <up>
c0109313:	eb 0d                	jmp    c0109322 <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c0109315:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010931a:	89 04 24             	mov    %eax,(%esp)
c010931d:	e8 58 06 00 00       	call   c010997a <up>
}
c0109322:	c9                   	leave  
c0109323:	c3                   	ret    

c0109324 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c0109324:	55                   	push   %ebp
c0109325:	89 e5                	mov    %esp,%ebp
c0109327:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c010932a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0109331:	8b 45 08             	mov    0x8(%ebp),%eax
c0109334:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c0109337:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010933a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010933e:	c7 04 24 58 70 11 c0 	movl   $0xc0117058,(%esp)
c0109345:	e8 1b 70 ff ff       	call   c0100365 <cprintf>
    while(iter++<TIMES)
c010934a:	eb 62                	jmp    c01093ae <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c010934c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010934f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109353:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109356:	89 44 24 04          	mov    %eax,0x4(%esp)
c010935a:	c7 04 24 78 70 11 c0 	movl   $0xc0117078,(%esp)
c0109361:	e8 ff 6f ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c0109366:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010936d:	e8 e7 47 00 00       	call   c010db59 <do_sleep>
        phi_take_forks_condvar(i); 
c0109372:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109375:	89 04 24             	mov    %eax,(%esp)
c0109378:	e8 67 fe ff ff       	call   c01091e4 <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c010937d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109380:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109384:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109387:	89 44 24 04          	mov    %eax,0x4(%esp)
c010938b:	c7 04 24 a8 70 11 c0 	movl   $0xc01170a8,(%esp)
c0109392:	e8 ce 6f ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c0109397:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010939e:	e8 b6 47 00 00       	call   c010db59 <do_sleep>
        phi_put_forks_condvar(i); 
c01093a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093a6:	89 04 24             	mov    %eax,(%esp)
c01093a9:	e8 d2 fe ff ff       	call   c0109280 <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c01093ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093b1:	8d 50 01             	lea    0x1(%eax),%edx
c01093b4:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01093b7:	83 f8 03             	cmp    $0x3,%eax
c01093ba:	7e 90                	jle    c010934c <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c01093bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01093c3:	c7 04 24 d8 70 11 c0 	movl   $0xc01170d8,(%esp)
c01093ca:	e8 96 6f ff ff       	call   c0100365 <cprintf>
    return 0;    
c01093cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01093d4:	c9                   	leave  
c01093d5:	c3                   	ret    

c01093d6 <check_sync>:

void check_sync(void){
c01093d6:	55                   	push   %ebp
c01093d7:	89 e5                	mov    %esp,%ebp
c01093d9:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c01093dc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01093e3:	00 
c01093e4:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c01093eb:	e8 17 04 00 00       	call   c0109807 <sem_init>
    for(i=0;i<N;i++){
c01093f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01093f7:	e9 94 00 00 00       	jmp    c0109490 <check_sync+0xba>
        sem_init(&s[i], 0);
c01093fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01093ff:	89 d0                	mov    %edx,%eax
c0109401:	01 c0                	add    %eax,%eax
c0109403:	01 d0                	add    %edx,%eax
c0109405:	c1 e0 02             	shl    $0x2,%eax
c0109408:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c010940d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109414:	00 
c0109415:	89 04 24             	mov    %eax,(%esp)
c0109418:	e8 ea 03 00 00       	call   c0109807 <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c010941d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109420:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109427:	00 
c0109428:	89 44 24 04          	mov    %eax,0x4(%esp)
c010942c:	c7 04 24 62 90 10 c0 	movl   $0xc0109062,(%esp)
c0109433:	e8 ba 2c 00 00       	call   c010c0f2 <kernel_thread>
c0109438:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c010943b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010943f:	7f 1c                	jg     c010945d <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c0109441:	c7 44 24 08 f8 70 11 	movl   $0xc01170f8,0x8(%esp)
c0109448:	c0 
c0109449:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0109450:	00 
c0109451:	c7 04 24 2a 71 11 c0 	movl   $0xc011712a,(%esp)
c0109458:	e8 6b 7a ff ff       	call   c0100ec8 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c010945d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109460:	89 04 24             	mov    %eax,(%esp)
c0109463:	e8 16 2c 00 00       	call   c010c07e <find_proc>
c0109468:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010946b:	89 04 95 94 31 15 c0 	mov    %eax,-0x3feace6c(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c0109472:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109475:	8b 04 85 94 31 15 c0 	mov    -0x3feace6c(,%eax,4),%eax
c010947c:	c7 44 24 04 41 71 11 	movl   $0xc0117141,0x4(%esp)
c0109483:	c0 
c0109484:	89 04 24             	mov    %eax,(%esp)
c0109487:	e8 d9 27 00 00       	call   c010bc65 <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c010948c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109490:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109494:	0f 8e 62 ff ff ff    	jle    c01093fc <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c010949a:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01094a1:	00 
c01094a2:	c7 04 24 60 31 15 c0 	movl   $0xc0153160,(%esp)
c01094a9:	e8 99 00 00 00       	call   c0109547 <monitor_init>
    for(i=0;i<N;i++){
c01094ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01094b5:	e9 81 00 00 00       	jmp    c010953b <check_sync+0x165>
        state_condvar[i]=THINKING;
c01094ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094bd:	c7 04 85 80 31 15 c0 	movl   $0x0,-0x3feace80(,%eax,4)
c01094c4:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c01094c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094cb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01094d2:	00 
c01094d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01094d7:	c7 04 24 24 93 10 c0 	movl   $0xc0109324,(%esp)
c01094de:	e8 0f 2c 00 00       	call   c010c0f2 <kernel_thread>
c01094e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c01094e6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01094ea:	7f 1c                	jg     c0109508 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c01094ec:	c7 44 24 08 58 71 11 	movl   $0xc0117158,0x8(%esp)
c01094f3:	c0 
c01094f4:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c01094fb:	00 
c01094fc:	c7 04 24 2a 71 11 c0 	movl   $0xc011712a,(%esp)
c0109503:	e8 c0 79 ff ff       	call   c0100ec8 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0109508:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010950b:	89 04 24             	mov    %eax,(%esp)
c010950e:	e8 6b 2b 00 00       	call   c010c07e <find_proc>
c0109513:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109516:	89 04 95 34 31 15 c0 	mov    %eax,-0x3feacecc(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c010951d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109520:	8b 04 85 34 31 15 c0 	mov    -0x3feacecc(,%eax,4),%eax
c0109527:	c7 44 24 04 88 71 11 	movl   $0xc0117188,0x4(%esp)
c010952e:	c0 
c010952f:	89 04 24             	mov    %eax,(%esp)
c0109532:	e8 2e 27 00 00       	call   c010bc65 <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c0109537:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010953b:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c010953f:	0f 8e 75 ff ff ff    	jle    c01094ba <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c0109545:	c9                   	leave  
c0109546:	c3                   	ret    

c0109547 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c0109547:	55                   	push   %ebp
c0109548:	89 e5                	mov    %esp,%ebp
c010954a:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c010954d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109551:	75 24                	jne    c0109577 <monitor_init+0x30>
c0109553:	c7 44 24 0c a4 71 11 	movl   $0xc01171a4,0xc(%esp)
c010955a:	c0 
c010955b:	c7 44 24 08 ad 71 11 	movl   $0xc01171ad,0x8(%esp)
c0109562:	c0 
c0109563:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c010956a:	00 
c010956b:	c7 04 24 c2 71 11 c0 	movl   $0xc01171c2,(%esp)
c0109572:	e8 51 79 ff ff       	call   c0100ec8 <__panic>
    mtp->next_count = 0;
c0109577:	8b 45 08             	mov    0x8(%ebp),%eax
c010957a:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c0109581:	8b 45 08             	mov    0x8(%ebp),%eax
c0109584:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c010958b:	8b 45 08             	mov    0x8(%ebp),%eax
c010958e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109595:	00 
c0109596:	89 04 24             	mov    %eax,(%esp)
c0109599:	e8 69 02 00 00       	call   c0109807 <sem_init>
    sem_init(&(mtp->next), 0);
c010959e:	8b 45 08             	mov    0x8(%ebp),%eax
c01095a1:	83 c0 0c             	add    $0xc,%eax
c01095a4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01095ab:	00 
c01095ac:	89 04 24             	mov    %eax,(%esp)
c01095af:	e8 53 02 00 00       	call   c0109807 <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c01095b4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01095b7:	89 d0                	mov    %edx,%eax
c01095b9:	c1 e0 02             	shl    $0x2,%eax
c01095bc:	01 d0                	add    %edx,%eax
c01095be:	c1 e0 02             	shl    $0x2,%eax
c01095c1:	89 04 24             	mov    %eax,(%esp)
c01095c4:	e8 95 b4 ff ff       	call   c0104a5e <kmalloc>
c01095c9:	8b 55 08             	mov    0x8(%ebp),%edx
c01095cc:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c01095cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01095d2:	8b 40 1c             	mov    0x1c(%eax),%eax
c01095d5:	85 c0                	test   %eax,%eax
c01095d7:	75 24                	jne    c01095fd <monitor_init+0xb6>
c01095d9:	c7 44 24 0c d6 71 11 	movl   $0xc01171d6,0xc(%esp)
c01095e0:	c0 
c01095e1:	c7 44 24 08 ad 71 11 	movl   $0xc01171ad,0x8(%esp)
c01095e8:	c0 
c01095e9:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c01095f0:	00 
c01095f1:	c7 04 24 c2 71 11 c0 	movl   $0xc01171c2,(%esp)
c01095f8:	e8 cb 78 ff ff       	call   c0100ec8 <__panic>
    for(i=0; i<num_cv; i++){
c01095fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109604:	eb 61                	jmp    c0109667 <monitor_init+0x120>
        mtp->cv[i].count=0;
c0109606:	8b 45 08             	mov    0x8(%ebp),%eax
c0109609:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010960c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010960f:	89 d0                	mov    %edx,%eax
c0109611:	c1 e0 02             	shl    $0x2,%eax
c0109614:	01 d0                	add    %edx,%eax
c0109616:	c1 e0 02             	shl    $0x2,%eax
c0109619:	01 c8                	add    %ecx,%eax
c010961b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c0109622:	8b 45 08             	mov    0x8(%ebp),%eax
c0109625:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109628:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010962b:	89 d0                	mov    %edx,%eax
c010962d:	c1 e0 02             	shl    $0x2,%eax
c0109630:	01 d0                	add    %edx,%eax
c0109632:	c1 e0 02             	shl    $0x2,%eax
c0109635:	01 c8                	add    %ecx,%eax
c0109637:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010963e:	00 
c010963f:	89 04 24             	mov    %eax,(%esp)
c0109642:	e8 c0 01 00 00       	call   c0109807 <sem_init>
        mtp->cv[i].owner=mtp;
c0109647:	8b 45 08             	mov    0x8(%ebp),%eax
c010964a:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010964d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109650:	89 d0                	mov    %edx,%eax
c0109652:	c1 e0 02             	shl    $0x2,%eax
c0109655:	01 d0                	add    %edx,%eax
c0109657:	c1 e0 02             	shl    $0x2,%eax
c010965a:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010965d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109660:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c0109663:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109667:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010966a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010966d:	72 97                	jb     c0109606 <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c010966f:	c9                   	leave  
c0109670:	c3                   	ret    

c0109671 <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c0109671:	55                   	push   %ebp
c0109672:	89 e5                	mov    %esp,%ebp
c0109674:	83 ec 28             	sub    $0x28,%esp
   //LAB7 EXERCISE1: 2012012017
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c0109677:	8b 45 08             	mov    0x8(%ebp),%eax
c010967a:	8b 40 10             	mov    0x10(%eax),%eax
c010967d:	8b 50 18             	mov    0x18(%eax),%edx
c0109680:	8b 45 08             	mov    0x8(%ebp),%eax
c0109683:	8b 40 0c             	mov    0xc(%eax),%eax
c0109686:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010968a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010968e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109691:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109695:	c7 04 24 e4 71 11 c0 	movl   $0xc01171e4,(%esp)
c010969c:	e8 c4 6c ff ff       	call   c0100365 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
   monitor_t *mtp = cvp->owner;
c01096a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01096a4:	8b 40 10             	mov    0x10(%eax),%eax
c01096a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
   if (cvp->count > 0) {
c01096aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01096ad:	8b 40 0c             	mov    0xc(%eax),%eax
c01096b0:	85 c0                	test   %eax,%eax
c01096b2:	7e 37                	jle    c01096eb <cond_signal+0x7a>
      mtp->next_count++;
c01096b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096b7:	8b 40 18             	mov    0x18(%eax),%eax
c01096ba:	8d 50 01             	lea    0x1(%eax),%edx
c01096bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096c0:	89 50 18             	mov    %edx,0x18(%eax)
      up(&cvp->sem);
c01096c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01096c6:	89 04 24             	mov    %eax,(%esp)
c01096c9:	e8 ac 02 00 00       	call   c010997a <up>
      down(&mtp->next);
c01096ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096d1:	83 c0 0c             	add    $0xc,%eax
c01096d4:	89 04 24             	mov    %eax,(%esp)
c01096d7:	e8 b9 02 00 00       	call   c0109995 <down>
      mtp->next_count--;
c01096dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096df:	8b 40 18             	mov    0x18(%eax),%eax
c01096e2:	8d 50 ff             	lea    -0x1(%eax),%edx
c01096e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096e8:	89 50 18             	mov    %edx,0x18(%eax)
   }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01096eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01096ee:	8b 40 10             	mov    0x10(%eax),%eax
c01096f1:	8b 50 18             	mov    0x18(%eax),%edx
c01096f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01096f7:	8b 40 0c             	mov    0xc(%eax),%eax
c01096fa:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01096fe:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109702:	8b 45 08             	mov    0x8(%ebp),%eax
c0109705:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109709:	c7 04 24 2c 72 11 c0 	movl   $0xc011722c,(%esp)
c0109710:	e8 50 6c ff ff       	call   c0100365 <cprintf>
}
c0109715:	c9                   	leave  
c0109716:	c3                   	ret    

c0109717 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109717:	55                   	push   %ebp
c0109718:	89 e5                	mov    %esp,%ebp
c010971a:	83 ec 28             	sub    $0x28,%esp
    //LAB7 EXERCISE1: 2012012017
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010971d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109720:	8b 40 10             	mov    0x10(%eax),%eax
c0109723:	8b 50 18             	mov    0x18(%eax),%edx
c0109726:	8b 45 08             	mov    0x8(%ebp),%eax
c0109729:	8b 40 0c             	mov    0xc(%eax),%eax
c010972c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109730:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109734:	8b 45 08             	mov    0x8(%ebp),%eax
c0109737:	89 44 24 04          	mov    %eax,0x4(%esp)
c010973b:	c7 04 24 70 72 11 c0 	movl   $0xc0117270,(%esp)
c0109742:	e8 1e 6c ff ff       	call   c0100365 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
    monitor_t *mtp = cvp->owner;
c0109747:	8b 45 08             	mov    0x8(%ebp),%eax
c010974a:	8b 40 10             	mov    0x10(%eax),%eax
c010974d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cvp->count++;
c0109750:	8b 45 08             	mov    0x8(%ebp),%eax
c0109753:	8b 40 0c             	mov    0xc(%eax),%eax
c0109756:	8d 50 01             	lea    0x1(%eax),%edx
c0109759:	8b 45 08             	mov    0x8(%ebp),%eax
c010975c:	89 50 0c             	mov    %edx,0xc(%eax)
    if (mtp->next_count > 0)
c010975f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109762:	8b 40 18             	mov    0x18(%eax),%eax
c0109765:	85 c0                	test   %eax,%eax
c0109767:	7e 10                	jle    c0109779 <cond_wait+0x62>
        up(&mtp->next);
c0109769:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010976c:	83 c0 0c             	add    $0xc,%eax
c010976f:	89 04 24             	mov    %eax,(%esp)
c0109772:	e8 03 02 00 00       	call   c010997a <up>
c0109777:	eb 0b                	jmp    c0109784 <cond_wait+0x6d>
    else
        up(&mtp->mutex);
c0109779:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010977c:	89 04 24             	mov    %eax,(%esp)
c010977f:	e8 f6 01 00 00       	call   c010997a <up>
    down(&cvp->sem);
c0109784:	8b 45 08             	mov    0x8(%ebp),%eax
c0109787:	89 04 24             	mov    %eax,(%esp)
c010978a:	e8 06 02 00 00       	call   c0109995 <down>
    cvp->count--;
c010978f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109792:	8b 40 0c             	mov    0xc(%eax),%eax
c0109795:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109798:	8b 45 08             	mov    0x8(%ebp),%eax
c010979b:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010979e:	8b 45 08             	mov    0x8(%ebp),%eax
c01097a1:	8b 40 10             	mov    0x10(%eax),%eax
c01097a4:	8b 50 18             	mov    0x18(%eax),%edx
c01097a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01097aa:	8b 40 0c             	mov    0xc(%eax),%eax
c01097ad:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01097b1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01097b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01097b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097bc:	c7 04 24 b4 72 11 c0 	movl   $0xc01172b4,(%esp)
c01097c3:	e8 9d 6b ff ff       	call   c0100365 <cprintf>
}
c01097c8:	c9                   	leave  
c01097c9:	c3                   	ret    

c01097ca <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01097ca:	55                   	push   %ebp
c01097cb:	89 e5                	mov    %esp,%ebp
c01097cd:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01097d0:	9c                   	pushf  
c01097d1:	58                   	pop    %eax
c01097d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01097d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01097d8:	25 00 02 00 00       	and    $0x200,%eax
c01097dd:	85 c0                	test   %eax,%eax
c01097df:	74 0c                	je     c01097ed <__intr_save+0x23>
        intr_disable();
c01097e1:	e8 44 89 ff ff       	call   c010212a <intr_disable>
        return 1;
c01097e6:	b8 01 00 00 00       	mov    $0x1,%eax
c01097eb:	eb 05                	jmp    c01097f2 <__intr_save+0x28>
    }
    return 0;
c01097ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01097f2:	c9                   	leave  
c01097f3:	c3                   	ret    

c01097f4 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01097f4:	55                   	push   %ebp
c01097f5:	89 e5                	mov    %esp,%ebp
c01097f7:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01097fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01097fe:	74 05                	je     c0109805 <__intr_restore+0x11>
        intr_enable();
c0109800:	e8 1f 89 ff ff       	call   c0102124 <intr_enable>
    }
}
c0109805:	c9                   	leave  
c0109806:	c3                   	ret    

c0109807 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109807:	55                   	push   %ebp
c0109808:	89 e5                	mov    %esp,%ebp
c010980a:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c010980d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109810:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109813:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109815:	8b 45 08             	mov    0x8(%ebp),%eax
c0109818:	83 c0 04             	add    $0x4,%eax
c010981b:	89 04 24             	mov    %eax,(%esp)
c010981e:	e8 33 02 00 00       	call   c0109a56 <wait_queue_init>
}
c0109823:	c9                   	leave  
c0109824:	c3                   	ret    

c0109825 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109825:	55                   	push   %ebp
c0109826:	89 e5                	mov    %esp,%ebp
c0109828:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010982b:	e8 9a ff ff ff       	call   c01097ca <__intr_save>
c0109830:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109833:	8b 45 08             	mov    0x8(%ebp),%eax
c0109836:	83 c0 04             	add    $0x4,%eax
c0109839:	89 04 24             	mov    %eax,(%esp)
c010983c:	e8 69 04 00 00       	call   c0109caa <wait_queue_first>
c0109841:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109844:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109848:	75 0f                	jne    c0109859 <__up+0x34>
            sem->value ++;
c010984a:	8b 45 08             	mov    0x8(%ebp),%eax
c010984d:	8b 00                	mov    (%eax),%eax
c010984f:	8d 50 01             	lea    0x1(%eax),%edx
c0109852:	8b 45 08             	mov    0x8(%ebp),%eax
c0109855:	89 10                	mov    %edx,(%eax)
c0109857:	eb 58                	jmp    c01098b1 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109859:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010985c:	8b 00                	mov    (%eax),%eax
c010985e:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109864:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109867:	74 24                	je     c010988d <__up+0x68>
c0109869:	c7 44 24 0c f8 72 11 	movl   $0xc01172f8,0xc(%esp)
c0109870:	c0 
c0109871:	c7 44 24 08 1d 73 11 	movl   $0xc011731d,0x8(%esp)
c0109878:	c0 
c0109879:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109880:	00 
c0109881:	c7 04 24 32 73 11 c0 	movl   $0xc0117332,(%esp)
c0109888:	e8 3b 76 ff ff       	call   c0100ec8 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c010988d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109890:	8d 50 04             	lea    0x4(%eax),%edx
c0109893:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010989a:	00 
c010989b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010989e:	89 44 24 08          	mov    %eax,0x8(%esp)
c01098a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01098a5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01098a9:	89 14 24             	mov    %edx,(%esp)
c01098ac:	e8 95 04 00 00       	call   c0109d46 <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c01098b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098b4:	89 04 24             	mov    %eax,(%esp)
c01098b7:	e8 38 ff ff ff       	call   c01097f4 <__intr_restore>
}
c01098bc:	c9                   	leave  
c01098bd:	c3                   	ret    

c01098be <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c01098be:	55                   	push   %ebp
c01098bf:	89 e5                	mov    %esp,%ebp
c01098c1:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01098c4:	e8 01 ff ff ff       	call   c01097ca <__intr_save>
c01098c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c01098cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01098cf:	8b 00                	mov    (%eax),%eax
c01098d1:	85 c0                	test   %eax,%eax
c01098d3:	7e 22                	jle    c01098f7 <__down+0x39>
        sem->value --;
c01098d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01098d8:	8b 00                	mov    (%eax),%eax
c01098da:	8d 50 ff             	lea    -0x1(%eax),%edx
c01098dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01098e0:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c01098e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098e5:	89 04 24             	mov    %eax,(%esp)
c01098e8:	e8 07 ff ff ff       	call   c01097f4 <__intr_restore>
        return 0;
c01098ed:	b8 00 00 00 00       	mov    $0x0,%eax
c01098f2:	e9 81 00 00 00       	jmp    c0109978 <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c01098f7:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01098fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c01098fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109900:	8d 50 04             	lea    0x4(%eax),%edx
c0109903:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109906:	89 44 24 08          	mov    %eax,0x8(%esp)
c010990a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010990d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109911:	89 14 24             	mov    %edx,(%esp)
c0109914:	e8 34 05 00 00       	call   c0109e4d <wait_current_set>
    local_intr_restore(intr_flag);
c0109919:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010991c:	89 04 24             	mov    %eax,(%esp)
c010991f:	e8 d0 fe ff ff       	call   c01097f4 <__intr_restore>

    schedule();
c0109924:	e8 ef 47 00 00       	call   c010e118 <schedule>

    local_intr_save(intr_flag);
c0109929:	e8 9c fe ff ff       	call   c01097ca <__intr_save>
c010992e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109931:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109934:	89 04 24             	mov    %eax,(%esp)
c0109937:	e8 e2 03 00 00       	call   c0109d1e <wait_in_queue>
c010993c:	85 c0                	test   %eax,%eax
c010993e:	74 15                	je     c0109955 <__down+0x97>
c0109940:	8b 45 08             	mov    0x8(%ebp),%eax
c0109943:	8d 50 04             	lea    0x4(%eax),%edx
c0109946:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109949:	89 44 24 04          	mov    %eax,0x4(%esp)
c010994d:	89 14 24             	mov    %edx,(%esp)
c0109950:	e8 c4 01 00 00       	call   c0109b19 <wait_queue_del>
    local_intr_restore(intr_flag);
c0109955:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109958:	89 04 24             	mov    %eax,(%esp)
c010995b:	e8 94 fe ff ff       	call   c01097f4 <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109960:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109963:	8b 40 04             	mov    0x4(%eax),%eax
c0109966:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109969:	74 08                	je     c0109973 <__down+0xb5>
        return wait->wakeup_flags;
c010996b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010996e:	8b 40 04             	mov    0x4(%eax),%eax
c0109971:	eb 05                	jmp    c0109978 <__down+0xba>
    }
    return 0;
c0109973:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109978:	c9                   	leave  
c0109979:	c3                   	ret    

c010997a <up>:

void
up(semaphore_t *sem) {
c010997a:	55                   	push   %ebp
c010997b:	89 e5                	mov    %esp,%ebp
c010997d:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109980:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109987:	00 
c0109988:	8b 45 08             	mov    0x8(%ebp),%eax
c010998b:	89 04 24             	mov    %eax,(%esp)
c010998e:	e8 92 fe ff ff       	call   c0109825 <__up>
}
c0109993:	c9                   	leave  
c0109994:	c3                   	ret    

c0109995 <down>:

void
down(semaphore_t *sem) {
c0109995:	55                   	push   %ebp
c0109996:	89 e5                	mov    %esp,%ebp
c0109998:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c010999b:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c01099a2:	00 
c01099a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01099a6:	89 04 24             	mov    %eax,(%esp)
c01099a9:	e8 10 ff ff ff       	call   c01098be <__down>
c01099ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c01099b1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01099b5:	74 24                	je     c01099db <down+0x46>
c01099b7:	c7 44 24 0c 42 73 11 	movl   $0xc0117342,0xc(%esp)
c01099be:	c0 
c01099bf:	c7 44 24 08 1d 73 11 	movl   $0xc011731d,0x8(%esp)
c01099c6:	c0 
c01099c7:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c01099ce:	00 
c01099cf:	c7 04 24 32 73 11 c0 	movl   $0xc0117332,(%esp)
c01099d6:	e8 ed 74 ff ff       	call   c0100ec8 <__panic>
}
c01099db:	c9                   	leave  
c01099dc:	c3                   	ret    

c01099dd <try_down>:

bool
try_down(semaphore_t *sem) {
c01099dd:	55                   	push   %ebp
c01099de:	89 e5                	mov    %esp,%ebp
c01099e0:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c01099e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c01099ea:	e8 db fd ff ff       	call   c01097ca <__intr_save>
c01099ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c01099f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01099f5:	8b 00                	mov    (%eax),%eax
c01099f7:	85 c0                	test   %eax,%eax
c01099f9:	7e 14                	jle    c0109a0f <try_down+0x32>
        sem->value --, ret = 1;
c01099fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01099fe:	8b 00                	mov    (%eax),%eax
c0109a00:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109a03:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a06:	89 10                	mov    %edx,(%eax)
c0109a08:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109a0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a12:	89 04 24             	mov    %eax,(%esp)
c0109a15:	e8 da fd ff ff       	call   c01097f4 <__intr_restore>
    return ret;
c0109a1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109a1d:	c9                   	leave  
c0109a1e:	c3                   	ret    

c0109a1f <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109a1f:	55                   	push   %ebp
c0109a20:	89 e5                	mov    %esp,%ebp
c0109a22:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109a25:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a28:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109a2b:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109a2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a30:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109a37:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a3a:	83 c0 0c             	add    $0xc,%eax
c0109a3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109a40:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a43:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109a46:	89 50 04             	mov    %edx,0x4(%eax)
c0109a49:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a4c:	8b 50 04             	mov    0x4(%eax),%edx
c0109a4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a52:	89 10                	mov    %edx,(%eax)
}
c0109a54:	c9                   	leave  
c0109a55:	c3                   	ret    

c0109a56 <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109a56:	55                   	push   %ebp
c0109a57:	89 e5                	mov    %esp,%ebp
c0109a59:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109a5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a5f:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109a62:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a65:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109a68:	89 50 04             	mov    %edx,0x4(%eax)
c0109a6b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a6e:	8b 50 04             	mov    0x4(%eax),%edx
c0109a71:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a74:	89 10                	mov    %edx,(%eax)
}
c0109a76:	c9                   	leave  
c0109a77:	c3                   	ret    

c0109a78 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109a78:	55                   	push   %ebp
c0109a79:	89 e5                	mov    %esp,%ebp
c0109a7b:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109a7e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a81:	83 c0 0c             	add    $0xc,%eax
c0109a84:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a8a:	8b 40 04             	mov    0x4(%eax),%eax
c0109a8d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109a90:	0f 94 c0             	sete   %al
c0109a93:	0f b6 c0             	movzbl %al,%eax
c0109a96:	85 c0                	test   %eax,%eax
c0109a98:	74 09                	je     c0109aa3 <wait_queue_add+0x2b>
c0109a9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a9d:	8b 00                	mov    (%eax),%eax
c0109a9f:	85 c0                	test   %eax,%eax
c0109aa1:	75 24                	jne    c0109ac7 <wait_queue_add+0x4f>
c0109aa3:	c7 44 24 0c 50 73 11 	movl   $0xc0117350,0xc(%esp)
c0109aaa:	c0 
c0109aab:	c7 44 24 08 85 73 11 	movl   $0xc0117385,0x8(%esp)
c0109ab2:	c0 
c0109ab3:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109aba:	00 
c0109abb:	c7 04 24 9a 73 11 c0 	movl   $0xc011739a,(%esp)
c0109ac2:	e8 01 74 ff ff       	call   c0100ec8 <__panic>
    wait->wait_queue = queue;
c0109ac7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109aca:	8b 55 08             	mov    0x8(%ebp),%edx
c0109acd:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109ad0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ad3:	8d 50 0c             	lea    0xc(%eax),%edx
c0109ad6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ad9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109adc:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109adf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ae2:	8b 00                	mov    (%eax),%eax
c0109ae4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109ae7:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109aea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109aed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109af0:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109af3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109af6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109af9:	89 10                	mov    %edx,(%eax)
c0109afb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109afe:	8b 10                	mov    (%eax),%edx
c0109b00:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109b03:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109b06:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b09:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109b0c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109b0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b12:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109b15:	89 10                	mov    %edx,(%eax)
}
c0109b17:	c9                   	leave  
c0109b18:	c3                   	ret    

c0109b19 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109b19:	55                   	push   %ebp
c0109b1a:	89 e5                	mov    %esp,%ebp
c0109b1c:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109b1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b22:	83 c0 0c             	add    $0xc,%eax
c0109b25:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109b28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b2b:	8b 40 04             	mov    0x4(%eax),%eax
c0109b2e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109b31:	0f 94 c0             	sete   %al
c0109b34:	0f b6 c0             	movzbl %al,%eax
c0109b37:	85 c0                	test   %eax,%eax
c0109b39:	75 0b                	jne    c0109b46 <wait_queue_del+0x2d>
c0109b3b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b3e:	8b 40 08             	mov    0x8(%eax),%eax
c0109b41:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109b44:	74 24                	je     c0109b6a <wait_queue_del+0x51>
c0109b46:	c7 44 24 0c ac 73 11 	movl   $0xc01173ac,0xc(%esp)
c0109b4d:	c0 
c0109b4e:	c7 44 24 08 85 73 11 	movl   $0xc0117385,0x8(%esp)
c0109b55:	c0 
c0109b56:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0109b5d:	00 
c0109b5e:	c7 04 24 9a 73 11 c0 	movl   $0xc011739a,(%esp)
c0109b65:	e8 5e 73 ff ff       	call   c0100ec8 <__panic>
    list_del_init(&(wait->wait_link));
c0109b6a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b6d:	83 c0 0c             	add    $0xc,%eax
c0109b70:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b76:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109b79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b7c:	8b 40 04             	mov    0x4(%eax),%eax
c0109b7f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109b82:	8b 12                	mov    (%edx),%edx
c0109b84:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109b87:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109b8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b8d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109b90:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109b93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109b96:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109b99:	89 10                	mov    %edx,(%eax)
c0109b9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b9e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109ba1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109ba4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109ba7:	89 50 04             	mov    %edx,0x4(%eax)
c0109baa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109bad:	8b 50 04             	mov    0x4(%eax),%edx
c0109bb0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109bb3:	89 10                	mov    %edx,(%eax)
}
c0109bb5:	c9                   	leave  
c0109bb6:	c3                   	ret    

c0109bb7 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109bb7:	55                   	push   %ebp
c0109bb8:	89 e5                	mov    %esp,%ebp
c0109bba:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109bbd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bc0:	83 c0 0c             	add    $0xc,%eax
c0109bc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109bc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bc9:	8b 40 04             	mov    0x4(%eax),%eax
c0109bcc:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109bcf:	0f 94 c0             	sete   %al
c0109bd2:	0f b6 c0             	movzbl %al,%eax
c0109bd5:	85 c0                	test   %eax,%eax
c0109bd7:	75 0b                	jne    c0109be4 <wait_queue_next+0x2d>
c0109bd9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bdc:	8b 40 08             	mov    0x8(%eax),%eax
c0109bdf:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109be2:	74 24                	je     c0109c08 <wait_queue_next+0x51>
c0109be4:	c7 44 24 0c ac 73 11 	movl   $0xc01173ac,0xc(%esp)
c0109beb:	c0 
c0109bec:	c7 44 24 08 85 73 11 	movl   $0xc0117385,0x8(%esp)
c0109bf3:	c0 
c0109bf4:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0109bfb:	00 
c0109bfc:	c7 04 24 9a 73 11 c0 	movl   $0xc011739a,(%esp)
c0109c03:	e8 c0 72 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109c08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c0b:	83 c0 0c             	add    $0xc,%eax
c0109c0e:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109c11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c14:	8b 40 04             	mov    0x4(%eax),%eax
c0109c17:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109c1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c1d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109c20:	74 08                	je     c0109c2a <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0109c22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c25:	83 e8 0c             	sub    $0xc,%eax
c0109c28:	eb 05                	jmp    c0109c2f <wait_queue_next+0x78>
    }
    return NULL;
c0109c2a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109c2f:	c9                   	leave  
c0109c30:	c3                   	ret    

c0109c31 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109c31:	55                   	push   %ebp
c0109c32:	89 e5                	mov    %esp,%ebp
c0109c34:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109c37:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c3a:	83 c0 0c             	add    $0xc,%eax
c0109c3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109c40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c43:	8b 40 04             	mov    0x4(%eax),%eax
c0109c46:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109c49:	0f 94 c0             	sete   %al
c0109c4c:	0f b6 c0             	movzbl %al,%eax
c0109c4f:	85 c0                	test   %eax,%eax
c0109c51:	75 0b                	jne    c0109c5e <wait_queue_prev+0x2d>
c0109c53:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c56:	8b 40 08             	mov    0x8(%eax),%eax
c0109c59:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109c5c:	74 24                	je     c0109c82 <wait_queue_prev+0x51>
c0109c5e:	c7 44 24 0c ac 73 11 	movl   $0xc01173ac,0xc(%esp)
c0109c65:	c0 
c0109c66:	c7 44 24 08 85 73 11 	movl   $0xc0117385,0x8(%esp)
c0109c6d:	c0 
c0109c6e:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0109c75:	00 
c0109c76:	c7 04 24 9a 73 11 c0 	movl   $0xc011739a,(%esp)
c0109c7d:	e8 46 72 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0109c82:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c85:	83 c0 0c             	add    $0xc,%eax
c0109c88:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109c8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c8e:	8b 00                	mov    (%eax),%eax
c0109c90:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109c93:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c96:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109c99:	74 08                	je     c0109ca3 <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c0109c9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c9e:	83 e8 0c             	sub    $0xc,%eax
c0109ca1:	eb 05                	jmp    c0109ca8 <wait_queue_prev+0x77>
    }
    return NULL;
c0109ca3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109ca8:	c9                   	leave  
c0109ca9:	c3                   	ret    

c0109caa <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c0109caa:	55                   	push   %ebp
c0109cab:	89 e5                	mov    %esp,%ebp
c0109cad:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109cb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cb3:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109cb6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109cb9:	8b 40 04             	mov    0x4(%eax),%eax
c0109cbc:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109cbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cc2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109cc5:	74 08                	je     c0109ccf <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0109cc7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109cca:	83 e8 0c             	sub    $0xc,%eax
c0109ccd:	eb 05                	jmp    c0109cd4 <wait_queue_first+0x2a>
    }
    return NULL;
c0109ccf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109cd4:	c9                   	leave  
c0109cd5:	c3                   	ret    

c0109cd6 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0109cd6:	55                   	push   %ebp
c0109cd7:	89 e5                	mov    %esp,%ebp
c0109cd9:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c0109cdc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cdf:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109ce2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109ce5:	8b 00                	mov    (%eax),%eax
c0109ce7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109cea:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ced:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109cf0:	74 08                	je     c0109cfa <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c0109cf2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109cf5:	83 e8 0c             	sub    $0xc,%eax
c0109cf8:	eb 05                	jmp    c0109cff <wait_queue_last+0x29>
    }
    return NULL;
c0109cfa:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109cff:	c9                   	leave  
c0109d00:	c3                   	ret    

c0109d01 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c0109d01:	55                   	push   %ebp
c0109d02:	89 e5                	mov    %esp,%ebp
c0109d04:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c0109d07:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d0a:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109d0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d10:	8b 40 04             	mov    0x4(%eax),%eax
c0109d13:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109d16:	0f 94 c0             	sete   %al
c0109d19:	0f b6 c0             	movzbl %al,%eax
}
c0109d1c:	c9                   	leave  
c0109d1d:	c3                   	ret    

c0109d1e <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c0109d1e:	55                   	push   %ebp
c0109d1f:	89 e5                	mov    %esp,%ebp
c0109d21:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c0109d24:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d27:	83 c0 0c             	add    $0xc,%eax
c0109d2a:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109d2d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d30:	8b 40 04             	mov    0x4(%eax),%eax
c0109d33:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109d36:	0f 94 c0             	sete   %al
c0109d39:	0f b6 c0             	movzbl %al,%eax
c0109d3c:	85 c0                	test   %eax,%eax
c0109d3e:	0f 94 c0             	sete   %al
c0109d41:	0f b6 c0             	movzbl %al,%eax
}
c0109d44:	c9                   	leave  
c0109d45:	c3                   	ret    

c0109d46 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c0109d46:	55                   	push   %ebp
c0109d47:	89 e5                	mov    %esp,%ebp
c0109d49:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c0109d4c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109d50:	74 12                	je     c0109d64 <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c0109d52:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d55:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d59:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d5c:	89 04 24             	mov    %eax,(%esp)
c0109d5f:	e8 b5 fd ff ff       	call   c0109b19 <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c0109d64:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d67:	8b 55 10             	mov    0x10(%ebp),%edx
c0109d6a:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c0109d6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d70:	8b 00                	mov    (%eax),%eax
c0109d72:	89 04 24             	mov    %eax,(%esp)
c0109d75:	e8 02 43 00 00       	call   c010e07c <wakeup_proc>
}
c0109d7a:	c9                   	leave  
c0109d7b:	c3                   	ret    

c0109d7c <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109d7c:	55                   	push   %ebp
c0109d7d:	89 e5                	mov    %esp,%ebp
c0109d7f:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109d82:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d85:	89 04 24             	mov    %eax,(%esp)
c0109d88:	e8 1d ff ff ff       	call   c0109caa <wait_queue_first>
c0109d8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109d90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109d94:	74 20                	je     c0109db6 <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c0109d96:	8b 45 10             	mov    0x10(%ebp),%eax
c0109d99:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109d9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109da0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109da4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109da7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109dab:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dae:	89 04 24             	mov    %eax,(%esp)
c0109db1:	e8 90 ff ff ff       	call   c0109d46 <wakeup_wait>
    }
}
c0109db6:	c9                   	leave  
c0109db7:	c3                   	ret    

c0109db8 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109db8:	55                   	push   %ebp
c0109db9:	89 e5                	mov    %esp,%ebp
c0109dbb:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109dbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dc1:	89 04 24             	mov    %eax,(%esp)
c0109dc4:	e8 e1 fe ff ff       	call   c0109caa <wait_queue_first>
c0109dc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109dcc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109dd0:	74 79                	je     c0109e4b <wakeup_queue+0x93>
        if (del) {
c0109dd2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109dd6:	74 37                	je     c0109e0f <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c0109dd8:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109ddf:	00 
c0109de0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109de3:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dea:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109dee:	8b 45 08             	mov    0x8(%ebp),%eax
c0109df1:	89 04 24             	mov    %eax,(%esp)
c0109df4:	e8 4d ff ff ff       	call   c0109d46 <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c0109df9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dfc:	89 04 24             	mov    %eax,(%esp)
c0109dff:	e8 a6 fe ff ff       	call   c0109caa <wait_queue_first>
c0109e04:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109e07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109e0b:	75 cb                	jne    c0109dd8 <wakeup_queue+0x20>
c0109e0d:	eb 3c                	jmp    c0109e4b <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c0109e0f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0109e16:	00 
c0109e17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e1a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109e1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e21:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e25:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e28:	89 04 24             	mov    %eax,(%esp)
c0109e2b:	e8 16 ff ff ff       	call   c0109d46 <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c0109e30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e33:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e37:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e3a:	89 04 24             	mov    %eax,(%esp)
c0109e3d:	e8 75 fd ff ff       	call   c0109bb7 <wait_queue_next>
c0109e42:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109e45:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109e49:	75 c4                	jne    c0109e0f <wakeup_queue+0x57>
        }
    }
}
c0109e4b:	c9                   	leave  
c0109e4c:	c3                   	ret    

c0109e4d <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c0109e4d:	55                   	push   %ebp
c0109e4e:	89 e5                	mov    %esp,%ebp
c0109e50:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c0109e53:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0109e58:	85 c0                	test   %eax,%eax
c0109e5a:	75 24                	jne    c0109e80 <wait_current_set+0x33>
c0109e5c:	c7 44 24 0c e9 73 11 	movl   $0xc01173e9,0xc(%esp)
c0109e63:	c0 
c0109e64:	c7 44 24 08 85 73 11 	movl   $0xc0117385,0x8(%esp)
c0109e6b:	c0 
c0109e6c:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0109e73:	00 
c0109e74:	c7 04 24 9a 73 11 c0 	movl   $0xc011739a,(%esp)
c0109e7b:	e8 48 70 ff ff       	call   c0100ec8 <__panic>
    wait_init(wait, current);
c0109e80:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0109e85:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e89:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e8c:	89 04 24             	mov    %eax,(%esp)
c0109e8f:	e8 8b fb ff ff       	call   c0109a1f <wait_init>
    current->state = PROC_SLEEPING;
c0109e94:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0109e99:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c0109e9f:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0109ea4:	8b 55 10             	mov    0x10(%ebp),%edx
c0109ea7:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c0109ead:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109eb0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109eb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109eb7:	89 04 24             	mov    %eax,(%esp)
c0109eba:	e8 b9 fb ff ff       	call   c0109a78 <wait_queue_add>
}
c0109ebf:	c9                   	leave  
c0109ec0:	c3                   	ret    

c0109ec1 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c0109ec1:	55                   	push   %ebp
c0109ec2:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c0109ec4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ec7:	8b 40 08             	mov    0x8(%eax),%eax
}
c0109eca:	5d                   	pop    %ebp
c0109ecb:	c3                   	ret    

c0109ecc <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
c0109ecc:	55                   	push   %ebp
c0109ecd:	89 e5                	mov    %esp,%ebp
    return file->open_count;
c0109ecf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ed2:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109ed5:	5d                   	pop    %ebp
c0109ed6:	c3                   	ret    

c0109ed7 <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
c0109ed7:	55                   	push   %ebp
c0109ed8:	89 e5                	mov    %esp,%ebp
    file->open_count += 1;
c0109eda:	8b 45 08             	mov    0x8(%ebp),%eax
c0109edd:	8b 40 18             	mov    0x18(%eax),%eax
c0109ee0:	8d 50 01             	lea    0x1(%eax),%edx
c0109ee3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ee6:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c0109ee9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109eec:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109eef:	5d                   	pop    %ebp
c0109ef0:	c3                   	ret    

c0109ef1 <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
c0109ef1:	55                   	push   %ebp
c0109ef2:	89 e5                	mov    %esp,%ebp
    file->open_count -= 1;
c0109ef4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ef7:	8b 40 18             	mov    0x18(%eax),%eax
c0109efa:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109efd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f00:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c0109f03:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f06:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109f09:	5d                   	pop    %ebp
c0109f0a:	c3                   	ret    

c0109f0b <get_fd_array>:

#define testfd(fd)                          ((fd) >= 0 && (fd) < FILES_STRUCT_NENTRY)

// get_fd_array - get current process's open files table
static struct file *
get_fd_array(void) {
c0109f0b:	55                   	push   %ebp
c0109f0c:	89 e5                	mov    %esp,%ebp
c0109f0e:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = current->filesp;
c0109f11:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0109f16:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0109f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(filesp != NULL && files_count(filesp) > 0);
c0109f1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f23:	74 0f                	je     c0109f34 <get_fd_array+0x29>
c0109f25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f28:	89 04 24             	mov    %eax,(%esp)
c0109f2b:	e8 91 ff ff ff       	call   c0109ec1 <files_count>
c0109f30:	85 c0                	test   %eax,%eax
c0109f32:	7f 24                	jg     c0109f58 <get_fd_array+0x4d>
c0109f34:	c7 44 24 0c fc 73 11 	movl   $0xc01173fc,0xc(%esp)
c0109f3b:	c0 
c0109f3c:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c0109f43:	c0 
c0109f44:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c0109f4b:	00 
c0109f4c:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c0109f53:	e8 70 6f ff ff       	call   c0100ec8 <__panic>
    return filesp->fd_array;
c0109f58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f5b:	8b 40 04             	mov    0x4(%eax),%eax
}
c0109f5e:	c9                   	leave  
c0109f5f:	c3                   	ret    

c0109f60 <fd_array_init>:

// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
c0109f60:	55                   	push   %ebp
c0109f61:	89 e5                	mov    %esp,%ebp
c0109f63:	83 ec 10             	sub    $0x10,%esp
    int fd;
    struct file *file = fd_array;
c0109f66:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f69:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c0109f6c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0109f73:	eb 24                	jmp    c0109f99 <fd_array_init+0x39>
        file->open_count = 0;
c0109f75:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109f78:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        file->status = FD_NONE, file->fd = fd;
c0109f7f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109f82:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0109f88:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109f8b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109f8e:	89 50 0c             	mov    %edx,0xc(%eax)
// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
    int fd;
    struct file *file = fd_array;
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c0109f91:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0109f95:	83 45 f8 1c          	addl   $0x1c,-0x8(%ebp)
c0109f99:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f9c:	3d 90 00 00 00       	cmp    $0x90,%eax
c0109fa1:	76 d2                	jbe    c0109f75 <fd_array_init+0x15>
        file->open_count = 0;
        file->status = FD_NONE, file->fd = fd;
    }
}
c0109fa3:	c9                   	leave  
c0109fa4:	c3                   	ret    

c0109fa5 <fd_array_alloc>:

// fs_array_alloc - allocate a free file item (with FD_NONE status) in open files table
static int
fd_array_alloc(int fd, struct file **file_store) {
c0109fa5:	55                   	push   %ebp
c0109fa6:	89 e5                	mov    %esp,%ebp
c0109fa8:	83 ec 28             	sub    $0x28,%esp
//    panic("debug");
    struct file *file = get_fd_array();
c0109fab:	e8 5b ff ff ff       	call   c0109f0b <get_fd_array>
c0109fb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (fd == NO_FD) {
c0109fb3:	81 7d 08 d9 6a ff ff 	cmpl   $0xffff6ad9,0x8(%ebp)
c0109fba:	75 30                	jne    c0109fec <fd_array_alloc+0x47>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c0109fbc:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
c0109fc3:	eb 13                	jmp    c0109fd8 <fd_array_alloc+0x33>
            if (file->status == FD_NONE) {
c0109fc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fc8:	8b 00                	mov    (%eax),%eax
c0109fca:	85 c0                	test   %eax,%eax
c0109fcc:	75 02                	jne    c0109fd0 <fd_array_alloc+0x2b>
                goto found;
c0109fce:	eb 59                	jmp    c010a029 <fd_array_alloc+0x84>
static int
fd_array_alloc(int fd, struct file **file_store) {
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c0109fd0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0109fd4:	83 45 f4 1c          	addl   $0x1c,-0xc(%ebp)
c0109fd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fdb:	3d 90 00 00 00       	cmp    $0x90,%eax
c0109fe0:	76 e3                	jbe    c0109fc5 <fd_array_alloc+0x20>
            if (file->status == FD_NONE) {
                goto found;
            }
        }
        return -E_MAX_OPEN;
c0109fe2:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
c0109fe7:	e9 90 00 00 00       	jmp    c010a07c <fd_array_alloc+0xd7>
    }
    else {
        if (testfd(fd)) {
c0109fec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109ff0:	78 30                	js     c010a022 <fd_array_alloc+0x7d>
c0109ff2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ff5:	3d 90 00 00 00       	cmp    $0x90,%eax
c0109ffa:	77 26                	ja     c010a022 <fd_array_alloc+0x7d>
            file += fd;
c0109ffc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fff:	c1 e0 02             	shl    $0x2,%eax
c010a002:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a009:	29 c2                	sub    %eax,%edx
c010a00b:	89 d0                	mov    %edx,%eax
c010a00d:	01 45 f4             	add    %eax,-0xc(%ebp)
            if (file->status == FD_NONE) {
c010a010:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a013:	8b 00                	mov    (%eax),%eax
c010a015:	85 c0                	test   %eax,%eax
c010a017:	75 02                	jne    c010a01b <fd_array_alloc+0x76>
                goto found;
c010a019:	eb 0e                	jmp    c010a029 <fd_array_alloc+0x84>
            }
            return -E_BUSY;
c010a01b:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c010a020:	eb 5a                	jmp    c010a07c <fd_array_alloc+0xd7>
        }
        return -E_INVAL;
c010a022:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a027:	eb 53                	jmp    c010a07c <fd_array_alloc+0xd7>
    }
found:
    assert(fopen_count(file) == 0);
c010a029:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a02c:	89 04 24             	mov    %eax,(%esp)
c010a02f:	e8 98 fe ff ff       	call   c0109ecc <fopen_count>
c010a034:	85 c0                	test   %eax,%eax
c010a036:	74 24                	je     c010a05c <fd_array_alloc+0xb7>
c010a038:	c7 44 24 0c 4a 74 11 	movl   $0xc011744a,0xc(%esp)
c010a03f:	c0 
c010a040:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a047:	c0 
c010a048:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c010a04f:	00 
c010a050:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a057:	e8 6c 6e ff ff       	call   c0100ec8 <__panic>
    file->status = FD_INIT, file->node = NULL;
c010a05c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a05f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010a065:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a068:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    *file_store = file;
c010a06f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a072:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a075:	89 10                	mov    %edx,(%eax)
    return 0;
c010a077:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a07c:	c9                   	leave  
c010a07d:	c3                   	ret    

c010a07e <fd_array_free>:

// fd_array_free - free a file item in open files table
static void
fd_array_free(struct file *file) {
c010a07e:	55                   	push   %ebp
c010a07f:	89 e5                	mov    %esp,%ebp
c010a081:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
c010a084:	8b 45 08             	mov    0x8(%ebp),%eax
c010a087:	8b 00                	mov    (%eax),%eax
c010a089:	83 f8 01             	cmp    $0x1,%eax
c010a08c:	74 2e                	je     c010a0bc <fd_array_free+0x3e>
c010a08e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a091:	8b 00                	mov    (%eax),%eax
c010a093:	83 f8 03             	cmp    $0x3,%eax
c010a096:	74 24                	je     c010a0bc <fd_array_free+0x3e>
c010a098:	c7 44 24 0c 64 74 11 	movl   $0xc0117464,0xc(%esp)
c010a09f:	c0 
c010a0a0:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a0a7:	c0 
c010a0a8:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010a0af:	00 
c010a0b0:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a0b7:	e8 0c 6e ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) == 0);
c010a0bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0bf:	89 04 24             	mov    %eax,(%esp)
c010a0c2:	e8 05 fe ff ff       	call   c0109ecc <fopen_count>
c010a0c7:	85 c0                	test   %eax,%eax
c010a0c9:	74 24                	je     c010a0ef <fd_array_free+0x71>
c010a0cb:	c7 44 24 0c 4a 74 11 	movl   $0xc011744a,0xc(%esp)
c010a0d2:	c0 
c010a0d3:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a0da:	c0 
c010a0db:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010a0e2:	00 
c010a0e3:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a0ea:	e8 d9 6d ff ff       	call   c0100ec8 <__panic>
    if (file->status == FD_CLOSED) {
c010a0ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0f2:	8b 00                	mov    (%eax),%eax
c010a0f4:	83 f8 03             	cmp    $0x3,%eax
c010a0f7:	75 0e                	jne    c010a107 <fd_array_free+0x89>
        vfs_close(file->node);
c010a0f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0fc:	8b 40 14             	mov    0x14(%eax),%eax
c010a0ff:	89 04 24             	mov    %eax,(%esp)
c010a102:	e8 47 5a 00 00       	call   c010fb4e <vfs_close>
    }
    file->status = FD_NONE;
c010a107:	8b 45 08             	mov    0x8(%ebp),%eax
c010a10a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010a110:	c9                   	leave  
c010a111:	c3                   	ret    

c010a112 <fd_array_acquire>:

static void
fd_array_acquire(struct file *file) {
c010a112:	55                   	push   %ebp
c010a113:	89 e5                	mov    %esp,%ebp
c010a115:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a118:	8b 45 08             	mov    0x8(%ebp),%eax
c010a11b:	8b 00                	mov    (%eax),%eax
c010a11d:	83 f8 02             	cmp    $0x2,%eax
c010a120:	74 24                	je     c010a146 <fd_array_acquire+0x34>
c010a122:	c7 44 24 0c 99 74 11 	movl   $0xc0117499,0xc(%esp)
c010a129:	c0 
c010a12a:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a131:	c0 
c010a132:	c7 44 24 04 4e 00 00 	movl   $0x4e,0x4(%esp)
c010a139:	00 
c010a13a:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a141:	e8 82 6d ff ff       	call   c0100ec8 <__panic>
    fopen_count_inc(file);
c010a146:	8b 45 08             	mov    0x8(%ebp),%eax
c010a149:	89 04 24             	mov    %eax,(%esp)
c010a14c:	e8 86 fd ff ff       	call   c0109ed7 <fopen_count_inc>
}
c010a151:	c9                   	leave  
c010a152:	c3                   	ret    

c010a153 <fd_array_release>:

// fd_array_release - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
static void
fd_array_release(struct file *file) {
c010a153:	55                   	push   %ebp
c010a154:	89 e5                	mov    %esp,%ebp
c010a156:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
c010a159:	8b 45 08             	mov    0x8(%ebp),%eax
c010a15c:	8b 00                	mov    (%eax),%eax
c010a15e:	83 f8 02             	cmp    $0x2,%eax
c010a161:	74 2e                	je     c010a191 <fd_array_release+0x3e>
c010a163:	8b 45 08             	mov    0x8(%ebp),%eax
c010a166:	8b 00                	mov    (%eax),%eax
c010a168:	83 f8 03             	cmp    $0x3,%eax
c010a16b:	74 24                	je     c010a191 <fd_array_release+0x3e>
c010a16d:	c7 44 24 0c b4 74 11 	movl   $0xc01174b4,0xc(%esp)
c010a174:	c0 
c010a175:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a17c:	c0 
c010a17d:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010a184:	00 
c010a185:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a18c:	e8 37 6d ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) > 0);
c010a191:	8b 45 08             	mov    0x8(%ebp),%eax
c010a194:	89 04 24             	mov    %eax,(%esp)
c010a197:	e8 30 fd ff ff       	call   c0109ecc <fopen_count>
c010a19c:	85 c0                	test   %eax,%eax
c010a19e:	7f 24                	jg     c010a1c4 <fd_array_release+0x71>
c010a1a0:	c7 44 24 0c eb 74 11 	movl   $0xc01174eb,0xc(%esp)
c010a1a7:	c0 
c010a1a8:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a1af:	c0 
c010a1b0:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
c010a1b7:	00 
c010a1b8:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a1bf:	e8 04 6d ff ff       	call   c0100ec8 <__panic>
    if (fopen_count_dec(file) == 0) {
c010a1c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1c7:	89 04 24             	mov    %eax,(%esp)
c010a1ca:	e8 22 fd ff ff       	call   c0109ef1 <fopen_count_dec>
c010a1cf:	85 c0                	test   %eax,%eax
c010a1d1:	75 0b                	jne    c010a1de <fd_array_release+0x8b>
        fd_array_free(file);
c010a1d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1d6:	89 04 24             	mov    %eax,(%esp)
c010a1d9:	e8 a0 fe ff ff       	call   c010a07e <fd_array_free>
    }
}
c010a1de:	c9                   	leave  
c010a1df:	c3                   	ret    

c010a1e0 <fd_array_open>:

// fd_array_open - file's open_count++, set status to FD_OPENED
void
fd_array_open(struct file *file) {
c010a1e0:	55                   	push   %ebp
c010a1e1:	89 e5                	mov    %esp,%ebp
c010a1e3:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT && file->node != NULL);
c010a1e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1e9:	8b 00                	mov    (%eax),%eax
c010a1eb:	83 f8 01             	cmp    $0x1,%eax
c010a1ee:	75 0a                	jne    c010a1fa <fd_array_open+0x1a>
c010a1f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1f3:	8b 40 14             	mov    0x14(%eax),%eax
c010a1f6:	85 c0                	test   %eax,%eax
c010a1f8:	75 24                	jne    c010a21e <fd_array_open+0x3e>
c010a1fa:	c7 44 24 0c 04 75 11 	movl   $0xc0117504,0xc(%esp)
c010a201:	c0 
c010a202:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a209:	c0 
c010a20a:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c010a211:	00 
c010a212:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a219:	e8 aa 6c ff ff       	call   c0100ec8 <__panic>
    file->status = FD_OPENED;
c010a21e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a221:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    fopen_count_inc(file);
c010a227:	8b 45 08             	mov    0x8(%ebp),%eax
c010a22a:	89 04 24             	mov    %eax,(%esp)
c010a22d:	e8 a5 fc ff ff       	call   c0109ed7 <fopen_count_inc>
}
c010a232:	c9                   	leave  
c010a233:	c3                   	ret    

c010a234 <fd_array_close>:

// fd_array_close - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
void
fd_array_close(struct file *file) {
c010a234:	55                   	push   %ebp
c010a235:	89 e5                	mov    %esp,%ebp
c010a237:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a23a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a23d:	8b 00                	mov    (%eax),%eax
c010a23f:	83 f8 02             	cmp    $0x2,%eax
c010a242:	74 24                	je     c010a268 <fd_array_close+0x34>
c010a244:	c7 44 24 0c 99 74 11 	movl   $0xc0117499,0xc(%esp)
c010a24b:	c0 
c010a24c:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a253:	c0 
c010a254:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c010a25b:	00 
c010a25c:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a263:	e8 60 6c ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) > 0);
c010a268:	8b 45 08             	mov    0x8(%ebp),%eax
c010a26b:	89 04 24             	mov    %eax,(%esp)
c010a26e:	e8 59 fc ff ff       	call   c0109ecc <fopen_count>
c010a273:	85 c0                	test   %eax,%eax
c010a275:	7f 24                	jg     c010a29b <fd_array_close+0x67>
c010a277:	c7 44 24 0c eb 74 11 	movl   $0xc01174eb,0xc(%esp)
c010a27e:	c0 
c010a27f:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a286:	c0 
c010a287:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
c010a28e:	00 
c010a28f:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a296:	e8 2d 6c ff ff       	call   c0100ec8 <__panic>
    file->status = FD_CLOSED;
c010a29b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a29e:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    if (fopen_count_dec(file) == 0) {
c010a2a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2a7:	89 04 24             	mov    %eax,(%esp)
c010a2aa:	e8 42 fc ff ff       	call   c0109ef1 <fopen_count_dec>
c010a2af:	85 c0                	test   %eax,%eax
c010a2b1:	75 0b                	jne    c010a2be <fd_array_close+0x8a>
        fd_array_free(file);
c010a2b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2b6:	89 04 24             	mov    %eax,(%esp)
c010a2b9:	e8 c0 fd ff ff       	call   c010a07e <fd_array_free>
    }
}
c010a2be:	c9                   	leave  
c010a2bf:	c3                   	ret    

c010a2c0 <fd_array_dup>:

//fs_array_dup - duplicate file 'from'  to file 'to'
void
fd_array_dup(struct file *to, struct file *from) {
c010a2c0:	55                   	push   %ebp
c010a2c1:	89 e5                	mov    %esp,%ebp
c010a2c3:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[fd_array_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
c010a2c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2c9:	8b 00                	mov    (%eax),%eax
c010a2cb:	83 f8 01             	cmp    $0x1,%eax
c010a2ce:	75 0a                	jne    c010a2da <fd_array_dup+0x1a>
c010a2d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a2d3:	8b 00                	mov    (%eax),%eax
c010a2d5:	83 f8 02             	cmp    $0x2,%eax
c010a2d8:	74 24                	je     c010a2fe <fd_array_dup+0x3e>
c010a2da:	c7 44 24 0c 34 75 11 	movl   $0xc0117534,0xc(%esp)
c010a2e1:	c0 
c010a2e2:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a2e9:	c0 
c010a2ea:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c010a2f1:	00 
c010a2f2:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a2f9:	e8 ca 6b ff ff       	call   c0100ec8 <__panic>
    to->pos = from->pos;
c010a2fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a301:	8b 50 10             	mov    0x10(%eax),%edx
c010a304:	8b 45 08             	mov    0x8(%ebp),%eax
c010a307:	89 50 10             	mov    %edx,0x10(%eax)
    to->readable = from->readable;
c010a30a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a30d:	8b 50 04             	mov    0x4(%eax),%edx
c010a310:	8b 45 08             	mov    0x8(%ebp),%eax
c010a313:	89 50 04             	mov    %edx,0x4(%eax)
    to->writable = from->writable;
c010a316:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a319:	8b 50 08             	mov    0x8(%eax),%edx
c010a31c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a31f:	89 50 08             	mov    %edx,0x8(%eax)
    struct inode *node = from->node;
c010a322:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a325:	8b 40 14             	mov    0x14(%eax),%eax
c010a328:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vop_ref_inc(node), vop_open_inc(node);
c010a32b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a32e:	89 04 24             	mov    %eax,(%esp)
c010a331:	e8 47 48 00 00       	call   c010eb7d <inode_ref_inc>
c010a336:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a339:	89 04 24             	mov    %eax,(%esp)
c010a33c:	e8 43 49 00 00       	call   c010ec84 <inode_open_inc>
    to->node = node;
c010a341:	8b 45 08             	mov    0x8(%ebp),%eax
c010a344:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a347:	89 50 14             	mov    %edx,0x14(%eax)
    fd_array_open(to);
c010a34a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a34d:	89 04 24             	mov    %eax,(%esp)
c010a350:	e8 8b fe ff ff       	call   c010a1e0 <fd_array_open>
}
c010a355:	c9                   	leave  
c010a356:	c3                   	ret    

c010a357 <fd2file>:

// fd2file - use fd as index of fd_array, return the array item (file)
static inline int
fd2file(int fd, struct file **file_store) {
c010a357:	55                   	push   %ebp
c010a358:	89 e5                	mov    %esp,%ebp
c010a35a:	83 ec 18             	sub    $0x18,%esp
    if (testfd(fd)) {
c010a35d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a361:	78 4b                	js     c010a3ae <fd2file+0x57>
c010a363:	8b 45 08             	mov    0x8(%ebp),%eax
c010a366:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a36b:	77 41                	ja     c010a3ae <fd2file+0x57>
        struct file *file = get_fd_array() + fd;
c010a36d:	e8 99 fb ff ff       	call   c0109f0b <get_fd_array>
c010a372:	89 c2                	mov    %eax,%edx
c010a374:	8b 45 08             	mov    0x8(%ebp),%eax
c010a377:	c1 e0 02             	shl    $0x2,%eax
c010a37a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
c010a381:	29 c1                	sub    %eax,%ecx
c010a383:	89 c8                	mov    %ecx,%eax
c010a385:	01 d0                	add    %edx,%eax
c010a387:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (file->status == FD_OPENED && file->fd == fd) {
c010a38a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a38d:	8b 00                	mov    (%eax),%eax
c010a38f:	83 f8 02             	cmp    $0x2,%eax
c010a392:	75 1a                	jne    c010a3ae <fd2file+0x57>
c010a394:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a397:	8b 40 0c             	mov    0xc(%eax),%eax
c010a39a:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a39d:	75 0f                	jne    c010a3ae <fd2file+0x57>
            *file_store = file;
c010a39f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a3a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a3a5:	89 10                	mov    %edx,(%eax)
            return 0;
c010a3a7:	b8 00 00 00 00       	mov    $0x0,%eax
c010a3ac:	eb 05                	jmp    c010a3b3 <fd2file+0x5c>
        }
    }
    return -E_INVAL;
c010a3ae:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a3b3:	c9                   	leave  
c010a3b4:	c3                   	ret    

c010a3b5 <file_testfd>:

// file_testfd - test file is readble or writable?
bool
file_testfd(int fd, bool readable, bool writable) {
c010a3b5:	55                   	push   %ebp
c010a3b6:	89 e5                	mov    %esp,%ebp
c010a3b8:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a3bb:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a3be:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a3c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3c5:	89 04 24             	mov    %eax,(%esp)
c010a3c8:	e8 8a ff ff ff       	call   c010a357 <fd2file>
c010a3cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a3d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a3d4:	74 07                	je     c010a3dd <file_testfd+0x28>
        return 0;
c010a3d6:	b8 00 00 00 00       	mov    $0x0,%eax
c010a3db:	eb 33                	jmp    c010a410 <file_testfd+0x5b>
    }
    if (readable && !file->readable) {
c010a3dd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a3e1:	74 11                	je     c010a3f4 <file_testfd+0x3f>
c010a3e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a3e6:	8b 40 04             	mov    0x4(%eax),%eax
c010a3e9:	85 c0                	test   %eax,%eax
c010a3eb:	75 07                	jne    c010a3f4 <file_testfd+0x3f>
        return 0;
c010a3ed:	b8 00 00 00 00       	mov    $0x0,%eax
c010a3f2:	eb 1c                	jmp    c010a410 <file_testfd+0x5b>
    }
    if (writable && !file->writable) {
c010a3f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a3f8:	74 11                	je     c010a40b <file_testfd+0x56>
c010a3fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a3fd:	8b 40 08             	mov    0x8(%eax),%eax
c010a400:	85 c0                	test   %eax,%eax
c010a402:	75 07                	jne    c010a40b <file_testfd+0x56>
        return 0;
c010a404:	b8 00 00 00 00       	mov    $0x0,%eax
c010a409:	eb 05                	jmp    c010a410 <file_testfd+0x5b>
    }
    return 1;
c010a40b:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010a410:	c9                   	leave  
c010a411:	c3                   	ret    

c010a412 <file_open>:

// open file
int
file_open(char *path, uint32_t open_flags) {
c010a412:	55                   	push   %ebp
c010a413:	89 e5                	mov    %esp,%ebp
c010a415:	83 ec 48             	sub    $0x48,%esp
    bool readable = 0, writable = 0;
c010a418:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a41f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    switch (open_flags & O_ACCMODE) {
c010a426:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a429:	83 e0 03             	and    $0x3,%eax
c010a42c:	83 f8 01             	cmp    $0x1,%eax
c010a42f:	74 15                	je     c010a446 <file_open+0x34>
c010a431:	83 f8 01             	cmp    $0x1,%eax
c010a434:	72 07                	jb     c010a43d <file_open+0x2b>
c010a436:	83 f8 02             	cmp    $0x2,%eax
c010a439:	74 14                	je     c010a44f <file_open+0x3d>
c010a43b:	eb 21                	jmp    c010a45e <file_open+0x4c>
    case O_RDONLY: readable = 1; break;
c010a43d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010a444:	eb 22                	jmp    c010a468 <file_open+0x56>
    case O_WRONLY: writable = 1; break;
c010a446:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a44d:	eb 19                	jmp    c010a468 <file_open+0x56>
    case O_RDWR:
        readable = writable = 1;
c010a44f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a456:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a459:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;
c010a45c:	eb 0a                	jmp    c010a468 <file_open+0x56>
    default:
        return -E_INVAL;
c010a45e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a463:	e9 45 01 00 00       	jmp    c010a5ad <file_open+0x19b>
    }

    int ret;
    struct file *file;
    if ((ret = fd_array_alloc(NO_FD, &file)) != 0) {
c010a468:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a46b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a46f:	c7 04 24 d9 6a ff ff 	movl   $0xffff6ad9,(%esp)
c010a476:	e8 2a fb ff ff       	call   c0109fa5 <fd_array_alloc>
c010a47b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a47e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a482:	74 08                	je     c010a48c <file_open+0x7a>
        return ret;
c010a484:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a487:	e9 21 01 00 00       	jmp    c010a5ad <file_open+0x19b>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
c010a48c:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a48f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a493:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a496:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a49a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a49d:	89 04 24             	mov    %eax,(%esp)
c010a4a0:	e8 b9 53 00 00       	call   c010f85e <vfs_open>
c010a4a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a4a8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a4ac:	74 13                	je     c010a4c1 <file_open+0xaf>
        fd_array_free(file);
c010a4ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a4b1:	89 04 24             	mov    %eax,(%esp)
c010a4b4:	e8 c5 fb ff ff       	call   c010a07e <fd_array_free>
        return ret;
c010a4b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a4bc:	e9 ec 00 00 00       	jmp    c010a5ad <file_open+0x19b>
    }

    file->pos = 0;
c010a4c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a4c4:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    if (open_flags & O_APPEND) {
c010a4cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a4ce:	83 e0 20             	and    $0x20,%eax
c010a4d1:	85 c0                	test   %eax,%eax
c010a4d3:	0f 84 a8 00 00 00    	je     c010a581 <file_open+0x16f>
        struct stat __stat, *stat = &__stat;
c010a4d9:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010a4dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if ((ret = vop_fstat(node, stat)) != 0) {
c010a4df:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a4e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a4e5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010a4e9:	74 17                	je     c010a502 <file_open+0xf0>
c010a4eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a4ee:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a4f1:	85 c0                	test   %eax,%eax
c010a4f3:	74 0d                	je     c010a502 <file_open+0xf0>
c010a4f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a4f8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a4fb:	8b 40 14             	mov    0x14(%eax),%eax
c010a4fe:	85 c0                	test   %eax,%eax
c010a500:	75 24                	jne    c010a526 <file_open+0x114>
c010a502:	c7 44 24 0c 68 75 11 	movl   $0xc0117568,0xc(%esp)
c010a509:	c0 
c010a50a:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a511:	c0 
c010a512:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c010a519:	00 
c010a51a:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a521:	e8 a2 69 ff ff       	call   c0100ec8 <__panic>
c010a526:	c7 44 24 04 b6 75 11 	movl   $0xc01175b6,0x4(%esp)
c010a52d:	c0 
c010a52e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a531:	89 04 24             	mov    %eax,(%esp)
c010a534:	e8 4c 48 00 00       	call   c010ed85 <inode_check>
c010a539:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a53c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a53f:	8b 40 14             	mov    0x14(%eax),%eax
c010a542:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a545:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010a548:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a54c:	89 14 24             	mov    %edx,(%esp)
c010a54f:	ff d0                	call   *%eax
c010a551:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a554:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a558:	74 1b                	je     c010a575 <file_open+0x163>
            vfs_close(node);
c010a55a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a55d:	89 04 24             	mov    %eax,(%esp)
c010a560:	e8 e9 55 00 00       	call   c010fb4e <vfs_close>
            fd_array_free(file);
c010a565:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a568:	89 04 24             	mov    %eax,(%esp)
c010a56b:	e8 0e fb ff ff       	call   c010a07e <fd_array_free>
            return ret;
c010a570:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a573:	eb 38                	jmp    c010a5ad <file_open+0x19b>
        }
        file->pos = stat->st_size;
c010a575:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a578:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a57b:	8b 52 0c             	mov    0xc(%edx),%edx
c010a57e:	89 50 10             	mov    %edx,0x10(%eax)
    }

    file->node = node;
c010a581:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a584:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a587:	89 50 14             	mov    %edx,0x14(%eax)
    file->readable = readable;
c010a58a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a58d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a590:	89 50 04             	mov    %edx,0x4(%eax)
    file->writable = writable;
c010a593:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a596:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a599:	89 50 08             	mov    %edx,0x8(%eax)
    fd_array_open(file);
c010a59c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a59f:	89 04 24             	mov    %eax,(%esp)
c010a5a2:	e8 39 fc ff ff       	call   c010a1e0 <fd_array_open>
    return file->fd;
c010a5a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a5aa:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010a5ad:	c9                   	leave  
c010a5ae:	c3                   	ret    

c010a5af <file_close>:

// close file
int
file_close(int fd) {
c010a5af:	55                   	push   %ebp
c010a5b0:	89 e5                	mov    %esp,%ebp
c010a5b2:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a5b5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a5b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a5bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5bf:	89 04 24             	mov    %eax,(%esp)
c010a5c2:	e8 90 fd ff ff       	call   c010a357 <fd2file>
c010a5c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a5ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a5ce:	74 05                	je     c010a5d5 <file_close+0x26>
        return ret;
c010a5d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5d3:	eb 10                	jmp    c010a5e5 <file_close+0x36>
    }
    fd_array_close(file);
c010a5d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5d8:	89 04 24             	mov    %eax,(%esp)
c010a5db:	e8 54 fc ff ff       	call   c010a234 <fd_array_close>
    return 0;
c010a5e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a5e5:	c9                   	leave  
c010a5e6:	c3                   	ret    

c010a5e7 <file_read>:

// read file
int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
c010a5e7:	55                   	push   %ebp
c010a5e8:	89 e5                	mov    %esp,%ebp
c010a5ea:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010a5ed:	8b 45 14             	mov    0x14(%ebp),%eax
c010a5f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010a5f6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a5f9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a5fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a600:	89 04 24             	mov    %eax,(%esp)
c010a603:	e8 4f fd ff ff       	call   c010a357 <fd2file>
c010a608:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a60b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a60f:	74 08                	je     c010a619 <file_read+0x32>
        return ret;
c010a611:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a614:	e9 06 01 00 00       	jmp    c010a71f <file_read+0x138>
    }
    if (!file->readable) {
c010a619:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a61c:	8b 40 04             	mov    0x4(%eax),%eax
c010a61f:	85 c0                	test   %eax,%eax
c010a621:	75 0a                	jne    c010a62d <file_read+0x46>
        return -E_INVAL;
c010a623:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a628:	e9 f2 00 00 00       	jmp    c010a71f <file_read+0x138>
    }
    fd_array_acquire(file);
c010a62d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a630:	89 04 24             	mov    %eax,(%esp)
c010a633:	e8 da fa ff ff       	call   c010a112 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010a638:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a63b:	8b 40 10             	mov    0x10(%eax),%eax
c010a63e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a642:	8b 45 10             	mov    0x10(%ebp),%eax
c010a645:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a649:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a64c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a650:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010a653:	89 04 24             	mov    %eax,(%esp)
c010a656:	e8 81 09 00 00       	call   c010afdc <iobuf_init>
c010a65b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_read(file->node, iob);
c010a65e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a661:	8b 40 14             	mov    0x14(%eax),%eax
c010a664:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a667:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a66b:	74 17                	je     c010a684 <file_read+0x9d>
c010a66d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a670:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a673:	85 c0                	test   %eax,%eax
c010a675:	74 0d                	je     c010a684 <file_read+0x9d>
c010a677:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a67a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a67d:	8b 40 0c             	mov    0xc(%eax),%eax
c010a680:	85 c0                	test   %eax,%eax
c010a682:	75 24                	jne    c010a6a8 <file_read+0xc1>
c010a684:	c7 44 24 0c bc 75 11 	movl   $0xc01175bc,0xc(%esp)
c010a68b:	c0 
c010a68c:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a693:	c0 
c010a694:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c010a69b:	00 
c010a69c:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a6a3:	e8 20 68 ff ff       	call   c0100ec8 <__panic>
c010a6a8:	c7 44 24 04 09 76 11 	movl   $0xc0117609,0x4(%esp)
c010a6af:	c0 
c010a6b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a6b3:	89 04 24             	mov    %eax,(%esp)
c010a6b6:	e8 ca 46 00 00       	call   c010ed85 <inode_check>
c010a6bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a6be:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a6c1:	8b 40 0c             	mov    0xc(%eax),%eax
c010a6c4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a6c7:	8b 52 14             	mov    0x14(%edx),%edx
c010a6ca:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010a6cd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a6d1:	89 14 24             	mov    %edx,(%esp)
c010a6d4:	ff d0                	call   *%eax
c010a6d6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010a6d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6dc:	8b 50 08             	mov    0x8(%eax),%edx
c010a6df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6e2:	8b 40 0c             	mov    0xc(%eax),%eax
c010a6e5:	29 c2                	sub    %eax,%edx
c010a6e7:	89 d0                	mov    %edx,%eax
c010a6e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010a6ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a6ef:	8b 00                	mov    (%eax),%eax
c010a6f1:	83 f8 02             	cmp    $0x2,%eax
c010a6f4:	75 13                	jne    c010a709 <file_read+0x122>
        file->pos += copied;
c010a6f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a6f9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a6fc:	8b 52 10             	mov    0x10(%edx),%edx
c010a6ff:	89 d1                	mov    %edx,%ecx
c010a701:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a704:	01 ca                	add    %ecx,%edx
c010a706:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010a709:	8b 45 14             	mov    0x14(%ebp),%eax
c010a70c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a70f:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010a711:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a714:	89 04 24             	mov    %eax,(%esp)
c010a717:	e8 37 fa ff ff       	call   c010a153 <fd_array_release>
    return ret;
c010a71c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a71f:	c9                   	leave  
c010a720:	c3                   	ret    

c010a721 <file_write>:

// write file
int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
c010a721:	55                   	push   %ebp
c010a722:	89 e5                	mov    %esp,%ebp
c010a724:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010a727:	8b 45 14             	mov    0x14(%ebp),%eax
c010a72a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010a730:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a733:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a737:	8b 45 08             	mov    0x8(%ebp),%eax
c010a73a:	89 04 24             	mov    %eax,(%esp)
c010a73d:	e8 15 fc ff ff       	call   c010a357 <fd2file>
c010a742:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a745:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a749:	74 08                	je     c010a753 <file_write+0x32>
        return ret;
c010a74b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a74e:	e9 06 01 00 00       	jmp    c010a859 <file_write+0x138>
    }
    if (!file->writable) {
c010a753:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a756:	8b 40 08             	mov    0x8(%eax),%eax
c010a759:	85 c0                	test   %eax,%eax
c010a75b:	75 0a                	jne    c010a767 <file_write+0x46>
        return -E_INVAL;
c010a75d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a762:	e9 f2 00 00 00       	jmp    c010a859 <file_write+0x138>
    }
    fd_array_acquire(file);
c010a767:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a76a:	89 04 24             	mov    %eax,(%esp)
c010a76d:	e8 a0 f9 ff ff       	call   c010a112 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010a772:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a775:	8b 40 10             	mov    0x10(%eax),%eax
c010a778:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a77c:	8b 45 10             	mov    0x10(%ebp),%eax
c010a77f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a783:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a786:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a78a:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010a78d:	89 04 24             	mov    %eax,(%esp)
c010a790:	e8 47 08 00 00       	call   c010afdc <iobuf_init>
c010a795:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_write(file->node, iob);
c010a798:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a79b:	8b 40 14             	mov    0x14(%eax),%eax
c010a79e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a7a1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a7a5:	74 17                	je     c010a7be <file_write+0x9d>
c010a7a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7aa:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a7ad:	85 c0                	test   %eax,%eax
c010a7af:	74 0d                	je     c010a7be <file_write+0x9d>
c010a7b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7b4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a7b7:	8b 40 10             	mov    0x10(%eax),%eax
c010a7ba:	85 c0                	test   %eax,%eax
c010a7bc:	75 24                	jne    c010a7e2 <file_write+0xc1>
c010a7be:	c7 44 24 0c 10 76 11 	movl   $0xc0117610,0xc(%esp)
c010a7c5:	c0 
c010a7c6:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a7cd:	c0 
c010a7ce:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010a7d5:	00 
c010a7d6:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a7dd:	e8 e6 66 ff ff       	call   c0100ec8 <__panic>
c010a7e2:	c7 44 24 04 5e 76 11 	movl   $0xc011765e,0x4(%esp)
c010a7e9:	c0 
c010a7ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7ed:	89 04 24             	mov    %eax,(%esp)
c010a7f0:	e8 90 45 00 00       	call   c010ed85 <inode_check>
c010a7f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7f8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a7fb:	8b 40 10             	mov    0x10(%eax),%eax
c010a7fe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a801:	8b 52 14             	mov    0x14(%edx),%edx
c010a804:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010a807:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a80b:	89 14 24             	mov    %edx,(%esp)
c010a80e:	ff d0                	call   *%eax
c010a810:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010a813:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a816:	8b 50 08             	mov    0x8(%eax),%edx
c010a819:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a81c:	8b 40 0c             	mov    0xc(%eax),%eax
c010a81f:	29 c2                	sub    %eax,%edx
c010a821:	89 d0                	mov    %edx,%eax
c010a823:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010a826:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a829:	8b 00                	mov    (%eax),%eax
c010a82b:	83 f8 02             	cmp    $0x2,%eax
c010a82e:	75 13                	jne    c010a843 <file_write+0x122>
        file->pos += copied;
c010a830:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a833:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a836:	8b 52 10             	mov    0x10(%edx),%edx
c010a839:	89 d1                	mov    %edx,%ecx
c010a83b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a83e:	01 ca                	add    %ecx,%edx
c010a840:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010a843:	8b 45 14             	mov    0x14(%ebp),%eax
c010a846:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a849:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010a84b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a84e:	89 04 24             	mov    %eax,(%esp)
c010a851:	e8 fd f8 ff ff       	call   c010a153 <fd_array_release>
    return ret;
c010a856:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a859:	c9                   	leave  
c010a85a:	c3                   	ret    

c010a85b <file_seek>:

// seek file
int
file_seek(int fd, off_t pos, int whence) {
c010a85b:	55                   	push   %ebp
c010a85c:	89 e5                	mov    %esp,%ebp
c010a85e:	83 ec 48             	sub    $0x48,%esp
    struct stat __stat, *stat = &__stat;
c010a861:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010a864:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a867:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010a86a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a86e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a871:	89 04 24             	mov    %eax,(%esp)
c010a874:	e8 de fa ff ff       	call   c010a357 <fd2file>
c010a879:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a87c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a880:	74 08                	je     c010a88a <file_seek+0x2f>
        return ret;
c010a882:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a885:	e9 72 01 00 00       	jmp    c010a9fc <file_seek+0x1a1>
    }
    fd_array_acquire(file);
c010a88a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a88d:	89 04 24             	mov    %eax,(%esp)
c010a890:	e8 7d f8 ff ff       	call   c010a112 <fd_array_acquire>

    switch (whence) {
c010a895:	8b 45 10             	mov    0x10(%ebp),%eax
c010a898:	83 f8 01             	cmp    $0x1,%eax
c010a89b:	74 12                	je     c010a8af <file_seek+0x54>
c010a89d:	83 f8 02             	cmp    $0x2,%eax
c010a8a0:	74 1b                	je     c010a8bd <file_seek+0x62>
c010a8a2:	85 c0                	test   %eax,%eax
c010a8a4:	0f 84 af 00 00 00    	je     c010a959 <file_seek+0xfe>
c010a8aa:	e9 a1 00 00 00       	jmp    c010a950 <file_seek+0xf5>
    case LSEEK_SET: break;
    case LSEEK_CUR: pos += file->pos; break;
c010a8af:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a8b2:	8b 40 10             	mov    0x10(%eax),%eax
c010a8b5:	01 45 0c             	add    %eax,0xc(%ebp)
c010a8b8:	e9 9d 00 00 00       	jmp    c010a95a <file_seek+0xff>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
c010a8bd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a8c0:	8b 40 14             	mov    0x14(%eax),%eax
c010a8c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a8c6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a8ca:	74 17                	je     c010a8e3 <file_seek+0x88>
c010a8cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8cf:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8d2:	85 c0                	test   %eax,%eax
c010a8d4:	74 0d                	je     c010a8e3 <file_seek+0x88>
c010a8d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8d9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8dc:	8b 40 14             	mov    0x14(%eax),%eax
c010a8df:	85 c0                	test   %eax,%eax
c010a8e1:	75 24                	jne    c010a907 <file_seek+0xac>
c010a8e3:	c7 44 24 0c 68 75 11 	movl   $0xc0117568,0xc(%esp)
c010a8ea:	c0 
c010a8eb:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a8f2:	c0 
c010a8f3:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c010a8fa:	00 
c010a8fb:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a902:	e8 c1 65 ff ff       	call   c0100ec8 <__panic>
c010a907:	c7 44 24 04 b6 75 11 	movl   $0xc01175b6,0x4(%esp)
c010a90e:	c0 
c010a90f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a912:	89 04 24             	mov    %eax,(%esp)
c010a915:	e8 6b 44 00 00       	call   c010ed85 <inode_check>
c010a91a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a91d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a920:	8b 40 14             	mov    0x14(%eax),%eax
c010a923:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010a926:	8b 52 14             	mov    0x14(%edx),%edx
c010a929:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010a92c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a930:	89 14 24             	mov    %edx,(%esp)
c010a933:	ff d0                	call   *%eax
c010a935:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a938:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a93c:	75 10                	jne    c010a94e <file_seek+0xf3>
            pos += stat->st_size;
c010a93e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a941:	8b 50 0c             	mov    0xc(%eax),%edx
c010a944:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a947:	01 d0                	add    %edx,%eax
c010a949:	89 45 0c             	mov    %eax,0xc(%ebp)
        }
        break;
c010a94c:	eb 0c                	jmp    c010a95a <file_seek+0xff>
c010a94e:	eb 0a                	jmp    c010a95a <file_seek+0xff>
    default: ret = -E_INVAL;
c010a950:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
c010a957:	eb 01                	jmp    c010a95a <file_seek+0xff>
        return ret;
    }
    fd_array_acquire(file);

    switch (whence) {
    case LSEEK_SET: break;
c010a959:	90                   	nop
        }
        break;
    default: ret = -E_INVAL;
    }

    if (ret == 0) {
c010a95a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a95e:	0f 85 8a 00 00 00    	jne    c010a9ee <file_seek+0x193>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
c010a964:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a967:	8b 40 14             	mov    0x14(%eax),%eax
c010a96a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a96d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010a971:	74 17                	je     c010a98a <file_seek+0x12f>
c010a973:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a976:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a979:	85 c0                	test   %eax,%eax
c010a97b:	74 0d                	je     c010a98a <file_seek+0x12f>
c010a97d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a980:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a983:	8b 40 2c             	mov    0x2c(%eax),%eax
c010a986:	85 c0                	test   %eax,%eax
c010a988:	75 24                	jne    c010a9ae <file_seek+0x153>
c010a98a:	c7 44 24 0c 64 76 11 	movl   $0xc0117664,0xc(%esp)
c010a991:	c0 
c010a992:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010a999:	c0 
c010a99a:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c010a9a1:	00 
c010a9a2:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010a9a9:	e8 1a 65 ff ff       	call   c0100ec8 <__panic>
c010a9ae:	c7 44 24 04 b4 76 11 	movl   $0xc01176b4,0x4(%esp)
c010a9b5:	c0 
c010a9b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a9b9:	89 04 24             	mov    %eax,(%esp)
c010a9bc:	e8 c4 43 00 00       	call   c010ed85 <inode_check>
c010a9c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a9c4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a9c7:	8b 40 2c             	mov    0x2c(%eax),%eax
c010a9ca:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010a9cd:	8b 52 14             	mov    0x14(%edx),%edx
c010a9d0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010a9d3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a9d7:	89 14 24             	mov    %edx,(%esp)
c010a9da:	ff d0                	call   *%eax
c010a9dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a9df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a9e3:	75 09                	jne    c010a9ee <file_seek+0x193>
            file->pos = pos;
c010a9e5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a9e8:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a9eb:	89 50 10             	mov    %edx,0x10(%eax)
        }
//    cprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    fd_array_release(file);
c010a9ee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a9f1:	89 04 24             	mov    %eax,(%esp)
c010a9f4:	e8 5a f7 ff ff       	call   c010a153 <fd_array_release>
    return ret;
c010a9f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a9fc:	c9                   	leave  
c010a9fd:	c3                   	ret    

c010a9fe <file_fstat>:

// stat file
int
file_fstat(int fd, struct stat *stat) {
c010a9fe:	55                   	push   %ebp
c010a9ff:	89 e5                	mov    %esp,%ebp
c010aa01:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010aa04:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010aa07:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa0b:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa0e:	89 04 24             	mov    %eax,(%esp)
c010aa11:	e8 41 f9 ff ff       	call   c010a357 <fd2file>
c010aa16:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aa1d:	74 08                	je     c010aa27 <file_fstat+0x29>
        return ret;
c010aa1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa22:	e9 94 00 00 00       	jmp    c010aabb <file_fstat+0xbd>
    }
    fd_array_acquire(file);
c010aa27:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa2a:	89 04 24             	mov    %eax,(%esp)
c010aa2d:	e8 e0 f6 ff ff       	call   c010a112 <fd_array_acquire>
    ret = vop_fstat(file->node, stat);
c010aa32:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa35:	8b 40 14             	mov    0x14(%eax),%eax
c010aa38:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aa3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aa3f:	74 17                	je     c010aa58 <file_fstat+0x5a>
c010aa41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa44:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa47:	85 c0                	test   %eax,%eax
c010aa49:	74 0d                	je     c010aa58 <file_fstat+0x5a>
c010aa4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa4e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa51:	8b 40 14             	mov    0x14(%eax),%eax
c010aa54:	85 c0                	test   %eax,%eax
c010aa56:	75 24                	jne    c010aa7c <file_fstat+0x7e>
c010aa58:	c7 44 24 0c 68 75 11 	movl   $0xc0117568,0xc(%esp)
c010aa5f:	c0 
c010aa60:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010aa67:	c0 
c010aa68:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c010aa6f:	00 
c010aa70:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010aa77:	e8 4c 64 ff ff       	call   c0100ec8 <__panic>
c010aa7c:	c7 44 24 04 b6 75 11 	movl   $0xc01175b6,0x4(%esp)
c010aa83:	c0 
c010aa84:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa87:	89 04 24             	mov    %eax,(%esp)
c010aa8a:	e8 f6 42 00 00       	call   c010ed85 <inode_check>
c010aa8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa92:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa95:	8b 40 14             	mov    0x14(%eax),%eax
c010aa98:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010aa9b:	8b 52 14             	mov    0x14(%edx),%edx
c010aa9e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010aaa1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010aaa5:	89 14 24             	mov    %edx,(%esp)
c010aaa8:	ff d0                	call   *%eax
c010aaaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010aaad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aab0:	89 04 24             	mov    %eax,(%esp)
c010aab3:	e8 9b f6 ff ff       	call   c010a153 <fd_array_release>
    return ret;
c010aab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aabb:	c9                   	leave  
c010aabc:	c3                   	ret    

c010aabd <file_fsync>:

// sync file
int
file_fsync(int fd) {
c010aabd:	55                   	push   %ebp
c010aabe:	89 e5                	mov    %esp,%ebp
c010aac0:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010aac3:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010aac6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aaca:	8b 45 08             	mov    0x8(%ebp),%eax
c010aacd:	89 04 24             	mov    %eax,(%esp)
c010aad0:	e8 82 f8 ff ff       	call   c010a357 <fd2file>
c010aad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aad8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aadc:	74 08                	je     c010aae6 <file_fsync+0x29>
        return ret;
c010aade:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aae1:	e9 8d 00 00 00       	jmp    c010ab73 <file_fsync+0xb6>
    }
    fd_array_acquire(file);
c010aae6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aae9:	89 04 24             	mov    %eax,(%esp)
c010aaec:	e8 21 f6 ff ff       	call   c010a112 <fd_array_acquire>
    ret = vop_fsync(file->node);
c010aaf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aaf4:	8b 40 14             	mov    0x14(%eax),%eax
c010aaf7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aafa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aafe:	74 17                	je     c010ab17 <file_fsync+0x5a>
c010ab00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab03:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab06:	85 c0                	test   %eax,%eax
c010ab08:	74 0d                	je     c010ab17 <file_fsync+0x5a>
c010ab0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab0d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab10:	8b 40 18             	mov    0x18(%eax),%eax
c010ab13:	85 c0                	test   %eax,%eax
c010ab15:	75 24                	jne    c010ab3b <file_fsync+0x7e>
c010ab17:	c7 44 24 0c bc 76 11 	movl   $0xc01176bc,0xc(%esp)
c010ab1e:	c0 
c010ab1f:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010ab26:	c0 
c010ab27:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010ab2e:	00 
c010ab2f:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010ab36:	e8 8d 63 ff ff       	call   c0100ec8 <__panic>
c010ab3b:	c7 44 24 04 0a 77 11 	movl   $0xc011770a,0x4(%esp)
c010ab42:	c0 
c010ab43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab46:	89 04 24             	mov    %eax,(%esp)
c010ab49:	e8 37 42 00 00       	call   c010ed85 <inode_check>
c010ab4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab51:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab54:	8b 40 18             	mov    0x18(%eax),%eax
c010ab57:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ab5a:	8b 52 14             	mov    0x14(%edx),%edx
c010ab5d:	89 14 24             	mov    %edx,(%esp)
c010ab60:	ff d0                	call   *%eax
c010ab62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010ab65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab68:	89 04 24             	mov    %eax,(%esp)
c010ab6b:	e8 e3 f5 ff ff       	call   c010a153 <fd_array_release>
    return ret;
c010ab70:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ab73:	c9                   	leave  
c010ab74:	c3                   	ret    

c010ab75 <file_getdirentry>:

// get file entry in DIR
int
file_getdirentry(int fd, struct dirent *direntp) {
c010ab75:	55                   	push   %ebp
c010ab76:	89 e5                	mov    %esp,%ebp
c010ab78:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ab7b:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010ab7e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab82:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab85:	89 04 24             	mov    %eax,(%esp)
c010ab88:	e8 ca f7 ff ff       	call   c010a357 <fd2file>
c010ab8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ab90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ab94:	74 08                	je     c010ab9e <file_getdirentry+0x29>
        return ret;
c010ab96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab99:	e9 e3 00 00 00       	jmp    c010ac81 <file_getdirentry+0x10c>
    }
    fd_array_acquire(file);
c010ab9e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aba1:	89 04 24             	mov    %eax,(%esp)
c010aba4:	e8 69 f5 ff ff       	call   c010a112 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
c010aba9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010abac:	8b 00                	mov    (%eax),%eax
c010abae:	8b 55 0c             	mov    0xc(%ebp),%edx
c010abb1:	83 c2 04             	add    $0x4,%edx
c010abb4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010abb8:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c010abbf:	00 
c010abc0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010abc4:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010abc7:	89 04 24             	mov    %eax,(%esp)
c010abca:	e8 0d 04 00 00       	call   c010afdc <iobuf_init>
c010abcf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
c010abd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010abd5:	8b 40 14             	mov    0x14(%eax),%eax
c010abd8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010abdb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010abdf:	74 17                	je     c010abf8 <file_getdirentry+0x83>
c010abe1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abe4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010abe7:	85 c0                	test   %eax,%eax
c010abe9:	74 0d                	je     c010abf8 <file_getdirentry+0x83>
c010abeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abee:	8b 40 3c             	mov    0x3c(%eax),%eax
c010abf1:	8b 40 20             	mov    0x20(%eax),%eax
c010abf4:	85 c0                	test   %eax,%eax
c010abf6:	75 24                	jne    c010ac1c <file_getdirentry+0xa7>
c010abf8:	c7 44 24 0c 10 77 11 	movl   $0xc0117710,0xc(%esp)
c010abff:	c0 
c010ac00:	c7 44 24 08 26 74 11 	movl   $0xc0117426,0x8(%esp)
c010ac07:	c0 
c010ac08:	c7 44 24 04 4e 01 00 	movl   $0x14e,0x4(%esp)
c010ac0f:	00 
c010ac10:	c7 04 24 3b 74 11 c0 	movl   $0xc011743b,(%esp)
c010ac17:	e8 ac 62 ff ff       	call   c0100ec8 <__panic>
c010ac1c:	c7 44 24 04 64 77 11 	movl   $0xc0117764,0x4(%esp)
c010ac23:	c0 
c010ac24:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac27:	89 04 24             	mov    %eax,(%esp)
c010ac2a:	e8 56 41 00 00       	call   c010ed85 <inode_check>
c010ac2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac32:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac35:	8b 40 20             	mov    0x20(%eax),%eax
c010ac38:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ac3b:	8b 52 14             	mov    0x14(%edx),%edx
c010ac3e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010ac41:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ac45:	89 14 24             	mov    %edx,(%esp)
c010ac48:	ff d0                	call   *%eax
c010ac4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac51:	75 20                	jne    c010ac73 <file_getdirentry+0xfe>
        direntp->offset += iobuf_used(iob);
c010ac53:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ac56:	8b 00                	mov    (%eax),%eax
c010ac58:	89 c2                	mov    %eax,%edx
c010ac5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac5d:	8b 48 08             	mov    0x8(%eax),%ecx
c010ac60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac63:	8b 40 0c             	mov    0xc(%eax),%eax
c010ac66:	29 c1                	sub    %eax,%ecx
c010ac68:	89 c8                	mov    %ecx,%eax
c010ac6a:	01 d0                	add    %edx,%eax
c010ac6c:	89 c2                	mov    %eax,%edx
c010ac6e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ac71:	89 10                	mov    %edx,(%eax)
    }
    fd_array_release(file);
c010ac73:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac76:	89 04 24             	mov    %eax,(%esp)
c010ac79:	e8 d5 f4 ff ff       	call   c010a153 <fd_array_release>
    return ret;
c010ac7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ac81:	c9                   	leave  
c010ac82:	c3                   	ret    

c010ac83 <file_dup>:

// duplicate file
int
file_dup(int fd1, int fd2) {
c010ac83:	55                   	push   %ebp
c010ac84:	89 e5                	mov    %esp,%ebp
c010ac86:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
c010ac89:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010ac8c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ac90:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac93:	89 04 24             	mov    %eax,(%esp)
c010ac96:	e8 bc f6 ff ff       	call   c010a357 <fd2file>
c010ac9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aca2:	74 05                	je     c010aca9 <file_dup+0x26>
        return ret;
c010aca4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aca7:	eb 38                	jmp    c010ace1 <file_dup+0x5e>
    }
    if ((ret = fd_array_alloc(fd2, &file2)) != 0) {
c010aca9:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010acac:	89 44 24 04          	mov    %eax,0x4(%esp)
c010acb0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010acb3:	89 04 24             	mov    %eax,(%esp)
c010acb6:	e8 ea f2 ff ff       	call   c0109fa5 <fd_array_alloc>
c010acbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010acbe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010acc2:	74 05                	je     c010acc9 <file_dup+0x46>
        return ret;
c010acc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010acc7:	eb 18                	jmp    c010ace1 <file_dup+0x5e>
    }
    fd_array_dup(file2, file1);
c010acc9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010accc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010accf:	89 54 24 04          	mov    %edx,0x4(%esp)
c010acd3:	89 04 24             	mov    %eax,(%esp)
c010acd6:	e8 e5 f5 ff ff       	call   c010a2c0 <fd_array_dup>
    return file2->fd;
c010acdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acde:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010ace1:	c9                   	leave  
c010ace2:	c3                   	ret    

c010ace3 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010ace3:	55                   	push   %ebp
c010ace4:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010ace6:	8b 45 08             	mov    0x8(%ebp),%eax
c010ace9:	8b 40 08             	mov    0x8(%eax),%eax
}
c010acec:	5d                   	pop    %ebp
c010aced:	c3                   	ret    

c010acee <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
c010acee:	55                   	push   %ebp
c010acef:	89 e5                	mov    %esp,%ebp
c010acf1:	83 ec 08             	sub    $0x8,%esp
    vfs_init();
c010acf4:	e8 a8 41 00 00       	call   c010eea1 <vfs_init>
    dev_init();
c010acf9:	e8 e5 58 00 00       	call   c01105e3 <dev_init>
    sfs_init();
c010acfe:	e8 a2 66 00 00       	call   c01113a5 <sfs_init>
}
c010ad03:	c9                   	leave  
c010ad04:	c3                   	ret    

c010ad05 <fs_cleanup>:

void
fs_cleanup(void) {
c010ad05:	55                   	push   %ebp
c010ad06:	89 e5                	mov    %esp,%ebp
c010ad08:	83 ec 08             	sub    $0x8,%esp
    vfs_cleanup();
c010ad0b:	e8 4a 43 00 00       	call   c010f05a <vfs_cleanup>
}
c010ad10:	c9                   	leave  
c010ad11:	c3                   	ret    

c010ad12 <lock_files>:

void
lock_files(struct files_struct *filesp) {
c010ad12:	55                   	push   %ebp
c010ad13:	89 e5                	mov    %esp,%ebp
c010ad15:	83 ec 18             	sub    $0x18,%esp
    down(&(filesp->files_sem));
c010ad18:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad1b:	83 c0 0c             	add    $0xc,%eax
c010ad1e:	89 04 24             	mov    %eax,(%esp)
c010ad21:	e8 6f ec ff ff       	call   c0109995 <down>
}
c010ad26:	c9                   	leave  
c010ad27:	c3                   	ret    

c010ad28 <unlock_files>:

void
unlock_files(struct files_struct *filesp) {
c010ad28:	55                   	push   %ebp
c010ad29:	89 e5                	mov    %esp,%ebp
c010ad2b:	83 ec 18             	sub    $0x18,%esp
    up(&(filesp->files_sem));
c010ad2e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad31:	83 c0 0c             	add    $0xc,%eax
c010ad34:	89 04 24             	mov    %eax,(%esp)
c010ad37:	e8 3e ec ff ff       	call   c010997a <up>
}
c010ad3c:	c9                   	leave  
c010ad3d:	c3                   	ret    

c010ad3e <files_create>:
//Called when a new proc init
struct files_struct *
files_create(void) {
c010ad3e:	55                   	push   %ebp
c010ad3f:	89 e5                	mov    %esp,%ebp
c010ad41:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[files_create]\n");
    static_assert((int)FILES_STRUCT_NENTRY > 128);
    struct files_struct *filesp;
    if ((filesp = kmalloc(sizeof(struct files_struct) + FILES_STRUCT_BUFSIZE)) != NULL) {
c010ad44:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010ad4b:	e8 0e 9d ff ff       	call   c0104a5e <kmalloc>
c010ad50:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad53:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ad57:	74 43                	je     c010ad9c <files_create+0x5e>
        filesp->pwd = NULL;
c010ad59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad5c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        filesp->fd_array = (void *)(filesp + 1);
c010ad62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad65:	8d 50 18             	lea    0x18(%eax),%edx
c010ad68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad6b:	89 50 04             	mov    %edx,0x4(%eax)
        filesp->files_count = 0;
c010ad6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad71:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        sem_init(&(filesp->files_sem), 1);
c010ad78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad7b:	83 c0 0c             	add    $0xc,%eax
c010ad7e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010ad85:	00 
c010ad86:	89 04 24             	mov    %eax,(%esp)
c010ad89:	e8 79 ea ff ff       	call   c0109807 <sem_init>
        fd_array_init(filesp->fd_array);
c010ad8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad91:	8b 40 04             	mov    0x4(%eax),%eax
c010ad94:	89 04 24             	mov    %eax,(%esp)
c010ad97:	e8 c4 f1 ff ff       	call   c0109f60 <fd_array_init>
    }
    return filesp;
c010ad9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ad9f:	c9                   	leave  
c010ada0:	c3                   	ret    

c010ada1 <files_destroy>:
//Called when a proc exit
void
files_destroy(struct files_struct *filesp) {
c010ada1:	55                   	push   %ebp
c010ada2:	89 e5                	mov    %esp,%ebp
c010ada4:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_destroy]\n");
    assert(filesp != NULL && files_count(filesp) == 0);
c010ada7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010adab:	74 0f                	je     c010adbc <files_destroy+0x1b>
c010adad:	8b 45 08             	mov    0x8(%ebp),%eax
c010adb0:	89 04 24             	mov    %eax,(%esp)
c010adb3:	e8 2b ff ff ff       	call   c010ace3 <files_count>
c010adb8:	85 c0                	test   %eax,%eax
c010adba:	74 24                	je     c010ade0 <files_destroy+0x3f>
c010adbc:	c7 44 24 0c 70 77 11 	movl   $0xc0117770,0xc(%esp)
c010adc3:	c0 
c010adc4:	c7 44 24 08 9b 77 11 	movl   $0xc011779b,0x8(%esp)
c010adcb:	c0 
c010adcc:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010add3:	00 
c010add4:	c7 04 24 b0 77 11 c0 	movl   $0xc01177b0,(%esp)
c010addb:	e8 e8 60 ff ff       	call   c0100ec8 <__panic>
    if (filesp->pwd != NULL) {
c010ade0:	8b 45 08             	mov    0x8(%ebp),%eax
c010ade3:	8b 00                	mov    (%eax),%eax
c010ade5:	85 c0                	test   %eax,%eax
c010ade7:	74 0d                	je     c010adf6 <files_destroy+0x55>
        vop_ref_dec(filesp->pwd);
c010ade9:	8b 45 08             	mov    0x8(%ebp),%eax
c010adec:	8b 00                	mov    (%eax),%eax
c010adee:	89 04 24             	mov    %eax,(%esp)
c010adf1:	e8 a1 3d 00 00       	call   c010eb97 <inode_ref_dec>
    }
    int i;
    struct file *file = filesp->fd_array;
c010adf6:	8b 45 08             	mov    0x8(%ebp),%eax
c010adf9:	8b 40 04             	mov    0x4(%eax),%eax
c010adfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010adff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ae06:	eb 4a                	jmp    c010ae52 <files_destroy+0xb1>
        if (file->status == FD_OPENED) {
c010ae08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae0b:	8b 00                	mov    (%eax),%eax
c010ae0d:	83 f8 02             	cmp    $0x2,%eax
c010ae10:	75 0b                	jne    c010ae1d <files_destroy+0x7c>
            fd_array_close(file);
c010ae12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae15:	89 04 24             	mov    %eax,(%esp)
c010ae18:	e8 17 f4 ff ff       	call   c010a234 <fd_array_close>
        }
        assert(file->status == FD_NONE);
c010ae1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae20:	8b 00                	mov    (%eax),%eax
c010ae22:	85 c0                	test   %eax,%eax
c010ae24:	74 24                	je     c010ae4a <files_destroy+0xa9>
c010ae26:	c7 44 24 0c bd 77 11 	movl   $0xc01177bd,0xc(%esp)
c010ae2d:	c0 
c010ae2e:	c7 44 24 08 9b 77 11 	movl   $0xc011779b,0x8(%esp)
c010ae35:	c0 
c010ae36:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c010ae3d:	00 
c010ae3e:	c7 04 24 b0 77 11 c0 	movl   $0xc01177b0,(%esp)
c010ae45:	e8 7e 60 ff ff       	call   c0100ec8 <__panic>
    if (filesp->pwd != NULL) {
        vop_ref_dec(filesp->pwd);
    }
    int i;
    struct file *file = filesp->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010ae4a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010ae4e:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010ae52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae55:	3d 90 00 00 00       	cmp    $0x90,%eax
c010ae5a:	76 ac                	jbe    c010ae08 <files_destroy+0x67>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
        assert(file->status == FD_NONE);
    }
    kfree(filesp);
c010ae5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae5f:	89 04 24             	mov    %eax,(%esp)
c010ae62:	e8 12 9c ff ff       	call   c0104a79 <kfree>
}
c010ae67:	c9                   	leave  
c010ae68:	c3                   	ret    

c010ae69 <files_closeall>:

void
files_closeall(struct files_struct *filesp) {
c010ae69:	55                   	push   %ebp
c010ae6a:	89 e5                	mov    %esp,%ebp
c010ae6c:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
c010ae6f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ae73:	74 0f                	je     c010ae84 <files_closeall+0x1b>
c010ae75:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae78:	89 04 24             	mov    %eax,(%esp)
c010ae7b:	e8 63 fe ff ff       	call   c010ace3 <files_count>
c010ae80:	85 c0                	test   %eax,%eax
c010ae82:	7f 24                	jg     c010aea8 <files_closeall+0x3f>
c010ae84:	c7 44 24 0c d8 77 11 	movl   $0xc01177d8,0xc(%esp)
c010ae8b:	c0 
c010ae8c:	c7 44 24 08 9b 77 11 	movl   $0xc011779b,0x8(%esp)
c010ae93:	c0 
c010ae94:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010ae9b:	00 
c010ae9c:	c7 04 24 b0 77 11 c0 	movl   $0xc01177b0,(%esp)
c010aea3:	e8 20 60 ff ff       	call   c0100ec8 <__panic>
    int i;
    struct file *file = filesp->fd_array;
c010aea8:	8b 45 08             	mov    0x8(%ebp),%eax
c010aeab:	8b 40 04             	mov    0x4(%eax),%eax
c010aeae:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010aeb1:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c010aeb8:	83 45 f0 38          	addl   $0x38,-0x10(%ebp)
c010aebc:	eb 1d                	jmp    c010aedb <files_closeall+0x72>
        if (file->status == FD_OPENED) {
c010aebe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aec1:	8b 00                	mov    (%eax),%eax
c010aec3:	83 f8 02             	cmp    $0x2,%eax
c010aec6:	75 0b                	jne    c010aed3 <files_closeall+0x6a>
            fd_array_close(file);
c010aec8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aecb:	89 04 24             	mov    %eax,(%esp)
c010aece:	e8 61 f3 ff ff       	call   c010a234 <fd_array_close>
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
    int i;
    struct file *file = filesp->fd_array;
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010aed3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010aed7:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010aedb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aede:	3d 90 00 00 00       	cmp    $0x90,%eax
c010aee3:	76 d9                	jbe    c010aebe <files_closeall+0x55>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
    }
}
c010aee5:	c9                   	leave  
c010aee6:	c3                   	ret    

c010aee7 <dup_files>:

int
dup_files(struct files_struct *to, struct files_struct *from) {
c010aee7:	55                   	push   %ebp
c010aee8:	89 e5                	mov    %esp,%ebp
c010aeea:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[dup_fs]\n");
    assert(to != NULL && from != NULL);
c010aeed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010aef1:	74 06                	je     c010aef9 <dup_files+0x12>
c010aef3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010aef7:	75 24                	jne    c010af1d <dup_files+0x36>
c010aef9:	c7 44 24 0c 02 78 11 	movl   $0xc0117802,0xc(%esp)
c010af00:	c0 
c010af01:	c7 44 24 08 9b 77 11 	movl   $0xc011779b,0x8(%esp)
c010af08:	c0 
c010af09:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c010af10:	00 
c010af11:	c7 04 24 b0 77 11 c0 	movl   $0xc01177b0,(%esp)
c010af18:	e8 ab 5f ff ff       	call   c0100ec8 <__panic>
    assert(files_count(to) == 0 && files_count(from) > 0);
c010af1d:	8b 45 08             	mov    0x8(%ebp),%eax
c010af20:	89 04 24             	mov    %eax,(%esp)
c010af23:	e8 bb fd ff ff       	call   c010ace3 <files_count>
c010af28:	85 c0                	test   %eax,%eax
c010af2a:	75 0f                	jne    c010af3b <dup_files+0x54>
c010af2c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af2f:	89 04 24             	mov    %eax,(%esp)
c010af32:	e8 ac fd ff ff       	call   c010ace3 <files_count>
c010af37:	85 c0                	test   %eax,%eax
c010af39:	7f 24                	jg     c010af5f <dup_files+0x78>
c010af3b:	c7 44 24 0c 20 78 11 	movl   $0xc0117820,0xc(%esp)
c010af42:	c0 
c010af43:	c7 44 24 08 9b 77 11 	movl   $0xc011779b,0x8(%esp)
c010af4a:	c0 
c010af4b:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c010af52:	00 
c010af53:	c7 04 24 b0 77 11 c0 	movl   $0xc01177b0,(%esp)
c010af5a:	e8 69 5f ff ff       	call   c0100ec8 <__panic>
    if ((to->pwd = from->pwd) != NULL) {
c010af5f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af62:	8b 10                	mov    (%eax),%edx
c010af64:	8b 45 08             	mov    0x8(%ebp),%eax
c010af67:	89 10                	mov    %edx,(%eax)
c010af69:	8b 45 08             	mov    0x8(%ebp),%eax
c010af6c:	8b 00                	mov    (%eax),%eax
c010af6e:	85 c0                	test   %eax,%eax
c010af70:	74 0d                	je     c010af7f <dup_files+0x98>
        vop_ref_inc(to->pwd);
c010af72:	8b 45 08             	mov    0x8(%ebp),%eax
c010af75:	8b 00                	mov    (%eax),%eax
c010af77:	89 04 24             	mov    %eax,(%esp)
c010af7a:	e8 fe 3b 00 00       	call   c010eb7d <inode_ref_inc>
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
c010af7f:	8b 45 08             	mov    0x8(%ebp),%eax
c010af82:	8b 40 04             	mov    0x4(%eax),%eax
c010af85:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010af88:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af8b:	8b 40 04             	mov    0x4(%eax),%eax
c010af8e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010af91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010af98:	eb 31                	jmp    c010afcb <dup_files+0xe4>
        if (from_file->status == FD_OPENED) {
c010af9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af9d:	8b 00                	mov    (%eax),%eax
c010af9f:	83 f8 02             	cmp    $0x2,%eax
c010afa2:	75 1b                	jne    c010afbf <dup_files+0xd8>
            /* alloc_fd first */
            to_file->status = FD_INIT;
c010afa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afa7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            fd_array_dup(to_file, from_file);
c010afad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afb0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010afb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afb7:	89 04 24             	mov    %eax,(%esp)
c010afba:	e8 01 f3 ff ff       	call   c010a2c0 <fd_array_dup>
    if ((to->pwd = from->pwd) != NULL) {
        vop_ref_inc(to->pwd);
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010afbf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010afc3:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010afc7:	83 45 ec 1c          	addl   $0x1c,-0x14(%ebp)
c010afcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afce:	3d 90 00 00 00       	cmp    $0x90,%eax
c010afd3:	76 c5                	jbe    c010af9a <dup_files+0xb3>
            /* alloc_fd first */
            to_file->status = FD_INIT;
            fd_array_dup(to_file, from_file);
        }
    }
    return 0;
c010afd5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010afda:	c9                   	leave  
c010afdb:	c3                   	ret    

c010afdc <iobuf_init>:
 *                set up io_base to point to the buffer you want to transfer to, and set io_len to the length of buffer;
 *                initialize io_offset as desired;
 *                initialize io_resid to the total amount of data that can be transferred through this io.
 */
struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
c010afdc:	55                   	push   %ebp
c010afdd:	89 e5                	mov    %esp,%ebp
    iob->io_base = base;
c010afdf:	8b 45 08             	mov    0x8(%ebp),%eax
c010afe2:	8b 55 0c             	mov    0xc(%ebp),%edx
c010afe5:	89 10                	mov    %edx,(%eax)
    iob->io_offset = offset;
c010afe7:	8b 45 08             	mov    0x8(%ebp),%eax
c010afea:	8b 55 14             	mov    0x14(%ebp),%edx
c010afed:	89 50 04             	mov    %edx,0x4(%eax)
    iob->io_len = iob->io_resid = len;
c010aff0:	8b 45 08             	mov    0x8(%ebp),%eax
c010aff3:	8b 55 10             	mov    0x10(%ebp),%edx
c010aff6:	89 50 0c             	mov    %edx,0xc(%eax)
c010aff9:	8b 45 08             	mov    0x8(%ebp),%eax
c010affc:	8b 50 0c             	mov    0xc(%eax),%edx
c010afff:	8b 45 08             	mov    0x8(%ebp),%eax
c010b002:	89 50 08             	mov    %edx,0x8(%eax)
    return iob;
c010b005:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b008:	5d                   	pop    %ebp
c010b009:	c3                   	ret    

c010b00a <iobuf_move>:
 * iobuf_move may be called repeatedly on the same io to transfer
 * additional data until the available buffer space the io refers to
 * is exhausted.
 */
int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
c010b00a:	55                   	push   %ebp
c010b00b:	89 e5                	mov    %esp,%ebp
c010b00d:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b010:	8b 45 08             	mov    0x8(%ebp),%eax
c010b013:	8b 40 0c             	mov    0xc(%eax),%eax
c010b016:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b019:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b01c:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b01f:	76 06                	jbe    c010b027 <iobuf_move+0x1d>
        alen = len;
c010b021:	8b 45 10             	mov    0x10(%ebp),%eax
c010b024:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b027:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b02b:	74 57                	je     c010b084 <iobuf_move+0x7a>
        void *src = iob->io_base, *dst = data;
c010b02d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b030:	8b 00                	mov    (%eax),%eax
c010b032:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b035:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b038:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (m2b) {
c010b03b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010b03f:	74 12                	je     c010b053 <iobuf_move+0x49>
            void *tmp = src;
c010b041:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b044:	89 45 e8             	mov    %eax,-0x18(%ebp)
            src = dst, dst = tmp;
c010b047:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b04a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b04d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b050:	89 45 ec             	mov    %eax,-0x14(%ebp)
        }
        memmove(dst, src, alen);
c010b053:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b056:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b05a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b05d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b061:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b064:	89 04 24             	mov    %eax,(%esp)
c010b067:	e8 02 9f 00 00       	call   c0114f6e <memmove>
        iobuf_skip(iob, alen), len -= alen;
c010b06c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b06f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b073:	8b 45 08             	mov    0x8(%ebp),%eax
c010b076:	89 04 24             	mov    %eax,(%esp)
c010b079:	e8 a1 00 00 00       	call   c010b11f <iobuf_skip>
c010b07e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b081:	29 45 10             	sub    %eax,0x10(%ebp)
    }
    if (copiedp != NULL) {
c010b084:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010b088:	74 08                	je     c010b092 <iobuf_move+0x88>
        *copiedp = alen;
c010b08a:	8b 45 18             	mov    0x18(%ebp),%eax
c010b08d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b090:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b092:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b096:	75 07                	jne    c010b09f <iobuf_move+0x95>
c010b098:	b8 00 00 00 00       	mov    $0x0,%eax
c010b09d:	eb 05                	jmp    c010b0a4 <iobuf_move+0x9a>
c010b09f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b0a4:	c9                   	leave  
c010b0a5:	c3                   	ret    

c010b0a6 <iobuf_move_zeros>:
/*
 * iobuf_move_zeros - set io buffer zero
 * @copiedp:  the size of data memcopied
 */
int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
c010b0a6:	55                   	push   %ebp
c010b0a7:	89 e5                	mov    %esp,%ebp
c010b0a9:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b0ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0af:	8b 40 0c             	mov    0xc(%eax),%eax
c010b0b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b0b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0b8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b0bb:	76 06                	jbe    c010b0c3 <iobuf_move_zeros+0x1d>
        alen = len;
c010b0bd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b0c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b0c7:	74 34                	je     c010b0fd <iobuf_move_zeros+0x57>
        memset(iob->io_base, 0, alen);
c010b0c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0cc:	8b 00                	mov    (%eax),%eax
c010b0ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b0d1:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b0d5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b0dc:	00 
c010b0dd:	89 04 24             	mov    %eax,(%esp)
c010b0e0:	e8 4a 9e 00 00       	call   c0114f2f <memset>
        iobuf_skip(iob, alen), len -= alen;
c010b0e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b0ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0ef:	89 04 24             	mov    %eax,(%esp)
c010b0f2:	e8 28 00 00 00       	call   c010b11f <iobuf_skip>
c010b0f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0fa:	29 45 0c             	sub    %eax,0xc(%ebp)
    }
    if (copiedp != NULL) {
c010b0fd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b101:	74 08                	je     c010b10b <iobuf_move_zeros+0x65>
        *copiedp = alen;
c010b103:	8b 45 10             	mov    0x10(%ebp),%eax
c010b106:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b109:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b10b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b10f:	75 07                	jne    c010b118 <iobuf_move_zeros+0x72>
c010b111:	b8 00 00 00 00       	mov    $0x0,%eax
c010b116:	eb 05                	jmp    c010b11d <iobuf_move_zeros+0x77>
c010b118:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b11d:	c9                   	leave  
c010b11e:	c3                   	ret    

c010b11f <iobuf_skip>:

/*
 * iobuf_skip - change the current position of io buffer
 */
void
iobuf_skip(struct iobuf *iob, size_t n) {
c010b11f:	55                   	push   %ebp
c010b120:	89 e5                	mov    %esp,%ebp
c010b122:	83 ec 18             	sub    $0x18,%esp
    assert(iob->io_resid >= n);
c010b125:	8b 45 08             	mov    0x8(%ebp),%eax
c010b128:	8b 40 0c             	mov    0xc(%eax),%eax
c010b12b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b12e:	73 24                	jae    c010b154 <iobuf_skip+0x35>
c010b130:	c7 44 24 0c 4e 78 11 	movl   $0xc011784e,0xc(%esp)
c010b137:	c0 
c010b138:	c7 44 24 08 61 78 11 	movl   $0xc0117861,0x8(%esp)
c010b13f:	c0 
c010b140:	c7 44 24 04 4a 00 00 	movl   $0x4a,0x4(%esp)
c010b147:	00 
c010b148:	c7 04 24 76 78 11 c0 	movl   $0xc0117876,(%esp)
c010b14f:	e8 74 5d ff ff       	call   c0100ec8 <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
c010b154:	8b 45 08             	mov    0x8(%ebp),%eax
c010b157:	8b 10                	mov    (%eax),%edx
c010b159:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b15c:	01 c2                	add    %eax,%edx
c010b15e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b161:	89 10                	mov    %edx,(%eax)
c010b163:	8b 45 08             	mov    0x8(%ebp),%eax
c010b166:	8b 40 04             	mov    0x4(%eax),%eax
c010b169:	89 c2                	mov    %eax,%edx
c010b16b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b16e:	01 d0                	add    %edx,%eax
c010b170:	89 c2                	mov    %eax,%edx
c010b172:	8b 45 08             	mov    0x8(%ebp),%eax
c010b175:	89 50 04             	mov    %edx,0x4(%eax)
c010b178:	8b 45 08             	mov    0x8(%ebp),%eax
c010b17b:	8b 40 0c             	mov    0xc(%eax),%eax
c010b17e:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b181:	89 c2                	mov    %eax,%edx
c010b183:	8b 45 08             	mov    0x8(%ebp),%eax
c010b186:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010b189:	c9                   	leave  
c010b18a:	c3                   	ret    

c010b18b <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c010b18b:	55                   	push   %ebp
c010b18c:	89 e5                	mov    %esp,%ebp
c010b18e:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b191:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b195:	74 25                	je     c010b1bc <lock_mm+0x31>
        down(&(mm->mm_sem));
c010b197:	8b 45 08             	mov    0x8(%ebp),%eax
c010b19a:	83 c0 1c             	add    $0x1c,%eax
c010b19d:	89 04 24             	mov    %eax,(%esp)
c010b1a0:	e8 f0 e7 ff ff       	call   c0109995 <down>
        if (current != NULL) {
c010b1a5:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b1aa:	85 c0                	test   %eax,%eax
c010b1ac:	74 0e                	je     c010b1bc <lock_mm+0x31>
            mm->locked_by = current->pid;
c010b1ae:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b1b3:	8b 50 04             	mov    0x4(%eax),%edx
c010b1b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1b9:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010b1bc:	c9                   	leave  
c010b1bd:	c3                   	ret    

c010b1be <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010b1be:	55                   	push   %ebp
c010b1bf:	89 e5                	mov    %esp,%ebp
c010b1c1:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b1c4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b1c8:	74 18                	je     c010b1e2 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010b1ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1cd:	83 c0 1c             	add    $0x1c,%eax
c010b1d0:	89 04 24             	mov    %eax,(%esp)
c010b1d3:	e8 a2 e7 ff ff       	call   c010997a <up>
        mm->locked_by = 0;
c010b1d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1db:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010b1e2:	c9                   	leave  
c010b1e3:	c3                   	ret    

c010b1e4 <copy_path>:

#define IOBUF_SIZE                          4096

/* copy_path - copy path name */
static int
copy_path(char **to, const char *from) {
c010b1e4:	55                   	push   %ebp
c010b1e5:	89 e5                	mov    %esp,%ebp
c010b1e7:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b1ea:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b1ef:	8b 40 18             	mov    0x18(%eax),%eax
c010b1f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
c010b1f5:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b1fc:	e8 5d 98 ff ff       	call   c0104a5e <kmalloc>
c010b201:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b204:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b208:	75 07                	jne    c010b211 <copy_path+0x2d>
        return -E_NO_MEM;
c010b20a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b20f:	eb 66                	jmp    c010b277 <copy_path+0x93>
    }
    lock_mm(mm);
c010b211:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b214:	89 04 24             	mov    %eax,(%esp)
c010b217:	e8 6f ff ff ff       	call   c010b18b <lock_mm>
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
c010b21c:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010b223:	00 
c010b224:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b227:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b22b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b22e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b232:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b235:	89 04 24             	mov    %eax,(%esp)
c010b238:	e8 c5 db ff ff       	call   c0108e02 <copy_string>
c010b23d:	85 c0                	test   %eax,%eax
c010b23f:	75 1e                	jne    c010b25f <copy_path+0x7b>
        unlock_mm(mm);
c010b241:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b244:	89 04 24             	mov    %eax,(%esp)
c010b247:	e8 72 ff ff ff       	call   c010b1be <unlock_mm>
        goto failed_cleanup;
c010b24c:	90                   	nop
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
c010b24d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b250:	89 04 24             	mov    %eax,(%esp)
c010b253:	e8 21 98 ff ff       	call   c0104a79 <kfree>
    return -E_INVAL;
c010b258:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b25d:	eb 18                	jmp    c010b277 <copy_path+0x93>
    lock_mm(mm);
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
        unlock_mm(mm);
        goto failed_cleanup;
    }
    unlock_mm(mm);
c010b25f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b262:	89 04 24             	mov    %eax,(%esp)
c010b265:	e8 54 ff ff ff       	call   c010b1be <unlock_mm>
    *to = buffer;
c010b26a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b26d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b270:	89 10                	mov    %edx,(%eax)
    return 0;
c010b272:	b8 00 00 00 00       	mov    $0x0,%eax

failed_cleanup:
    kfree(buffer);
    return -E_INVAL;
}
c010b277:	c9                   	leave  
c010b278:	c3                   	ret    

c010b279 <sysfile_open>:

/* sysfile_open - open file */
int
sysfile_open(const char *__path, uint32_t open_flags) {
c010b279:	55                   	push   %ebp
c010b27a:	89 e5                	mov    %esp,%ebp
c010b27c:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b27f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b282:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b286:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b289:	89 04 24             	mov    %eax,(%esp)
c010b28c:	e8 53 ff ff ff       	call   c010b1e4 <copy_path>
c010b291:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b294:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b298:	74 05                	je     c010b29f <sysfile_open+0x26>
        return ret;
c010b29a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b29d:	eb 23                	jmp    c010b2c2 <sysfile_open+0x49>
    }
    ret = file_open(path, open_flags);
c010b29f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2a2:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b2a5:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b2a9:	89 04 24             	mov    %eax,(%esp)
c010b2ac:	e8 61 f1 ff ff       	call   c010a412 <file_open>
c010b2b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b2b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2b7:	89 04 24             	mov    %eax,(%esp)
c010b2ba:	e8 ba 97 ff ff       	call   c0104a79 <kfree>
    return ret;
c010b2bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b2c2:	c9                   	leave  
c010b2c3:	c3                   	ret    

c010b2c4 <sysfile_close>:

/* sysfile_close - close file */
int
sysfile_close(int fd) {
c010b2c4:	55                   	push   %ebp
c010b2c5:	89 e5                	mov    %esp,%ebp
c010b2c7:	83 ec 18             	sub    $0x18,%esp
    return file_close(fd);
c010b2ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2cd:	89 04 24             	mov    %eax,(%esp)
c010b2d0:	e8 da f2 ff ff       	call   c010a5af <file_close>
}
c010b2d5:	c9                   	leave  
c010b2d6:	c3                   	ret    

c010b2d7 <sysfile_read>:

/* sysfile_read - read file */
int
sysfile_read(int fd, void *base, size_t len) {
c010b2d7:	55                   	push   %ebp
c010b2d8:	89 e5                	mov    %esp,%ebp
c010b2da:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b2dd:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b2e2:	8b 40 18             	mov    0x18(%eax),%eax
c010b2e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b2e8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b2ec:	75 0a                	jne    c010b2f8 <sysfile_read+0x21>
        return 0;
c010b2ee:	b8 00 00 00 00       	mov    $0x0,%eax
c010b2f3:	e9 55 01 00 00       	jmp    c010b44d <sysfile_read+0x176>
    }
    if (!file_testfd(fd, 1, 0)) {
c010b2f8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b2ff:	00 
c010b300:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b307:	00 
c010b308:	8b 45 08             	mov    0x8(%ebp),%eax
c010b30b:	89 04 24             	mov    %eax,(%esp)
c010b30e:	e8 a2 f0 ff ff       	call   c010a3b5 <file_testfd>
c010b313:	85 c0                	test   %eax,%eax
c010b315:	75 0a                	jne    c010b321 <sysfile_read+0x4a>
        return -E_INVAL;
c010b317:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b31c:	e9 2c 01 00 00       	jmp    c010b44d <sysfile_read+0x176>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b321:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b328:	e8 31 97 ff ff       	call   c0104a5e <kmalloc>
c010b32d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b330:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b334:	75 0a                	jne    c010b340 <sysfile_read+0x69>
        return -E_NO_MEM;
c010b336:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b33b:	e9 0d 01 00 00       	jmp    c010b44d <sysfile_read+0x176>
    }

    int ret = 0;
c010b340:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b347:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b34e:	e9 d7 00 00 00       	jmp    c010b42a <sysfile_read+0x153>
        if ((alen = IOBUF_SIZE) > len) {
c010b353:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b35a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b35d:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b360:	76 06                	jbe    c010b368 <sysfile_read+0x91>
            alen = len;
c010b362:	8b 45 10             	mov    0x10(%ebp),%eax
c010b365:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        ret = file_read(fd, buffer, alen, &alen);
c010b368:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b36b:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b36e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b372:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b376:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b379:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b37d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b380:	89 04 24             	mov    %eax,(%esp)
c010b383:	e8 5f f2 ff ff       	call   c010a5e7 <file_read>
c010b388:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (alen != 0) {
c010b38b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b38e:	85 c0                	test   %eax,%eax
c010b390:	0f 84 87 00 00 00    	je     c010b41d <sysfile_read+0x146>
            lock_mm(mm);
c010b396:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b399:	89 04 24             	mov    %eax,(%esp)
c010b39c:	e8 ea fd ff ff       	call   c010b18b <lock_mm>
            {
                if (copy_to_user(mm, base, buffer, alen)) {
c010b3a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b3a4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b3a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b3ab:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b3af:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b3b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3b9:	89 04 24             	mov    %eax,(%esp)
c010b3bc:	e8 d0 cf ff ff       	call   c0108391 <copy_to_user>
c010b3c1:	85 c0                	test   %eax,%eax
c010b3c3:	74 40                	je     c010b405 <sysfile_read+0x12e>
                    assert(len >= alen);
c010b3c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b3c8:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b3cb:	73 24                	jae    c010b3f1 <sysfile_read+0x11a>
c010b3cd:	c7 44 24 0c 86 78 11 	movl   $0xc0117886,0xc(%esp)
c010b3d4:	c0 
c010b3d5:	c7 44 24 08 92 78 11 	movl   $0xc0117892,0x8(%esp)
c010b3dc:	c0 
c010b3dd:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010b3e4:	00 
c010b3e5:	c7 04 24 a7 78 11 c0 	movl   $0xc01178a7,(%esp)
c010b3ec:	e8 d7 5a ff ff       	call   c0100ec8 <__panic>
                    base += alen, len -= alen, copied += alen;
c010b3f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b3f4:	01 45 0c             	add    %eax,0xc(%ebp)
c010b3f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b3fa:	29 45 10             	sub    %eax,0x10(%ebp)
c010b3fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b400:	01 45 f0             	add    %eax,-0x10(%ebp)
c010b403:	eb 0d                	jmp    c010b412 <sysfile_read+0x13b>
                }
                else if (ret == 0) {
c010b405:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b409:	75 07                	jne    c010b412 <sysfile_read+0x13b>
                    ret = -E_INVAL;
c010b40b:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
                }
            }
            unlock_mm(mm);
c010b412:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b415:	89 04 24             	mov    %eax,(%esp)
c010b418:	e8 a1 fd ff ff       	call   c010b1be <unlock_mm>
        }
        if (ret != 0 || alen == 0) {
c010b41d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b421:	75 11                	jne    c010b434 <sysfile_read+0x15d>
c010b423:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b426:	85 c0                	test   %eax,%eax
c010b428:	74 0a                	je     c010b434 <sysfile_read+0x15d>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b42a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b42e:	0f 85 1f ff ff ff    	jne    c010b353 <sysfile_read+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b434:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b437:	89 04 24             	mov    %eax,(%esp)
c010b43a:	e8 3a 96 ff ff       	call   c0104a79 <kfree>
    if (copied != 0) {
c010b43f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b443:	74 05                	je     c010b44a <sysfile_read+0x173>
        return copied;
c010b445:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b448:	eb 03                	jmp    c010b44d <sysfile_read+0x176>
    }
    return ret;
c010b44a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b44d:	c9                   	leave  
c010b44e:	c3                   	ret    

c010b44f <sysfile_write>:

/* sysfile_write - write file */
int
sysfile_write(int fd, void *base, size_t len) {
c010b44f:	55                   	push   %ebp
c010b450:	89 e5                	mov    %esp,%ebp
c010b452:	83 ec 48             	sub    $0x48,%esp
    struct mm_struct *mm = current->mm;
c010b455:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b45a:	8b 40 18             	mov    0x18(%eax),%eax
c010b45d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b460:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b464:	75 0a                	jne    c010b470 <sysfile_write+0x21>
        return 0;
c010b466:	b8 00 00 00 00       	mov    $0x0,%eax
c010b46b:	e9 57 01 00 00       	jmp    c010b5c7 <sysfile_write+0x178>
    }
    if (!file_testfd(fd, 0, 1)) {
c010b470:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010b477:	00 
c010b478:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b47f:	00 
c010b480:	8b 45 08             	mov    0x8(%ebp),%eax
c010b483:	89 04 24             	mov    %eax,(%esp)
c010b486:	e8 2a ef ff ff       	call   c010a3b5 <file_testfd>
c010b48b:	85 c0                	test   %eax,%eax
c010b48d:	75 0a                	jne    c010b499 <sysfile_write+0x4a>
        return -E_INVAL;
c010b48f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b494:	e9 2e 01 00 00       	jmp    c010b5c7 <sysfile_write+0x178>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b499:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b4a0:	e8 b9 95 ff ff       	call   c0104a5e <kmalloc>
c010b4a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b4a8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b4ac:	75 0a                	jne    c010b4b8 <sysfile_write+0x69>
        return -E_NO_MEM;
c010b4ae:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b4b3:	e9 0f 01 00 00       	jmp    c010b5c7 <sysfile_write+0x178>
    }

    int ret = 0;
c010b4b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b4bf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b4c6:	e9 d9 00 00 00       	jmp    c010b5a4 <sysfile_write+0x155>
        if ((alen = IOBUF_SIZE) > len) {
c010b4cb:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b4d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b4d5:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b4d8:	76 06                	jbe    c010b4e0 <sysfile_write+0x91>
            alen = len;
c010b4da:	8b 45 10             	mov    0x10(%ebp),%eax
c010b4dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        lock_mm(mm);
c010b4e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4e3:	89 04 24             	mov    %eax,(%esp)
c010b4e6:	e8 a0 fc ff ff       	call   c010b18b <lock_mm>
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
c010b4eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b4ee:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b4f5:	00 
c010b4f6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b4fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b4fd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b501:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b504:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b508:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b50b:	89 04 24             	mov    %eax,(%esp)
c010b50e:	e8 2d ce ff ff       	call   c0108340 <copy_from_user>
c010b513:	85 c0                	test   %eax,%eax
c010b515:	75 07                	jne    c010b51e <sysfile_write+0xcf>
                ret = -E_INVAL;
c010b517:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
            }
        }
        unlock_mm(mm);
c010b51e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b521:	89 04 24             	mov    %eax,(%esp)
c010b524:	e8 95 fc ff ff       	call   c010b1be <unlock_mm>
        if (ret == 0) {
c010b529:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b52d:	75 68                	jne    c010b597 <sysfile_write+0x148>
            ret = file_write(fd, buffer, alen, &alen);
c010b52f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b532:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b535:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b539:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b53d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b540:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b544:	8b 45 08             	mov    0x8(%ebp),%eax
c010b547:	89 04 24             	mov    %eax,(%esp)
c010b54a:	e8 d2 f1 ff ff       	call   c010a721 <file_write>
c010b54f:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (alen != 0) {
c010b552:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b555:	85 c0                	test   %eax,%eax
c010b557:	74 3e                	je     c010b597 <sysfile_write+0x148>
                assert(len >= alen);
c010b559:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b55c:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b55f:	73 24                	jae    c010b585 <sysfile_write+0x136>
c010b561:	c7 44 24 0c 86 78 11 	movl   $0xc0117886,0xc(%esp)
c010b568:	c0 
c010b569:	c7 44 24 08 92 78 11 	movl   $0xc0117892,0x8(%esp)
c010b570:	c0 
c010b571:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
c010b578:	00 
c010b579:	c7 04 24 a7 78 11 c0 	movl   $0xc01178a7,(%esp)
c010b580:	e8 43 59 ff ff       	call   c0100ec8 <__panic>
                base += alen, len -= alen, copied += alen;
c010b585:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b588:	01 45 0c             	add    %eax,0xc(%ebp)
c010b58b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b58e:	29 45 10             	sub    %eax,0x10(%ebp)
c010b591:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b594:	01 45 f0             	add    %eax,-0x10(%ebp)
            }
        }
        if (ret != 0 || alen == 0) {
c010b597:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b59b:	75 11                	jne    c010b5ae <sysfile_write+0x15f>
c010b59d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5a0:	85 c0                	test   %eax,%eax
c010b5a2:	74 0a                	je     c010b5ae <sysfile_write+0x15f>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b5a4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b5a8:	0f 85 1d ff ff ff    	jne    c010b4cb <sysfile_write+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b5ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b5b1:	89 04 24             	mov    %eax,(%esp)
c010b5b4:	e8 c0 94 ff ff       	call   c0104a79 <kfree>
    if (copied != 0) {
c010b5b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b5bd:	74 05                	je     c010b5c4 <sysfile_write+0x175>
        return copied;
c010b5bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b5c2:	eb 03                	jmp    c010b5c7 <sysfile_write+0x178>
    }
    return ret;
c010b5c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b5c7:	c9                   	leave  
c010b5c8:	c3                   	ret    

c010b5c9 <sysfile_seek>:

/* sysfile_seek - seek file */
int
sysfile_seek(int fd, off_t pos, int whence) {
c010b5c9:	55                   	push   %ebp
c010b5ca:	89 e5                	mov    %esp,%ebp
c010b5cc:	83 ec 18             	sub    $0x18,%esp
    return file_seek(fd, pos, whence);
c010b5cf:	8b 45 10             	mov    0x10(%ebp),%eax
c010b5d2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b5d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b5d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b5dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5e0:	89 04 24             	mov    %eax,(%esp)
c010b5e3:	e8 73 f2 ff ff       	call   c010a85b <file_seek>
}
c010b5e8:	c9                   	leave  
c010b5e9:	c3                   	ret    

c010b5ea <sysfile_fstat>:

/* sysfile_fstat - stat file */
int
sysfile_fstat(int fd, struct stat *__stat) {
c010b5ea:	55                   	push   %ebp
c010b5eb:	89 e5                	mov    %esp,%ebp
c010b5ed:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b5f0:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b5f5:	8b 40 18             	mov    0x18(%eax),%eax
c010b5f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
c010b5fb:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010b5fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = file_fstat(fd, stat)) != 0) {
c010b601:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b604:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b608:	8b 45 08             	mov    0x8(%ebp),%eax
c010b60b:	89 04 24             	mov    %eax,(%esp)
c010b60e:	e8 eb f3 ff ff       	call   c010a9fe <file_fstat>
c010b613:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b616:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b61a:	74 05                	je     c010b621 <sysfile_fstat+0x37>
        return ret;
c010b61c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b61f:	eb 45                	jmp    c010b666 <sysfile_fstat+0x7c>
    }

    lock_mm(mm);
c010b621:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b624:	89 04 24             	mov    %eax,(%esp)
c010b627:	e8 5f fb ff ff       	call   c010b18b <lock_mm>
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
c010b62c:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
c010b633:	00 
c010b634:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b637:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b63b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b63e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b642:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b645:	89 04 24             	mov    %eax,(%esp)
c010b648:	e8 44 cd ff ff       	call   c0108391 <copy_to_user>
c010b64d:	85 c0                	test   %eax,%eax
c010b64f:	75 07                	jne    c010b658 <sysfile_fstat+0x6e>
            ret = -E_INVAL;
c010b651:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010b658:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b65b:	89 04 24             	mov    %eax,(%esp)
c010b65e:	e8 5b fb ff ff       	call   c010b1be <unlock_mm>
    return ret;
c010b663:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b666:	c9                   	leave  
c010b667:	c3                   	ret    

c010b668 <sysfile_fsync>:

/* sysfile_fsync - sync file */
int
sysfile_fsync(int fd) {
c010b668:	55                   	push   %ebp
c010b669:	89 e5                	mov    %esp,%ebp
c010b66b:	83 ec 18             	sub    $0x18,%esp
    return file_fsync(fd);
c010b66e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b671:	89 04 24             	mov    %eax,(%esp)
c010b674:	e8 44 f4 ff ff       	call   c010aabd <file_fsync>
}
c010b679:	c9                   	leave  
c010b67a:	c3                   	ret    

c010b67b <sysfile_chdir>:

/* sysfile_chdir - change dir */
int
sysfile_chdir(const char *__path) {
c010b67b:	55                   	push   %ebp
c010b67c:	89 e5                	mov    %esp,%ebp
c010b67e:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b681:	8b 45 08             	mov    0x8(%ebp),%eax
c010b684:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b688:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b68b:	89 04 24             	mov    %eax,(%esp)
c010b68e:	e8 51 fb ff ff       	call   c010b1e4 <copy_path>
c010b693:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b696:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b69a:	74 05                	je     c010b6a1 <sysfile_chdir+0x26>
        return ret;
c010b69c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b69f:	eb 1c                	jmp    c010b6bd <sysfile_chdir+0x42>
    }
    ret = vfs_chdir(path);
c010b6a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6a4:	89 04 24             	mov    %eax,(%esp)
c010b6a7:	e8 58 49 00 00       	call   c0110004 <vfs_chdir>
c010b6ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b6af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6b2:	89 04 24             	mov    %eax,(%esp)
c010b6b5:	e8 bf 93 ff ff       	call   c0104a79 <kfree>
    return ret;
c010b6ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b6bd:	c9                   	leave  
c010b6be:	c3                   	ret    

c010b6bf <sysfile_link>:

/* sysfile_link - link file */
int
sysfile_link(const char *__path1, const char *__path2) {
c010b6bf:	55                   	push   %ebp
c010b6c0:	89 e5                	mov    %esp,%ebp
c010b6c2:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010b6c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b6cc:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b6cf:	89 04 24             	mov    %eax,(%esp)
c010b6d2:	e8 0d fb ff ff       	call   c010b1e4 <copy_path>
c010b6d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b6da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b6de:	74 05                	je     c010b6e5 <sysfile_link+0x26>
        return ret;
c010b6e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6e3:	eb 59                	jmp    c010b73e <sysfile_link+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010b6e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b6e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b6ec:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b6ef:	89 04 24             	mov    %eax,(%esp)
c010b6f2:	e8 ed fa ff ff       	call   c010b1e4 <copy_path>
c010b6f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b6fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b6fe:	74 10                	je     c010b710 <sysfile_link+0x51>
        kfree(old_path);
c010b700:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b703:	89 04 24             	mov    %eax,(%esp)
c010b706:	e8 6e 93 ff ff       	call   c0104a79 <kfree>
        return ret;
c010b70b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b70e:	eb 2e                	jmp    c010b73e <sysfile_link+0x7f>
    }
    ret = vfs_link(old_path, new_path);
c010b710:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b713:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b716:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b71a:	89 04 24             	mov    %eax,(%esp)
c010b71d:	e8 63 44 00 00       	call   c010fb85 <vfs_link>
c010b722:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010b725:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b728:	89 04 24             	mov    %eax,(%esp)
c010b72b:	e8 49 93 ff ff       	call   c0104a79 <kfree>
c010b730:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b733:	89 04 24             	mov    %eax,(%esp)
c010b736:	e8 3e 93 ff ff       	call   c0104a79 <kfree>
    return ret;
c010b73b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b73e:	c9                   	leave  
c010b73f:	c3                   	ret    

c010b740 <sysfile_rename>:

/* sysfile_rename - rename file */
int
sysfile_rename(const char *__path1, const char *__path2) {
c010b740:	55                   	push   %ebp
c010b741:	89 e5                	mov    %esp,%ebp
c010b743:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010b746:	8b 45 08             	mov    0x8(%ebp),%eax
c010b749:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b74d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b750:	89 04 24             	mov    %eax,(%esp)
c010b753:	e8 8c fa ff ff       	call   c010b1e4 <copy_path>
c010b758:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b75b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b75f:	74 05                	je     c010b766 <sysfile_rename+0x26>
        return ret;
c010b761:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b764:	eb 59                	jmp    c010b7bf <sysfile_rename+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010b766:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b769:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b76d:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b770:	89 04 24             	mov    %eax,(%esp)
c010b773:	e8 6c fa ff ff       	call   c010b1e4 <copy_path>
c010b778:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b77b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b77f:	74 10                	je     c010b791 <sysfile_rename+0x51>
        kfree(old_path);
c010b781:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b784:	89 04 24             	mov    %eax,(%esp)
c010b787:	e8 ed 92 ff ff       	call   c0104a79 <kfree>
        return ret;
c010b78c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b78f:	eb 2e                	jmp    c010b7bf <sysfile_rename+0x7f>
    }
    ret = vfs_rename(old_path, new_path);
c010b791:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b794:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b797:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b79b:	89 04 24             	mov    %eax,(%esp)
c010b79e:	e8 d8 43 00 00       	call   c010fb7b <vfs_rename>
c010b7a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010b7a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7a9:	89 04 24             	mov    %eax,(%esp)
c010b7ac:	e8 c8 92 ff ff       	call   c0104a79 <kfree>
c010b7b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7b4:	89 04 24             	mov    %eax,(%esp)
c010b7b7:	e8 bd 92 ff ff       	call   c0104a79 <kfree>
    return ret;
c010b7bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b7bf:	c9                   	leave  
c010b7c0:	c3                   	ret    

c010b7c1 <sysfile_unlink>:

/* sysfile_unlink - unlink file */
int
sysfile_unlink(const char *__path) {
c010b7c1:	55                   	push   %ebp
c010b7c2:	89 e5                	mov    %esp,%ebp
c010b7c4:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b7c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b7ce:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b7d1:	89 04 24             	mov    %eax,(%esp)
c010b7d4:	e8 0b fa ff ff       	call   c010b1e4 <copy_path>
c010b7d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b7dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b7e0:	74 05                	je     c010b7e7 <sysfile_unlink+0x26>
        return ret;
c010b7e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7e5:	eb 1c                	jmp    c010b803 <sysfile_unlink+0x42>
    }
    ret = vfs_unlink(path);
c010b7e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7ea:	89 04 24             	mov    %eax,(%esp)
c010b7ed:	e8 7f 43 00 00       	call   c010fb71 <vfs_unlink>
c010b7f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b7f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7f8:	89 04 24             	mov    %eax,(%esp)
c010b7fb:	e8 79 92 ff ff       	call   c0104a79 <kfree>
    return ret;
c010b800:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b803:	c9                   	leave  
c010b804:	c3                   	ret    

c010b805 <sysfile_getcwd>:

/* sysfile_get cwd - get current working directory */
int
sysfile_getcwd(char *buf, size_t len) {
c010b805:	55                   	push   %ebp
c010b806:	89 e5                	mov    %esp,%ebp
c010b808:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b80b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b810:	8b 40 18             	mov    0x18(%eax),%eax
c010b813:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len == 0) {
c010b816:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b81a:	75 07                	jne    c010b823 <sysfile_getcwd+0x1e>
        return -E_INVAL;
c010b81c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b821:	eb 77                	jmp    c010b89a <sysfile_getcwd+0x95>
    }

    int ret = -E_INVAL;
c010b823:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    lock_mm(mm);
c010b82a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b82d:	89 04 24             	mov    %eax,(%esp)
c010b830:	e8 56 f9 ff ff       	call   c010b18b <lock_mm>
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
c010b835:	8b 45 08             	mov    0x8(%ebp),%eax
c010b838:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010b83f:	00 
c010b840:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b843:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b847:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b84b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b84e:	89 04 24             	mov    %eax,(%esp)
c010b851:	e8 89 d4 ff ff       	call   c0108cdf <user_mem_check>
c010b856:	85 c0                	test   %eax,%eax
c010b858:	74 32                	je     c010b88c <sysfile_getcwd+0x87>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
c010b85a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010b861:	00 
c010b862:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b865:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b869:	8b 45 08             	mov    0x8(%ebp),%eax
c010b86c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b870:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010b873:	89 04 24             	mov    %eax,(%esp)
c010b876:	e8 61 f7 ff ff       	call   c010afdc <iobuf_init>
c010b87b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            ret = vfs_getcwd(iob);
c010b87e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b881:	89 04 24             	mov    %eax,(%esp)
c010b884:	e8 ba 47 00 00       	call   c0110043 <vfs_getcwd>
c010b889:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010b88c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b88f:	89 04 24             	mov    %eax,(%esp)
c010b892:	e8 27 f9 ff ff       	call   c010b1be <unlock_mm>
    return ret;
c010b897:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b89a:	c9                   	leave  
c010b89b:	c3                   	ret    

c010b89c <sysfile_getdirentry>:

/* sysfile_getdirentry - get the file entry in DIR */
int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
c010b89c:	55                   	push   %ebp
c010b89d:	89 e5                	mov    %esp,%ebp
c010b89f:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b8a2:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b8a7:	8b 40 18             	mov    0x18(%eax),%eax
c010b8aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
c010b8ad:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c010b8b4:	e8 a5 91 ff ff       	call   c0104a5e <kmalloc>
c010b8b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b8bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b8c0:	75 0a                	jne    c010b8cc <sysfile_getdirentry+0x30>
        return -E_NO_MEM;
c010b8c2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b8c7:	e9 c2 00 00 00       	jmp    c010b98e <sysfile_getdirentry+0xf2>
    }

    int ret = 0;
c010b8cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_mm(mm);
c010b8d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8d6:	89 04 24             	mov    %eax,(%esp)
c010b8d9:	e8 ad f8 ff ff       	call   c010b18b <lock_mm>
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
c010b8de:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b8e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8e4:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c010b8eb:	00 
c010b8ec:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c010b8f3:	00 
c010b8f4:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b8f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b8fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8ff:	89 04 24             	mov    %eax,(%esp)
c010b902:	e8 39 ca ff ff       	call   c0108340 <copy_from_user>
c010b907:	85 c0                	test   %eax,%eax
c010b909:	75 07                	jne    c010b912 <sysfile_getdirentry+0x76>
            ret = -E_INVAL;
c010b90b:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010b912:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b915:	89 04 24             	mov    %eax,(%esp)
c010b918:	e8 a1 f8 ff ff       	call   c010b1be <unlock_mm>

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
c010b91d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b921:	75 5d                	jne    c010b980 <sysfile_getdirentry+0xe4>
c010b923:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b926:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b92a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b92d:	89 04 24             	mov    %eax,(%esp)
c010b930:	e8 40 f2 ff ff       	call   c010ab75 <file_getdirentry>
c010b935:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b938:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b93c:	75 42                	jne    c010b980 <sysfile_getdirentry+0xe4>
        goto out;
    }

    lock_mm(mm);
c010b93e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b941:	89 04 24             	mov    %eax,(%esp)
c010b944:	e8 42 f8 ff ff       	call   c010b18b <lock_mm>
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
c010b949:	c7 44 24 0c 04 01 00 	movl   $0x104,0xc(%esp)
c010b950:	00 
c010b951:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b954:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b958:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b95b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b95f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b962:	89 04 24             	mov    %eax,(%esp)
c010b965:	e8 27 ca ff ff       	call   c0108391 <copy_to_user>
c010b96a:	85 c0                	test   %eax,%eax
c010b96c:	75 07                	jne    c010b975 <sysfile_getdirentry+0xd9>
            ret = -E_INVAL;
c010b96e:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010b975:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b978:	89 04 24             	mov    %eax,(%esp)
c010b97b:	e8 3e f8 ff ff       	call   c010b1be <unlock_mm>

out:
    kfree(direntp);
c010b980:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b983:	89 04 24             	mov    %eax,(%esp)
c010b986:	e8 ee 90 ff ff       	call   c0104a79 <kfree>
    return ret;
c010b98b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b98e:	c9                   	leave  
c010b98f:	c3                   	ret    

c010b990 <sysfile_dup>:

/* sysfile_dup -  duplicate fd1 to fd2 */
int
sysfile_dup(int fd1, int fd2) {
c010b990:	55                   	push   %ebp
c010b991:	89 e5                	mov    %esp,%ebp
c010b993:	83 ec 18             	sub    $0x18,%esp
    return file_dup(fd1, fd2);
c010b996:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b999:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b99d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9a0:	89 04 24             	mov    %eax,(%esp)
c010b9a3:	e8 db f2 ff ff       	call   c010ac83 <file_dup>
}
c010b9a8:	c9                   	leave  
c010b9a9:	c3                   	ret    

c010b9aa <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
c010b9aa:	55                   	push   %ebp
c010b9ab:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010b9ad:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010b9b2:	5d                   	pop    %ebp
c010b9b3:	c3                   	ret    

c010b9b4 <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
c010b9b4:	55                   	push   %ebp
c010b9b5:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010b9b7:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010b9bc:	5d                   	pop    %ebp
c010b9bd:	c3                   	ret    

c010b9be <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010b9be:	52                   	push   %edx
    call *%ebx              # call fn
c010b9bf:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010b9c1:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010b9c2:	e8 f6 0c 00 00       	call   c010c6bd <do_exit>

c010b9c7 <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010b9c7:	55                   	push   %ebp
c010b9c8:	89 e5                	mov    %esp,%ebp
c010b9ca:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010b9cd:	8b 55 10             	mov    0x10(%ebp),%edx
c010b9d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9d3:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010b9d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9d8:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b9db:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010b9de:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9e1:	83 c0 08             	add    $0x8,%eax
c010b9e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b9e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b9ea:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b9ed:	89 50 04             	mov    %edx,0x4(%eax)
c010b9f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b9f3:	8b 50 04             	mov    0x4(%eax),%edx
c010b9f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b9f9:	89 10                	mov    %edx,(%eax)
    return timer;
c010b9fb:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b9fe:	c9                   	leave  
c010b9ff:	c3                   	ret    

c010ba00 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010ba00:	55                   	push   %ebp
c010ba01:	89 e5                	mov    %esp,%ebp
c010ba03:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010ba06:	9c                   	pushf  
c010ba07:	58                   	pop    %eax
c010ba08:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010ba0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010ba0e:	25 00 02 00 00       	and    $0x200,%eax
c010ba13:	85 c0                	test   %eax,%eax
c010ba15:	74 0c                	je     c010ba23 <__intr_save+0x23>
        intr_disable();
c010ba17:	e8 0e 67 ff ff       	call   c010212a <intr_disable>
        return 1;
c010ba1c:	b8 01 00 00 00       	mov    $0x1,%eax
c010ba21:	eb 05                	jmp    c010ba28 <__intr_save+0x28>
    }
    return 0;
c010ba23:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ba28:	c9                   	leave  
c010ba29:	c3                   	ret    

c010ba2a <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010ba2a:	55                   	push   %ebp
c010ba2b:	89 e5                	mov    %esp,%ebp
c010ba2d:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010ba30:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ba34:	74 05                	je     c010ba3b <__intr_restore+0x11>
        intr_enable();
c010ba36:	e8 e9 66 ff ff       	call   c0102124 <intr_enable>
    }
}
c010ba3b:	c9                   	leave  
c010ba3c:	c3                   	ret    

c010ba3d <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010ba3d:	55                   	push   %ebp
c010ba3e:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010ba40:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba43:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010ba48:	29 c2                	sub    %eax,%edx
c010ba4a:	89 d0                	mov    %edx,%eax
c010ba4c:	c1 f8 05             	sar    $0x5,%eax
}
c010ba4f:	5d                   	pop    %ebp
c010ba50:	c3                   	ret    

c010ba51 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010ba51:	55                   	push   %ebp
c010ba52:	89 e5                	mov    %esp,%ebp
c010ba54:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010ba57:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba5a:	89 04 24             	mov    %eax,(%esp)
c010ba5d:	e8 db ff ff ff       	call   c010ba3d <page2ppn>
c010ba62:	c1 e0 0c             	shl    $0xc,%eax
}
c010ba65:	c9                   	leave  
c010ba66:	c3                   	ret    

c010ba67 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010ba67:	55                   	push   %ebp
c010ba68:	89 e5                	mov    %esp,%ebp
c010ba6a:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010ba6d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba70:	c1 e8 0c             	shr    $0xc,%eax
c010ba73:	89 c2                	mov    %eax,%edx
c010ba75:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010ba7a:	39 c2                	cmp    %eax,%edx
c010ba7c:	72 1c                	jb     c010ba9a <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010ba7e:	c7 44 24 08 bc 78 11 	movl   $0xc01178bc,0x8(%esp)
c010ba85:	c0 
c010ba86:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010ba8d:	00 
c010ba8e:	c7 04 24 db 78 11 c0 	movl   $0xc01178db,(%esp)
c010ba95:	e8 2e 54 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c010ba9a:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010ba9f:	8b 55 08             	mov    0x8(%ebp),%edx
c010baa2:	c1 ea 0c             	shr    $0xc,%edx
c010baa5:	c1 e2 05             	shl    $0x5,%edx
c010baa8:	01 d0                	add    %edx,%eax
}
c010baaa:	c9                   	leave  
c010baab:	c3                   	ret    

c010baac <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010baac:	55                   	push   %ebp
c010baad:	89 e5                	mov    %esp,%ebp
c010baaf:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010bab2:	8b 45 08             	mov    0x8(%ebp),%eax
c010bab5:	89 04 24             	mov    %eax,(%esp)
c010bab8:	e8 94 ff ff ff       	call   c010ba51 <page2pa>
c010babd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bac3:	c1 e8 0c             	shr    $0xc,%eax
c010bac6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bac9:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010bace:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010bad1:	72 23                	jb     c010baf6 <page2kva+0x4a>
c010bad3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bad6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bada:	c7 44 24 08 ec 78 11 	movl   $0xc01178ec,0x8(%esp)
c010bae1:	c0 
c010bae2:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010bae9:	00 
c010baea:	c7 04 24 db 78 11 c0 	movl   $0xc01178db,(%esp)
c010baf1:	e8 d2 53 ff ff       	call   c0100ec8 <__panic>
c010baf6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010baf9:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010bafe:	c9                   	leave  
c010baff:	c3                   	ret    

c010bb00 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010bb00:	55                   	push   %ebp
c010bb01:	89 e5                	mov    %esp,%ebp
c010bb03:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010bb06:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb09:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb0c:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010bb13:	77 23                	ja     c010bb38 <kva2page+0x38>
c010bb15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb18:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bb1c:	c7 44 24 08 10 79 11 	movl   $0xc0117910,0x8(%esp)
c010bb23:	c0 
c010bb24:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010bb2b:	00 
c010bb2c:	c7 04 24 db 78 11 c0 	movl   $0xc01178db,(%esp)
c010bb33:	e8 90 53 ff ff       	call   c0100ec8 <__panic>
c010bb38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb3b:	05 00 00 00 40       	add    $0x40000000,%eax
c010bb40:	89 04 24             	mov    %eax,(%esp)
c010bb43:	e8 1f ff ff ff       	call   c010ba67 <pa2page>
}
c010bb48:	c9                   	leave  
c010bb49:	c3                   	ret    

c010bb4a <mm_count_inc>:
set_mm_count(struct mm_struct *mm, int val) {
    mm->mm_count = val;
}

static inline int
mm_count_inc(struct mm_struct *mm) {
c010bb4a:	55                   	push   %ebp
c010bb4b:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010bb4d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb50:	8b 40 18             	mov    0x18(%eax),%eax
c010bb53:	8d 50 01             	lea    0x1(%eax),%edx
c010bb56:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb59:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010bb5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb5f:	8b 40 18             	mov    0x18(%eax),%eax
}
c010bb62:	5d                   	pop    %ebp
c010bb63:	c3                   	ret    

c010bb64 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010bb64:	55                   	push   %ebp
c010bb65:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010bb67:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb6a:	8b 40 18             	mov    0x18(%eax),%eax
c010bb6d:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bb70:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb73:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010bb76:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb79:	8b 40 18             	mov    0x18(%eax),%eax
}
c010bb7c:	5d                   	pop    %ebp
c010bb7d:	c3                   	ret    

c010bb7e <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010bb7e:	55                   	push   %ebp
c010bb7f:	89 e5                	mov    %esp,%ebp
c010bb81:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010bb84:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bb88:	74 25                	je     c010bbaf <lock_mm+0x31>
        down(&(mm->mm_sem));
c010bb8a:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb8d:	83 c0 1c             	add    $0x1c,%eax
c010bb90:	89 04 24             	mov    %eax,(%esp)
c010bb93:	e8 fd dd ff ff       	call   c0109995 <down>
        if (current != NULL) {
c010bb98:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010bb9d:	85 c0                	test   %eax,%eax
c010bb9f:	74 0e                	je     c010bbaf <lock_mm+0x31>
            mm->locked_by = current->pid;
c010bba1:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010bba6:	8b 50 04             	mov    0x4(%eax),%edx
c010bba9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbac:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010bbaf:	c9                   	leave  
c010bbb0:	c3                   	ret    

c010bbb1 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010bbb1:	55                   	push   %ebp
c010bbb2:	89 e5                	mov    %esp,%ebp
c010bbb4:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010bbb7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bbbb:	74 18                	je     c010bbd5 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010bbbd:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbc0:	83 c0 1c             	add    $0x1c,%eax
c010bbc3:	89 04 24             	mov    %eax,(%esp)
c010bbc6:	e8 af dd ff ff       	call   c010997a <up>
        mm->locked_by = 0;
c010bbcb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbce:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010bbd5:	c9                   	leave  
c010bbd6:	c3                   	ret    

c010bbd7 <files_count_inc>:

static inline int
files_count_inc(struct files_struct *filesp) {
c010bbd7:	55                   	push   %ebp
c010bbd8:	89 e5                	mov    %esp,%ebp
    filesp->files_count += 1;
c010bbda:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbdd:	8b 40 08             	mov    0x8(%eax),%eax
c010bbe0:	8d 50 01             	lea    0x1(%eax),%edx
c010bbe3:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbe6:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010bbe9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbec:	8b 40 08             	mov    0x8(%eax),%eax
}
c010bbef:	5d                   	pop    %ebp
c010bbf0:	c3                   	ret    

c010bbf1 <files_count_dec>:

static inline int
files_count_dec(struct files_struct *filesp) {
c010bbf1:	55                   	push   %ebp
c010bbf2:	89 e5                	mov    %esp,%ebp
    filesp->files_count -= 1;
c010bbf4:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbf7:	8b 40 08             	mov    0x8(%eax),%eax
c010bbfa:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bbfd:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc00:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010bc03:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc06:	8b 40 08             	mov    0x8(%eax),%eax
}
c010bc09:	5d                   	pop    %ebp
c010bc0a:	c3                   	ret    

c010bc0b <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010bc0b:	55                   	push   %ebp
c010bc0c:	89 e5                	mov    %esp,%ebp
c010bc0e:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010bc11:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
c010bc18:	e8 41 8e ff ff       	call   c0104a5e <kmalloc>
c010bc1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010bc20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc24:	74 3a                	je     c010bc60 <alloc_proc+0x55>
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
    //LAB8:EXERCISE2 2012012017 HINT:need add some code to init fs in proc_struct, ...
        memset(proc, 0, sizeof(struct proc_struct));
c010bc26:	c7 44 24 08 c8 00 00 	movl   $0xc8,0x8(%esp)
c010bc2d:	00 
c010bc2e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bc35:	00 
c010bc36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc39:	89 04 24             	mov    %eax,(%esp)
c010bc3c:	e8 ee 92 00 00       	call   c0114f2f <memset>
        proc->state = PROC_UNINIT;
c010bc41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc44:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010bc4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc4d:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->cr3 = boot_cr3;
c010bc54:	8b 15 24 30 15 c0    	mov    0xc0153024,%edx
c010bc5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc5d:	89 50 40             	mov    %edx,0x40(%eax)
    }
    return proc;
c010bc60:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bc63:	c9                   	leave  
c010bc64:	c3                   	ret    

c010bc65 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010bc65:	55                   	push   %ebp
c010bc66:	89 e5                	mov    %esp,%ebp
c010bc68:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010bc6b:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc6e:	83 c0 48             	add    $0x48,%eax
c010bc71:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010bc78:	00 
c010bc79:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bc80:	00 
c010bc81:	89 04 24             	mov    %eax,(%esp)
c010bc84:	e8 a6 92 00 00       	call   c0114f2f <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010bc89:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc8c:	8d 50 48             	lea    0x48(%eax),%edx
c010bc8f:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010bc96:	00 
c010bc97:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc9a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc9e:	89 14 24             	mov    %edx,(%esp)
c010bca1:	e8 6b 93 00 00       	call   c0115011 <memcpy>
}
c010bca6:	c9                   	leave  
c010bca7:	c3                   	ret    

c010bca8 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010bca8:	55                   	push   %ebp
c010bca9:	89 e5                	mov    %esp,%ebp
c010bcab:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010bcae:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010bcb5:	00 
c010bcb6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bcbd:	00 
c010bcbe:	c7 04 24 60 1f 15 c0 	movl   $0xc0151f60,(%esp)
c010bcc5:	e8 65 92 00 00       	call   c0114f2f <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010bcca:	8b 45 08             	mov    0x8(%ebp),%eax
c010bccd:	83 c0 48             	add    $0x48,%eax
c010bcd0:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010bcd7:	00 
c010bcd8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bcdc:	c7 04 24 60 1f 15 c0 	movl   $0xc0151f60,(%esp)
c010bce3:	e8 29 93 00 00       	call   c0115011 <memcpy>
}
c010bce8:	c9                   	leave  
c010bce9:	c3                   	ret    

c010bcea <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010bcea:	55                   	push   %ebp
c010bceb:	89 e5                	mov    %esp,%ebp
c010bced:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010bcf0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcf3:	83 c0 7c             	add    $0x7c,%eax
c010bcf6:	c7 45 fc fc 31 15 c0 	movl   $0xc01531fc,-0x4(%ebp)
c010bcfd:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010bd00:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bd03:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd06:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bd09:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010bd0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd0f:	8b 40 04             	mov    0x4(%eax),%eax
c010bd12:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bd15:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010bd18:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bd1b:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010bd1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010bd21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bd24:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bd27:	89 10                	mov    %edx,(%eax)
c010bd29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bd2c:	8b 10                	mov    (%eax),%edx
c010bd2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd31:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010bd34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd37:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010bd3a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010bd3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd40:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010bd43:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010bd45:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd48:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010bd4f:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010bd52:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd55:	8b 40 14             	mov    0x14(%eax),%eax
c010bd58:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010bd5e:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd61:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010bd67:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd6a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bd70:	85 c0                	test   %eax,%eax
c010bd72:	74 12                	je     c010bd86 <set_links+0x9c>
        proc->optr->yptr = proc;
c010bd74:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd77:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bd7d:	8b 55 08             	mov    0x8(%ebp),%edx
c010bd80:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010bd86:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd89:	8b 40 14             	mov    0x14(%eax),%eax
c010bd8c:	8b 55 08             	mov    0x8(%ebp),%edx
c010bd8f:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010bd95:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010bd9a:	83 c0 01             	add    $0x1,%eax
c010bd9d:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40
}
c010bda2:	c9                   	leave  
c010bda3:	c3                   	ret    

c010bda4 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010bda4:	55                   	push   %ebp
c010bda5:	89 e5                	mov    %esp,%ebp
c010bda7:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010bdaa:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdad:	83 c0 7c             	add    $0x7c,%eax
c010bdb0:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010bdb3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bdb6:	8b 40 04             	mov    0x4(%eax),%eax
c010bdb9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bdbc:	8b 12                	mov    (%edx),%edx
c010bdbe:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010bdc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010bdc4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bdc7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bdca:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010bdcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bdd0:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010bdd3:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010bdd5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdd8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bdde:	85 c0                	test   %eax,%eax
c010bde0:	74 18                	je     c010bdfa <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010bde2:	8b 45 08             	mov    0x8(%ebp),%eax
c010bde5:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bdeb:	8b 55 08             	mov    0x8(%ebp),%edx
c010bdee:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010bdf4:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010bdfa:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdfd:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010be03:	85 c0                	test   %eax,%eax
c010be05:	74 1a                	je     c010be21 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010be07:	8b 45 08             	mov    0x8(%ebp),%eax
c010be0a:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010be10:	8b 55 08             	mov    0x8(%ebp),%edx
c010be13:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010be19:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010be1f:	eb 15                	jmp    c010be36 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010be21:	8b 45 08             	mov    0x8(%ebp),%eax
c010be24:	8b 40 14             	mov    0x14(%eax),%eax
c010be27:	8b 55 08             	mov    0x8(%ebp),%edx
c010be2a:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010be30:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010be36:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010be3b:	83 e8 01             	sub    $0x1,%eax
c010be3e:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40
}
c010be43:	c9                   	leave  
c010be44:	c3                   	ret    

c010be45 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010be45:	55                   	push   %ebp
c010be46:	89 e5                	mov    %esp,%ebp
c010be48:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010be4b:	c7 45 f8 fc 31 15 c0 	movl   $0xc01531fc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010be52:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010be57:	83 c0 01             	add    $0x1,%eax
c010be5a:	a3 84 ea 14 c0       	mov    %eax,0xc014ea84
c010be5f:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010be64:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010be69:	7e 0c                	jle    c010be77 <get_pid+0x32>
        last_pid = 1;
c010be6b:	c7 05 84 ea 14 c0 01 	movl   $0x1,0xc014ea84
c010be72:	00 00 00 
        goto inside;
c010be75:	eb 13                	jmp    c010be8a <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010be77:	8b 15 84 ea 14 c0    	mov    0xc014ea84,%edx
c010be7d:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010be82:	39 c2                	cmp    %eax,%edx
c010be84:	0f 8c ac 00 00 00    	jl     c010bf36 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010be8a:	c7 05 88 ea 14 c0 00 	movl   $0x2000,0xc014ea88
c010be91:	20 00 00 
    repeat:
        le = list;
c010be94:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010be97:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010be9a:	eb 7f                	jmp    c010bf1b <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010be9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010be9f:	83 e8 7c             	sub    $0x7c,%eax
c010bea2:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010bea5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bea8:	8b 50 04             	mov    0x4(%eax),%edx
c010beab:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010beb0:	39 c2                	cmp    %eax,%edx
c010beb2:	75 3e                	jne    c010bef2 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010beb4:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010beb9:	83 c0 01             	add    $0x1,%eax
c010bebc:	a3 84 ea 14 c0       	mov    %eax,0xc014ea84
c010bec1:	8b 15 84 ea 14 c0    	mov    0xc014ea84,%edx
c010bec7:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010becc:	39 c2                	cmp    %eax,%edx
c010bece:	7c 4b                	jl     c010bf1b <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010bed0:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010bed5:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010beda:	7e 0a                	jle    c010bee6 <get_pid+0xa1>
                        last_pid = 1;
c010bedc:	c7 05 84 ea 14 c0 01 	movl   $0x1,0xc014ea84
c010bee3:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010bee6:	c7 05 88 ea 14 c0 00 	movl   $0x2000,0xc014ea88
c010beed:	20 00 00 
                    goto repeat;
c010bef0:	eb a2                	jmp    c010be94 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010bef2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bef5:	8b 50 04             	mov    0x4(%eax),%edx
c010bef8:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010befd:	39 c2                	cmp    %eax,%edx
c010beff:	7e 1a                	jle    c010bf1b <get_pid+0xd6>
c010bf01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf04:	8b 50 04             	mov    0x4(%eax),%edx
c010bf07:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010bf0c:	39 c2                	cmp    %eax,%edx
c010bf0e:	7d 0b                	jge    c010bf1b <get_pid+0xd6>
                next_safe = proc->pid;
c010bf10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf13:	8b 40 04             	mov    0x4(%eax),%eax
c010bf16:	a3 88 ea 14 c0       	mov    %eax,0xc014ea88
c010bf1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bf1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010bf21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bf24:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010bf27:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010bf2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bf2d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010bf30:	0f 85 66 ff ff ff    	jne    c010be9c <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010bf36:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
}
c010bf3b:	c9                   	leave  
c010bf3c:	c3                   	ret    

c010bf3d <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010bf3d:	55                   	push   %ebp
c010bf3e:	89 e5                	mov    %esp,%ebp
c010bf40:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010bf43:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010bf48:	39 45 08             	cmp    %eax,0x8(%ebp)
c010bf4b:	74 63                	je     c010bfb0 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010bf4d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010bf52:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bf55:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf58:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010bf5b:	e8 a0 fa ff ff       	call   c010ba00 <__intr_save>
c010bf60:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010bf63:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf66:	a3 28 ff 14 c0       	mov    %eax,0xc014ff28
            load_esp0(next->kstack + KSTACKSIZE);
c010bf6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bf6e:	8b 40 0c             	mov    0xc(%eax),%eax
c010bf71:	05 00 20 00 00       	add    $0x2000,%eax
c010bf76:	89 04 24             	mov    %eax,(%esp)
c010bf79:	e8 07 8e ff ff       	call   c0104d85 <load_esp0>
            lcr3(next->cr3);
c010bf7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bf81:	8b 40 40             	mov    0x40(%eax),%eax
c010bf84:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010bf87:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bf8a:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010bf8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bf90:	8d 50 1c             	lea    0x1c(%eax),%edx
c010bf93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf96:	83 c0 1c             	add    $0x1c,%eax
c010bf99:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bf9d:	89 04 24             	mov    %eax,(%esp)
c010bfa0:	e8 34 1c 00 00       	call   c010dbd9 <switch_to>
        }
        local_intr_restore(intr_flag);
c010bfa5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bfa8:	89 04 24             	mov    %eax,(%esp)
c010bfab:	e8 7a fa ff ff       	call   c010ba2a <__intr_restore>
    }
}
c010bfb0:	c9                   	leave  
c010bfb1:	c3                   	ret    

c010bfb2 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010bfb2:	55                   	push   %ebp
c010bfb3:	89 e5                	mov    %esp,%ebp
c010bfb5:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010bfb8:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010bfbd:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bfc0:	89 04 24             	mov    %eax,(%esp)
c010bfc3:	e8 f5 6a ff ff       	call   c0102abd <forkrets>
}
c010bfc8:	c9                   	leave  
c010bfc9:	c3                   	ret    

c010bfca <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010bfca:	55                   	push   %ebp
c010bfcb:	89 e5                	mov    %esp,%ebp
c010bfcd:	53                   	push   %ebx
c010bfce:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010bfd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfd4:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010bfda:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfdd:	8b 40 04             	mov    0x4(%eax),%eax
c010bfe0:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010bfe7:	00 
c010bfe8:	89 04 24             	mov    %eax,(%esp)
c010bfeb:	e8 e5 83 00 00       	call   c01143d5 <hash32>
c010bff0:	c1 e0 03             	shl    $0x3,%eax
c010bff3:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010bff8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bffb:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010bffe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c001:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c004:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c007:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c00a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c00d:	8b 40 04             	mov    0x4(%eax),%eax
c010c010:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c013:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c016:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c019:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010c01c:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c01f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c022:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c025:	89 10                	mov    %edx,(%eax)
c010c027:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c02a:	8b 10                	mov    (%eax),%edx
c010c02c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c02f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c032:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c035:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c038:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c03b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c03e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c041:	89 10                	mov    %edx,(%eax)
}
c010c043:	83 c4 34             	add    $0x34,%esp
c010c046:	5b                   	pop    %ebx
c010c047:	5d                   	pop    %ebp
c010c048:	c3                   	ret    

c010c049 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010c049:	55                   	push   %ebp
c010c04a:	89 e5                	mov    %esp,%ebp
c010c04c:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010c04f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c052:	05 84 00 00 00       	add    $0x84,%eax
c010c057:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c05a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c05d:	8b 40 04             	mov    0x4(%eax),%eax
c010c060:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c063:	8b 12                	mov    (%edx),%edx
c010c065:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c068:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c06b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c06e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c071:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c074:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c077:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c07a:	89 10                	mov    %edx,(%eax)
}
c010c07c:	c9                   	leave  
c010c07d:	c3                   	ret    

c010c07e <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010c07e:	55                   	push   %ebp
c010c07f:	89 e5                	mov    %esp,%ebp
c010c081:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010c084:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c088:	7e 61                	jle    c010c0eb <find_proc+0x6d>
c010c08a:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010c091:	7f 58                	jg     c010c0eb <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010c093:	8b 45 08             	mov    0x8(%ebp),%eax
c010c096:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c09d:	00 
c010c09e:	89 04 24             	mov    %eax,(%esp)
c010c0a1:	e8 2f 83 00 00       	call   c01143d5 <hash32>
c010c0a6:	c1 e0 03             	shl    $0x3,%eax
c010c0a9:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010c0ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c0b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c0b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010c0b7:	eb 1b                	jmp    c010c0d4 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010c0b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0bc:	2d 84 00 00 00       	sub    $0x84,%eax
c010c0c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010c0c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c0c7:	8b 40 04             	mov    0x4(%eax),%eax
c010c0ca:	3b 45 08             	cmp    0x8(%ebp),%eax
c010c0cd:	75 05                	jne    c010c0d4 <find_proc+0x56>
                return proc;
c010c0cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c0d2:	eb 1c                	jmp    c010c0f0 <find_proc+0x72>
c010c0d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c0da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c0dd:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010c0e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c0e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0e6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010c0e9:	75 ce                	jne    c010c0b9 <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010c0eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c0f0:	c9                   	leave  
c010c0f1:	c3                   	ret    

c010c0f2 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010c0f2:	55                   	push   %ebp
c010c0f3:	89 e5                	mov    %esp,%ebp
c010c0f5:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010c0f8:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010c0ff:	00 
c010c100:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c107:	00 
c010c108:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c10b:	89 04 24             	mov    %eax,(%esp)
c010c10e:	e8 1c 8e 00 00       	call   c0114f2f <memset>
    tf.tf_cs = KERNEL_CS;
c010c113:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010c119:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010c11f:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010c123:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010c127:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010c12b:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010c12f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c132:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010c135:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c138:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010c13b:	b8 be b9 10 c0       	mov    $0xc010b9be,%eax
c010c140:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010c143:	8b 45 10             	mov    0x10(%ebp),%eax
c010c146:	80 cc 01             	or     $0x1,%ah
c010c149:	89 c2                	mov    %eax,%edx
c010c14b:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c14e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c152:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c159:	00 
c010c15a:	89 14 24             	mov    %edx,(%esp)
c010c15d:	e8 0e 04 00 00       	call   c010c570 <do_fork>
}
c010c162:	c9                   	leave  
c010c163:	c3                   	ret    

c010c164 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010c164:	55                   	push   %ebp
c010c165:	89 e5                	mov    %esp,%ebp
c010c167:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010c16a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c171:	e8 5d 8d ff ff       	call   c0104ed3 <alloc_pages>
c010c176:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010c179:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c17d:	74 1a                	je     c010c199 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010c17f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c182:	89 04 24             	mov    %eax,(%esp)
c010c185:	e8 22 f9 ff ff       	call   c010baac <page2kva>
c010c18a:	89 c2                	mov    %eax,%edx
c010c18c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c18f:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010c192:	b8 00 00 00 00       	mov    $0x0,%eax
c010c197:	eb 05                	jmp    c010c19e <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010c199:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010c19e:	c9                   	leave  
c010c19f:	c3                   	ret    

c010c1a0 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010c1a0:	55                   	push   %ebp
c010c1a1:	89 e5                	mov    %esp,%ebp
c010c1a3:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010c1a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1a9:	8b 40 0c             	mov    0xc(%eax),%eax
c010c1ac:	89 04 24             	mov    %eax,(%esp)
c010c1af:	e8 4c f9 ff ff       	call   c010bb00 <kva2page>
c010c1b4:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010c1bb:	00 
c010c1bc:	89 04 24             	mov    %eax,(%esp)
c010c1bf:	e8 7a 8d ff ff       	call   c0104f3e <free_pages>
}
c010c1c4:	c9                   	leave  
c010c1c5:	c3                   	ret    

c010c1c6 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010c1c6:	55                   	push   %ebp
c010c1c7:	89 e5                	mov    %esp,%ebp
c010c1c9:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010c1cc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c1d3:	e8 fb 8c ff ff       	call   c0104ed3 <alloc_pages>
c010c1d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c1db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c1df:	75 0a                	jne    c010c1eb <setup_pgdir+0x25>
        return -E_NO_MEM;
c010c1e1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010c1e6:	e9 80 00 00 00       	jmp    c010c26b <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010c1eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1ee:	89 04 24             	mov    %eax,(%esp)
c010c1f1:	e8 b6 f8 ff ff       	call   c010baac <page2kva>
c010c1f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010c1f9:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010c1fe:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010c205:	00 
c010c206:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c20a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c20d:	89 04 24             	mov    %eax,(%esp)
c010c210:	e8 fc 8d 00 00       	call   c0115011 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010c215:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c218:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010c21e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c221:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c224:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010c22b:	77 23                	ja     c010c250 <setup_pgdir+0x8a>
c010c22d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c230:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c234:	c7 44 24 08 10 79 11 	movl   $0xc0117910,0x8(%esp)
c010c23b:	c0 
c010c23c:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c010c243:	00 
c010c244:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010c24b:	e8 78 4c ff ff       	call   c0100ec8 <__panic>
c010c250:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c253:	05 00 00 00 40       	add    $0x40000000,%eax
c010c258:	83 c8 03             	or     $0x3,%eax
c010c25b:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010c25d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c260:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c263:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010c266:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c26b:	c9                   	leave  
c010c26c:	c3                   	ret    

c010c26d <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010c26d:	55                   	push   %ebp
c010c26e:	89 e5                	mov    %esp,%ebp
c010c270:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010c273:	8b 45 08             	mov    0x8(%ebp),%eax
c010c276:	8b 40 0c             	mov    0xc(%eax),%eax
c010c279:	89 04 24             	mov    %eax,(%esp)
c010c27c:	e8 7f f8 ff ff       	call   c010bb00 <kva2page>
c010c281:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c288:	00 
c010c289:	89 04 24             	mov    %eax,(%esp)
c010c28c:	e8 ad 8c ff ff       	call   c0104f3e <free_pages>
}
c010c291:	c9                   	leave  
c010c292:	c3                   	ret    

c010c293 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010c293:	55                   	push   %ebp
c010c294:	89 e5                	mov    %esp,%ebp
c010c296:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010c299:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c29e:	8b 40 18             	mov    0x18(%eax),%eax
c010c2a1:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010c2a4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c2a8:	75 0a                	jne    c010c2b4 <copy_mm+0x21>
        return 0;
c010c2aa:	b8 00 00 00 00       	mov    $0x0,%eax
c010c2af:	e9 f9 00 00 00       	jmp    c010c3ad <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010c2b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2b7:	25 00 01 00 00       	and    $0x100,%eax
c010c2bc:	85 c0                	test   %eax,%eax
c010c2be:	74 08                	je     c010c2c8 <copy_mm+0x35>
        mm = oldmm;
c010c2c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c2c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010c2c6:	eb 78                	jmp    c010c340 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010c2c8:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010c2cf:	e8 70 b9 ff ff       	call   c0107c44 <mm_create>
c010c2d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c2d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c2db:	75 05                	jne    c010c2e2 <copy_mm+0x4f>
        goto bad_mm;
c010c2dd:	e9 c8 00 00 00       	jmp    c010c3aa <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010c2e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2e5:	89 04 24             	mov    %eax,(%esp)
c010c2e8:	e8 d9 fe ff ff       	call   c010c1c6 <setup_pgdir>
c010c2ed:	85 c0                	test   %eax,%eax
c010c2ef:	74 05                	je     c010c2f6 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010c2f1:	e9 a9 00 00 00       	jmp    c010c39f <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010c2f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c2f9:	89 04 24             	mov    %eax,(%esp)
c010c2fc:	e8 7d f8 ff ff       	call   c010bb7e <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010c301:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c304:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c308:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c30b:	89 04 24             	mov    %eax,(%esp)
c010c30e:	e8 54 be ff ff       	call   c0108167 <dup_mmap>
c010c313:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010c316:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c319:	89 04 24             	mov    %eax,(%esp)
c010c31c:	e8 90 f8 ff ff       	call   c010bbb1 <unlock_mm>

    if (ret != 0) {
c010c321:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c325:	74 19                	je     c010c340 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010c327:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010c328:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c32b:	89 04 24             	mov    %eax,(%esp)
c010c32e:	e8 35 bf ff ff       	call   c0108268 <exit_mmap>
    put_pgdir(mm);
c010c333:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c336:	89 04 24             	mov    %eax,(%esp)
c010c339:	e8 2f ff ff ff       	call   c010c26d <put_pgdir>
c010c33e:	eb 5f                	jmp    c010c39f <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010c340:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c343:	89 04 24             	mov    %eax,(%esp)
c010c346:	e8 ff f7 ff ff       	call   c010bb4a <mm_count_inc>
    proc->mm = mm;
c010c34b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c34e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c351:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010c354:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c357:	8b 40 0c             	mov    0xc(%eax),%eax
c010c35a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c35d:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010c364:	77 23                	ja     c010c389 <copy_mm+0xf6>
c010c366:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c369:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c36d:	c7 44 24 08 10 79 11 	movl   $0xc0117910,0x8(%esp)
c010c374:	c0 
c010c375:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c010c37c:	00 
c010c37d:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010c384:	e8 3f 4b ff ff       	call   c0100ec8 <__panic>
c010c389:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c38c:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010c392:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c395:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010c398:	b8 00 00 00 00       	mov    $0x0,%eax
c010c39d:	eb 0e                	jmp    c010c3ad <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010c39f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3a2:	89 04 24             	mov    %eax,(%esp)
c010c3a5:	e8 ff bb ff ff       	call   c0107fa9 <mm_destroy>
bad_mm:
    return ret;
c010c3aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c3ad:	c9                   	leave  
c010c3ae:	c3                   	ret    

c010c3af <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010c3af:	55                   	push   %ebp
c010c3b0:	89 e5                	mov    %esp,%ebp
c010c3b2:	57                   	push   %edi
c010c3b3:	56                   	push   %esi
c010c3b4:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010c3b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3b8:	8b 40 0c             	mov    0xc(%eax),%eax
c010c3bb:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010c3c0:	89 c2                	mov    %eax,%edx
c010c3c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3c5:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010c3c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3cb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c3ce:	8b 55 10             	mov    0x10(%ebp),%edx
c010c3d1:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010c3d6:	89 c1                	mov    %eax,%ecx
c010c3d8:	83 e1 01             	and    $0x1,%ecx
c010c3db:	85 c9                	test   %ecx,%ecx
c010c3dd:	74 0e                	je     c010c3ed <copy_thread+0x3e>
c010c3df:	0f b6 0a             	movzbl (%edx),%ecx
c010c3e2:	88 08                	mov    %cl,(%eax)
c010c3e4:	83 c0 01             	add    $0x1,%eax
c010c3e7:	83 c2 01             	add    $0x1,%edx
c010c3ea:	83 eb 01             	sub    $0x1,%ebx
c010c3ed:	89 c1                	mov    %eax,%ecx
c010c3ef:	83 e1 02             	and    $0x2,%ecx
c010c3f2:	85 c9                	test   %ecx,%ecx
c010c3f4:	74 0f                	je     c010c405 <copy_thread+0x56>
c010c3f6:	0f b7 0a             	movzwl (%edx),%ecx
c010c3f9:	66 89 08             	mov    %cx,(%eax)
c010c3fc:	83 c0 02             	add    $0x2,%eax
c010c3ff:	83 c2 02             	add    $0x2,%edx
c010c402:	83 eb 02             	sub    $0x2,%ebx
c010c405:	89 d9                	mov    %ebx,%ecx
c010c407:	c1 e9 02             	shr    $0x2,%ecx
c010c40a:	89 c7                	mov    %eax,%edi
c010c40c:	89 d6                	mov    %edx,%esi
c010c40e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c410:	89 f2                	mov    %esi,%edx
c010c412:	89 f8                	mov    %edi,%eax
c010c414:	b9 00 00 00 00       	mov    $0x0,%ecx
c010c419:	89 de                	mov    %ebx,%esi
c010c41b:	83 e6 02             	and    $0x2,%esi
c010c41e:	85 f6                	test   %esi,%esi
c010c420:	74 0b                	je     c010c42d <copy_thread+0x7e>
c010c422:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010c426:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010c42a:	83 c1 02             	add    $0x2,%ecx
c010c42d:	83 e3 01             	and    $0x1,%ebx
c010c430:	85 db                	test   %ebx,%ebx
c010c432:	74 07                	je     c010c43b <copy_thread+0x8c>
c010c434:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010c438:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010c43b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c43e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c441:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010c448:	8b 45 08             	mov    0x8(%ebp),%eax
c010c44b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c44e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c451:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010c454:	8b 45 08             	mov    0x8(%ebp),%eax
c010c457:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c45a:	8b 55 08             	mov    0x8(%ebp),%edx
c010c45d:	8b 52 3c             	mov    0x3c(%edx),%edx
c010c460:	8b 52 40             	mov    0x40(%edx),%edx
c010c463:	80 ce 02             	or     $0x2,%dh
c010c466:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010c469:	ba b2 bf 10 c0       	mov    $0xc010bfb2,%edx
c010c46e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c471:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010c474:	8b 45 08             	mov    0x8(%ebp),%eax
c010c477:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c47a:	89 c2                	mov    %eax,%edx
c010c47c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c47f:	89 50 20             	mov    %edx,0x20(%eax)
}
c010c482:	5b                   	pop    %ebx
c010c483:	5e                   	pop    %esi
c010c484:	5f                   	pop    %edi
c010c485:	5d                   	pop    %ebp
c010c486:	c3                   	ret    

c010c487 <copy_files>:

//copy_files&put_files function used by do_fork in LAB8
//copy the files_struct from current to proc
static int
copy_files(uint32_t clone_flags, struct proc_struct *proc) {
c010c487:	55                   	push   %ebp
c010c488:	89 e5                	mov    %esp,%ebp
c010c48a:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp, *old_filesp = current->filesp;
c010c48d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c492:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c498:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(old_filesp != NULL);
c010c49b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c49f:	75 24                	jne    c010c4c5 <copy_files+0x3e>
c010c4a1:	c7 44 24 0c 48 79 11 	movl   $0xc0117948,0xc(%esp)
c010c4a8:	c0 
c010c4a9:	c7 44 24 08 5b 79 11 	movl   $0xc011795b,0x8(%esp)
c010c4b0:	c0 
c010c4b1:	c7 44 24 04 7f 01 00 	movl   $0x17f,0x4(%esp)
c010c4b8:	00 
c010c4b9:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010c4c0:	e8 03 4a ff ff       	call   c0100ec8 <__panic>

    if (clone_flags & CLONE_FS) {
c010c4c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4c8:	25 00 08 00 00       	and    $0x800,%eax
c010c4cd:	85 c0                	test   %eax,%eax
c010c4cf:	74 08                	je     c010c4d9 <copy_files+0x52>
        filesp = old_filesp;
c010c4d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_files_struct;
c010c4d7:	eb 40                	jmp    c010c519 <copy_files+0x92>
    }

    int ret = -E_NO_MEM;
c010c4d9:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((filesp = files_create()) == NULL) {
c010c4e0:	e8 59 e8 ff ff       	call   c010ad3e <files_create>
c010c4e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c4e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c4ec:	75 02                	jne    c010c4f0 <copy_files+0x69>
        goto bad_files_struct;
c010c4ee:	eb 47                	jmp    c010c537 <copy_files+0xb0>
    }

    if ((ret = dup_files(filesp, old_filesp)) != 0) {
c010c4f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c4f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4fa:	89 04 24             	mov    %eax,(%esp)
c010c4fd:	e8 e5 e9 ff ff       	call   c010aee7 <dup_files>
c010c502:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c505:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c509:	74 0e                	je     c010c519 <copy_files+0x92>
        goto bad_dup_cleanup_fs;
c010c50b:	90                   	nop
    files_count_inc(filesp);
    proc->filesp = filesp;
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
c010c50c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c50f:	89 04 24             	mov    %eax,(%esp)
c010c512:	e8 8a e8 ff ff       	call   c010ada1 <files_destroy>
c010c517:	eb 1e                	jmp    c010c537 <copy_files+0xb0>
    if ((ret = dup_files(filesp, old_filesp)) != 0) {
        goto bad_dup_cleanup_fs;
    }

good_files_struct:
    files_count_inc(filesp);
c010c519:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c51c:	89 04 24             	mov    %eax,(%esp)
c010c51f:	e8 b3 f6 ff ff       	call   c010bbd7 <files_count_inc>
    proc->filesp = filesp;
c010c524:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c527:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c52a:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
    return 0;
c010c530:	b8 00 00 00 00       	mov    $0x0,%eax
c010c535:	eb 03                	jmp    c010c53a <copy_files+0xb3>

bad_dup_cleanup_fs:
    files_destroy(filesp);
bad_files_struct:
    return ret;
c010c537:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c53a:	c9                   	leave  
c010c53b:	c3                   	ret    

c010c53c <put_files>:

//decrease the ref_count of files, and if ref_count==0, then destroy files_struct
static void
put_files(struct proc_struct *proc) {
c010c53c:	55                   	push   %ebp
c010c53d:	89 e5                	mov    %esp,%ebp
c010c53f:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = proc->filesp;
c010c542:	8b 45 08             	mov    0x8(%ebp),%eax
c010c545:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c54b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (filesp != NULL) {
c010c54e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c552:	74 1a                	je     c010c56e <put_files+0x32>
        if (files_count_dec(filesp) == 0) {
c010c554:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c557:	89 04 24             	mov    %eax,(%esp)
c010c55a:	e8 92 f6 ff ff       	call   c010bbf1 <files_count_dec>
c010c55f:	85 c0                	test   %eax,%eax
c010c561:	75 0b                	jne    c010c56e <put_files+0x32>
            files_destroy(filesp);
c010c563:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c566:	89 04 24             	mov    %eax,(%esp)
c010c569:	e8 33 e8 ff ff       	call   c010ada1 <files_destroy>
        }
    }
}
c010c56e:	c9                   	leave  
c010c56f:	c3                   	ret    

c010c570 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010c570:	55                   	push   %ebp
c010c571:	89 e5                	mov    %esp,%ebp
c010c573:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010c576:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010c57d:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010c582:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010c587:	7e 05                	jle    c010c58e <do_fork+0x1e>
        goto fork_out;
c010c589:	e9 10 01 00 00       	jmp    c010c69e <do_fork+0x12e>
    }
    ret = -E_NO_MEM;
c010c58e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
     *   proc_list:    the process set's list
     *   nr_process:   the number of process set
     */

    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
c010c595:	e8 71 f6 ff ff       	call   c010bc0b <alloc_proc>
c010c59a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!proc) goto fork_out;
c010c59d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c5a1:	75 05                	jne    c010c5a8 <do_fork+0x38>
c010c5a3:	e9 f6 00 00 00       	jmp    c010c69e <do_fork+0x12e>
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc)) goto bad_fork_cleanup_proc;
c010c5a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5ab:	89 04 24             	mov    %eax,(%esp)
c010c5ae:	e8 b1 fb ff ff       	call   c010c164 <setup_kstack>
c010c5b3:	85 c0                	test   %eax,%eax
c010c5b5:	74 05                	je     c010c5bc <do_fork+0x4c>
c010c5b7:	e9 f2 00 00 00       	jmp    c010c6ae <do_fork+0x13e>
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc)) goto bad_fork_cleanup_kstack;
c010c5bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c5c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5c6:	89 04 24             	mov    %eax,(%esp)
c010c5c9:	e8 c5 fc ff ff       	call   c010c293 <copy_mm>
c010c5ce:	85 c0                	test   %eax,%eax
c010c5d0:	74 05                	je     c010c5d7 <do_fork+0x67>
c010c5d2:	e9 cc 00 00 00       	jmp    c010c6a3 <do_fork+0x133>
    if (copy_files(clone_flags, proc)) goto bad_fork_cleanup_fs;
c010c5d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5da:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c5de:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5e1:	89 04 24             	mov    %eax,(%esp)
c010c5e4:	e8 9e fe ff ff       	call   c010c487 <copy_files>
c010c5e9:	85 c0                	test   %eax,%eax
c010c5eb:	74 11                	je     c010c5fe <do_fork+0x8e>
c010c5ed:	90                   	nop
	
fork_out:
    return ret;

bad_fork_cleanup_fs:  //for LAB8
    put_files(proc);
c010c5ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5f1:	89 04 24             	mov    %eax,(%esp)
c010c5f4:	e8 43 ff ff ff       	call   c010c53c <put_files>
c010c5f9:	e9 a5 00 00 00       	jmp    c010c6a3 <do_fork+0x133>
    if (setup_kstack(proc)) goto bad_fork_cleanup_proc;
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc)) goto bad_fork_cleanup_kstack;
    if (copy_files(clone_flags, proc)) goto bad_fork_cleanup_fs;
    //    4. call copy_thread to setup tf & context in proc_struct
    copy_thread(proc, stack, tf);
c010c5fe:	8b 45 10             	mov    0x10(%ebp),%eax
c010c601:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c605:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c608:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c60c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c60f:	89 04 24             	mov    %eax,(%esp)
c010c612:	e8 98 fd ff ff       	call   c010c3af <copy_thread>
    //    5. insert proc_struct into hash_list && proc_list
    proc->parent = current;
c010c617:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010c61d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c620:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010c623:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c628:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c62e:	85 c0                	test   %eax,%eax
c010c630:	74 24                	je     c010c656 <do_fork+0xe6>
c010c632:	c7 44 24 0c 70 79 11 	movl   $0xc0117970,0xc(%esp)
c010c639:	c0 
c010c63a:	c7 44 24 08 5b 79 11 	movl   $0xc011795b,0x8(%esp)
c010c641:	c0 
c010c642:	c7 44 24 04 d1 01 00 	movl   $0x1d1,0x4(%esp)
c010c649:	00 
c010c64a:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010c651:	e8 72 48 ff ff       	call   c0100ec8 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010c656:	e8 a5 f3 ff ff       	call   c010ba00 <__intr_save>
c010c65b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    proc->pid = get_pid();
c010c65e:	e8 e2 f7 ff ff       	call   c010be45 <get_pid>
c010c663:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c666:	89 42 04             	mov    %eax,0x4(%edx)
    hash_proc(proc);
c010c669:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c66c:	89 04 24             	mov    %eax,(%esp)
c010c66f:	e8 56 f9 ff ff       	call   c010bfca <hash_proc>
    set_links(proc);
c010c674:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c677:	89 04 24             	mov    %eax,(%esp)
c010c67a:	e8 6b f6 ff ff       	call   c010bcea <set_links>
    local_intr_restore(intr_flag);
c010c67f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c682:	89 04 24             	mov    %eax,(%esp)
c010c685:	e8 a0 f3 ff ff       	call   c010ba2a <__intr_restore>
    //    6. call wakup_proc to make the new child process RUNNABLE
    wakeup_proc(proc);
c010c68a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c68d:	89 04 24             	mov    %eax,(%esp)
c010c690:	e8 e7 19 00 00       	call   c010e07c <wakeup_proc>
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
c010c695:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c698:	8b 40 04             	mov    0x4(%eax),%eax
c010c69b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
	
fork_out:
    return ret;
c010c69e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6a1:	eb 18                	jmp    c010c6bb <do_fork+0x14b>

bad_fork_cleanup_fs:  //for LAB8
    put_files(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
c010c6a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6a6:	89 04 24             	mov    %eax,(%esp)
c010c6a9:	e8 f2 fa ff ff       	call   c010c1a0 <put_kstack>
bad_fork_cleanup_proc:
    kfree(proc);
c010c6ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6b1:	89 04 24             	mov    %eax,(%esp)
c010c6b4:	e8 c0 83 ff ff       	call   c0104a79 <kfree>
    goto fork_out;
c010c6b9:	eb e3                	jmp    c010c69e <do_fork+0x12e>
}
c010c6bb:	c9                   	leave  
c010c6bc:	c3                   	ret    

c010c6bd <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010c6bd:	55                   	push   %ebp
c010c6be:	89 e5                	mov    %esp,%ebp
c010c6c0:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010c6c3:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010c6c9:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010c6ce:	39 c2                	cmp    %eax,%edx
c010c6d0:	75 1c                	jne    c010c6ee <do_exit+0x31>
        panic("idleproc exit.\n");
c010c6d2:	c7 44 24 08 89 79 11 	movl   $0xc0117989,0x8(%esp)
c010c6d9:	c0 
c010c6da:	c7 44 24 04 f8 01 00 	movl   $0x1f8,0x4(%esp)
c010c6e1:	00 
c010c6e2:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010c6e9:	e8 da 47 ff ff       	call   c0100ec8 <__panic>
    }
    if (current == initproc) {
c010c6ee:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010c6f4:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010c6f9:	39 c2                	cmp    %eax,%edx
c010c6fb:	75 1c                	jne    c010c719 <do_exit+0x5c>
        panic("initproc exit.\n");
c010c6fd:	c7 44 24 08 99 79 11 	movl   $0xc0117999,0x8(%esp)
c010c704:	c0 
c010c705:	c7 44 24 04 fb 01 00 	movl   $0x1fb,0x4(%esp)
c010c70c:	00 
c010c70d:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010c714:	e8 af 47 ff ff       	call   c0100ec8 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010c719:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c71e:	8b 40 18             	mov    0x18(%eax),%eax
c010c721:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010c724:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c728:	74 4a                	je     c010c774 <do_exit+0xb7>
        lcr3(boot_cr3);
c010c72a:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010c72f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c732:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c735:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010c738:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c73b:	89 04 24             	mov    %eax,(%esp)
c010c73e:	e8 21 f4 ff ff       	call   c010bb64 <mm_count_dec>
c010c743:	85 c0                	test   %eax,%eax
c010c745:	75 21                	jne    c010c768 <do_exit+0xab>
            exit_mmap(mm);
c010c747:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c74a:	89 04 24             	mov    %eax,(%esp)
c010c74d:	e8 16 bb ff ff       	call   c0108268 <exit_mmap>
            put_pgdir(mm);
c010c752:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c755:	89 04 24             	mov    %eax,(%esp)
c010c758:	e8 10 fb ff ff       	call   c010c26d <put_pgdir>
            mm_destroy(mm);
c010c75d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c760:	89 04 24             	mov    %eax,(%esp)
c010c763:	e8 41 b8 ff ff       	call   c0107fa9 <mm_destroy>
        }
        current->mm = NULL;
c010c768:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c76d:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    put_files(current); //for LAB8
c010c774:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c779:	89 04 24             	mov    %eax,(%esp)
c010c77c:	e8 bb fd ff ff       	call   c010c53c <put_files>
    current->state = PROC_ZOMBIE;
c010c781:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c786:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010c78c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c791:	8b 55 08             	mov    0x8(%ebp),%edx
c010c794:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010c79a:	e8 61 f2 ff ff       	call   c010ba00 <__intr_save>
c010c79f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010c7a2:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c7a7:	8b 40 14             	mov    0x14(%eax),%eax
c010c7aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010c7ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7b0:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c7b6:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010c7bb:	75 10                	jne    c010c7cd <do_exit+0x110>
            wakeup_proc(proc);
c010c7bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7c0:	89 04 24             	mov    %eax,(%esp)
c010c7c3:	e8 b4 18 00 00       	call   c010e07c <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010c7c8:	e9 ac 00 00 00       	jmp    c010c879 <do_exit+0x1bc>
c010c7cd:	e9 a7 00 00 00       	jmp    c010c879 <do_exit+0x1bc>
            proc = current->cptr;
c010c7d2:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c7d7:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010c7dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010c7e0:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c7e5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c7e8:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c7ee:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010c7f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7f7:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c7fe:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010c801:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010c806:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010c80c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c80f:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c815:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c818:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c81e:	85 c0                	test   %eax,%eax
c010c820:	74 14                	je     c010c836 <do_exit+0x179>
                initproc->cptr->yptr = proc;
c010c822:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010c827:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010c82d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c830:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010c836:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010c83c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c83f:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010c842:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010c847:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c84a:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010c850:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c853:	8b 00                	mov    (%eax),%eax
c010c855:	83 f8 03             	cmp    $0x3,%eax
c010c858:	75 1f                	jne    c010c879 <do_exit+0x1bc>
                if (initproc->wait_state == WT_CHILD) {
c010c85a:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010c85f:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c865:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010c86a:	75 0d                	jne    c010c879 <do_exit+0x1bc>
                    wakeup_proc(initproc);
c010c86c:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010c871:	89 04 24             	mov    %eax,(%esp)
c010c874:	e8 03 18 00 00       	call   c010e07c <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010c879:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c87e:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010c884:	85 c0                	test   %eax,%eax
c010c886:	0f 85 46 ff ff ff    	jne    c010c7d2 <do_exit+0x115>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010c88c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c88f:	89 04 24             	mov    %eax,(%esp)
c010c892:	e8 93 f1 ff ff       	call   c010ba2a <__intr_restore>
    
    schedule();
c010c897:	e8 7c 18 00 00       	call   c010e118 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010c89c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c8a1:	8b 40 04             	mov    0x4(%eax),%eax
c010c8a4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c8a8:	c7 44 24 08 ac 79 11 	movl   $0xc01179ac,0x8(%esp)
c010c8af:	c0 
c010c8b0:	c7 44 24 04 28 02 00 	movl   $0x228,0x4(%esp)
c010c8b7:	00 
c010c8b8:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010c8bf:	e8 04 46 ff ff       	call   c0100ec8 <__panic>

c010c8c4 <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8
static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
c010c8c4:	55                   	push   %ebp
c010c8c5:	89 e5                	mov    %esp,%ebp
c010c8c7:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
c010c8ca:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010c8d1:	00 
c010c8d2:	8b 45 14             	mov    0x14(%ebp),%eax
c010c8d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8d9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8dc:	89 04 24             	mov    %eax,(%esp)
c010c8df:	e8 e5 ec ff ff       	call   c010b5c9 <sysfile_seek>
c010c8e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c8e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c8eb:	74 05                	je     c010c8f2 <load_icode_read+0x2e>
        return ret;
c010c8ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8f0:	eb 38                	jmp    c010c92a <load_icode_read+0x66>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
c010c8f2:	8b 45 10             	mov    0x10(%ebp),%eax
c010c8f5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c8f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c8fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c900:	8b 45 08             	mov    0x8(%ebp),%eax
c010c903:	89 04 24             	mov    %eax,(%esp)
c010c906:	e8 cc e9 ff ff       	call   c010b2d7 <sysfile_read>
c010c90b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c90e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c911:	3b 45 10             	cmp    0x10(%ebp),%eax
c010c914:	74 0f                	je     c010c925 <load_icode_read+0x61>
        return (ret < 0) ? ret : -1;
c010c916:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010c91b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c91f:	0f 48 45 f4          	cmovs  -0xc(%ebp),%eax
c010c923:	eb 05                	jmp    c010c92a <load_icode_read+0x66>
    }
    return 0;
c010c925:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c92a:	c9                   	leave  
c010c92b:	c3                   	ret    

c010c92c <load_icode>:

// load_icode -  called by sys_exec-->do_execve
  
static int
load_icode(int fd, int argc, char **kargv) {
c010c92c:	55                   	push   %ebp
c010c92d:	89 e5                	mov    %esp,%ebp
c010c92f:	53                   	push   %ebx
c010c930:	81 ec e4 00 00 00    	sub    $0xe4,%esp
     * (6) setup uargc and uargv in user stacks
     * (7) setup trapframe for user environment
     * (8) if up steps failed, you should cleanup the env.
     */

    if (current->mm != NULL) {
c010c936:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c93b:	8b 40 18             	mov    0x18(%eax),%eax
c010c93e:	85 c0                	test   %eax,%eax
c010c940:	74 1c                	je     c010c95e <load_icode+0x32>
        panic("load_icode: current->mm must be empty.\n");
c010c942:	c7 44 24 08 cc 79 11 	movl   $0xc01179cc,0x8(%esp)
c010c949:	c0 
c010c94a:	c7 44 24 04 56 02 00 	movl   $0x256,0x4(%esp)
c010c951:	00 
c010c952:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010c959:	e8 6a 45 ff ff       	call   c0100ec8 <__panic>
    }

    int ret = -E_NO_MEM;
c010c95e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010c965:	e8 da b2 ff ff       	call   c0107c44 <mm_create>
c010c96a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010c96d:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c010c971:	75 06                	jne    c010c979 <load_icode+0x4d>
        goto bad_mm;
c010c973:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010c974:	e9 77 07 00 00       	jmp    c010d0f0 <load_icode+0x7c4>
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010c979:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010c97c:	89 04 24             	mov    %eax,(%esp)
c010c97f:	e8 42 f8 ff ff       	call   c010c1c6 <setup_pgdir>
c010c984:	85 c0                	test   %eax,%eax
c010c986:	74 05                	je     c010c98d <load_icode+0x61>
        goto bad_pgdir_cleanup_mm;
c010c988:	e9 7e 07 00 00       	jmp    c010d10b <load_icode+0x7df>
    }
    //(3) copy TEXT/DATA/BSS parts in binary to memory space of process
    //(3.1) read raw data content in file and resolve elfhdr
    struct Page *page;
    struct elfhdr __elf, *elf = &__elf;
c010c98d:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
c010c993:	89 45 c0             	mov    %eax,-0x40(%ebp)
    if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) {
c010c996:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010c99d:	00 
c010c99e:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
c010c9a5:	00 
c010c9a6:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c9a9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9b0:	89 04 24             	mov    %eax,(%esp)
c010c9b3:	e8 0c ff ff ff       	call   c010c8c4 <load_icode_read>
c010c9b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c9bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c9bf:	74 05                	je     c010c9c6 <load_icode+0x9a>
        goto bad_elf_cleanup_pgdir;
c010c9c1:	e9 3a 07 00 00       	jmp    c010d100 <load_icode+0x7d4>
    }
    if (elf->e_magic != ELF_MAGIC) {
c010c9c6:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c9c9:	8b 00                	mov    (%eax),%eax
c010c9cb:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010c9d0:	74 0c                	je     c010c9de <load_icode+0xb2>
        ret = -E_INVAL_ELF;
c010c9d2:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010c9d9:	e9 22 07 00 00       	jmp    c010d100 <load_icode+0x7d4>
    }

    //(3.2) read raw data content in file and resolve proghdr based on info in elfhdr
    uint32_t vm_flags, perm;
    struct proghdr __ph, *ph = &__ph;
c010c9de:	8d 85 3c ff ff ff    	lea    -0xc4(%ebp),%eax
c010c9e4:	89 45 bc             	mov    %eax,-0x44(%ebp)
    uint16_t phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010c9e7:	66 c7 45 e6 00 00    	movw   $0x0,-0x1a(%ebp)
c010c9ed:	e9 6b 03 00 00       	jmp    c010cd5d <load_icode+0x431>
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;
c010c9f2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c9f5:	8b 40 1c             	mov    0x1c(%eax),%eax
c010c9f8:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010c9fc:	c1 e2 05             	shl    $0x5,%edx
c010c9ff:	01 d0                	add    %edx,%eax
c010ca01:	89 45 b8             	mov    %eax,-0x48(%ebp)
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
c010ca04:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010ca07:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ca0b:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010ca12:	00 
c010ca13:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010ca16:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca1a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca1d:	89 04 24             	mov    %eax,(%esp)
c010ca20:	e8 9f fe ff ff       	call   c010c8c4 <load_icode_read>
c010ca25:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ca28:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ca2c:	74 05                	je     c010ca33 <load_icode+0x107>
            goto bad_cleanup_mmap;
c010ca2e:	e9 c2 06 00 00       	jmp    c010d0f5 <load_icode+0x7c9>
        }
        if (ph->p_type != ELF_PT_LOAD) {
c010ca33:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010ca36:	8b 00                	mov    (%eax),%eax
c010ca38:	83 f8 01             	cmp    $0x1,%eax
c010ca3b:	74 05                	je     c010ca42 <load_icode+0x116>
            continue ;
c010ca3d:	e9 10 03 00 00       	jmp    c010cd52 <load_icode+0x426>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010ca42:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010ca45:	8b 50 10             	mov    0x10(%eax),%edx
c010ca48:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010ca4b:	8b 40 14             	mov    0x14(%eax),%eax
c010ca4e:	39 c2                	cmp    %eax,%edx
c010ca50:	76 0c                	jbe    c010ca5e <load_icode+0x132>
            ret = -E_INVAL_ELF;
c010ca52:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010ca59:	e9 97 06 00 00       	jmp    c010d0f5 <load_icode+0x7c9>
        }
        if (ph->p_filesz == 0) {
c010ca5e:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010ca61:	8b 40 10             	mov    0x10(%eax),%eax
c010ca64:	85 c0                	test   %eax,%eax
c010ca66:	75 05                	jne    c010ca6d <load_icode+0x141>
            continue ;
c010ca68:	e9 e5 02 00 00       	jmp    c010cd52 <load_icode+0x426>
        }
    //(3.3) call mm_map to build vma related to TEXT/DATA
        vm_flags = 0, perm = PTE_U;
c010ca6d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010ca74:	c7 45 e8 04 00 00 00 	movl   $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010ca7b:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010ca7e:	8b 40 18             	mov    0x18(%eax),%eax
c010ca81:	83 e0 01             	and    $0x1,%eax
c010ca84:	85 c0                	test   %eax,%eax
c010ca86:	74 04                	je     c010ca8c <load_icode+0x160>
c010ca88:	83 4d ec 04          	orl    $0x4,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010ca8c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010ca8f:	8b 40 18             	mov    0x18(%eax),%eax
c010ca92:	83 e0 02             	and    $0x2,%eax
c010ca95:	85 c0                	test   %eax,%eax
c010ca97:	74 04                	je     c010ca9d <load_icode+0x171>
c010ca99:	83 4d ec 02          	orl    $0x2,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010ca9d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010caa0:	8b 40 18             	mov    0x18(%eax),%eax
c010caa3:	83 e0 04             	and    $0x4,%eax
c010caa6:	85 c0                	test   %eax,%eax
c010caa8:	74 04                	je     c010caae <load_icode+0x182>
c010caaa:	83 4d ec 01          	orl    $0x1,-0x14(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010caae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cab1:	83 e0 02             	and    $0x2,%eax
c010cab4:	85 c0                	test   %eax,%eax
c010cab6:	74 04                	je     c010cabc <load_icode+0x190>
c010cab8:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010cabc:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cabf:	8b 50 14             	mov    0x14(%eax),%edx
c010cac2:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cac5:	8b 40 08             	mov    0x8(%eax),%eax
c010cac8:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010cacf:	00 
c010cad0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010cad3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010cad7:	89 54 24 08          	mov    %edx,0x8(%esp)
c010cadb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cadf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cae2:	89 04 24             	mov    %eax,(%esp)
c010cae5:	e8 61 b5 ff ff       	call   c010804b <mm_map>
c010caea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010caed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010caf1:	74 05                	je     c010caf8 <load_icode+0x1cc>
            goto bad_cleanup_mmap;
c010caf3:	e9 fd 05 00 00       	jmp    c010d0f5 <load_icode+0x7c9>
        }
        size_t off, size, offset = ph->p_offset;
c010caf8:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cafb:	8b 40 04             	mov    0x4(%eax),%eax
c010cafe:	89 45 dc             	mov    %eax,-0x24(%ebp)
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010cb01:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cb04:	8b 40 08             	mov    0x8(%eax),%eax
c010cb07:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cb0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cb0d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010cb10:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010cb13:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010cb18:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010cb1b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    //(3.4) callpgdir_alloc_page to allocate page for TEXT/DATA, read contents in file and copy them into the new allocated pages
        end = ph->p_va + ph->p_filesz;
c010cb22:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cb25:	8b 50 08             	mov    0x8(%eax),%edx
c010cb28:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cb2b:	8b 40 10             	mov    0x10(%eax),%eax
c010cb2e:	01 d0                	add    %edx,%eax
c010cb30:	89 45 b0             	mov    %eax,-0x50(%ebp)
        while (start < end) {
c010cb33:	e9 a5 00 00 00       	jmp    c010cbdd <load_icode+0x2b1>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010cb38:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cb3b:	8b 40 0c             	mov    0xc(%eax),%eax
c010cb3e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010cb41:	89 54 24 08          	mov    %edx,0x8(%esp)
c010cb45:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010cb48:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cb4c:	89 04 24             	mov    %eax,(%esp)
c010cb4f:	e8 5a 92 ff ff       	call   c0105dae <pgdir_alloc_page>
c010cb54:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cb57:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cb5b:	75 05                	jne    c010cb62 <load_icode+0x236>
                goto bad_cleanup_mmap;
c010cb5d:	e9 93 05 00 00       	jmp    c010d0f5 <load_icode+0x7c9>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010cb62:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cb65:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010cb68:	29 c2                	sub    %eax,%edx
c010cb6a:	89 d0                	mov    %edx,%eax
c010cb6c:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010cb6f:	b8 00 10 00 00       	mov    $0x1000,%eax
c010cb74:	2b 45 ac             	sub    -0x54(%ebp),%eax
c010cb77:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cb7a:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010cb81:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cb84:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010cb87:	73 0d                	jae    c010cb96 <load_icode+0x26a>
                size -= la - end;
c010cb89:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cb8c:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010cb8f:	29 c2                	sub    %eax,%edx
c010cb91:	89 d0                	mov    %edx,%eax
c010cb93:	01 45 e0             	add    %eax,-0x20(%ebp)
            }
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
c010cb96:	8b 5d dc             	mov    -0x24(%ebp),%ebx
c010cb99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb9c:	89 04 24             	mov    %eax,(%esp)
c010cb9f:	e8 08 ef ff ff       	call   c010baac <page2kva>
c010cba4:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010cba7:	01 c2                	add    %eax,%edx
c010cba9:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010cbad:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cbb0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cbb4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cbb8:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbbb:	89 04 24             	mov    %eax,(%esp)
c010cbbe:	e8 01 fd ff ff       	call   c010c8c4 <load_icode_read>
c010cbc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cbc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cbca:	74 05                	je     c010cbd1 <load_icode+0x2a5>
                goto bad_cleanup_mmap;
c010cbcc:	e9 24 05 00 00       	jmp    c010d0f5 <load_icode+0x7c9>
            }
            start += size, offset += size;
c010cbd1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cbd4:	01 45 d8             	add    %eax,-0x28(%ebp)
c010cbd7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cbda:	01 45 dc             	add    %eax,-0x24(%ebp)

        ret = -E_NO_MEM;

    //(3.4) callpgdir_alloc_page to allocate page for TEXT/DATA, read contents in file and copy them into the new allocated pages
        end = ph->p_va + ph->p_filesz;
        while (start < end) {
c010cbdd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cbe0:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c010cbe3:	0f 82 4f ff ff ff    	jb     c010cb38 <load_icode+0x20c>
            }
            start += size, offset += size;
        }

    //(3.5) callpgdir_alloc_page to allocate pages for BSS, memset zero in these pages
        end = ph->p_va + ph->p_memsz;
c010cbe9:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cbec:	8b 50 08             	mov    0x8(%eax),%edx
c010cbef:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cbf2:	8b 40 14             	mov    0x14(%eax),%eax
c010cbf5:	01 d0                	add    %edx,%eax
c010cbf7:	89 45 b0             	mov    %eax,-0x50(%ebp)
        if (start < la) {
c010cbfa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cbfd:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010cc00:	0f 83 b0 00 00 00    	jae    c010ccb6 <load_icode+0x38a>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010cc06:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cc09:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c010cc0c:	75 05                	jne    c010cc13 <load_icode+0x2e7>
                continue ;
c010cc0e:	e9 3f 01 00 00       	jmp    c010cd52 <load_icode+0x426>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010cc13:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cc16:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010cc19:	29 c2                	sub    %eax,%edx
c010cc1b:	89 d0                	mov    %edx,%eax
c010cc1d:	05 00 10 00 00       	add    $0x1000,%eax
c010cc22:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010cc25:	b8 00 10 00 00       	mov    $0x1000,%eax
c010cc2a:	2b 45 ac             	sub    -0x54(%ebp),%eax
c010cc2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if (end < la) {
c010cc30:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cc33:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010cc36:	73 0d                	jae    c010cc45 <load_icode+0x319>
                size -= la - end;
c010cc38:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cc3b:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010cc3e:	29 c2                	sub    %eax,%edx
c010cc40:	89 d0                	mov    %edx,%eax
c010cc42:	01 45 e0             	add    %eax,-0x20(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010cc45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc48:	89 04 24             	mov    %eax,(%esp)
c010cc4b:	e8 5c ee ff ff       	call   c010baac <page2kva>
c010cc50:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010cc53:	01 c2                	add    %eax,%edx
c010cc55:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cc58:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cc5c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010cc63:	00 
c010cc64:	89 14 24             	mov    %edx,(%esp)
c010cc67:	e8 c3 82 00 00       	call   c0114f2f <memset>
            start += size;
c010cc6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cc6f:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010cc72:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cc75:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010cc78:	73 08                	jae    c010cc82 <load_icode+0x356>
c010cc7a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cc7d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c010cc80:	74 34                	je     c010ccb6 <load_icode+0x38a>
c010cc82:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cc85:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010cc88:	72 08                	jb     c010cc92 <load_icode+0x366>
c010cc8a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cc8d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010cc90:	74 24                	je     c010ccb6 <load_icode+0x38a>
c010cc92:	c7 44 24 0c f4 79 11 	movl   $0xc01179f4,0xc(%esp)
c010cc99:	c0 
c010cc9a:	c7 44 24 08 5b 79 11 	movl   $0xc011795b,0x8(%esp)
c010cca1:	c0 
c010cca2:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
c010cca9:	00 
c010ccaa:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010ccb1:	e8 12 42 ff ff       	call   c0100ec8 <__panic>
        }
        while (start < end) {
c010ccb6:	e9 8b 00 00 00       	jmp    c010cd46 <load_icode+0x41a>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010ccbb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ccbe:	8b 40 0c             	mov    0xc(%eax),%eax
c010ccc1:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ccc4:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ccc8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010cccb:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cccf:	89 04 24             	mov    %eax,(%esp)
c010ccd2:	e8 d7 90 ff ff       	call   c0105dae <pgdir_alloc_page>
c010ccd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ccda:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ccde:	75 05                	jne    c010cce5 <load_icode+0x3b9>
                goto bad_cleanup_mmap;
c010cce0:	e9 10 04 00 00       	jmp    c010d0f5 <load_icode+0x7c9>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010cce5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cce8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010cceb:	29 c2                	sub    %eax,%edx
c010cced:	89 d0                	mov    %edx,%eax
c010ccef:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010ccf2:	b8 00 10 00 00       	mov    $0x1000,%eax
c010ccf7:	2b 45 ac             	sub    -0x54(%ebp),%eax
c010ccfa:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ccfd:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010cd04:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cd07:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010cd0a:	73 0d                	jae    c010cd19 <load_icode+0x3ed>
                size -= la - end;
c010cd0c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cd0f:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010cd12:	29 c2                	sub    %eax,%edx
c010cd14:	89 d0                	mov    %edx,%eax
c010cd16:	01 45 e0             	add    %eax,-0x20(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010cd19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd1c:	89 04 24             	mov    %eax,(%esp)
c010cd1f:	e8 88 ed ff ff       	call   c010baac <page2kva>
c010cd24:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010cd27:	01 c2                	add    %eax,%edx
c010cd29:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cd2c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cd30:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010cd37:	00 
c010cd38:	89 14 24             	mov    %edx,(%esp)
c010cd3b:	e8 ef 81 00 00       	call   c0114f2f <memset>
            start += size;
c010cd40:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cd43:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010cd46:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cd49:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c010cd4c:	0f 82 69 ff ff ff    	jb     c010ccbb <load_icode+0x38f>

    //(3.2) read raw data content in file and resolve proghdr based on info in elfhdr
    uint32_t vm_flags, perm;
    struct proghdr __ph, *ph = &__ph;
    uint16_t phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010cd52:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c010cd56:	83 c0 01             	add    $0x1,%eax
c010cd59:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
c010cd5d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cd60:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010cd64:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
c010cd68:	0f 87 84 fc ff ff    	ja     c010c9f2 <load_icode+0xc6>
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    sysfile_close(fd);
c010cd6e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd71:	89 04 24             	mov    %eax,(%esp)
c010cd74:	e8 4b e5 ff ff       	call   c010b2c4 <sysfile_close>

    //(4) call mm_map to setup user stack, and put parameters into user stack
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010cd79:	c7 45 ec 0b 00 00 00 	movl   $0xb,-0x14(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010cd80:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010cd87:	00 
c010cd88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cd8f:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010cd96:	00 
c010cd97:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010cd9e:	af 
c010cd9f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cda2:	89 04 24             	mov    %eax,(%esp)
c010cda5:	e8 a1 b2 ff ff       	call   c010804b <mm_map>
c010cdaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cdad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cdb1:	74 05                	je     c010cdb8 <load_icode+0x48c>
        goto bad_cleanup_mmap;
c010cdb3:	e9 3d 03 00 00       	jmp    c010d0f5 <load_icode+0x7c9>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010cdb8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cdbb:	8b 40 0c             	mov    0xc(%eax),%eax
c010cdbe:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010cdc5:	00 
c010cdc6:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010cdcd:	af 
c010cdce:	89 04 24             	mov    %eax,(%esp)
c010cdd1:	e8 d8 8f ff ff       	call   c0105dae <pgdir_alloc_page>
c010cdd6:	85 c0                	test   %eax,%eax
c010cdd8:	75 24                	jne    c010cdfe <load_icode+0x4d2>
c010cdda:	c7 44 24 0c 30 7a 11 	movl   $0xc0117a30,0xc(%esp)
c010cde1:	c0 
c010cde2:	c7 44 24 08 5b 79 11 	movl   $0xc011795b,0x8(%esp)
c010cde9:	c0 
c010cdea:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c010cdf1:	00 
c010cdf2:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010cdf9:	e8 ca 40 ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010cdfe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ce01:	8b 40 0c             	mov    0xc(%eax),%eax
c010ce04:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010ce0b:	00 
c010ce0c:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010ce13:	af 
c010ce14:	89 04 24             	mov    %eax,(%esp)
c010ce17:	e8 92 8f ff ff       	call   c0105dae <pgdir_alloc_page>
c010ce1c:	85 c0                	test   %eax,%eax
c010ce1e:	75 24                	jne    c010ce44 <load_icode+0x518>
c010ce20:	c7 44 24 0c 74 7a 11 	movl   $0xc0117a74,0xc(%esp)
c010ce27:	c0 
c010ce28:	c7 44 24 08 5b 79 11 	movl   $0xc011795b,0x8(%esp)
c010ce2f:	c0 
c010ce30:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
c010ce37:	00 
c010ce38:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010ce3f:	e8 84 40 ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010ce44:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ce47:	8b 40 0c             	mov    0xc(%eax),%eax
c010ce4a:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010ce51:	00 
c010ce52:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010ce59:	af 
c010ce5a:	89 04 24             	mov    %eax,(%esp)
c010ce5d:	e8 4c 8f ff ff       	call   c0105dae <pgdir_alloc_page>
c010ce62:	85 c0                	test   %eax,%eax
c010ce64:	75 24                	jne    c010ce8a <load_icode+0x55e>
c010ce66:	c7 44 24 0c b8 7a 11 	movl   $0xc0117ab8,0xc(%esp)
c010ce6d:	c0 
c010ce6e:	c7 44 24 08 5b 79 11 	movl   $0xc011795b,0x8(%esp)
c010ce75:	c0 
c010ce76:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c010ce7d:	00 
c010ce7e:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010ce85:	e8 3e 40 ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010ce8a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ce8d:	8b 40 0c             	mov    0xc(%eax),%eax
c010ce90:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010ce97:	00 
c010ce98:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010ce9f:	af 
c010cea0:	89 04 24             	mov    %eax,(%esp)
c010cea3:	e8 06 8f ff ff       	call   c0105dae <pgdir_alloc_page>
c010cea8:	85 c0                	test   %eax,%eax
c010ceaa:	75 24                	jne    c010ced0 <load_icode+0x5a4>
c010ceac:	c7 44 24 0c fc 7a 11 	movl   $0xc0117afc,0xc(%esp)
c010ceb3:	c0 
c010ceb4:	c7 44 24 08 5b 79 11 	movl   $0xc011795b,0x8(%esp)
c010cebb:	c0 
c010cebc:	c7 44 24 04 c5 02 00 	movl   $0x2c5,0x4(%esp)
c010cec3:	00 
c010cec4:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010cecb:	e8 f8 3f ff ff       	call   c0100ec8 <__panic>

    //(5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
    mm_count_inc(mm);
c010ced0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ced3:	89 04 24             	mov    %eax,(%esp)
c010ced6:	e8 6f ec ff ff       	call   c010bb4a <mm_count_inc>
    current->mm = mm;
c010cedb:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cee0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010cee3:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010cee6:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ceeb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010ceee:	8b 52 0c             	mov    0xc(%edx),%edx
c010cef1:	89 55 a8             	mov    %edx,-0x58(%ebp)
c010cef4:	81 7d a8 ff ff ff bf 	cmpl   $0xbfffffff,-0x58(%ebp)
c010cefb:	77 23                	ja     c010cf20 <load_icode+0x5f4>
c010cefd:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010cf00:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cf04:	c7 44 24 08 10 79 11 	movl   $0xc0117910,0x8(%esp)
c010cf0b:	c0 
c010cf0c:	c7 44 24 04 ca 02 00 	movl   $0x2ca,0x4(%esp)
c010cf13:	00 
c010cf14:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010cf1b:	e8 a8 3f ff ff       	call   c0100ec8 <__panic>
c010cf20:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010cf23:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010cf29:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010cf2c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cf2f:	8b 40 0c             	mov    0xc(%eax),%eax
c010cf32:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010cf35:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c010cf3c:	77 23                	ja     c010cf61 <load_icode+0x635>
c010cf3e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010cf41:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cf45:	c7 44 24 08 10 79 11 	movl   $0xc0117910,0x8(%esp)
c010cf4c:	c0 
c010cf4d:	c7 44 24 04 cb 02 00 	movl   $0x2cb,0x4(%esp)
c010cf54:	00 
c010cf55:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010cf5c:	e8 67 3f ff ff       	call   c0100ec8 <__panic>
c010cf61:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010cf64:	05 00 00 00 40       	add    $0x40000000,%eax
c010cf69:	89 45 90             	mov    %eax,-0x70(%ebp)
c010cf6c:	8b 45 90             	mov    -0x70(%ebp),%eax
c010cf6f:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup uargc and uargv in user stacks
    uint32_t uargv_size = 0, i;
c010cf72:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i++)
c010cf79:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010cf80:	eb 30                	jmp    c010cfb2 <load_icode+0x686>
        uargv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN) + 1;
c010cf82:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010cf85:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010cf8c:	8b 45 10             	mov    0x10(%ebp),%eax
c010cf8f:	01 d0                	add    %edx,%eax
c010cf91:	8b 00                	mov    (%eax),%eax
c010cf93:	c7 44 24 04 ff 0f 00 	movl   $0xfff,0x4(%esp)
c010cf9a:	00 
c010cf9b:	89 04 24             	mov    %eax,(%esp)
c010cf9e:	e8 5e 7c 00 00       	call   c0114c01 <strnlen>
c010cfa3:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010cfa6:	01 d0                	add    %edx,%eax
c010cfa8:	83 c0 01             	add    $0x1,%eax
c010cfab:	89 45 d0             	mov    %eax,-0x30(%ebp)
    current->cr3 = PADDR(mm->pgdir);
    lcr3(PADDR(mm->pgdir));

    //(6) setup uargc and uargv in user stacks
    uint32_t uargv_size = 0, i;
    for (i = 0; i < argc; i++)
c010cfae:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010cfb2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cfb5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010cfb8:	77 c8                	ja     c010cf82 <load_icode+0x656>
        uargv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN) + 1;
    char *uarg_buf = (USTACKTOP - uargv_size) / sizeof(uintptr_t) * sizeof(uintptr_t);
c010cfba:	b8 00 00 00 b0       	mov    $0xb0000000,%eax
c010cfbf:	2b 45 d0             	sub    -0x30(%ebp),%eax
c010cfc2:	c1 e8 02             	shr    $0x2,%eax
c010cfc5:	c1 e0 02             	shl    $0x2,%eax
c010cfc8:	89 45 c8             	mov    %eax,-0x38(%ebp)
    char **uargv = (char **)uarg_buf - argc;
c010cfcb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cfce:	c1 e0 02             	shl    $0x2,%eax
c010cfd1:	f7 d8                	neg    %eax
c010cfd3:	89 c2                	mov    %eax,%edx
c010cfd5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cfd8:	01 d0                	add    %edx,%eax
c010cfda:	89 45 a0             	mov    %eax,-0x60(%ebp)
    for (i = 0; i < argc; i++) {
c010cfdd:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010cfe4:	eb 77                	jmp    c010d05d <load_icode+0x731>
        uint32_t arglen = strnlen(kargv[i], EXEC_MAX_ARG_LEN);
c010cfe6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010cfe9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010cff0:	8b 45 10             	mov    0x10(%ebp),%eax
c010cff3:	01 d0                	add    %edx,%eax
c010cff5:	8b 00                	mov    (%eax),%eax
c010cff7:	c7 44 24 04 ff 0f 00 	movl   $0xfff,0x4(%esp)
c010cffe:	00 
c010cfff:	89 04 24             	mov    %eax,(%esp)
c010d002:	e8 fa 7b 00 00       	call   c0114c01 <strnlen>
c010d007:	89 45 9c             	mov    %eax,-0x64(%ebp)
        memcpy(uarg_buf, kargv[i], arglen);
c010d00a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d00d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d014:	8b 45 10             	mov    0x10(%ebp),%eax
c010d017:	01 d0                	add    %edx,%eax
c010d019:	8b 00                	mov    (%eax),%eax
c010d01b:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010d01e:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d022:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d026:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d029:	89 04 24             	mov    %eax,(%esp)
c010d02c:	e8 e0 7f 00 00       	call   c0115011 <memcpy>
        uarg_buf[arglen] = '\0';
c010d031:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d034:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d037:	01 d0                	add    %edx,%eax
c010d039:	c6 00 00             	movb   $0x0,(%eax)
        uargv[i] = uarg_buf;
c010d03c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d03f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d046:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d049:	01 c2                	add    %eax,%edx
c010d04b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d04e:	89 02                	mov    %eax,(%edx)
        uarg_buf += arglen + 1;
c010d050:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d053:	83 c0 01             	add    $0x1,%eax
c010d056:	01 45 c8             	add    %eax,-0x38(%ebp)
    uint32_t uargv_size = 0, i;
    for (i = 0; i < argc; i++)
        uargv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN) + 1;
    char *uarg_buf = (USTACKTOP - uargv_size) / sizeof(uintptr_t) * sizeof(uintptr_t);
    char **uargv = (char **)uarg_buf - argc;
    for (i = 0; i < argc; i++) {
c010d059:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d05d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d060:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d063:	77 81                	ja     c010cfe6 <load_icode+0x6ba>
        memcpy(uarg_buf, kargv[i], arglen);
        uarg_buf[arglen] = '\0';
        uargv[i] = uarg_buf;
        uarg_buf += arglen + 1;
    }
    uintptr_t stacktop = (uintptr_t)(uargv - sizeof(int *));
c010d065:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d068:	83 e8 10             	sub    $0x10,%eax
c010d06b:	89 45 98             	mov    %eax,-0x68(%ebp)
    *(int *)stacktop = argc;
c010d06e:	8b 45 98             	mov    -0x68(%ebp),%eax
c010d071:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d074:	89 10                	mov    %edx,(%eax)

    //(7) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010d076:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d07b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010d07e:	89 45 94             	mov    %eax,-0x6c(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010d081:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010d088:	00 
c010d089:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d090:	00 
c010d091:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d094:	89 04 24             	mov    %eax,(%esp)
c010d097:	e8 93 7e 00 00       	call   c0114f2f <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010d09c:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d09f:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010d0a5:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d0a8:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010d0ae:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d0b1:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010d0b5:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d0b8:	66 89 50 28          	mov    %dx,0x28(%eax)
c010d0bc:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d0bf:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010d0c3:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d0c6:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = stacktop;
c010d0ca:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d0cd:	8b 55 98             	mov    -0x68(%ebp),%edx
c010d0d0:	89 50 44             	mov    %edx,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010d0d3:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d0d6:	8b 50 18             	mov    0x18(%eax),%edx
c010d0d9:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d0dc:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010d0df:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010d0e2:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010d0e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010d0f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d0f3:	eb 23                	jmp    c010d118 <load_icode+0x7ec>
    //(8) if up steps failed, you should cleanup the env.
bad_cleanup_mmap:
    exit_mmap(mm);
c010d0f5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d0f8:	89 04 24             	mov    %eax,(%esp)
c010d0fb:	e8 68 b1 ff ff       	call   c0108268 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010d100:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d103:	89 04 24             	mov    %eax,(%esp)
c010d106:	e8 62 f1 ff ff       	call   c010c26d <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010d10b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d10e:	89 04 24             	mov    %eax,(%esp)
c010d111:	e8 93 ae ff ff       	call   c0107fa9 <mm_destroy>
bad_mm:
    goto out;
c010d116:	eb d8                	jmp    c010d0f0 <load_icode+0x7c4>
}
c010d118:	81 c4 e4 00 00 00    	add    $0xe4,%esp
c010d11e:	5b                   	pop    %ebx
c010d11f:	5d                   	pop    %ebp
c010d120:	c3                   	ret    

c010d121 <put_kargv>:

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
c010d121:	55                   	push   %ebp
c010d122:	89 e5                	mov    %esp,%ebp
c010d124:	83 ec 18             	sub    $0x18,%esp
    while (argc > 0) {
c010d127:	eb 1d                	jmp    c010d146 <put_kargv+0x25>
        kfree(kargv[-- argc]);
c010d129:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c010d12d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d130:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d137:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d13a:	01 d0                	add    %edx,%eax
c010d13c:	8b 00                	mov    (%eax),%eax
c010d13e:	89 04 24             	mov    %eax,(%esp)
c010d141:	e8 33 79 ff ff       	call   c0104a79 <kfree>
}

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
    while (argc > 0) {
c010d146:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d14a:	7f dd                	jg     c010d129 <put_kargv+0x8>
        kfree(kargv[-- argc]);
    }
}
c010d14c:	c9                   	leave  
c010d14d:	c3                   	ret    

c010d14e <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
c010d14e:	55                   	push   %ebp
c010d14f:	89 e5                	mov    %esp,%ebp
c010d151:	83 ec 28             	sub    $0x28,%esp
    int i, ret = -E_INVAL;
c010d154:	c7 45 f0 fd ff ff ff 	movl   $0xfffffffd,-0x10(%ebp)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
c010d15b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d15e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d165:	8b 45 14             	mov    0x14(%ebp),%eax
c010d168:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010d16f:	00 
c010d170:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d174:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d178:	8b 45 08             	mov    0x8(%ebp),%eax
c010d17b:	89 04 24             	mov    %eax,(%esp)
c010d17e:	e8 5c bb ff ff       	call   c0108cdf <user_mem_check>
c010d183:	85 c0                	test   %eax,%eax
c010d185:	75 08                	jne    c010d18f <copy_kargv+0x41>
        return ret;
c010d187:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d18a:	e9 a4 00 00 00       	jmp    c010d233 <copy_kargv+0xe5>
    }
    for (i = 0; i < argc; i ++) {
c010d18f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d196:	eb 77                	jmp    c010d20f <copy_kargv+0xc1>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
c010d198:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010d19f:	e8 ba 78 ff ff       	call   c0104a5e <kmalloc>
c010d1a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d1a7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d1ab:	75 0a                	jne    c010d1b7 <copy_kargv+0x69>
            goto failed_nomem;
c010d1ad:	90                   	nop
        kargv[i] = buffer;
    }
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c010d1ae:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c010d1b5:	eb 67                	jmp    c010d21e <copy_kargv+0xd0>
    for (i = 0; i < argc; i ++) {
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
            goto failed_nomem;
        }
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
c010d1b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d1ba:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d1c1:	8b 45 14             	mov    0x14(%ebp),%eax
c010d1c4:	01 d0                	add    %edx,%eax
c010d1c6:	8b 00                	mov    (%eax),%eax
c010d1c8:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010d1cf:	00 
c010d1d0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d1d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d1d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d1db:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1de:	89 04 24             	mov    %eax,(%esp)
c010d1e1:	e8 1c bc ff ff       	call   c0108e02 <copy_string>
c010d1e6:	85 c0                	test   %eax,%eax
c010d1e8:	75 0d                	jne    c010d1f7 <copy_kargv+0xa9>
            kfree(buffer);
c010d1ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d1ed:	89 04 24             	mov    %eax,(%esp)
c010d1f0:	e8 84 78 ff ff       	call   c0104a79 <kfree>
            goto failed_cleanup;
c010d1f5:	eb 27                	jmp    c010d21e <copy_kargv+0xd0>
        }
        kargv[i] = buffer;
c010d1f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d1fa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d201:	8b 45 10             	mov    0x10(%ebp),%eax
c010d204:	01 c2                	add    %eax,%edx
c010d206:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d209:	89 02                	mov    %eax,(%edx)
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
    int i, ret = -E_INVAL;
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
        return ret;
    }
    for (i = 0; i < argc; i ++) {
c010d20b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d20f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d212:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d215:	7c 81                	jl     c010d198 <copy_kargv+0x4a>
            kfree(buffer);
            goto failed_cleanup;
        }
        kargv[i] = buffer;
    }
    return 0;
c010d217:	b8 00 00 00 00       	mov    $0x0,%eax
c010d21c:	eb 15                	jmp    c010d233 <copy_kargv+0xe5>

failed_nomem:
    ret = -E_NO_MEM;
failed_cleanup:
    put_kargv(i, kargv);
c010d21e:	8b 45 10             	mov    0x10(%ebp),%eax
c010d221:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d225:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d228:	89 04 24             	mov    %eax,(%esp)
c010d22b:	e8 f1 fe ff ff       	call   c010d121 <put_kargv>
    return ret;
c010d230:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d233:	c9                   	leave  
c010d234:	c3                   	ret    

c010d235 <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, int argc, const char **argv) {
c010d235:	55                   	push   %ebp
c010d236:	89 e5                	mov    %esp,%ebp
c010d238:	81 ec e8 00 00 00    	sub    $0xe8,%esp
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
c010d23e:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d243:	8b 40 18             	mov    0x18(%eax),%eax
c010d246:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
c010d249:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d24d:	7e 06                	jle    c010d255 <do_execve+0x20>
c010d24f:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010d253:	7e 0a                	jle    c010d25f <do_execve+0x2a>
        return -E_INVAL;
c010d255:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d25a:	e9 11 02 00 00       	jmp    c010d470 <do_execve+0x23b>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010d25f:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010d266:	00 
c010d267:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d26e:	00 
c010d26f:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d272:	89 04 24             	mov    %eax,(%esp)
c010d275:	e8 b5 7c 00 00       	call   c0114f2f <memset>
    
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
    
    int ret = -E_INVAL;
c010d27a:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    
    lock_mm(mm);
c010d281:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d284:	89 04 24             	mov    %eax,(%esp)
c010d287:	e8 f2 e8 ff ff       	call   c010bb7e <lock_mm>
    if (name == NULL) {
c010d28c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d290:	75 29                	jne    c010d2bb <do_execve+0x86>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
c010d292:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d297:	8b 40 04             	mov    0x4(%eax),%eax
c010d29a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d29e:	c7 44 24 08 3f 7b 11 	movl   $0xc0117b3f,0x8(%esp)
c010d2a5:	c0 
c010d2a6:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010d2ad:	00 
c010d2ae:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d2b1:	89 04 24             	mov    %eax,(%esp)
c010d2b4:	e8 a8 77 00 00       	call   c0114a61 <snprintf>
c010d2b9:	eb 38                	jmp    c010d2f3 <do_execve+0xbe>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
c010d2bb:	c7 44 24 0c 33 00 00 	movl   $0x33,0xc(%esp)
c010d2c2:	00 
c010d2c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2c6:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d2ca:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d2cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d2d4:	89 04 24             	mov    %eax,(%esp)
c010d2d7:	e8 26 bb ff ff       	call   c0108e02 <copy_string>
c010d2dc:	85 c0                	test   %eax,%eax
c010d2de:	75 13                	jne    c010d2f3 <do_execve+0xbe>
            unlock_mm(mm);
c010d2e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d2e3:	89 04 24             	mov    %eax,(%esp)
c010d2e6:	e8 c6 e8 ff ff       	call   c010bbb1 <unlock_mm>
            return ret;
c010d2eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d2ee:	e9 7d 01 00 00       	jmp    c010d470 <do_execve+0x23b>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
c010d2f3:	8b 45 10             	mov    0x10(%ebp),%eax
c010d2f6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d2fa:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d300:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d304:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d307:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d30b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d30e:	89 04 24             	mov    %eax,(%esp)
c010d311:	e8 38 fe ff ff       	call   c010d14e <copy_kargv>
c010d316:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d319:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d31d:	74 13                	je     c010d332 <do_execve+0xfd>
        unlock_mm(mm);
c010d31f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d322:	89 04 24             	mov    %eax,(%esp)
c010d325:	e8 87 e8 ff ff       	call   c010bbb1 <unlock_mm>
        return ret;
c010d32a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d32d:	e9 3e 01 00 00       	jmp    c010d470 <do_execve+0x23b>
    }
    path = argv[0];
c010d332:	8b 45 10             	mov    0x10(%ebp),%eax
c010d335:	8b 00                	mov    (%eax),%eax
c010d337:	89 45 ec             	mov    %eax,-0x14(%ebp)
    unlock_mm(mm);
c010d33a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d33d:	89 04 24             	mov    %eax,(%esp)
c010d340:	e8 6c e8 ff ff       	call   c010bbb1 <unlock_mm>
    files_closeall(current->filesp);
c010d345:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d34a:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d350:	89 04 24             	mov    %eax,(%esp)
c010d353:	e8 11 db ff ff       	call   c010ae69 <files_closeall>

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
c010d358:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d35f:	00 
c010d360:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d363:	89 04 24             	mov    %eax,(%esp)
c010d366:	e8 0e df ff ff       	call   c010b279 <sysfile_open>
c010d36b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d36e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d371:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d374:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d378:	79 05                	jns    c010d37f <do_execve+0x14a>
        goto execve_exit;
c010d37a:	e9 ae 00 00 00       	jmp    c010d42d <do_execve+0x1f8>
    }
    if (mm != NULL) {
c010d37f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d383:	74 4a                	je     c010d3cf <do_execve+0x19a>
        lcr3(boot_cr3);
c010d385:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010d38a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d38d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d390:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010d393:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d396:	89 04 24             	mov    %eax,(%esp)
c010d399:	e8 c6 e7 ff ff       	call   c010bb64 <mm_count_dec>
c010d39e:	85 c0                	test   %eax,%eax
c010d3a0:	75 21                	jne    c010d3c3 <do_execve+0x18e>
            exit_mmap(mm);
c010d3a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d3a5:	89 04 24             	mov    %eax,(%esp)
c010d3a8:	e8 bb ae ff ff       	call   c0108268 <exit_mmap>
            put_pgdir(mm);
c010d3ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d3b0:	89 04 24             	mov    %eax,(%esp)
c010d3b3:	e8 b5 ee ff ff       	call   c010c26d <put_pgdir>
            mm_destroy(mm);
c010d3b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d3bb:	89 04 24             	mov    %eax,(%esp)
c010d3be:	e8 e6 ab ff ff       	call   c0107fa9 <mm_destroy>
        }
        current->mm = NULL;
c010d3c3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d3c8:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    ret= -E_NO_MEM;;
c010d3cf:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
c010d3d6:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d3dc:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d3e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d3e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d3ea:	89 04 24             	mov    %eax,(%esp)
c010d3ed:	e8 3a f5 ff ff       	call   c010c92c <load_icode>
c010d3f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d3f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d3f9:	74 02                	je     c010d3fd <do_execve+0x1c8>
        goto execve_exit;
c010d3fb:	eb 30                	jmp    c010d42d <do_execve+0x1f8>
    }
    put_kargv(argc, kargv);
c010d3fd:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d403:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d407:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d40a:	89 04 24             	mov    %eax,(%esp)
c010d40d:	e8 0f fd ff ff       	call   c010d121 <put_kargv>
    set_proc_name(current, local_name);
c010d412:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d417:	8d 55 b1             	lea    -0x4f(%ebp),%edx
c010d41a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d41e:	89 04 24             	mov    %eax,(%esp)
c010d421:	e8 3f e8 ff ff       	call   c010bc65 <set_proc_name>
    return 0;
c010d426:	b8 00 00 00 00       	mov    $0x0,%eax
c010d42b:	eb 43                	jmp    c010d470 <do_execve+0x23b>

execve_exit:
    put_kargv(argc, kargv);
c010d42d:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d433:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d437:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d43a:	89 04 24             	mov    %eax,(%esp)
c010d43d:	e8 df fc ff ff       	call   c010d121 <put_kargv>
    do_exit(ret);
c010d442:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d445:	89 04 24             	mov    %eax,(%esp)
c010d448:	e8 70 f2 ff ff       	call   c010c6bd <do_exit>
    panic("already exit: %e.\n", ret);
c010d44d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d450:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d454:	c7 44 24 08 49 7b 11 	movl   $0xc0117b49,0x8(%esp)
c010d45b:	c0 
c010d45c:	c7 44 24 04 5b 03 00 	movl   $0x35b,0x4(%esp)
c010d463:	00 
c010d464:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010d46b:	e8 58 3a ff ff       	call   c0100ec8 <__panic>
}
c010d470:	c9                   	leave  
c010d471:	c3                   	ret    

c010d472 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010d472:	55                   	push   %ebp
c010d473:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010d475:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d47a:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010d481:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d486:	5d                   	pop    %ebp
c010d487:	c3                   	ret    

c010d488 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010d488:	55                   	push   %ebp
c010d489:	89 e5                	mov    %esp,%ebp
c010d48b:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010d48e:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d493:	8b 40 18             	mov    0x18(%eax),%eax
c010d496:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010d499:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d49d:	74 30                	je     c010d4cf <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010d49f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4a2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010d4a9:	00 
c010d4aa:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010d4b1:	00 
c010d4b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d4b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d4b9:	89 04 24             	mov    %eax,(%esp)
c010d4bc:	e8 1e b8 ff ff       	call   c0108cdf <user_mem_check>
c010d4c1:	85 c0                	test   %eax,%eax
c010d4c3:	75 0a                	jne    c010d4cf <do_wait+0x47>
            return -E_INVAL;
c010d4c5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d4ca:	e9 57 01 00 00       	jmp    c010d626 <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010d4cf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010d4d6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d4da:	74 39                	je     c010d515 <do_wait+0x8d>
        proc = find_proc(pid);
c010d4dc:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4df:	89 04 24             	mov    %eax,(%esp)
c010d4e2:	e8 97 eb ff ff       	call   c010c07e <find_proc>
c010d4e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010d4ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d4ee:	74 5a                	je     c010d54a <do_wait+0xc2>
c010d4f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d4f3:	8b 50 14             	mov    0x14(%eax),%edx
c010d4f6:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d4fb:	39 c2                	cmp    %eax,%edx
c010d4fd:	75 4b                	jne    c010d54a <do_wait+0xc2>
            haskid = 1;
c010d4ff:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010d506:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d509:	8b 00                	mov    (%eax),%eax
c010d50b:	83 f8 03             	cmp    $0x3,%eax
c010d50e:	75 3a                	jne    c010d54a <do_wait+0xc2>
                goto found;
c010d510:	e9 89 00 00 00       	jmp    c010d59e <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010d515:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d51a:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010d520:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010d523:	eb 1f                	jmp    c010d544 <do_wait+0xbc>
            haskid = 1;
c010d525:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010d52c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d52f:	8b 00                	mov    (%eax),%eax
c010d531:	83 f8 03             	cmp    $0x3,%eax
c010d534:	75 02                	jne    c010d538 <do_wait+0xb0>
                goto found;
c010d536:	eb 66                	jmp    c010d59e <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010d538:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d53b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010d541:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d544:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d548:	75 db                	jne    c010d525 <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010d54a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d54e:	74 44                	je     c010d594 <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010d550:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d555:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010d55b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d560:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010d567:	00 00 80 
        schedule();
c010d56a:	e8 a9 0b 00 00       	call   c010e118 <schedule>
        if (current->flags & PF_EXITING) {
c010d56f:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d574:	8b 40 44             	mov    0x44(%eax),%eax
c010d577:	83 e0 01             	and    $0x1,%eax
c010d57a:	85 c0                	test   %eax,%eax
c010d57c:	74 11                	je     c010d58f <do_wait+0x107>
            do_exit(-E_KILLED);
c010d57e:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010d585:	e8 33 f1 ff ff       	call   c010c6bd <do_exit>
        }
        goto repeat;
c010d58a:	e9 40 ff ff ff       	jmp    c010d4cf <do_wait+0x47>
c010d58f:	e9 3b ff ff ff       	jmp    c010d4cf <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010d594:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010d599:	e9 88 00 00 00       	jmp    c010d626 <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010d59e:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010d5a3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010d5a6:	74 0a                	je     c010d5b2 <do_wait+0x12a>
c010d5a8:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010d5ad:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010d5b0:	75 1c                	jne    c010d5ce <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010d5b2:	c7 44 24 08 5c 7b 11 	movl   $0xc0117b5c,0x8(%esp)
c010d5b9:	c0 
c010d5ba:	c7 44 24 04 94 03 00 	movl   $0x394,0x4(%esp)
c010d5c1:	00 
c010d5c2:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010d5c9:	e8 fa 38 ff ff       	call   c0100ec8 <__panic>
    }
    if (code_store != NULL) {
c010d5ce:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d5d2:	74 0e                	je     c010d5e2 <do_wait+0x15a>
        *code_store = proc->exit_code;
c010d5d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d5d7:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010d5dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d5e0:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010d5e2:	e8 19 e4 ff ff       	call   c010ba00 <__intr_save>
c010d5e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010d5ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d5ed:	89 04 24             	mov    %eax,(%esp)
c010d5f0:	e8 54 ea ff ff       	call   c010c049 <unhash_proc>
        remove_links(proc);
c010d5f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d5f8:	89 04 24             	mov    %eax,(%esp)
c010d5fb:	e8 a4 e7 ff ff       	call   c010bda4 <remove_links>
    }
    local_intr_restore(intr_flag);
c010d600:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d603:	89 04 24             	mov    %eax,(%esp)
c010d606:	e8 1f e4 ff ff       	call   c010ba2a <__intr_restore>
    put_kstack(proc);
c010d60b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d60e:	89 04 24             	mov    %eax,(%esp)
c010d611:	e8 8a eb ff ff       	call   c010c1a0 <put_kstack>
    kfree(proc);
c010d616:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d619:	89 04 24             	mov    %eax,(%esp)
c010d61c:	e8 58 74 ff ff       	call   c0104a79 <kfree>
    return 0;
c010d621:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d626:	c9                   	leave  
c010d627:	c3                   	ret    

c010d628 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010d628:	55                   	push   %ebp
c010d629:	89 e5                	mov    %esp,%ebp
c010d62b:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010d62e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d631:	89 04 24             	mov    %eax,(%esp)
c010d634:	e8 45 ea ff ff       	call   c010c07e <find_proc>
c010d639:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d63c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d640:	74 44                	je     c010d686 <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010d642:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d645:	8b 40 44             	mov    0x44(%eax),%eax
c010d648:	83 e0 01             	and    $0x1,%eax
c010d64b:	85 c0                	test   %eax,%eax
c010d64d:	75 30                	jne    c010d67f <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010d64f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d652:	8b 40 44             	mov    0x44(%eax),%eax
c010d655:	83 c8 01             	or     $0x1,%eax
c010d658:	89 c2                	mov    %eax,%edx
c010d65a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d65d:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010d660:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d663:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010d669:	85 c0                	test   %eax,%eax
c010d66b:	79 0b                	jns    c010d678 <do_kill+0x50>
                wakeup_proc(proc);
c010d66d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d670:	89 04 24             	mov    %eax,(%esp)
c010d673:	e8 04 0a 00 00       	call   c010e07c <wakeup_proc>
            }
            return 0;
c010d678:	b8 00 00 00 00       	mov    $0x0,%eax
c010d67d:	eb 0c                	jmp    c010d68b <do_kill+0x63>
        }
        return -E_KILLED;
c010d67f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010d684:	eb 05                	jmp    c010d68b <do_kill+0x63>
    }
    return -E_INVAL;
c010d686:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010d68b:	c9                   	leave  
c010d68c:	c3                   	ret    

c010d68d <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
c010d68d:	55                   	push   %ebp
c010d68e:	89 e5                	mov    %esp,%ebp
c010d690:	53                   	push   %ebx
c010d691:	83 ec 10             	sub    $0x10,%esp
    int argc = 0, ret;
c010d694:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (argv[argc] != NULL) {
c010d69b:	eb 04                	jmp    c010d6a1 <kernel_execve+0x14>
        argc ++;
c010d69d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
    int argc = 0, ret;
    while (argv[argc] != NULL) {
c010d6a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d6a4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d6ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d6ae:	01 d0                	add    %edx,%eax
c010d6b0:	8b 00                	mov    (%eax),%eax
c010d6b2:	85 c0                	test   %eax,%eax
c010d6b4:	75 e7                	jne    c010d69d <kernel_execve+0x10>
        argc ++;
    }
    asm volatile (
c010d6b6:	b8 04 00 00 00       	mov    $0x4,%eax
c010d6bb:	8b 55 08             	mov    0x8(%ebp),%edx
c010d6be:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010d6c1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010d6c4:	cd 80                	int    $0x80
c010d6c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (argc), "b" (argv)
        : "memory");
    return ret;
c010d6c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d6cc:	83 c4 10             	add    $0x10,%esp
c010d6cf:	5b                   	pop    %ebx
c010d6d0:	5d                   	pop    %ebp
c010d6d1:	c3                   	ret    

c010d6d2 <user_main>:

#define KERNEL_EXECVE3(x, s, ...)               __KERNEL_EXECVE3(x, s, ##__VA_ARGS__)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010d6d2:	55                   	push   %ebp
c010d6d3:	89 e5                	mov    %esp,%ebp
c010d6d5:	83 ec 28             	sub    $0x28,%esp
#ifdef TEST
#ifdef TESTSCRIPT
    KERNEL_EXECVE3(TEST, TESTSCRIPT);
#else
    KERNEL_EXECVE2(TEST);
c010d6d8:	c7 45 f0 78 7b 11 c0 	movl   $0xc0117b78,-0x10(%ebp)
c010d6df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d6e6:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d6eb:	8b 40 04             	mov    0x4(%eax),%eax
c010d6ee:	c7 44 24 08 78 7b 11 	movl   $0xc0117b78,0x8(%esp)
c010d6f5:	c0 
c010d6f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d6fa:	c7 04 24 80 7b 11 c0 	movl   $0xc0117b80,(%esp)
c010d701:	e8 5f 2c ff ff       	call   c0100365 <cprintf>
c010d706:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010d709:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d70d:	c7 04 24 78 7b 11 c0 	movl   $0xc0117b78,(%esp)
c010d714:	e8 74 ff ff ff       	call   c010d68d <kernel_execve>
#endif
#else
    KERNEL_EXECVE(sh);
#endif
    panic("user_main execve failed.\n");
c010d719:	c7 44 24 08 a7 7b 11 	movl   $0xc0117ba7,0x8(%esp)
c010d720:	c0 
c010d721:	c7 44 24 04 df 03 00 	movl   $0x3df,0x4(%esp)
c010d728:	00 
c010d729:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010d730:	e8 93 37 ff ff       	call   c0100ec8 <__panic>

c010d735 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010d735:	55                   	push   %ebp
c010d736:	89 e5                	mov    %esp,%ebp
c010d738:	83 ec 38             	sub    $0x38,%esp
    int ret;
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
c010d73b:	c7 04 24 c1 7b 11 c0 	movl   $0xc0117bc1,(%esp)
c010d742:	e8 d6 17 00 00       	call   c010ef1d <vfs_set_bootfs>
c010d747:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d74a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d74e:	74 23                	je     c010d773 <init_main+0x3e>
        panic("set boot fs failed: %e.\n", ret);
c010d750:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d753:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d757:	c7 44 24 08 c8 7b 11 	movl   $0xc0117bc8,0x8(%esp)
c010d75e:	c0 
c010d75f:	c7 44 24 04 e7 03 00 	movl   $0x3e7,0x4(%esp)
c010d766:	00 
c010d767:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010d76e:	e8 55 37 ff ff       	call   c0100ec8 <__panic>
    }
    
    size_t nr_free_pages_store = nr_free_pages();
c010d773:	e8 f8 77 ff ff       	call   c0104f70 <nr_free_pages>
c010d778:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t kernel_allocated_store = kallocated();
c010d77b:	e8 c1 71 ff ff       	call   c0104941 <kallocated>
c010d780:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010d783:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d78a:	00 
c010d78b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d792:	00 
c010d793:	c7 04 24 d2 d6 10 c0 	movl   $0xc010d6d2,(%esp)
c010d79a:	e8 53 e9 ff ff       	call   c010c0f2 <kernel_thread>
c010d79f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (pid <= 0) {
c010d7a2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d7a6:	7f 1c                	jg     c010d7c4 <init_main+0x8f>
        panic("create user_main failed.\n");
c010d7a8:	c7 44 24 08 e1 7b 11 	movl   $0xc0117be1,0x8(%esp)
c010d7af:	c0 
c010d7b0:	c7 44 24 04 ef 03 00 	movl   $0x3ef,0x4(%esp)
c010d7b7:	00 
c010d7b8:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010d7bf:	e8 04 37 ff ff       	call   c0100ec8 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010d7c4:	e8 0d bc ff ff       	call   c01093d6 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010d7c9:	eb 05                	jmp    c010d7d0 <init_main+0x9b>
        schedule();
c010d7cb:	e8 48 09 00 00       	call   c010e118 <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010d7d0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d7d7:	00 
c010d7d8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010d7df:	e8 a4 fc ff ff       	call   c010d488 <do_wait>
c010d7e4:	85 c0                	test   %eax,%eax
c010d7e6:	74 e3                	je     c010d7cb <init_main+0x96>
        schedule();
    }

    fs_cleanup();
c010d7e8:	e8 18 d5 ff ff       	call   c010ad05 <fs_cleanup>
        
    cprintf("all user-mode processes have quit.\n");
c010d7ed:	c7 04 24 fc 7b 11 c0 	movl   $0xc0117bfc,(%esp)
c010d7f4:	e8 6c 2b ff ff       	call   c0100365 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010d7f9:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010d7fe:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010d804:	85 c0                	test   %eax,%eax
c010d806:	75 1e                	jne    c010d826 <init_main+0xf1>
c010d808:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010d80d:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010d813:	85 c0                	test   %eax,%eax
c010d815:	75 0f                	jne    c010d826 <init_main+0xf1>
c010d817:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010d81c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010d822:	85 c0                	test   %eax,%eax
c010d824:	74 24                	je     c010d84a <init_main+0x115>
c010d826:	c7 44 24 0c 20 7c 11 	movl   $0xc0117c20,0xc(%esp)
c010d82d:	c0 
c010d82e:	c7 44 24 08 5b 79 11 	movl   $0xc011795b,0x8(%esp)
c010d835:	c0 
c010d836:	c7 44 24 04 fb 03 00 	movl   $0x3fb,0x4(%esp)
c010d83d:	00 
c010d83e:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010d845:	e8 7e 36 ff ff       	call   c0100ec8 <__panic>
    assert(nr_process == 2);
c010d84a:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010d84f:	83 f8 02             	cmp    $0x2,%eax
c010d852:	74 24                	je     c010d878 <init_main+0x143>
c010d854:	c7 44 24 0c 6b 7c 11 	movl   $0xc0117c6b,0xc(%esp)
c010d85b:	c0 
c010d85c:	c7 44 24 08 5b 79 11 	movl   $0xc011795b,0x8(%esp)
c010d863:	c0 
c010d864:	c7 44 24 04 fc 03 00 	movl   $0x3fc,0x4(%esp)
c010d86b:	00 
c010d86c:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010d873:	e8 50 36 ff ff       	call   c0100ec8 <__panic>
c010d878:	c7 45 e4 fc 31 15 c0 	movl   $0xc01531fc,-0x1c(%ebp)
c010d87f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d882:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010d885:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010d88b:	83 c2 7c             	add    $0x7c,%edx
c010d88e:	39 d0                	cmp    %edx,%eax
c010d890:	74 24                	je     c010d8b6 <init_main+0x181>
c010d892:	c7 44 24 0c 7c 7c 11 	movl   $0xc0117c7c,0xc(%esp)
c010d899:	c0 
c010d89a:	c7 44 24 08 5b 79 11 	movl   $0xc011795b,0x8(%esp)
c010d8a1:	c0 
c010d8a2:	c7 44 24 04 fd 03 00 	movl   $0x3fd,0x4(%esp)
c010d8a9:	00 
c010d8aa:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010d8b1:	e8 12 36 ff ff       	call   c0100ec8 <__panic>
c010d8b6:	c7 45 e0 fc 31 15 c0 	movl   $0xc01531fc,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010d8bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d8c0:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010d8c2:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010d8c8:	83 c2 7c             	add    $0x7c,%edx
c010d8cb:	39 d0                	cmp    %edx,%eax
c010d8cd:	74 24                	je     c010d8f3 <init_main+0x1be>
c010d8cf:	c7 44 24 0c ac 7c 11 	movl   $0xc0117cac,0xc(%esp)
c010d8d6:	c0 
c010d8d7:	c7 44 24 08 5b 79 11 	movl   $0xc011795b,0x8(%esp)
c010d8de:	c0 
c010d8df:	c7 44 24 04 fe 03 00 	movl   $0x3fe,0x4(%esp)
c010d8e6:	00 
c010d8e7:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010d8ee:	e8 d5 35 ff ff       	call   c0100ec8 <__panic>

    cprintf("init check memory pass.\n");
c010d8f3:	c7 04 24 dc 7c 11 c0 	movl   $0xc0117cdc,(%esp)
c010d8fa:	e8 66 2a ff ff       	call   c0100365 <cprintf>
    return 0;
c010d8ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d904:	c9                   	leave  
c010d905:	c3                   	ret    

c010d906 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010d906:	55                   	push   %ebp
c010d907:	89 e5                	mov    %esp,%ebp
c010d909:	53                   	push   %ebx
c010d90a:	83 ec 24             	sub    $0x24,%esp
c010d90d:	c7 45 ec fc 31 15 c0 	movl   $0xc01531fc,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010d914:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d917:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d91a:	89 50 04             	mov    %edx,0x4(%eax)
c010d91d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d920:	8b 50 04             	mov    0x4(%eax),%edx
c010d923:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d926:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010d928:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d92f:	eb 26                	jmp    c010d957 <proc_init+0x51>
        list_init(hash_list + i);
c010d931:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d934:	c1 e0 03             	shl    $0x3,%eax
c010d937:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010d93c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d93f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d942:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d945:	89 50 04             	mov    %edx,0x4(%eax)
c010d948:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d94b:	8b 50 04             	mov    0x4(%eax),%edx
c010d94e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d951:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010d953:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d957:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010d95e:	7e d1                	jle    c010d931 <proc_init+0x2b>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010d960:	e8 a6 e2 ff ff       	call   c010bc0b <alloc_proc>
c010d965:	a3 20 ff 14 c0       	mov    %eax,0xc014ff20
c010d96a:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010d96f:	85 c0                	test   %eax,%eax
c010d971:	75 1c                	jne    c010d98f <proc_init+0x89>
        panic("cannot alloc idleproc.\n");
c010d973:	c7 44 24 08 f5 7c 11 	movl   $0xc0117cf5,0x8(%esp)
c010d97a:	c0 
c010d97b:	c7 44 24 04 10 04 00 	movl   $0x410,0x4(%esp)
c010d982:	00 
c010d983:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010d98a:	e8 39 35 ff ff       	call   c0100ec8 <__panic>
    }

    idleproc->pid = 0;
c010d98f:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010d994:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010d99b:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010d9a0:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010d9a6:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010d9ab:	ba 00 c0 14 c0       	mov    $0xc014c000,%edx
c010d9b0:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010d9b3:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010d9b8:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    
    if ((idleproc->filesp = files_create()) == NULL) {
c010d9bf:	8b 1d 20 ff 14 c0    	mov    0xc014ff20,%ebx
c010d9c5:	e8 74 d3 ff ff       	call   c010ad3e <files_create>
c010d9ca:	89 83 c4 00 00 00    	mov    %eax,0xc4(%ebx)
c010d9d0:	8b 83 c4 00 00 00    	mov    0xc4(%ebx),%eax
c010d9d6:	85 c0                	test   %eax,%eax
c010d9d8:	75 1c                	jne    c010d9f6 <proc_init+0xf0>
        panic("create filesp (idleproc) failed.\n");
c010d9da:	c7 44 24 08 10 7d 11 	movl   $0xc0117d10,0x8(%esp)
c010d9e1:	c0 
c010d9e2:	c7 44 24 04 19 04 00 	movl   $0x419,0x4(%esp)
c010d9e9:	00 
c010d9ea:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010d9f1:	e8 d2 34 ff ff       	call   c0100ec8 <__panic>
    }
    files_count_inc(idleproc->filesp);
c010d9f6:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010d9fb:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010da01:	89 04 24             	mov    %eax,(%esp)
c010da04:	e8 ce e1 ff ff       	call   c010bbd7 <files_count_inc>
    
    set_proc_name(idleproc, "idle");
c010da09:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010da0e:	c7 44 24 04 32 7d 11 	movl   $0xc0117d32,0x4(%esp)
c010da15:	c0 
c010da16:	89 04 24             	mov    %eax,(%esp)
c010da19:	e8 47 e2 ff ff       	call   c010bc65 <set_proc_name>
    nr_process ++;
c010da1e:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010da23:	83 c0 01             	add    $0x1,%eax
c010da26:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40

    current = idleproc;
c010da2b:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010da30:	a3 28 ff 14 c0       	mov    %eax,0xc014ff28

    int pid = kernel_thread(init_main, NULL, 0);
c010da35:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010da3c:	00 
c010da3d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010da44:	00 
c010da45:	c7 04 24 35 d7 10 c0 	movl   $0xc010d735,(%esp)
c010da4c:	e8 a1 e6 ff ff       	call   c010c0f2 <kernel_thread>
c010da51:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010da54:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010da58:	7f 1c                	jg     c010da76 <proc_init+0x170>
        panic("create init_main failed.\n");
c010da5a:	c7 44 24 08 37 7d 11 	movl   $0xc0117d37,0x8(%esp)
c010da61:	c0 
c010da62:	c7 44 24 04 24 04 00 	movl   $0x424,0x4(%esp)
c010da69:	00 
c010da6a:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010da71:	e8 52 34 ff ff       	call   c0100ec8 <__panic>
    }

    initproc = find_proc(pid);
c010da76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010da79:	89 04 24             	mov    %eax,(%esp)
c010da7c:	e8 fd e5 ff ff       	call   c010c07e <find_proc>
c010da81:	a3 24 ff 14 c0       	mov    %eax,0xc014ff24
    set_proc_name(initproc, "init");
c010da86:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010da8b:	c7 44 24 04 51 7d 11 	movl   $0xc0117d51,0x4(%esp)
c010da92:	c0 
c010da93:	89 04 24             	mov    %eax,(%esp)
c010da96:	e8 ca e1 ff ff       	call   c010bc65 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010da9b:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010daa0:	85 c0                	test   %eax,%eax
c010daa2:	74 0c                	je     c010dab0 <proc_init+0x1aa>
c010daa4:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010daa9:	8b 40 04             	mov    0x4(%eax),%eax
c010daac:	85 c0                	test   %eax,%eax
c010daae:	74 24                	je     c010dad4 <proc_init+0x1ce>
c010dab0:	c7 44 24 0c 58 7d 11 	movl   $0xc0117d58,0xc(%esp)
c010dab7:	c0 
c010dab8:	c7 44 24 08 5b 79 11 	movl   $0xc011795b,0x8(%esp)
c010dabf:	c0 
c010dac0:	c7 44 24 04 2a 04 00 	movl   $0x42a,0x4(%esp)
c010dac7:	00 
c010dac8:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010dacf:	e8 f4 33 ff ff       	call   c0100ec8 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010dad4:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dad9:	85 c0                	test   %eax,%eax
c010dadb:	74 0d                	je     c010daea <proc_init+0x1e4>
c010dadd:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dae2:	8b 40 04             	mov    0x4(%eax),%eax
c010dae5:	83 f8 01             	cmp    $0x1,%eax
c010dae8:	74 24                	je     c010db0e <proc_init+0x208>
c010daea:	c7 44 24 0c 80 7d 11 	movl   $0xc0117d80,0xc(%esp)
c010daf1:	c0 
c010daf2:	c7 44 24 08 5b 79 11 	movl   $0xc011795b,0x8(%esp)
c010daf9:	c0 
c010dafa:	c7 44 24 04 2b 04 00 	movl   $0x42b,0x4(%esp)
c010db01:	00 
c010db02:	c7 04 24 34 79 11 c0 	movl   $0xc0117934,(%esp)
c010db09:	e8 ba 33 ff ff       	call   c0100ec8 <__panic>
}
c010db0e:	83 c4 24             	add    $0x24,%esp
c010db11:	5b                   	pop    %ebx
c010db12:	5d                   	pop    %ebp
c010db13:	c3                   	ret    

c010db14 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010db14:	55                   	push   %ebp
c010db15:	89 e5                	mov    %esp,%ebp
c010db17:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010db1a:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010db1f:	8b 40 10             	mov    0x10(%eax),%eax
c010db22:	85 c0                	test   %eax,%eax
c010db24:	74 07                	je     c010db2d <cpu_idle+0x19>
            schedule();
c010db26:	e8 ed 05 00 00       	call   c010e118 <schedule>
        }
    }
c010db2b:	eb ed                	jmp    c010db1a <cpu_idle+0x6>
c010db2d:	eb eb                	jmp    c010db1a <cpu_idle+0x6>

c010db2f <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010db2f:	55                   	push   %ebp
c010db30:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010db32:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010db36:	75 11                	jne    c010db49 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010db38:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010db3d:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010db44:	00 00 00 
c010db47:	eb 0e                	jmp    c010db57 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010db49:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010db4e:	8b 55 08             	mov    0x8(%ebp),%edx
c010db51:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010db57:	5d                   	pop    %ebp
c010db58:	c3                   	ret    

c010db59 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010db59:	55                   	push   %ebp
c010db5a:	89 e5                	mov    %esp,%ebp
c010db5c:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010db5f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010db63:	75 07                	jne    c010db6c <do_sleep+0x13>
        return 0;
c010db65:	b8 00 00 00 00       	mov    $0x0,%eax
c010db6a:	eb 6b                	jmp    c010dbd7 <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010db6c:	e8 8f de ff ff       	call   c010ba00 <__intr_save>
c010db71:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010db74:	8b 55 08             	mov    0x8(%ebp),%edx
c010db77:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010db7c:	89 54 24 08          	mov    %edx,0x8(%esp)
c010db80:	89 44 24 04          	mov    %eax,0x4(%esp)
c010db84:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010db87:	89 04 24             	mov    %eax,(%esp)
c010db8a:	e8 38 de ff ff       	call   c010b9c7 <timer_init>
c010db8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010db92:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010db97:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010db9d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010dba2:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010dba9:	00 00 80 
    add_timer(timer);
c010dbac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dbaf:	89 04 24             	mov    %eax,(%esp)
c010dbb2:	e8 ec 05 00 00       	call   c010e1a3 <add_timer>
    local_intr_restore(intr_flag);
c010dbb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbba:	89 04 24             	mov    %eax,(%esp)
c010dbbd:	e8 68 de ff ff       	call   c010ba2a <__intr_restore>

    schedule();
c010dbc2:	e8 51 05 00 00       	call   c010e118 <schedule>

    del_timer(timer);
c010dbc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dbca:	89 04 24             	mov    %eax,(%esp)
c010dbcd:	e8 0f 07 00 00       	call   c010e2e1 <del_timer>
    return 0;
c010dbd2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dbd7:	c9                   	leave  
c010dbd8:	c3                   	ret    

c010dbd9 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010dbd9:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010dbdd:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010dbdf:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010dbe2:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010dbe5:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010dbe8:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010dbeb:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010dbee:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010dbf1:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010dbf4:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010dbf8:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010dbfb:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010dbfe:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010dc01:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010dc04:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010dc07:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010dc0a:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010dc0d:	ff 30                	pushl  (%eax)

    ret
c010dc0f:	c3                   	ret    

c010dc10 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010dc10:	55                   	push   %ebp
c010dc11:	89 e5                	mov    %esp,%ebp
c010dc13:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010dc16:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010dc1a:	75 08                	jne    c010dc24 <skew_heap_merge+0x14>
c010dc1c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc1f:	e9 bd 00 00 00       	jmp    c010dce1 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010dc24:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010dc28:	75 08                	jne    c010dc32 <skew_heap_merge+0x22>
c010dc2a:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc2d:	e9 af 00 00 00       	jmp    c010dce1 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010dc32:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc35:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dc39:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc3c:	89 04 24             	mov    %eax,(%esp)
c010dc3f:	8b 45 10             	mov    0x10(%ebp),%eax
c010dc42:	ff d0                	call   *%eax
c010dc44:	83 f8 ff             	cmp    $0xffffffff,%eax
c010dc47:	75 4d                	jne    c010dc96 <skew_heap_merge+0x86>
     {
          r = a->left;
c010dc49:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc4c:	8b 40 04             	mov    0x4(%eax),%eax
c010dc4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010dc52:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc55:	8b 40 08             	mov    0x8(%eax),%eax
c010dc58:	8b 55 10             	mov    0x10(%ebp),%edx
c010dc5b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010dc5f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dc62:	89 54 24 04          	mov    %edx,0x4(%esp)
c010dc66:	89 04 24             	mov    %eax,(%esp)
c010dc69:	e8 a2 ff ff ff       	call   c010dc10 <skew_heap_merge>
c010dc6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010dc71:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc74:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010dc77:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010dc7a:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010dc80:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010dc83:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010dc87:	74 08                	je     c010dc91 <skew_heap_merge+0x81>
c010dc89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dc8c:	8b 55 08             	mov    0x8(%ebp),%edx
c010dc8f:	89 10                	mov    %edx,(%eax)

          return a;
c010dc91:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc94:	eb 4b                	jmp    c010dce1 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010dc96:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc99:	8b 40 04             	mov    0x4(%eax),%eax
c010dc9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010dc9f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dca2:	8b 40 08             	mov    0x8(%eax),%eax
c010dca5:	8b 55 10             	mov    0x10(%ebp),%edx
c010dca8:	89 54 24 08          	mov    %edx,0x8(%esp)
c010dcac:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dcb0:	8b 45 08             	mov    0x8(%ebp),%eax
c010dcb3:	89 04 24             	mov    %eax,(%esp)
c010dcb6:	e8 55 ff ff ff       	call   c010dc10 <skew_heap_merge>
c010dcbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010dcbe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dcc1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010dcc4:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010dcc7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dcca:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010dccd:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010dcd0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010dcd4:	74 08                	je     c010dcde <skew_heap_merge+0xce>
c010dcd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dcd9:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dcdc:	89 10                	mov    %edx,(%eax)

          return b;
c010dcde:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010dce1:	c9                   	leave  
c010dce2:	c3                   	ret    

c010dce3 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010dce3:	55                   	push   %ebp
c010dce4:	89 e5                	mov    %esp,%ebp
c010dce6:	83 ec 10             	sub    $0x10,%esp
    struct proc_struct *p = le2proc(a, lab6_run_pool);
c010dce9:	8b 45 08             	mov    0x8(%ebp),%eax
c010dcec:	2d b0 00 00 00       	sub    $0xb0,%eax
c010dcf1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct proc_struct *q = le2proc(b, lab6_run_pool);
c010dcf4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dcf7:	2d b0 00 00 00       	sub    $0xb0,%eax
c010dcfc:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int32_t c = p->lab6_stride - q->lab6_stride;
c010dcff:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010dd02:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010dd08:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dd0b:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010dd11:	29 c2                	sub    %eax,%edx
c010dd13:	89 d0                	mov    %edx,%eax
c010dd15:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (c > 0) return 1;
c010dd18:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dd1c:	7e 07                	jle    c010dd25 <proc_stride_comp_f+0x42>
c010dd1e:	b8 01 00 00 00       	mov    $0x1,%eax
c010dd23:	eb 12                	jmp    c010dd37 <proc_stride_comp_f+0x54>
    else if (c == 0) return 0;
c010dd25:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dd29:	75 07                	jne    c010dd32 <proc_stride_comp_f+0x4f>
c010dd2b:	b8 00 00 00 00       	mov    $0x0,%eax
c010dd30:	eb 05                	jmp    c010dd37 <proc_stride_comp_f+0x54>
    else return -1;
c010dd32:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010dd37:	c9                   	leave  
c010dd38:	c3                   	ret    

c010dd39 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010dd39:	55                   	push   %ebp
c010dd3a:	89 e5                	mov    %esp,%ebp
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0
      */
#if USE_SKEW_HEAP
    rq->lab6_run_pool = 0;
c010dd3c:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd3f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
#else
    list_init(&rq->run_list);
#endif
    rq->proc_num = 0;
c010dd46:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd49:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010dd50:	5d                   	pop    %ebp
c010dd51:	c3                   	ret    

c010dd52 <stride_enqueue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010dd52:	55                   	push   %ebp
c010dd53:	89 e5                	mov    %esp,%ebp
c010dd55:	83 ec 28             	sub    $0x28,%esp
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
#if USE_SKEW_HEAP
    rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010dd58:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd5b:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010dd61:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd64:	8b 40 10             	mov    0x10(%eax),%eax
c010dd67:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dd6a:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010dd6d:	c7 45 ec e3 dc 10 c0 	movl   $0xc010dce3,-0x14(%ebp)
c010dd74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dd77:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010dd7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd7d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010dd83:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd86:	8b 10                	mov    (%eax),%edx
c010dd88:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd8b:	89 50 08             	mov    %edx,0x8(%eax)
c010dd8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd91:	8b 50 08             	mov    0x8(%eax),%edx
c010dd94:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd97:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010dd9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dd9d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010dda1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dda4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dda8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ddab:	89 04 24             	mov    %eax,(%esp)
c010ddae:	e8 5d fe ff ff       	call   c010dc10 <skew_heap_merge>
c010ddb3:	89 c2                	mov    %eax,%edx
c010ddb5:	8b 45 08             	mov    0x8(%ebp),%eax
c010ddb8:	89 50 10             	mov    %edx,0x10(%eax)
#else
    list_add(&rq->run_list, &proc->run_link);
#endif
    proc->time_slice = rq->max_time_slice;
c010ddbb:	8b 45 08             	mov    0x8(%ebp),%eax
c010ddbe:	8b 50 0c             	mov    0xc(%eax),%edx
c010ddc1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ddc4:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    proc->rq = rq;
c010ddca:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ddcd:	8b 55 08             	mov    0x8(%ebp),%edx
c010ddd0:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    if (proc->lab6_priority == 0) proc->lab6_priority = 1;
c010ddd6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ddd9:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010dddf:	85 c0                	test   %eax,%eax
c010dde1:	75 0d                	jne    c010ddf0 <stride_enqueue+0x9e>
c010dde3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dde6:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010dded:	00 00 00 
    rq->proc_num++;
c010ddf0:	8b 45 08             	mov    0x8(%ebp),%eax
c010ddf3:	8b 40 08             	mov    0x8(%eax),%eax
c010ddf6:	8d 50 01             	lea    0x1(%eax),%edx
c010ddf9:	8b 45 08             	mov    0x8(%ebp),%eax
c010ddfc:	89 50 08             	mov    %edx,0x8(%eax)
}
c010ddff:	c9                   	leave  
c010de00:	c3                   	ret    

c010de01 <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010de01:	55                   	push   %ebp
c010de02:	89 e5                	mov    %esp,%ebp
c010de04:	83 ec 38             	sub    $0x38,%esp
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
#if USE_SKEW_HEAP
    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010de07:	8b 45 0c             	mov    0xc(%ebp),%eax
c010de0a:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010de10:	8b 45 08             	mov    0x8(%ebp),%eax
c010de13:	8b 40 10             	mov    0x10(%eax),%eax
c010de16:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010de19:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010de1c:	c7 45 ec e3 dc 10 c0 	movl   $0xc010dce3,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010de23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010de26:	8b 00                	mov    (%eax),%eax
c010de28:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010de2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010de2e:	8b 50 08             	mov    0x8(%eax),%edx
c010de31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010de34:	8b 40 04             	mov    0x4(%eax),%eax
c010de37:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010de3a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010de3e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010de42:	89 04 24             	mov    %eax,(%esp)
c010de45:	e8 c6 fd ff ff       	call   c010dc10 <skew_heap_merge>
c010de4a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010de4d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010de51:	74 08                	je     c010de5b <stride_dequeue+0x5a>
c010de53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010de56:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010de59:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010de5b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010de5f:	74 24                	je     c010de85 <stride_dequeue+0x84>
     {
          if (p->left == b)
c010de61:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010de64:	8b 40 04             	mov    0x4(%eax),%eax
c010de67:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010de6a:	75 0b                	jne    c010de77 <stride_dequeue+0x76>
               p->left = rep;
c010de6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010de6f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010de72:	89 50 04             	mov    %edx,0x4(%eax)
c010de75:	eb 09                	jmp    c010de80 <stride_dequeue+0x7f>
          else p->right = rep;
c010de77:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010de7a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010de7d:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010de80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010de83:	eb 03                	jmp    c010de88 <stride_dequeue+0x87>
     }
     else return rep;
c010de85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010de88:	89 c2                	mov    %eax,%edx
c010de8a:	8b 45 08             	mov    0x8(%ebp),%eax
c010de8d:	89 50 10             	mov    %edx,0x10(%eax)
#else
    list_del(&proc->run_link);
#endif
    rq->proc_num--;
c010de90:	8b 45 08             	mov    0x8(%ebp),%eax
c010de93:	8b 40 08             	mov    0x8(%eax),%eax
c010de96:	8d 50 ff             	lea    -0x1(%eax),%edx
c010de99:	8b 45 08             	mov    0x8(%ebp),%eax
c010de9c:	89 50 08             	mov    %edx,0x8(%eax)
}
c010de9f:	c9                   	leave  
c010dea0:	c3                   	ret    

c010dea1 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010dea1:	55                   	push   %ebp
c010dea2:	89 e5                	mov    %esp,%ebp
c010dea4:	53                   	push   %ebx
c010dea5:	83 ec 10             	sub    $0x10,%esp
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
#if USE_SKEW_HEAP
    if (!rq->lab6_run_pool) return NULL;
c010dea8:	8b 45 08             	mov    0x8(%ebp),%eax
c010deab:	8b 40 10             	mov    0x10(%eax),%eax
c010deae:	85 c0                	test   %eax,%eax
c010deb0:	75 07                	jne    c010deb9 <stride_pick_next+0x18>
c010deb2:	b8 00 00 00 00       	mov    $0x0,%eax
c010deb7:	eb 41                	jmp    c010defa <stride_pick_next+0x59>
    struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010deb9:	8b 45 08             	mov    0x8(%ebp),%eax
c010debc:	8b 40 10             	mov    0x10(%eax),%eax
c010debf:	2d b0 00 00 00       	sub    $0xb0,%eax
c010dec4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (le = list_next(&rq->run_list); le != &rq->run_list; le = list_next(le)) {
        struct proc_struct *q = le2proc(le, run_link);
        if (!p || proc_stride_comp_f(&p->lab6_run_pool, &q->lab6_run_pool) == 1) p = q;
    }
#endif
    if (p) p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010dec7:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c010decb:	74 2a                	je     c010def7 <stride_pick_next+0x56>
c010decd:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ded0:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010ded6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ded9:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010dedf:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010dee4:	ba 00 00 00 00       	mov    $0x0,%edx
c010dee9:	f7 f3                	div    %ebx
c010deeb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010deee:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010def1:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
    return p;
c010def7:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010defa:	83 c4 10             	add    $0x10,%esp
c010defd:	5b                   	pop    %ebx
c010defe:	5d                   	pop    %ebp
c010deff:	c3                   	ret    

c010df00 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010df00:	55                   	push   %ebp
c010df01:	89 e5                	mov    %esp,%ebp
     /* LAB6: 2012012017 */
    if (--proc->time_slice <= 0) proc->need_resched = 1;
c010df03:	8b 45 0c             	mov    0xc(%ebp),%eax
c010df06:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010df0c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010df0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010df12:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
c010df18:	8b 45 0c             	mov    0xc(%ebp),%eax
c010df1b:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010df21:	85 c0                	test   %eax,%eax
c010df23:	7f 0a                	jg     c010df2f <stride_proc_tick+0x2f>
c010df25:	8b 45 0c             	mov    0xc(%ebp),%eax
c010df28:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
}
c010df2f:	5d                   	pop    %ebp
c010df30:	c3                   	ret    

c010df31 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010df31:	55                   	push   %ebp
c010df32:	89 e5                	mov    %esp,%ebp
c010df34:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010df37:	9c                   	pushf  
c010df38:	58                   	pop    %eax
c010df39:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010df3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010df3f:	25 00 02 00 00       	and    $0x200,%eax
c010df44:	85 c0                	test   %eax,%eax
c010df46:	74 0c                	je     c010df54 <__intr_save+0x23>
        intr_disable();
c010df48:	e8 dd 41 ff ff       	call   c010212a <intr_disable>
        return 1;
c010df4d:	b8 01 00 00 00       	mov    $0x1,%eax
c010df52:	eb 05                	jmp    c010df59 <__intr_save+0x28>
    }
    return 0;
c010df54:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010df59:	c9                   	leave  
c010df5a:	c3                   	ret    

c010df5b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010df5b:	55                   	push   %ebp
c010df5c:	89 e5                	mov    %esp,%ebp
c010df5e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010df61:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010df65:	74 05                	je     c010df6c <__intr_restore+0x11>
        intr_enable();
c010df67:	e8 b8 41 ff ff       	call   c0102124 <intr_enable>
    }
}
c010df6c:	c9                   	leave  
c010df6d:	c3                   	ret    

c010df6e <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010df6e:	55                   	push   %ebp
c010df6f:	89 e5                	mov    %esp,%ebp
c010df71:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010df74:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010df79:	39 45 08             	cmp    %eax,0x8(%ebp)
c010df7c:	74 1a                	je     c010df98 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010df7e:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010df83:	8b 40 08             	mov    0x8(%eax),%eax
c010df86:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010df8c:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010df8f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010df93:	89 14 24             	mov    %edx,(%esp)
c010df96:	ff d0                	call   *%eax
    }
}
c010df98:	c9                   	leave  
c010df99:	c3                   	ret    

c010df9a <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010df9a:	55                   	push   %ebp
c010df9b:	89 e5                	mov    %esp,%ebp
c010df9d:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010dfa0:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010dfa5:	8b 40 0c             	mov    0xc(%eax),%eax
c010dfa8:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010dfae:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010dfb1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010dfb5:	89 14 24             	mov    %edx,(%esp)
c010dfb8:	ff d0                	call   *%eax
}
c010dfba:	c9                   	leave  
c010dfbb:	c3                   	ret    

c010dfbc <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010dfbc:	55                   	push   %ebp
c010dfbd:	89 e5                	mov    %esp,%ebp
c010dfbf:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010dfc2:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010dfc7:	8b 40 10             	mov    0x10(%eax),%eax
c010dfca:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010dfd0:	89 14 24             	mov    %edx,(%esp)
c010dfd3:	ff d0                	call   *%eax
}
c010dfd5:	c9                   	leave  
c010dfd6:	c3                   	ret    

c010dfd7 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010dfd7:	55                   	push   %ebp
c010dfd8:	89 e5                	mov    %esp,%ebp
c010dfda:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010dfdd:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dfe2:	39 45 08             	cmp    %eax,0x8(%ebp)
c010dfe5:	74 1c                	je     c010e003 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010dfe7:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010dfec:	8b 40 14             	mov    0x14(%eax),%eax
c010dfef:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010dff5:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010dff8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010dffc:	89 14 24             	mov    %edx,(%esp)
c010dfff:	ff d0                	call   *%eax
c010e001:	eb 0a                	jmp    c010e00d <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010e003:	8b 45 08             	mov    0x8(%ebp),%eax
c010e006:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010e00d:	c9                   	leave  
c010e00e:	c3                   	ret    

c010e00f <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010e00f:	55                   	push   %ebp
c010e010:	89 e5                	mov    %esp,%ebp
c010e012:	83 ec 28             	sub    $0x28,%esp
c010e015:	c7 45 f4 94 1f 15 c0 	movl   $0xc0151f94,-0xc(%ebp)
c010e01c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e01f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e022:	89 50 04             	mov    %edx,0x4(%eax)
c010e025:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e028:	8b 50 04             	mov    0x4(%eax),%edx
c010e02b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e02e:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010e030:	c7 05 9c 1f 15 c0 8c 	movl   $0xc014ea8c,0xc0151f9c
c010e037:	ea 14 c0 

    rq = &__rq;
c010e03a:	c7 05 a0 1f 15 c0 a4 	movl   $0xc0151fa4,0xc0151fa0
c010e041:	1f 15 c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010e044:	a1 a0 1f 15 c0       	mov    0xc0151fa0,%eax
c010e049:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010e050:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e055:	8b 40 04             	mov    0x4(%eax),%eax
c010e058:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e05e:	89 14 24             	mov    %edx,(%esp)
c010e061:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010e063:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e068:	8b 00                	mov    (%eax),%eax
c010e06a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e06e:	c7 04 24 b8 7d 11 c0 	movl   $0xc0117db8,(%esp)
c010e075:	e8 eb 22 ff ff       	call   c0100365 <cprintf>
}
c010e07a:	c9                   	leave  
c010e07b:	c3                   	ret    

c010e07c <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010e07c:	55                   	push   %ebp
c010e07d:	89 e5                	mov    %esp,%ebp
c010e07f:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010e082:	8b 45 08             	mov    0x8(%ebp),%eax
c010e085:	8b 00                	mov    (%eax),%eax
c010e087:	83 f8 03             	cmp    $0x3,%eax
c010e08a:	75 24                	jne    c010e0b0 <wakeup_proc+0x34>
c010e08c:	c7 44 24 0c c9 7d 11 	movl   $0xc0117dc9,0xc(%esp)
c010e093:	c0 
c010e094:	c7 44 24 08 e4 7d 11 	movl   $0xc0117de4,0x8(%esp)
c010e09b:	c0 
c010e09c:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010e0a3:	00 
c010e0a4:	c7 04 24 f9 7d 11 c0 	movl   $0xc0117df9,(%esp)
c010e0ab:	e8 18 2e ff ff       	call   c0100ec8 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010e0b0:	e8 7c fe ff ff       	call   c010df31 <__intr_save>
c010e0b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010e0b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0bb:	8b 00                	mov    (%eax),%eax
c010e0bd:	83 f8 02             	cmp    $0x2,%eax
c010e0c0:	74 2d                	je     c010e0ef <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010e0c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0c5:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010e0cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0ce:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010e0d5:	00 00 00 
            if (proc != current) {
c010e0d8:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e0dd:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e0e0:	74 29                	je     c010e10b <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010e0e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0e5:	89 04 24             	mov    %eax,(%esp)
c010e0e8:	e8 81 fe ff ff       	call   c010df6e <sched_class_enqueue>
c010e0ed:	eb 1c                	jmp    c010e10b <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010e0ef:	c7 44 24 08 0f 7e 11 	movl   $0xc0117e0f,0x8(%esp)
c010e0f6:	c0 
c010e0f7:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010e0fe:	00 
c010e0ff:	c7 04 24 f9 7d 11 c0 	movl   $0xc0117df9,(%esp)
c010e106:	e8 29 2e ff ff       	call   c0100f34 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010e10b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e10e:	89 04 24             	mov    %eax,(%esp)
c010e111:	e8 45 fe ff ff       	call   c010df5b <__intr_restore>
}
c010e116:	c9                   	leave  
c010e117:	c3                   	ret    

c010e118 <schedule>:

void
schedule(void) {
c010e118:	55                   	push   %ebp
c010e119:	89 e5                	mov    %esp,%ebp
c010e11b:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010e11e:	e8 0e fe ff ff       	call   c010df31 <__intr_save>
c010e123:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010e126:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e12b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010e132:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e137:	8b 00                	mov    (%eax),%eax
c010e139:	83 f8 02             	cmp    $0x2,%eax
c010e13c:	75 0d                	jne    c010e14b <schedule+0x33>
            sched_class_enqueue(current);
c010e13e:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e143:	89 04 24             	mov    %eax,(%esp)
c010e146:	e8 23 fe ff ff       	call   c010df6e <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010e14b:	e8 6c fe ff ff       	call   c010dfbc <sched_class_pick_next>
c010e150:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e153:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e157:	74 0b                	je     c010e164 <schedule+0x4c>
            sched_class_dequeue(next);
c010e159:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e15c:	89 04 24             	mov    %eax,(%esp)
c010e15f:	e8 36 fe ff ff       	call   c010df9a <sched_class_dequeue>
        }
        if (next == NULL) {
c010e164:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e168:	75 08                	jne    c010e172 <schedule+0x5a>
            next = idleproc;
c010e16a:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010e16f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010e172:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e175:	8b 40 08             	mov    0x8(%eax),%eax
c010e178:	8d 50 01             	lea    0x1(%eax),%edx
c010e17b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e17e:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010e181:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e186:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e189:	74 0b                	je     c010e196 <schedule+0x7e>
            proc_run(next);
c010e18b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e18e:	89 04 24             	mov    %eax,(%esp)
c010e191:	e8 a7 dd ff ff       	call   c010bf3d <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010e196:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e199:	89 04 24             	mov    %eax,(%esp)
c010e19c:	e8 ba fd ff ff       	call   c010df5b <__intr_restore>
}
c010e1a1:	c9                   	leave  
c010e1a2:	c3                   	ret    

c010e1a3 <add_timer>:

void
add_timer(timer_t *timer) {
c010e1a3:	55                   	push   %ebp
c010e1a4:	89 e5                	mov    %esp,%ebp
c010e1a6:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e1a9:	e8 83 fd ff ff       	call   c010df31 <__intr_save>
c010e1ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010e1b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1b4:	8b 00                	mov    (%eax),%eax
c010e1b6:	85 c0                	test   %eax,%eax
c010e1b8:	74 0a                	je     c010e1c4 <add_timer+0x21>
c010e1ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1bd:	8b 40 04             	mov    0x4(%eax),%eax
c010e1c0:	85 c0                	test   %eax,%eax
c010e1c2:	75 24                	jne    c010e1e8 <add_timer+0x45>
c010e1c4:	c7 44 24 0c 2c 7e 11 	movl   $0xc0117e2c,0xc(%esp)
c010e1cb:	c0 
c010e1cc:	c7 44 24 08 e4 7d 11 	movl   $0xc0117de4,0x8(%esp)
c010e1d3:	c0 
c010e1d4:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010e1db:	00 
c010e1dc:	c7 04 24 f9 7d 11 c0 	movl   $0xc0117df9,(%esp)
c010e1e3:	e8 e0 2c ff ff       	call   c0100ec8 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010e1e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1eb:	83 c0 08             	add    $0x8,%eax
c010e1ee:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e1f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e1f4:	8b 40 04             	mov    0x4(%eax),%eax
c010e1f7:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e1fa:	0f 94 c0             	sete   %al
c010e1fd:	0f b6 c0             	movzbl %al,%eax
c010e200:	85 c0                	test   %eax,%eax
c010e202:	75 24                	jne    c010e228 <add_timer+0x85>
c010e204:	c7 44 24 0c 58 7e 11 	movl   $0xc0117e58,0xc(%esp)
c010e20b:	c0 
c010e20c:	c7 44 24 08 e4 7d 11 	movl   $0xc0117de4,0x8(%esp)
c010e213:	c0 
c010e214:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010e21b:	00 
c010e21c:	c7 04 24 f9 7d 11 c0 	movl   $0xc0117df9,(%esp)
c010e223:	e8 a0 2c ff ff       	call   c0100ec8 <__panic>
c010e228:	c7 45 e4 94 1f 15 c0 	movl   $0xc0151f94,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e22f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e232:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010e235:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010e238:	eb 4a                	jmp    c010e284 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010e23a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e23d:	83 e8 08             	sub    $0x8,%eax
c010e240:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010e243:	8b 45 08             	mov    0x8(%ebp),%eax
c010e246:	8b 10                	mov    (%eax),%edx
c010e248:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e24b:	8b 00                	mov    (%eax),%eax
c010e24d:	39 c2                	cmp    %eax,%edx
c010e24f:	73 13                	jae    c010e264 <add_timer+0xc1>
                next->expires -= timer->expires;
c010e251:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e254:	8b 10                	mov    (%eax),%edx
c010e256:	8b 45 08             	mov    0x8(%ebp),%eax
c010e259:	8b 00                	mov    (%eax),%eax
c010e25b:	29 c2                	sub    %eax,%edx
c010e25d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e260:	89 10                	mov    %edx,(%eax)
                break;
c010e262:	eb 29                	jmp    c010e28d <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010e264:	8b 45 08             	mov    0x8(%ebp),%eax
c010e267:	8b 10                	mov    (%eax),%edx
c010e269:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e26c:	8b 00                	mov    (%eax),%eax
c010e26e:	29 c2                	sub    %eax,%edx
c010e270:	8b 45 08             	mov    0x8(%ebp),%eax
c010e273:	89 10                	mov    %edx,(%eax)
c010e275:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e278:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e27b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e27e:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010e281:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010e284:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010e28b:	75 ad                	jne    c010e23a <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010e28d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e290:	8d 50 08             	lea    0x8(%eax),%edx
c010e293:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e296:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010e299:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010e29c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e29f:	8b 00                	mov    (%eax),%eax
c010e2a1:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e2a4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010e2a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010e2aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e2ad:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010e2b0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e2b3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e2b6:	89 10                	mov    %edx,(%eax)
c010e2b8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e2bb:	8b 10                	mov    (%eax),%edx
c010e2bd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e2c0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010e2c3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e2c6:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010e2c9:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010e2cc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e2cf:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e2d2:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010e2d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e2d7:	89 04 24             	mov    %eax,(%esp)
c010e2da:	e8 7c fc ff ff       	call   c010df5b <__intr_restore>
}
c010e2df:	c9                   	leave  
c010e2e0:	c3                   	ret    

c010e2e1 <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010e2e1:	55                   	push   %ebp
c010e2e2:	89 e5                	mov    %esp,%ebp
c010e2e4:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e2e7:	e8 45 fc ff ff       	call   c010df31 <__intr_save>
c010e2ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010e2ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2f2:	83 c0 08             	add    $0x8,%eax
c010e2f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e2f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e2fb:	8b 40 04             	mov    0x4(%eax),%eax
c010e2fe:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e301:	0f 94 c0             	sete   %al
c010e304:	0f b6 c0             	movzbl %al,%eax
c010e307:	85 c0                	test   %eax,%eax
c010e309:	0f 85 89 00 00 00    	jne    c010e398 <del_timer+0xb7>
            if (timer->expires != 0) {
c010e30f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e312:	8b 00                	mov    (%eax),%eax
c010e314:	85 c0                	test   %eax,%eax
c010e316:	74 35                	je     c010e34d <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010e318:	8b 45 08             	mov    0x8(%ebp),%eax
c010e31b:	83 c0 08             	add    $0x8,%eax
c010e31e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e321:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e324:	8b 40 04             	mov    0x4(%eax),%eax
c010e327:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010e32a:	81 7d f0 94 1f 15 c0 	cmpl   $0xc0151f94,-0x10(%ebp)
c010e331:	74 1a                	je     c010e34d <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010e333:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e336:	83 e8 08             	sub    $0x8,%eax
c010e339:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010e33c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e33f:	8b 10                	mov    (%eax),%edx
c010e341:	8b 45 08             	mov    0x8(%ebp),%eax
c010e344:	8b 00                	mov    (%eax),%eax
c010e346:	01 c2                	add    %eax,%edx
c010e348:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e34b:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010e34d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e350:	83 c0 08             	add    $0x8,%eax
c010e353:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e356:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e359:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010e35c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e35f:	8b 40 04             	mov    0x4(%eax),%eax
c010e362:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010e365:	8b 12                	mov    (%edx),%edx
c010e367:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010e36a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010e36d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e370:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e373:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010e376:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e379:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e37c:	89 10                	mov    %edx,(%eax)
c010e37e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e381:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010e384:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e387:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e38a:	89 50 04             	mov    %edx,0x4(%eax)
c010e38d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e390:	8b 50 04             	mov    0x4(%eax),%edx
c010e393:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e396:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010e398:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e39b:	89 04 24             	mov    %eax,(%esp)
c010e39e:	e8 b8 fb ff ff       	call   c010df5b <__intr_restore>
}
c010e3a3:	c9                   	leave  
c010e3a4:	c3                   	ret    

c010e3a5 <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010e3a5:	55                   	push   %ebp
c010e3a6:	89 e5                	mov    %esp,%ebp
c010e3a8:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e3ab:	e8 81 fb ff ff       	call   c010df31 <__intr_save>
c010e3b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e3b3:	c7 45 e4 94 1f 15 c0 	movl   $0xc0151f94,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e3ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e3bd:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010e3c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010e3c3:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010e3ca:	0f 84 fb 00 00 00    	je     c010e4cb <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010e3d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e3d3:	83 e8 08             	sub    $0x8,%eax
c010e3d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010e3d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e3dc:	8b 00                	mov    (%eax),%eax
c010e3de:	85 c0                	test   %eax,%eax
c010e3e0:	75 24                	jne    c010e406 <run_timer_list+0x61>
c010e3e2:	c7 44 24 0c 79 7e 11 	movl   $0xc0117e79,0xc(%esp)
c010e3e9:	c0 
c010e3ea:	c7 44 24 08 e4 7d 11 	movl   $0xc0117de4,0x8(%esp)
c010e3f1:	c0 
c010e3f2:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
c010e3f9:	00 
c010e3fa:	c7 04 24 f9 7d 11 c0 	movl   $0xc0117df9,(%esp)
c010e401:	e8 c2 2a ff ff       	call   c0100ec8 <__panic>
            timer->expires --;
c010e406:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e409:	8b 00                	mov    (%eax),%eax
c010e40b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e40e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e411:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010e413:	e9 a6 00 00 00       	jmp    c010e4be <run_timer_list+0x119>
c010e418:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e41b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e41e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e421:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010e424:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010e427:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e42a:	8b 40 04             	mov    0x4(%eax),%eax
c010e42d:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010e430:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e433:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010e439:	85 c0                	test   %eax,%eax
c010e43b:	74 31                	je     c010e46e <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010e43d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e440:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010e446:	85 c0                	test   %eax,%eax
c010e448:	78 4a                	js     c010e494 <run_timer_list+0xef>
c010e44a:	c7 44 24 0c 90 7e 11 	movl   $0xc0117e90,0xc(%esp)
c010e451:	c0 
c010e452:	c7 44 24 08 e4 7d 11 	movl   $0xc0117de4,0x8(%esp)
c010e459:	c0 
c010e45a:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010e461:	00 
c010e462:	c7 04 24 f9 7d 11 c0 	movl   $0xc0117df9,(%esp)
c010e469:	e8 5a 2a ff ff       	call   c0100ec8 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010e46e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e471:	8b 40 04             	mov    0x4(%eax),%eax
c010e474:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010e478:	c7 44 24 08 b4 7e 11 	movl   $0xc0117eb4,0x8(%esp)
c010e47f:	c0 
c010e480:	c7 44 24 04 a2 00 00 	movl   $0xa2,0x4(%esp)
c010e487:	00 
c010e488:	c7 04 24 f9 7d 11 c0 	movl   $0xc0117df9,(%esp)
c010e48f:	e8 a0 2a ff ff       	call   c0100f34 <__warn>
                }
                wakeup_proc(proc);
c010e494:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e497:	89 04 24             	mov    %eax,(%esp)
c010e49a:	e8 dd fb ff ff       	call   c010e07c <wakeup_proc>
                del_timer(timer);
c010e49f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e4a2:	89 04 24             	mov    %eax,(%esp)
c010e4a5:	e8 37 fe ff ff       	call   c010e2e1 <del_timer>
                if (le == &timer_list) {
c010e4aa:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010e4b1:	75 02                	jne    c010e4b5 <run_timer_list+0x110>
                    break;
c010e4b3:	eb 16                	jmp    c010e4cb <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010e4b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4b8:	83 e8 08             	sub    $0x8,%eax
c010e4bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010e4be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e4c1:	8b 00                	mov    (%eax),%eax
c010e4c3:	85 c0                	test   %eax,%eax
c010e4c5:	0f 84 4d ff ff ff    	je     c010e418 <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010e4cb:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e4d0:	89 04 24             	mov    %eax,(%esp)
c010e4d3:	e8 ff fa ff ff       	call   c010dfd7 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010e4d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e4db:	89 04 24             	mov    %eax,(%esp)
c010e4de:	e8 78 fa ff ff       	call   c010df5b <__intr_restore>
}
c010e4e3:	c9                   	leave  
c010e4e4:	c3                   	ret    

c010e4e5 <sys_exit>:
#include <stat.h>
#include <dirent.h>
#include <sysfile.h>

static int
sys_exit(uint32_t arg[]) {
c010e4e5:	55                   	push   %ebp
c010e4e6:	89 e5                	mov    %esp,%ebp
c010e4e8:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010e4eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4ee:	8b 00                	mov    (%eax),%eax
c010e4f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010e4f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4f6:	89 04 24             	mov    %eax,(%esp)
c010e4f9:	e8 bf e1 ff ff       	call   c010c6bd <do_exit>
}
c010e4fe:	c9                   	leave  
c010e4ff:	c3                   	ret    

c010e500 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010e500:	55                   	push   %ebp
c010e501:	89 e5                	mov    %esp,%ebp
c010e503:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010e506:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e50b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e50e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010e511:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e514:	8b 40 44             	mov    0x44(%eax),%eax
c010e517:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010e51a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e51d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e521:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e524:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e528:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010e52f:	e8 3c e0 ff ff       	call   c010c570 <do_fork>
}
c010e534:	c9                   	leave  
c010e535:	c3                   	ret    

c010e536 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010e536:	55                   	push   %ebp
c010e537:	89 e5                	mov    %esp,%ebp
c010e539:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010e53c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e53f:	8b 00                	mov    (%eax),%eax
c010e541:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010e544:	8b 45 08             	mov    0x8(%ebp),%eax
c010e547:	83 c0 04             	add    $0x4,%eax
c010e54a:	8b 00                	mov    (%eax),%eax
c010e54c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010e54f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e552:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e556:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e559:	89 04 24             	mov    %eax,(%esp)
c010e55c:	e8 27 ef ff ff       	call   c010d488 <do_wait>
}
c010e561:	c9                   	leave  
c010e562:	c3                   	ret    

c010e563 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010e563:	55                   	push   %ebp
c010e564:	89 e5                	mov    %esp,%ebp
c010e566:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010e569:	8b 45 08             	mov    0x8(%ebp),%eax
c010e56c:	8b 00                	mov    (%eax),%eax
c010e56e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int argc = (int)arg[1];
c010e571:	8b 45 08             	mov    0x8(%ebp),%eax
c010e574:	83 c0 04             	add    $0x4,%eax
c010e577:	8b 00                	mov    (%eax),%eax
c010e579:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char **argv = (const char **)arg[2];
c010e57c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e57f:	83 c0 08             	add    $0x8,%eax
c010e582:	8b 00                	mov    (%eax),%eax
c010e584:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return do_execve(name, argc, argv);
c010e587:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e58a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e58e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e591:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e595:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e598:	89 04 24             	mov    %eax,(%esp)
c010e59b:	e8 95 ec ff ff       	call   c010d235 <do_execve>
}
c010e5a0:	c9                   	leave  
c010e5a1:	c3                   	ret    

c010e5a2 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010e5a2:	55                   	push   %ebp
c010e5a3:	89 e5                	mov    %esp,%ebp
c010e5a5:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010e5a8:	e8 c5 ee ff ff       	call   c010d472 <do_yield>
}
c010e5ad:	c9                   	leave  
c010e5ae:	c3                   	ret    

c010e5af <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010e5af:	55                   	push   %ebp
c010e5b0:	89 e5                	mov    %esp,%ebp
c010e5b2:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010e5b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e5b8:	8b 00                	mov    (%eax),%eax
c010e5ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010e5bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e5c0:	89 04 24             	mov    %eax,(%esp)
c010e5c3:	e8 60 f0 ff ff       	call   c010d628 <do_kill>
}
c010e5c8:	c9                   	leave  
c010e5c9:	c3                   	ret    

c010e5ca <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010e5ca:	55                   	push   %ebp
c010e5cb:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010e5cd:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e5d2:	8b 40 04             	mov    0x4(%eax),%eax
}
c010e5d5:	5d                   	pop    %ebp
c010e5d6:	c3                   	ret    

c010e5d7 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010e5d7:	55                   	push   %ebp
c010e5d8:	89 e5                	mov    %esp,%ebp
c010e5da:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010e5dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010e5e0:	8b 00                	mov    (%eax),%eax
c010e5e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010e5e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e5e8:	89 04 24             	mov    %eax,(%esp)
c010e5eb:	e8 9b 1d ff ff       	call   c010038b <cputchar>
    return 0;
c010e5f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e5f5:	c9                   	leave  
c010e5f6:	c3                   	ret    

c010e5f7 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010e5f7:	55                   	push   %ebp
c010e5f8:	89 e5                	mov    %esp,%ebp
c010e5fa:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010e5fd:	e8 c6 83 ff ff       	call   c01069c8 <print_pgdir>
    return 0;
c010e602:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e607:	c9                   	leave  
c010e608:	c3                   	ret    

c010e609 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010e609:	55                   	push   %ebp
c010e60a:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010e60c:	a1 10 30 15 c0       	mov    0xc0153010,%eax
}
c010e611:	5d                   	pop    %ebp
c010e612:	c3                   	ret    

c010e613 <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010e613:	55                   	push   %ebp
c010e614:	89 e5                	mov    %esp,%ebp
c010e616:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010e619:	8b 45 08             	mov    0x8(%ebp),%eax
c010e61c:	8b 00                	mov    (%eax),%eax
c010e61e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010e621:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e624:	89 04 24             	mov    %eax,(%esp)
c010e627:	e8 03 f5 ff ff       	call   c010db2f <lab6_set_priority>
    return 0;
c010e62c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e631:	c9                   	leave  
c010e632:	c3                   	ret    

c010e633 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010e633:	55                   	push   %ebp
c010e634:	89 e5                	mov    %esp,%ebp
c010e636:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010e639:	8b 45 08             	mov    0x8(%ebp),%eax
c010e63c:	8b 00                	mov    (%eax),%eax
c010e63e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010e641:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e644:	89 04 24             	mov    %eax,(%esp)
c010e647:	e8 0d f5 ff ff       	call   c010db59 <do_sleep>
}
c010e64c:	c9                   	leave  
c010e64d:	c3                   	ret    

c010e64e <sys_open>:

static int
sys_open(uint32_t arg[]) {
c010e64e:	55                   	push   %ebp
c010e64f:	89 e5                	mov    %esp,%ebp
c010e651:	83 ec 28             	sub    $0x28,%esp
    const char *path = (const char *)arg[0];
c010e654:	8b 45 08             	mov    0x8(%ebp),%eax
c010e657:	8b 00                	mov    (%eax),%eax
c010e659:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t open_flags = (uint32_t)arg[1];
c010e65c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e65f:	8b 40 04             	mov    0x4(%eax),%eax
c010e662:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_open(path, open_flags);
c010e665:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e668:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e66c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e66f:	89 04 24             	mov    %eax,(%esp)
c010e672:	e8 02 cc ff ff       	call   c010b279 <sysfile_open>
}
c010e677:	c9                   	leave  
c010e678:	c3                   	ret    

c010e679 <sys_close>:

static int
sys_close(uint32_t arg[]) {
c010e679:	55                   	push   %ebp
c010e67a:	89 e5                	mov    %esp,%ebp
c010e67c:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010e67f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e682:	8b 00                	mov    (%eax),%eax
c010e684:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_close(fd);
c010e687:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e68a:	89 04 24             	mov    %eax,(%esp)
c010e68d:	e8 32 cc ff ff       	call   c010b2c4 <sysfile_close>
}
c010e692:	c9                   	leave  
c010e693:	c3                   	ret    

c010e694 <sys_read>:

static int
sys_read(uint32_t arg[]) {
c010e694:	55                   	push   %ebp
c010e695:	89 e5                	mov    %esp,%ebp
c010e697:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010e69a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e69d:	8b 00                	mov    (%eax),%eax
c010e69f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010e6a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6a5:	83 c0 04             	add    $0x4,%eax
c010e6a8:	8b 00                	mov    (%eax),%eax
c010e6aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010e6ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6b0:	8b 40 08             	mov    0x8(%eax),%eax
c010e6b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_read(fd, base, len);
c010e6b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e6b9:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e6bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e6c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e6c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6c7:	89 04 24             	mov    %eax,(%esp)
c010e6ca:	e8 08 cc ff ff       	call   c010b2d7 <sysfile_read>
}
c010e6cf:	c9                   	leave  
c010e6d0:	c3                   	ret    

c010e6d1 <sys_write>:

static int
sys_write(uint32_t arg[]) {
c010e6d1:	55                   	push   %ebp
c010e6d2:	89 e5                	mov    %esp,%ebp
c010e6d4:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010e6d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6da:	8b 00                	mov    (%eax),%eax
c010e6dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010e6df:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6e2:	83 c0 04             	add    $0x4,%eax
c010e6e5:	8b 00                	mov    (%eax),%eax
c010e6e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010e6ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6ed:	8b 40 08             	mov    0x8(%eax),%eax
c010e6f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_write(fd, base, len);
c010e6f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e6f6:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e6fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e6fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e701:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e704:	89 04 24             	mov    %eax,(%esp)
c010e707:	e8 43 cd ff ff       	call   c010b44f <sysfile_write>
}
c010e70c:	c9                   	leave  
c010e70d:	c3                   	ret    

c010e70e <sys_seek>:

static int
sys_seek(uint32_t arg[]) {
c010e70e:	55                   	push   %ebp
c010e70f:	89 e5                	mov    %esp,%ebp
c010e711:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010e714:	8b 45 08             	mov    0x8(%ebp),%eax
c010e717:	8b 00                	mov    (%eax),%eax
c010e719:	89 45 f4             	mov    %eax,-0xc(%ebp)
    off_t pos = (off_t)arg[1];
c010e71c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e71f:	83 c0 04             	add    $0x4,%eax
c010e722:	8b 00                	mov    (%eax),%eax
c010e724:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int whence = (int)arg[2];
c010e727:	8b 45 08             	mov    0x8(%ebp),%eax
c010e72a:	83 c0 08             	add    $0x8,%eax
c010e72d:	8b 00                	mov    (%eax),%eax
c010e72f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_seek(fd, pos, whence);
c010e732:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e735:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e739:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e73c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e740:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e743:	89 04 24             	mov    %eax,(%esp)
c010e746:	e8 7e ce ff ff       	call   c010b5c9 <sysfile_seek>
}
c010e74b:	c9                   	leave  
c010e74c:	c3                   	ret    

c010e74d <sys_fstat>:

static int
sys_fstat(uint32_t arg[]) {
c010e74d:	55                   	push   %ebp
c010e74e:	89 e5                	mov    %esp,%ebp
c010e750:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010e753:	8b 45 08             	mov    0x8(%ebp),%eax
c010e756:	8b 00                	mov    (%eax),%eax
c010e758:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct stat *stat = (struct stat *)arg[1];
c010e75b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e75e:	83 c0 04             	add    $0x4,%eax
c010e761:	8b 00                	mov    (%eax),%eax
c010e763:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_fstat(fd, stat);
c010e766:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e769:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e76d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e770:	89 04 24             	mov    %eax,(%esp)
c010e773:	e8 72 ce ff ff       	call   c010b5ea <sysfile_fstat>
}
c010e778:	c9                   	leave  
c010e779:	c3                   	ret    

c010e77a <sys_fsync>:

static int
sys_fsync(uint32_t arg[]) {
c010e77a:	55                   	push   %ebp
c010e77b:	89 e5                	mov    %esp,%ebp
c010e77d:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010e780:	8b 45 08             	mov    0x8(%ebp),%eax
c010e783:	8b 00                	mov    (%eax),%eax
c010e785:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_fsync(fd);
c010e788:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e78b:	89 04 24             	mov    %eax,(%esp)
c010e78e:	e8 d5 ce ff ff       	call   c010b668 <sysfile_fsync>
}
c010e793:	c9                   	leave  
c010e794:	c3                   	ret    

c010e795 <sys_getcwd>:

static int
sys_getcwd(uint32_t arg[]) {
c010e795:	55                   	push   %ebp
c010e796:	89 e5                	mov    %esp,%ebp
c010e798:	83 ec 28             	sub    $0x28,%esp
    char *buf = (char *)arg[0];
c010e79b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e79e:	8b 00                	mov    (%eax),%eax
c010e7a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010e7a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7a6:	8b 40 04             	mov    0x4(%eax),%eax
c010e7a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getcwd(buf, len);
c010e7ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e7af:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e7b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7b6:	89 04 24             	mov    %eax,(%esp)
c010e7b9:	e8 47 d0 ff ff       	call   c010b805 <sysfile_getcwd>
}
c010e7be:	c9                   	leave  
c010e7bf:	c3                   	ret    

c010e7c0 <sys_getdirentry>:

static int
sys_getdirentry(uint32_t arg[]) {
c010e7c0:	55                   	push   %ebp
c010e7c1:	89 e5                	mov    %esp,%ebp
c010e7c3:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010e7c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7c9:	8b 00                	mov    (%eax),%eax
c010e7cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct dirent *direntp = (struct dirent *)arg[1];
c010e7ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7d1:	83 c0 04             	add    $0x4,%eax
c010e7d4:	8b 00                	mov    (%eax),%eax
c010e7d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getdirentry(fd, direntp);
c010e7d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e7dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e7e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7e3:	89 04 24             	mov    %eax,(%esp)
c010e7e6:	e8 b1 d0 ff ff       	call   c010b89c <sysfile_getdirentry>
}
c010e7eb:	c9                   	leave  
c010e7ec:	c3                   	ret    

c010e7ed <sys_dup>:

static int
sys_dup(uint32_t arg[]) {
c010e7ed:	55                   	push   %ebp
c010e7ee:	89 e5                	mov    %esp,%ebp
c010e7f0:	83 ec 28             	sub    $0x28,%esp
    int fd1 = (int)arg[0];
c010e7f3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7f6:	8b 00                	mov    (%eax),%eax
c010e7f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int fd2 = (int)arg[1];
c010e7fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7fe:	83 c0 04             	add    $0x4,%eax
c010e801:	8b 00                	mov    (%eax),%eax
c010e803:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_dup(fd1, fd2);
c010e806:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e809:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e80d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e810:	89 04 24             	mov    %eax,(%esp)
c010e813:	e8 78 d1 ff ff       	call   c010b990 <sysfile_dup>
}
c010e818:	c9                   	leave  
c010e819:	c3                   	ret    

c010e81a <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010e81a:	55                   	push   %ebp
c010e81b:	89 e5                	mov    %esp,%ebp
c010e81d:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010e820:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e825:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e828:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010e82b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e82e:	8b 40 1c             	mov    0x1c(%eax),%eax
c010e831:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010e834:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e838:	78 60                	js     c010e89a <syscall+0x80>
c010e83a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e83d:	3d ff 00 00 00       	cmp    $0xff,%eax
c010e842:	77 56                	ja     c010e89a <syscall+0x80>
        if (syscalls[num] != NULL) {
c010e844:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e847:	8b 04 85 c0 ea 14 c0 	mov    -0x3feb1540(,%eax,4),%eax
c010e84e:	85 c0                	test   %eax,%eax
c010e850:	74 48                	je     c010e89a <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010e852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e855:	8b 40 14             	mov    0x14(%eax),%eax
c010e858:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010e85b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e85e:	8b 40 18             	mov    0x18(%eax),%eax
c010e861:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010e864:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e867:	8b 40 10             	mov    0x10(%eax),%eax
c010e86a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010e86d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e870:	8b 00                	mov    (%eax),%eax
c010e872:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010e875:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e878:	8b 40 04             	mov    0x4(%eax),%eax
c010e87b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010e87e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e881:	8b 04 85 c0 ea 14 c0 	mov    -0x3feb1540(,%eax,4),%eax
c010e888:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010e88b:	89 14 24             	mov    %edx,(%esp)
c010e88e:	ff d0                	call   *%eax
c010e890:	89 c2                	mov    %eax,%edx
c010e892:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e895:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010e898:	eb 46                	jmp    c010e8e0 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010e89a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e89d:	89 04 24             	mov    %eax,(%esp)
c010e8a0:	e8 e5 3b ff ff       	call   c010248a <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010e8a5:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e8aa:	8d 50 48             	lea    0x48(%eax),%edx
c010e8ad:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e8b2:	8b 40 04             	mov    0x4(%eax),%eax
c010e8b5:	89 54 24 14          	mov    %edx,0x14(%esp)
c010e8b9:	89 44 24 10          	mov    %eax,0x10(%esp)
c010e8bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e8c0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010e8c4:	c7 44 24 08 d4 7e 11 	movl   $0xc0117ed4,0x8(%esp)
c010e8cb:	c0 
c010e8cc:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010e8d3:	00 
c010e8d4:	c7 04 24 00 7f 11 c0 	movl   $0xc0117f00,(%esp)
c010e8db:	e8 e8 25 ff ff       	call   c0100ec8 <__panic>
            num, current->pid, current->name);
}
c010e8e0:	c9                   	leave  
c010e8e1:	c3                   	ret    

c010e8e2 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010e8e2:	55                   	push   %ebp
c010e8e3:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010e8e5:	8b 55 08             	mov    0x8(%ebp),%edx
c010e8e8:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010e8ed:	29 c2                	sub    %eax,%edx
c010e8ef:	89 d0                	mov    %edx,%eax
c010e8f1:	c1 f8 05             	sar    $0x5,%eax
}
c010e8f4:	5d                   	pop    %ebp
c010e8f5:	c3                   	ret    

c010e8f6 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010e8f6:	55                   	push   %ebp
c010e8f7:	89 e5                	mov    %esp,%ebp
c010e8f9:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010e8fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8ff:	89 04 24             	mov    %eax,(%esp)
c010e902:	e8 db ff ff ff       	call   c010e8e2 <page2ppn>
c010e907:	c1 e0 0c             	shl    $0xc,%eax
}
c010e90a:	c9                   	leave  
c010e90b:	c3                   	ret    

c010e90c <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010e90c:	55                   	push   %ebp
c010e90d:	89 e5                	mov    %esp,%ebp
c010e90f:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010e912:	8b 45 08             	mov    0x8(%ebp),%eax
c010e915:	89 04 24             	mov    %eax,(%esp)
c010e918:	e8 d9 ff ff ff       	call   c010e8f6 <page2pa>
c010e91d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e920:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e923:	c1 e8 0c             	shr    $0xc,%eax
c010e926:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e929:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010e92e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010e931:	72 23                	jb     c010e956 <page2kva+0x4a>
c010e933:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e936:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010e93a:	c7 44 24 08 18 7f 11 	movl   $0xc0117f18,0x8(%esp)
c010e941:	c0 
c010e942:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010e949:	00 
c010e94a:	c7 04 24 3b 7f 11 c0 	movl   $0xc0117f3b,(%esp)
c010e951:	e8 72 25 ff ff       	call   c0100ec8 <__panic>
c010e956:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e959:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010e95e:	c9                   	leave  
c010e95f:	c3                   	ret    

c010e960 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010e960:	55                   	push   %ebp
c010e961:	89 e5                	mov    %esp,%ebp
c010e963:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010e966:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010e96d:	e8 b0 32 ff ff       	call   c0101c22 <ide_device_valid>
c010e972:	85 c0                	test   %eax,%eax
c010e974:	75 1c                	jne    c010e992 <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010e976:	c7 44 24 08 49 7f 11 	movl   $0xc0117f49,0x8(%esp)
c010e97d:	c0 
c010e97e:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010e985:	00 
c010e986:	c7 04 24 63 7f 11 c0 	movl   $0xc0117f63,(%esp)
c010e98d:	e8 36 25 ff ff       	call   c0100ec8 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010e992:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010e999:	e8 c3 32 ff ff       	call   c0101c61 <ide_device_size>
c010e99e:	c1 e8 03             	shr    $0x3,%eax
c010e9a1:	a3 dc 30 15 c0       	mov    %eax,0xc01530dc
}
c010e9a6:	c9                   	leave  
c010e9a7:	c3                   	ret    

c010e9a8 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010e9a8:	55                   	push   %ebp
c010e9a9:	89 e5                	mov    %esp,%ebp
c010e9ab:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010e9ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e9b1:	89 04 24             	mov    %eax,(%esp)
c010e9b4:	e8 53 ff ff ff       	call   c010e90c <page2kva>
c010e9b9:	8b 55 08             	mov    0x8(%ebp),%edx
c010e9bc:	c1 ea 08             	shr    $0x8,%edx
c010e9bf:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010e9c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e9c6:	74 0b                	je     c010e9d3 <swapfs_read+0x2b>
c010e9c8:	8b 15 dc 30 15 c0    	mov    0xc01530dc,%edx
c010e9ce:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010e9d1:	72 23                	jb     c010e9f6 <swapfs_read+0x4e>
c010e9d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9d6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010e9da:	c7 44 24 08 79 7f 11 	movl   $0xc0117f79,0x8(%esp)
c010e9e1:	c0 
c010e9e2:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010e9e9:	00 
c010e9ea:	c7 04 24 63 7f 11 c0 	movl   $0xc0117f63,(%esp)
c010e9f1:	e8 d2 24 ff ff       	call   c0100ec8 <__panic>
c010e9f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e9f9:	c1 e2 03             	shl    $0x3,%edx
c010e9fc:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010ea03:	00 
c010ea04:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ea08:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ea0c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ea13:	e8 88 32 ff ff       	call   c0101ca0 <ide_read_secs>
}
c010ea18:	c9                   	leave  
c010ea19:	c3                   	ret    

c010ea1a <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010ea1a:	55                   	push   %ebp
c010ea1b:	89 e5                	mov    %esp,%ebp
c010ea1d:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010ea20:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ea23:	89 04 24             	mov    %eax,(%esp)
c010ea26:	e8 e1 fe ff ff       	call   c010e90c <page2kva>
c010ea2b:	8b 55 08             	mov    0x8(%ebp),%edx
c010ea2e:	c1 ea 08             	shr    $0x8,%edx
c010ea31:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010ea34:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ea38:	74 0b                	je     c010ea45 <swapfs_write+0x2b>
c010ea3a:	8b 15 dc 30 15 c0    	mov    0xc01530dc,%edx
c010ea40:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010ea43:	72 23                	jb     c010ea68 <swapfs_write+0x4e>
c010ea45:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea48:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ea4c:	c7 44 24 08 79 7f 11 	movl   $0xc0117f79,0x8(%esp)
c010ea53:	c0 
c010ea54:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010ea5b:	00 
c010ea5c:	c7 04 24 63 7f 11 c0 	movl   $0xc0117f63,(%esp)
c010ea63:	e8 60 24 ff ff       	call   c0100ec8 <__panic>
c010ea68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ea6b:	c1 e2 03             	shl    $0x3,%edx
c010ea6e:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010ea75:	00 
c010ea76:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ea7a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ea7e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ea85:	e8 58 34 ff ff       	call   c0101ee2 <ide_write_secs>
}
c010ea8a:	c9                   	leave  
c010ea8b:	c3                   	ret    

c010ea8c <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c010ea8c:	55                   	push   %ebp
c010ea8d:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c010ea8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea92:	8b 40 30             	mov    0x30(%eax),%eax
}
c010ea95:	5d                   	pop    %ebp
c010ea96:	c3                   	ret    

c010ea97 <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
c010ea97:	55                   	push   %ebp
c010ea98:	89 e5                	mov    %esp,%ebp
    return node->open_count;
c010ea9a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea9d:	8b 40 34             	mov    0x34(%eax),%eax
}
c010eaa0:	5d                   	pop    %ebp
c010eaa1:	c3                   	ret    

c010eaa2 <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
c010eaa2:	55                   	push   %ebp
c010eaa3:	89 e5                	mov    %esp,%ebp
c010eaa5:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
c010eaa8:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010eaaf:	e8 aa 5f ff ff       	call   c0104a5e <kmalloc>
c010eab4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eab7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010eabb:	74 09                	je     c010eac6 <__alloc_inode+0x24>
        node->in_type = type;
c010eabd:	8b 55 08             	mov    0x8(%ebp),%edx
c010eac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eac3:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    return node;
c010eac6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010eac9:	c9                   	leave  
c010eaca:	c3                   	ret    

c010eacb <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
c010eacb:	55                   	push   %ebp
c010eacc:	89 e5                	mov    %esp,%ebp
c010eace:	83 ec 18             	sub    $0x18,%esp
    node->ref_count = 0;
c010ead1:	8b 45 08             	mov    0x8(%ebp),%eax
c010ead4:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    node->open_count = 0;
c010eadb:	8b 45 08             	mov    0x8(%ebp),%eax
c010eade:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    node->in_ops = ops, node->in_fs = fs;
c010eae5:	8b 45 08             	mov    0x8(%ebp),%eax
c010eae8:	8b 55 0c             	mov    0xc(%ebp),%edx
c010eaeb:	89 50 3c             	mov    %edx,0x3c(%eax)
c010eaee:	8b 45 08             	mov    0x8(%ebp),%eax
c010eaf1:	8b 55 10             	mov    0x10(%ebp),%edx
c010eaf4:	89 50 38             	mov    %edx,0x38(%eax)
    vop_ref_inc(node);
c010eaf7:	8b 45 08             	mov    0x8(%ebp),%eax
c010eafa:	89 04 24             	mov    %eax,(%esp)
c010eafd:	e8 7b 00 00 00       	call   c010eb7d <inode_ref_inc>
}
c010eb02:	c9                   	leave  
c010eb03:	c3                   	ret    

c010eb04 <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
c010eb04:	55                   	push   %ebp
c010eb05:	89 e5                	mov    %esp,%ebp
c010eb07:	83 ec 18             	sub    $0x18,%esp
    assert(inode_ref_count(node) == 0);
c010eb0a:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb0d:	89 04 24             	mov    %eax,(%esp)
c010eb10:	e8 77 ff ff ff       	call   c010ea8c <inode_ref_count>
c010eb15:	85 c0                	test   %eax,%eax
c010eb17:	74 24                	je     c010eb3d <inode_kill+0x39>
c010eb19:	c7 44 24 0c 98 7f 11 	movl   $0xc0117f98,0xc(%esp)
c010eb20:	c0 
c010eb21:	c7 44 24 08 b3 7f 11 	movl   $0xc0117fb3,0x8(%esp)
c010eb28:	c0 
c010eb29:	c7 44 24 04 29 00 00 	movl   $0x29,0x4(%esp)
c010eb30:	00 
c010eb31:	c7 04 24 c8 7f 11 c0 	movl   $0xc0117fc8,(%esp)
c010eb38:	e8 8b 23 ff ff       	call   c0100ec8 <__panic>
    assert(inode_open_count(node) == 0);
c010eb3d:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb40:	89 04 24             	mov    %eax,(%esp)
c010eb43:	e8 4f ff ff ff       	call   c010ea97 <inode_open_count>
c010eb48:	85 c0                	test   %eax,%eax
c010eb4a:	74 24                	je     c010eb70 <inode_kill+0x6c>
c010eb4c:	c7 44 24 0c dc 7f 11 	movl   $0xc0117fdc,0xc(%esp)
c010eb53:	c0 
c010eb54:	c7 44 24 08 b3 7f 11 	movl   $0xc0117fb3,0x8(%esp)
c010eb5b:	c0 
c010eb5c:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c010eb63:	00 
c010eb64:	c7 04 24 c8 7f 11 c0 	movl   $0xc0117fc8,(%esp)
c010eb6b:	e8 58 23 ff ff       	call   c0100ec8 <__panic>
    kfree(node);
c010eb70:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb73:	89 04 24             	mov    %eax,(%esp)
c010eb76:	e8 fe 5e ff ff       	call   c0104a79 <kfree>
}
c010eb7b:	c9                   	leave  
c010eb7c:	c3                   	ret    

c010eb7d <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
c010eb7d:	55                   	push   %ebp
c010eb7e:	89 e5                	mov    %esp,%ebp
    node->ref_count += 1;
c010eb80:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb83:	8b 40 30             	mov    0x30(%eax),%eax
c010eb86:	8d 50 01             	lea    0x1(%eax),%edx
c010eb89:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb8c:	89 50 30             	mov    %edx,0x30(%eax)
    return node->ref_count;
c010eb8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb92:	8b 40 30             	mov    0x30(%eax),%eax
}
c010eb95:	5d                   	pop    %ebp
c010eb96:	c3                   	ret    

c010eb97 <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
c010eb97:	55                   	push   %ebp
c010eb98:	89 e5                	mov    %esp,%ebp
c010eb9a:	83 ec 28             	sub    $0x28,%esp
    assert(inode_ref_count(node) > 0);
c010eb9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010eba0:	89 04 24             	mov    %eax,(%esp)
c010eba3:	e8 e4 fe ff ff       	call   c010ea8c <inode_ref_count>
c010eba8:	85 c0                	test   %eax,%eax
c010ebaa:	7f 24                	jg     c010ebd0 <inode_ref_dec+0x39>
c010ebac:	c7 44 24 0c f8 7f 11 	movl   $0xc0117ff8,0xc(%esp)
c010ebb3:	c0 
c010ebb4:	c7 44 24 08 b3 7f 11 	movl   $0xc0117fb3,0x8(%esp)
c010ebbb:	c0 
c010ebbc:	c7 44 24 04 3f 00 00 	movl   $0x3f,0x4(%esp)
c010ebc3:	00 
c010ebc4:	c7 04 24 c8 7f 11 c0 	movl   $0xc0117fc8,(%esp)
c010ebcb:	e8 f8 22 ff ff       	call   c0100ec8 <__panic>
    int ref_count, ret;
    node->ref_count-= 1;
c010ebd0:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebd3:	8b 40 30             	mov    0x30(%eax),%eax
c010ebd6:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ebd9:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebdc:	89 50 30             	mov    %edx,0x30(%eax)
    ref_count = node->ref_count;
c010ebdf:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebe2:	8b 40 30             	mov    0x30(%eax),%eax
c010ebe5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ref_count == 0) {
c010ebe8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ebec:	0f 85 8d 00 00 00    	jne    c010ec7f <inode_ref_dec+0xe8>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
c010ebf2:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebf5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ebf8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ebfc:	74 17                	je     c010ec15 <inode_ref_dec+0x7e>
c010ebfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec01:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ec04:	85 c0                	test   %eax,%eax
c010ec06:	74 0d                	je     c010ec15 <inode_ref_dec+0x7e>
c010ec08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec0b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ec0e:	8b 40 24             	mov    0x24(%eax),%eax
c010ec11:	85 c0                	test   %eax,%eax
c010ec13:	75 24                	jne    c010ec39 <inode_ref_dec+0xa2>
c010ec15:	c7 44 24 0c 14 80 11 	movl   $0xc0118014,0xc(%esp)
c010ec1c:	c0 
c010ec1d:	c7 44 24 08 b3 7f 11 	movl   $0xc0117fb3,0x8(%esp)
c010ec24:	c0 
c010ec25:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010ec2c:	00 
c010ec2d:	c7 04 24 c8 7f 11 c0 	movl   $0xc0117fc8,(%esp)
c010ec34:	e8 8f 22 ff ff       	call   c0100ec8 <__panic>
c010ec39:	c7 44 24 04 64 80 11 	movl   $0xc0118064,0x4(%esp)
c010ec40:	c0 
c010ec41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec44:	89 04 24             	mov    %eax,(%esp)
c010ec47:	e8 39 01 00 00       	call   c010ed85 <inode_check>
c010ec4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec4f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ec52:	8b 40 24             	mov    0x24(%eax),%eax
c010ec55:	8b 55 08             	mov    0x8(%ebp),%edx
c010ec58:	89 14 24             	mov    %edx,(%esp)
c010ec5b:	ff d0                	call   *%eax
c010ec5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ec60:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ec64:	74 19                	je     c010ec7f <inode_ref_dec+0xe8>
c010ec66:	83 7d ec f1          	cmpl   $0xfffffff1,-0x14(%ebp)
c010ec6a:	74 13                	je     c010ec7f <inode_ref_dec+0xe8>
            cprintf("vfs: warning: vop_reclaim: %e.\n", ret);
c010ec6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ec6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec73:	c7 04 24 6c 80 11 c0 	movl   $0xc011806c,(%esp)
c010ec7a:	e8 e6 16 ff ff       	call   c0100365 <cprintf>
        }
    }
    return ref_count;
c010ec7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ec82:	c9                   	leave  
c010ec83:	c3                   	ret    

c010ec84 <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
c010ec84:	55                   	push   %ebp
c010ec85:	89 e5                	mov    %esp,%ebp
    node->open_count += 1;
c010ec87:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec8a:	8b 40 34             	mov    0x34(%eax),%eax
c010ec8d:	8d 50 01             	lea    0x1(%eax),%edx
c010ec90:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec93:	89 50 34             	mov    %edx,0x34(%eax)
    return node->open_count;
c010ec96:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec99:	8b 40 34             	mov    0x34(%eax),%eax
}
c010ec9c:	5d                   	pop    %ebp
c010ec9d:	c3                   	ret    

c010ec9e <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
c010ec9e:	55                   	push   %ebp
c010ec9f:	89 e5                	mov    %esp,%ebp
c010eca1:	83 ec 28             	sub    $0x28,%esp
    assert(inode_open_count(node) > 0);
c010eca4:	8b 45 08             	mov    0x8(%ebp),%eax
c010eca7:	89 04 24             	mov    %eax,(%esp)
c010ecaa:	e8 e8 fd ff ff       	call   c010ea97 <inode_open_count>
c010ecaf:	85 c0                	test   %eax,%eax
c010ecb1:	7f 24                	jg     c010ecd7 <inode_open_dec+0x39>
c010ecb3:	c7 44 24 0c 8c 80 11 	movl   $0xc011808c,0xc(%esp)
c010ecba:	c0 
c010ecbb:	c7 44 24 08 b3 7f 11 	movl   $0xc0117fb3,0x8(%esp)
c010ecc2:	c0 
c010ecc3:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
c010ecca:	00 
c010eccb:	c7 04 24 c8 7f 11 c0 	movl   $0xc0117fc8,(%esp)
c010ecd2:	e8 f1 21 ff ff       	call   c0100ec8 <__panic>
    int open_count, ret;
    node->open_count -= 1;
c010ecd7:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecda:	8b 40 34             	mov    0x34(%eax),%eax
c010ecdd:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ece0:	8b 45 08             	mov    0x8(%ebp),%eax
c010ece3:	89 50 34             	mov    %edx,0x34(%eax)
    open_count = node->open_count;
c010ece6:	8b 45 08             	mov    0x8(%ebp),%eax
c010ece9:	8b 40 34             	mov    0x34(%eax),%eax
c010ecec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (open_count == 0) {
c010ecef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ecf3:	0f 85 87 00 00 00    	jne    c010ed80 <inode_open_dec+0xe2>
        if ((ret = vop_close(node)) != 0) {
c010ecf9:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ecff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ed03:	74 17                	je     c010ed1c <inode_open_dec+0x7e>
c010ed05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed08:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ed0b:	85 c0                	test   %eax,%eax
c010ed0d:	74 0d                	je     c010ed1c <inode_open_dec+0x7e>
c010ed0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed12:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ed15:	8b 40 08             	mov    0x8(%eax),%eax
c010ed18:	85 c0                	test   %eax,%eax
c010ed1a:	75 24                	jne    c010ed40 <inode_open_dec+0xa2>
c010ed1c:	c7 44 24 0c a8 80 11 	movl   $0xc01180a8,0xc(%esp)
c010ed23:	c0 
c010ed24:	c7 44 24 08 b3 7f 11 	movl   $0xc0117fb3,0x8(%esp)
c010ed2b:	c0 
c010ed2c:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c010ed33:	00 
c010ed34:	c7 04 24 c8 7f 11 c0 	movl   $0xc0117fc8,(%esp)
c010ed3b:	e8 88 21 ff ff       	call   c0100ec8 <__panic>
c010ed40:	c7 44 24 04 f6 80 11 	movl   $0xc01180f6,0x4(%esp)
c010ed47:	c0 
c010ed48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed4b:	89 04 24             	mov    %eax,(%esp)
c010ed4e:	e8 32 00 00 00       	call   c010ed85 <inode_check>
c010ed53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed56:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ed59:	8b 40 08             	mov    0x8(%eax),%eax
c010ed5c:	8b 55 08             	mov    0x8(%ebp),%edx
c010ed5f:	89 14 24             	mov    %edx,(%esp)
c010ed62:	ff d0                	call   *%eax
c010ed64:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ed67:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ed6b:	74 13                	je     c010ed80 <inode_open_dec+0xe2>
            cprintf("vfs: warning: vop_close: %e.\n", ret);
c010ed6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed70:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed74:	c7 04 24 fc 80 11 c0 	movl   $0xc01180fc,(%esp)
c010ed7b:	e8 e5 15 ff ff       	call   c0100365 <cprintf>
        }
    }
    return open_count;
c010ed80:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ed83:	c9                   	leave  
c010ed84:	c3                   	ret    

c010ed85 <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
c010ed85:	55                   	push   %ebp
c010ed86:	89 e5                	mov    %esp,%ebp
c010ed88:	83 ec 28             	sub    $0x28,%esp
    assert(node != NULL && node->in_ops != NULL);
c010ed8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ed8f:	74 0a                	je     c010ed9b <inode_check+0x16>
c010ed91:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed94:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ed97:	85 c0                	test   %eax,%eax
c010ed99:	75 24                	jne    c010edbf <inode_check+0x3a>
c010ed9b:	c7 44 24 0c 1c 81 11 	movl   $0xc011811c,0xc(%esp)
c010eda2:	c0 
c010eda3:	c7 44 24 08 b3 7f 11 	movl   $0xc0117fb3,0x8(%esp)
c010edaa:	c0 
c010edab:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c010edb2:	00 
c010edb3:	c7 04 24 c8 7f 11 c0 	movl   $0xc0117fc8,(%esp)
c010edba:	e8 09 21 ff ff       	call   c0100ec8 <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
c010edbf:	8b 45 08             	mov    0x8(%ebp),%eax
c010edc2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010edc5:	8b 00                	mov    (%eax),%eax
c010edc7:	3d 76 a4 4b 8c       	cmp    $0x8c4ba476,%eax
c010edcc:	74 24                	je     c010edf2 <inode_check+0x6d>
c010edce:	c7 44 24 0c 44 81 11 	movl   $0xc0118144,0xc(%esp)
c010edd5:	c0 
c010edd6:	c7 44 24 08 b3 7f 11 	movl   $0xc0117fb3,0x8(%esp)
c010eddd:	c0 
c010edde:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c010ede5:	00 
c010ede6:	c7 04 24 c8 7f 11 c0 	movl   $0xc0117fc8,(%esp)
c010eded:	e8 d6 20 ff ff       	call   c0100ec8 <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
c010edf2:	8b 45 08             	mov    0x8(%ebp),%eax
c010edf5:	89 04 24             	mov    %eax,(%esp)
c010edf8:	e8 8f fc ff ff       	call   c010ea8c <inode_ref_count>
c010edfd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ee00:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee03:	89 04 24             	mov    %eax,(%esp)
c010ee06:	e8 8c fc ff ff       	call   c010ea97 <inode_open_count>
c010ee0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(ref_count >= open_count && open_count >= 0);
c010ee0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee11:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010ee14:	7c 06                	jl     c010ee1c <inode_check+0x97>
c010ee16:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ee1a:	79 24                	jns    c010ee40 <inode_check+0xbb>
c010ee1c:	c7 44 24 0c 6c 81 11 	movl   $0xc011816c,0xc(%esp)
c010ee23:	c0 
c010ee24:	c7 44 24 08 b3 7f 11 	movl   $0xc0117fb3,0x8(%esp)
c010ee2b:	c0 
c010ee2c:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c010ee33:	00 
c010ee34:	c7 04 24 c8 7f 11 c0 	movl   $0xc0117fc8,(%esp)
c010ee3b:	e8 88 20 ff ff       	call   c0100ec8 <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
c010ee40:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c010ee47:	7f 09                	jg     c010ee52 <inode_check+0xcd>
c010ee49:	81 7d f0 ff ff 00 00 	cmpl   $0xffff,-0x10(%ebp)
c010ee50:	7e 24                	jle    c010ee76 <inode_check+0xf1>
c010ee52:	c7 44 24 0c 98 81 11 	movl   $0xc0118198,0xc(%esp)
c010ee59:	c0 
c010ee5a:	c7 44 24 08 b3 7f 11 	movl   $0xc0117fb3,0x8(%esp)
c010ee61:	c0 
c010ee62:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010ee69:	00 
c010ee6a:	c7 04 24 c8 7f 11 c0 	movl   $0xc0117fc8,(%esp)
c010ee71:	e8 52 20 ff ff       	call   c0100ec8 <__panic>
}
c010ee76:	c9                   	leave  
c010ee77:	c3                   	ret    

c010ee78 <__alloc_fs>:

extern void vfs_devlist_init(void);

// __alloc_fs - allocate memory for fs, and set fs type
struct fs *
__alloc_fs(int type) {
c010ee78:	55                   	push   %ebp
c010ee79:	89 e5                	mov    %esp,%ebp
c010ee7b:	83 ec 28             	sub    $0x28,%esp
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
c010ee7e:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
c010ee85:	e8 d4 5b ff ff       	call   c0104a5e <kmalloc>
c010ee8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ee8d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ee91:	74 09                	je     c010ee9c <__alloc_fs+0x24>
        fs->fs_type = type;
c010ee93:	8b 55 08             	mov    0x8(%ebp),%edx
c010ee96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee99:	89 50 6c             	mov    %edx,0x6c(%eax)
    }
    return fs;
c010ee9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ee9f:	c9                   	leave  
c010eea0:	c3                   	ret    

c010eea1 <vfs_init>:

// vfs_init -  vfs initialize
void
vfs_init(void) {
c010eea1:	55                   	push   %ebp
c010eea2:	89 e5                	mov    %esp,%ebp
c010eea4:	83 ec 18             	sub    $0x18,%esp
    sem_init(&bootfs_sem, 1);
c010eea7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010eeae:	00 
c010eeaf:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010eeb6:	e8 4c a9 ff ff       	call   c0109807 <sem_init>
    vfs_devlist_init();
c010eebb:	e8 63 01 00 00       	call   c010f023 <vfs_devlist_init>
}
c010eec0:	c9                   	leave  
c010eec1:	c3                   	ret    

c010eec2 <lock_bootfs>:

// lock_bootfs - lock  for bootfs
static void
lock_bootfs(void) {
c010eec2:	55                   	push   %ebp
c010eec3:	89 e5                	mov    %esp,%ebp
c010eec5:	83 ec 18             	sub    $0x18,%esp
    down(&bootfs_sem);
c010eec8:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010eecf:	e8 c1 aa ff ff       	call   c0109995 <down>
}
c010eed4:	c9                   	leave  
c010eed5:	c3                   	ret    

c010eed6 <unlock_bootfs>:
// ulock_bootfs - ulock for bootfs
static void
unlock_bootfs(void) {
c010eed6:	55                   	push   %ebp
c010eed7:	89 e5                	mov    %esp,%ebp
c010eed9:	83 ec 18             	sub    $0x18,%esp
    up(&bootfs_sem);
c010eedc:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010eee3:	e8 92 aa ff ff       	call   c010997a <up>
}
c010eee8:	c9                   	leave  
c010eee9:	c3                   	ret    

c010eeea <change_bootfs>:

// change_bootfs - set the new fs inode 
static void
change_bootfs(struct inode *node) {
c010eeea:	55                   	push   %ebp
c010eeeb:	89 e5                	mov    %esp,%ebp
c010eeed:	83 ec 28             	sub    $0x28,%esp
    struct inode *old;
    lock_bootfs();
c010eef0:	e8 cd ff ff ff       	call   c010eec2 <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
c010eef5:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010eefa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eefd:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef00:	a3 c4 1f 15 c0       	mov    %eax,0xc0151fc4
    }
    unlock_bootfs();
c010ef05:	e8 cc ff ff ff       	call   c010eed6 <unlock_bootfs>
    if (old != NULL) {
c010ef0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ef0e:	74 0b                	je     c010ef1b <change_bootfs+0x31>
        vop_ref_dec(old);
c010ef10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef13:	89 04 24             	mov    %eax,(%esp)
c010ef16:	e8 7c fc ff ff       	call   c010eb97 <inode_ref_dec>
    }
}
c010ef1b:	c9                   	leave  
c010ef1c:	c3                   	ret    

c010ef1d <vfs_set_bootfs>:

// vfs_set_bootfs - change the dir of file system
int
vfs_set_bootfs(char *fsname) {
c010ef1d:	55                   	push   %ebp
c010ef1e:	89 e5                	mov    %esp,%ebp
c010ef20:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010ef23:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (fsname != NULL) {
c010ef2a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ef2e:	74 62                	je     c010ef92 <vfs_set_bootfs+0x75>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
c010ef30:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010ef37:	00 
c010ef38:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef3b:	89 04 24             	mov    %eax,(%esp)
c010ef3e:	e8 2d 5e 00 00       	call   c0114d70 <strchr>
c010ef43:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ef46:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ef4a:	74 0d                	je     c010ef59 <vfs_set_bootfs+0x3c>
c010ef4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef4f:	83 c0 01             	add    $0x1,%eax
c010ef52:	0f b6 00             	movzbl (%eax),%eax
c010ef55:	84 c0                	test   %al,%al
c010ef57:	74 07                	je     c010ef60 <vfs_set_bootfs+0x43>
            return -E_INVAL;
c010ef59:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ef5e:	eb 42                	jmp    c010efa2 <vfs_set_bootfs+0x85>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
c010ef60:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef63:	89 04 24             	mov    %eax,(%esp)
c010ef66:	e8 99 10 00 00       	call   c0110004 <vfs_chdir>
c010ef6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ef6e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ef72:	74 05                	je     c010ef79 <vfs_set_bootfs+0x5c>
            return ret;
c010ef74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef77:	eb 29                	jmp    c010efa2 <vfs_set_bootfs+0x85>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010ef79:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ef7c:	89 04 24             	mov    %eax,(%esp)
c010ef7f:	e8 54 0f 00 00       	call   c010fed8 <vfs_get_curdir>
c010ef84:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ef87:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ef8b:	74 05                	je     c010ef92 <vfs_set_bootfs+0x75>
            return ret;
c010ef8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef90:	eb 10                	jmp    c010efa2 <vfs_set_bootfs+0x85>
        }
    }
    change_bootfs(node);
c010ef92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ef95:	89 04 24             	mov    %eax,(%esp)
c010ef98:	e8 4d ff ff ff       	call   c010eeea <change_bootfs>
    return 0;
c010ef9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010efa2:	c9                   	leave  
c010efa3:	c3                   	ret    

c010efa4 <vfs_get_bootfs>:

// vfs_get_bootfs - get the inode of bootfs
int
vfs_get_bootfs(struct inode **node_store) {
c010efa4:	55                   	push   %ebp
c010efa5:	89 e5                	mov    %esp,%ebp
c010efa7:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010efaa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bootfs_node != NULL) {
c010efb1:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010efb6:	85 c0                	test   %eax,%eax
c010efb8:	74 25                	je     c010efdf <vfs_get_bootfs+0x3b>
        lock_bootfs();
c010efba:	e8 03 ff ff ff       	call   c010eec2 <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
c010efbf:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010efc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010efc7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010efcb:	74 0d                	je     c010efda <vfs_get_bootfs+0x36>
                vop_ref_inc(bootfs_node);
c010efcd:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010efd2:	89 04 24             	mov    %eax,(%esp)
c010efd5:	e8 a3 fb ff ff       	call   c010eb7d <inode_ref_inc>
            }
        }
        unlock_bootfs();
c010efda:	e8 f7 fe ff ff       	call   c010eed6 <unlock_bootfs>
    }
    if (node == NULL) {
c010efdf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010efe3:	75 07                	jne    c010efec <vfs_get_bootfs+0x48>
        return -E_NOENT;
c010efe5:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c010efea:	eb 0d                	jmp    c010eff9 <vfs_get_bootfs+0x55>
    }
    *node_store = node;
c010efec:	8b 45 08             	mov    0x8(%ebp),%eax
c010efef:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010eff2:	89 10                	mov    %edx,(%eax)
    return 0;
c010eff4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010eff9:	c9                   	leave  
c010effa:	c3                   	ret    

c010effb <lock_vdev_list>:

static list_entry_t vdev_list;     // device info list in vfs layer
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
c010effb:	55                   	push   %ebp
c010effc:	89 e5                	mov    %esp,%ebp
c010effe:	83 ec 18             	sub    $0x18,%esp
    down(&vdev_list_sem);
c010f001:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f008:	e8 88 a9 ff ff       	call   c0109995 <down>
}
c010f00d:	c9                   	leave  
c010f00e:	c3                   	ret    

c010f00f <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
c010f00f:	55                   	push   %ebp
c010f010:	89 e5                	mov    %esp,%ebp
c010f012:	83 ec 18             	sub    $0x18,%esp
    up(&vdev_list_sem);
c010f015:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f01c:	e8 59 a9 ff ff       	call   c010997a <up>
}
c010f021:	c9                   	leave  
c010f022:	c3                   	ret    

c010f023 <vfs_devlist_init>:

void
vfs_devlist_init(void) {
c010f023:	55                   	push   %ebp
c010f024:	89 e5                	mov    %esp,%ebp
c010f026:	83 ec 28             	sub    $0x28,%esp
c010f029:	c7 45 f4 c8 1f 15 c0 	movl   $0xc0151fc8,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010f030:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f033:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f036:	89 50 04             	mov    %edx,0x4(%eax)
c010f039:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f03c:	8b 50 04             	mov    0x4(%eax),%edx
c010f03f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f042:	89 10                	mov    %edx,(%eax)
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
c010f044:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f04b:	00 
c010f04c:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f053:	e8 af a7 ff ff       	call   c0109807 <sem_init>
}
c010f058:	c9                   	leave  
c010f059:	c3                   	ret    

c010f05a <vfs_cleanup>:

// vfs_cleanup - finally clean (or sync) fs
void
vfs_cleanup(void) {
c010f05a:	55                   	push   %ebp
c010f05b:	89 e5                	mov    %esp,%ebp
c010f05d:	83 ec 38             	sub    $0x38,%esp
c010f060:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f067:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f06a:	8b 40 04             	mov    0x4(%eax),%eax
c010f06d:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010f070:	0f 94 c0             	sete   %al
c010f073:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f076:	85 c0                	test   %eax,%eax
c010f078:	75 57                	jne    c010f0d1 <vfs_cleanup+0x77>
        lock_vdev_list();
c010f07a:	e8 7c ff ff ff       	call   c010effb <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f07f:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f086:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f089:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010f08c:	eb 27                	jmp    c010f0b5 <vfs_cleanup+0x5b>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f08e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f091:	83 e8 10             	sub    $0x10,%eax
c010f094:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->fs != NULL) {
c010f097:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f09a:	8b 40 08             	mov    0x8(%eax),%eax
c010f09d:	85 c0                	test   %eax,%eax
c010f09f:	74 14                	je     c010f0b5 <vfs_cleanup+0x5b>
                    fsop_cleanup(vdev->fs);
c010f0a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f0a4:	8b 40 08             	mov    0x8(%eax),%eax
c010f0a7:	8b 40 7c             	mov    0x7c(%eax),%eax
c010f0aa:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f0ad:	8b 52 08             	mov    0x8(%edx),%edx
c010f0b0:	89 14 24             	mov    %edx,(%esp)
c010f0b3:	ff d0                	call   *%eax
c010f0b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f0b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f0bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f0be:	8b 40 04             	mov    0x4(%eax),%eax
vfs_cleanup(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f0c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f0c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f0c7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f0ca:	75 c2                	jne    c010f08e <vfs_cleanup+0x34>
                if (vdev->fs != NULL) {
                    fsop_cleanup(vdev->fs);
                }
            }
        }
        unlock_vdev_list();
c010f0cc:	e8 3e ff ff ff       	call   c010f00f <unlock_vdev_list>
    }
}
c010f0d1:	c9                   	leave  
c010f0d2:	c3                   	ret    

c010f0d3 <vfs_get_root>:
/*
 * vfs_get_root - Given a device name (stdin, stdout, etc.), hand
 *                back an appropriate inode.
 */
int
vfs_get_root(const char *devname, struct inode **node_store) {
c010f0d3:	55                   	push   %ebp
c010f0d4:	89 e5                	mov    %esp,%ebp
c010f0d6:	83 ec 38             	sub    $0x38,%esp
    assert(devname != NULL);
c010f0d9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f0dd:	75 24                	jne    c010f103 <vfs_get_root+0x30>
c010f0df:	c7 44 24 0c d4 81 11 	movl   $0xc01181d4,0xc(%esp)
c010f0e6:	c0 
c010f0e7:	c7 44 24 08 e4 81 11 	movl   $0xc01181e4,0x8(%esp)
c010f0ee:	c0 
c010f0ef:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010f0f6:	00 
c010f0f7:	c7 04 24 f9 81 11 c0 	movl   $0xc01181f9,(%esp)
c010f0fe:	e8 c5 1d ff ff       	call   c0100ec8 <__panic>
    int ret = -E_NO_DEV;
c010f103:	c7 45 f4 f3 ff ff ff 	movl   $0xfffffff3,-0xc(%ebp)
c010f10a:	c7 45 e0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f111:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f114:	8b 40 04             	mov    0x4(%eax),%eax
c010f117:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010f11a:	0f 94 c0             	sete   %al
c010f11d:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f120:	85 c0                	test   %eax,%eax
c010f122:	0f 85 c3 00 00 00    	jne    c010f1eb <vfs_get_root+0x118>
        lock_vdev_list();
c010f128:	e8 ce fe ff ff       	call   c010effb <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f12d:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
c010f134:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f137:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while ((le = list_next(le)) != list) {
c010f13a:	e9 8c 00 00 00       	jmp    c010f1cb <vfs_get_root+0xf8>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f13f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f142:	83 e8 10             	sub    $0x10,%eax
c010f145:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (strcmp(devname, vdev->devname) == 0) {
c010f148:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f14b:	8b 00                	mov    (%eax),%eax
c010f14d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f151:	8b 45 08             	mov    0x8(%ebp),%eax
c010f154:	89 04 24             	mov    %eax,(%esp)
c010f157:	e8 75 5b 00 00       	call   c0114cd1 <strcmp>
c010f15c:	85 c0                	test   %eax,%eax
c010f15e:	75 6b                	jne    c010f1cb <vfs_get_root+0xf8>
                    struct inode *found = NULL;
c010f160:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
                    if (vdev->fs != NULL) {
c010f167:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f16a:	8b 40 08             	mov    0x8(%eax),%eax
c010f16d:	85 c0                	test   %eax,%eax
c010f16f:	74 19                	je     c010f18a <vfs_get_root+0xb7>
                        found = fsop_get_root(vdev->fs);
c010f171:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f174:	8b 40 08             	mov    0x8(%eax),%eax
c010f177:	8b 40 74             	mov    0x74(%eax),%eax
c010f17a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f17d:	8b 52 08             	mov    0x8(%edx),%edx
c010f180:	89 14 24             	mov    %edx,(%esp)
c010f183:	ff d0                	call   *%eax
c010f185:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f188:	eb 21                	jmp    c010f1ab <vfs_get_root+0xd8>
                    }
                    else if (!vdev->mountable) {
c010f18a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f18d:	8b 40 0c             	mov    0xc(%eax),%eax
c010f190:	85 c0                	test   %eax,%eax
c010f192:	75 17                	jne    c010f1ab <vfs_get_root+0xd8>
                        vop_ref_inc(vdev->devnode);
c010f194:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f197:	8b 40 04             	mov    0x4(%eax),%eax
c010f19a:	89 04 24             	mov    %eax,(%esp)
c010f19d:	e8 db f9 ff ff       	call   c010eb7d <inode_ref_inc>
                        found = vdev->devnode;
c010f1a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f1a5:	8b 40 04             	mov    0x4(%eax),%eax
c010f1a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    }
                    if (found != NULL) {
c010f1ab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f1af:	74 11                	je     c010f1c2 <vfs_get_root+0xef>
                        ret = 0, *node_store = found;
c010f1b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f1b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f1bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f1be:	89 10                	mov    %edx,(%eax)
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
c010f1c0:	eb 24                	jmp    c010f1e6 <vfs_get_root+0x113>
                    }
                    if (found != NULL) {
                        ret = 0, *node_store = found;
                    }
                    else {
                        ret = -E_NA_DEV;
c010f1c2:	c7 45 f4 f2 ff ff ff 	movl   $0xfffffff2,-0xc(%ebp)
                    }
                    break;
c010f1c9:	eb 1b                	jmp    c010f1e6 <vfs_get_root+0x113>
c010f1cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1ce:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f1d1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f1d4:	8b 40 04             	mov    0x4(%eax),%eax
    int ret = -E_NO_DEV;
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f1d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f1da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1dd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010f1e0:	0f 85 59 ff ff ff    	jne    c010f13f <vfs_get_root+0x6c>
                    }
                    break;
                }
            }
        }
        unlock_vdev_list();
c010f1e6:	e8 24 fe ff ff       	call   c010f00f <unlock_vdev_list>
    }
    return ret;
c010f1eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f1ee:	c9                   	leave  
c010f1ef:	c3                   	ret    

c010f1f0 <vfs_get_devname>:

/*
 * vfs_get_devname - Given a filesystem, hand back the name of the device it's mounted on.
 */
const char *
vfs_get_devname(struct fs *fs) {
c010f1f0:	55                   	push   %ebp
c010f1f1:	89 e5                	mov    %esp,%ebp
c010f1f3:	83 ec 28             	sub    $0x28,%esp
    assert(fs != NULL);
c010f1f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f1fa:	75 24                	jne    c010f220 <vfs_get_devname+0x30>
c010f1fc:	c7 44 24 0c 0e 82 11 	movl   $0xc011820e,0xc(%esp)
c010f203:	c0 
c010f204:	c7 44 24 08 e4 81 11 	movl   $0xc01181e4,0x8(%esp)
c010f20b:	c0 
c010f20c:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010f213:	00 
c010f214:	c7 04 24 f9 81 11 c0 	movl   $0xc01181f9,(%esp)
c010f21b:	e8 a8 1c ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f220:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f227:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f22a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f22d:	eb 1b                	jmp    c010f24a <vfs_get_devname+0x5a>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f22f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f232:	83 e8 10             	sub    $0x10,%eax
c010f235:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->fs == fs) {
c010f238:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f23b:	8b 40 08             	mov    0x8(%eax),%eax
c010f23e:	3b 45 08             	cmp    0x8(%ebp),%eax
c010f241:	75 07                	jne    c010f24a <vfs_get_devname+0x5a>
            return vdev->devname;
c010f243:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f246:	8b 00                	mov    (%eax),%eax
c010f248:	eb 1c                	jmp    c010f266 <vfs_get_devname+0x76>
c010f24a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f24d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f250:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f253:	8b 40 04             	mov    0x4(%eax),%eax
 */
const char *
vfs_get_devname(struct fs *fs) {
    assert(fs != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f256:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f259:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f25c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f25f:	75 ce                	jne    c010f22f <vfs_get_devname+0x3f>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (vdev->fs == fs) {
            return vdev->devname;
        }
    }
    return NULL;
c010f261:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f266:	c9                   	leave  
c010f267:	c3                   	ret    

c010f268 <check_devname_conflict>:

/*
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
c010f268:	55                   	push   %ebp
c010f269:	89 e5                	mov    %esp,%ebp
c010f26b:	83 ec 28             	sub    $0x28,%esp
    list_entry_t *list = &vdev_list, *le = list;
c010f26e:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f275:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f278:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f27b:	eb 28                	jmp    c010f2a5 <check_devname_conflict+0x3d>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f27d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f280:	83 e8 10             	sub    $0x10,%eax
c010f283:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (strcmp(vdev->devname, devname) == 0) {
c010f286:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f289:	8b 00                	mov    (%eax),%eax
c010f28b:	8b 55 08             	mov    0x8(%ebp),%edx
c010f28e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f292:	89 04 24             	mov    %eax,(%esp)
c010f295:	e8 37 5a 00 00       	call   c0114cd1 <strcmp>
c010f29a:	85 c0                	test   %eax,%eax
c010f29c:	75 07                	jne    c010f2a5 <check_devname_conflict+0x3d>
            return 0;
c010f29e:	b8 00 00 00 00       	mov    $0x0,%eax
c010f2a3:	eb 1c                	jmp    c010f2c1 <check_devname_conflict+0x59>
c010f2a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f2a8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f2ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f2ae:	8b 40 04             	mov    0x4(%eax),%eax
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f2b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f2b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f2b7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f2ba:	75 c1                	jne    c010f27d <check_devname_conflict+0x15>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (strcmp(vdev->devname, devname) == 0) {
            return 0;
        }
    }
    return 1;
c010f2bc:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010f2c1:	c9                   	leave  
c010f2c2:	c3                   	ret    

c010f2c3 <vfs_do_add>:
* If "mountable" is set, the device will be treated as one that expects
* to have a filesystem mounted on it, and a raw device will be created
* for direct access.
*/
static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
c010f2c3:	55                   	push   %ebp
c010f2c4:	89 e5                	mov    %esp,%ebp
c010f2c6:	83 ec 48             	sub    $0x48,%esp
    assert(devname != NULL);
c010f2c9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f2cd:	75 24                	jne    c010f2f3 <vfs_do_add+0x30>
c010f2cf:	c7 44 24 0c d4 81 11 	movl   $0xc01181d4,0xc(%esp)
c010f2d6:	c0 
c010f2d7:	c7 44 24 08 e4 81 11 	movl   $0xc01181e4,0x8(%esp)
c010f2de:	c0 
c010f2df:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
c010f2e6:	00 
c010f2e7:	c7 04 24 f9 81 11 c0 	movl   $0xc01181f9,(%esp)
c010f2ee:	e8 d5 1b ff ff       	call   c0100ec8 <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
c010f2f3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f2f7:	75 06                	jne    c010f2ff <vfs_do_add+0x3c>
c010f2f9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010f2fd:	74 37                	je     c010f336 <vfs_do_add+0x73>
c010f2ff:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f303:	74 0d                	je     c010f312 <vfs_do_add+0x4f>
c010f305:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f308:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f30b:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f310:	74 24                	je     c010f336 <vfs_do_add+0x73>
c010f312:	c7 44 24 0c 1c 82 11 	movl   $0xc011821c,0xc(%esp)
c010f319:	c0 
c010f31a:	c7 44 24 08 e4 81 11 	movl   $0xc01181e4,0x8(%esp)
c010f321:	c0 
c010f322:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
c010f329:	00 
c010f32a:	c7 04 24 f9 81 11 c0 	movl   $0xc01181f9,(%esp)
c010f331:	e8 92 1b ff ff       	call   c0100ec8 <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
c010f336:	8b 45 08             	mov    0x8(%ebp),%eax
c010f339:	89 04 24             	mov    %eax,(%esp)
c010f33c:	e8 98 58 00 00       	call   c0114bd9 <strlen>
c010f341:	83 f8 1f             	cmp    $0x1f,%eax
c010f344:	76 0a                	jbe    c010f350 <vfs_do_add+0x8d>
        return -E_TOO_BIG;
c010f346:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
c010f34b:	e9 00 01 00 00       	jmp    c010f450 <vfs_do_add+0x18d>
    }

    int ret = -E_NO_MEM;
c010f350:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
c010f357:	8b 45 08             	mov    0x8(%ebp),%eax
c010f35a:	89 04 24             	mov    %eax,(%esp)
c010f35d:	e8 a4 10 ff ff       	call   c0100406 <strdup>
c010f362:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f365:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f369:	75 08                	jne    c010f373 <vfs_do_add+0xb0>
        return ret;
c010f36b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f36e:	e9 dd 00 00 00       	jmp    c010f450 <vfs_do_add+0x18d>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
c010f373:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010f37a:	e8 df 56 ff ff       	call   c0104a5e <kmalloc>
c010f37f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f382:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f386:	75 05                	jne    c010f38d <vfs_do_add+0xca>
        goto failed_cleanup_name;
c010f388:	e9 b5 00 00 00       	jmp    c010f442 <vfs_do_add+0x17f>
    }

    ret = -E_EXISTS;
c010f38d:	c7 45 f4 e9 ff ff ff 	movl   $0xffffffe9,-0xc(%ebp)
    lock_vdev_list();
c010f394:	e8 62 fc ff ff       	call   c010effb <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
c010f399:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f39c:	89 04 24             	mov    %eax,(%esp)
c010f39f:	e8 c4 fe ff ff       	call   c010f268 <check_devname_conflict>
c010f3a4:	85 c0                	test   %eax,%eax
c010f3a6:	75 16                	jne    c010f3be <vfs_do_add+0xfb>
        unlock_vdev_list();
c010f3a8:	e8 62 fc ff ff       	call   c010f00f <unlock_vdev_list>
        goto failed_cleanup_vdev;
c010f3ad:	90                   	nop
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
c010f3ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f3b1:	89 04 24             	mov    %eax,(%esp)
c010f3b4:	e8 c0 56 ff ff       	call   c0104a79 <kfree>
c010f3b9:	e9 84 00 00 00       	jmp    c010f442 <vfs_do_add+0x17f>
    lock_vdev_list();
    if (!check_devname_conflict(s_devname)) {
        unlock_vdev_list();
        goto failed_cleanup_vdev;
    }
    vdev->devname = s_devname;
c010f3be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f3c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f3c4:	89 10                	mov    %edx,(%eax)
    vdev->devnode = devnode;
c010f3c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f3c9:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f3cc:	89 50 04             	mov    %edx,0x4(%eax)
    vdev->mountable = mountable;
c010f3cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f3d2:	8b 55 14             	mov    0x14(%ebp),%edx
c010f3d5:	89 50 0c             	mov    %edx,0xc(%eax)
    vdev->fs = fs;
c010f3d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f3db:	8b 55 10             	mov    0x10(%ebp),%edx
c010f3de:	89 50 08             	mov    %edx,0x8(%eax)

    list_add(&vdev_list, &(vdev->vdev_link));
c010f3e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f3e4:	83 c0 10             	add    $0x10,%eax
c010f3e7:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
c010f3ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010f3f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f3f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010f3f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f3fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010f3fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f400:	8b 40 04             	mov    0x4(%eax),%eax
c010f403:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010f406:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010f409:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010f40c:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010f40f:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010f412:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f415:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010f418:	89 10                	mov    %edx,(%eax)
c010f41a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f41d:	8b 10                	mov    (%eax),%edx
c010f41f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010f422:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010f425:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f428:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010f42b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010f42e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f431:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010f434:	89 10                	mov    %edx,(%eax)
    unlock_vdev_list();
c010f436:	e8 d4 fb ff ff       	call   c010f00f <unlock_vdev_list>
    return 0;
c010f43b:	b8 00 00 00 00       	mov    $0x0,%eax
c010f440:	eb 0e                	jmp    c010f450 <vfs_do_add+0x18d>

failed_cleanup_vdev:
    kfree(vdev);
failed_cleanup_name:
    kfree(s_devname);
c010f442:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f445:	89 04 24             	mov    %eax,(%esp)
c010f448:	e8 2c 56 ff ff       	call   c0104a79 <kfree>
    return ret;
c010f44d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f450:	c9                   	leave  
c010f451:	c3                   	ret    

c010f452 <vfs_add_fs>:
/*
 * vfs_add_fs - Add a new fs,  by name. See  vfs_do_add information for the description of
 *              mountable.
 */
int
vfs_add_fs(const char *devname, struct fs *fs) {
c010f452:	55                   	push   %ebp
c010f453:	89 e5                	mov    %esp,%ebp
c010f455:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, NULL, fs, 0);
c010f458:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010f45f:	00 
c010f460:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f463:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f467:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010f46e:	00 
c010f46f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f472:	89 04 24             	mov    %eax,(%esp)
c010f475:	e8 49 fe ff ff       	call   c010f2c3 <vfs_do_add>
}
c010f47a:	c9                   	leave  
c010f47b:	c3                   	ret    

c010f47c <vfs_add_dev>:
/*
 * vfs_add_dev - Add a new device, by name. See  vfs_do_add information for the description of
 *               mountable.
 */
int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
c010f47c:	55                   	push   %ebp
c010f47d:	89 e5                	mov    %esp,%ebp
c010f47f:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, devnode, NULL, mountable);
c010f482:	8b 45 10             	mov    0x10(%ebp),%eax
c010f485:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f489:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010f490:	00 
c010f491:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f494:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f498:	8b 45 08             	mov    0x8(%ebp),%eax
c010f49b:	89 04 24             	mov    %eax,(%esp)
c010f49e:	e8 20 fe ff ff       	call   c010f2c3 <vfs_do_add>
}
c010f4a3:	c9                   	leave  
c010f4a4:	c3                   	ret    

c010f4a5 <find_mount>:
/*
 * find_mount - Look for a mountable device named DEVNAME.
 *              Should already hold vdev_list lock.
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
c010f4a5:	55                   	push   %ebp
c010f4a6:	89 e5                	mov    %esp,%ebp
c010f4a8:	83 ec 28             	sub    $0x28,%esp
    assert(devname != NULL);
c010f4ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f4af:	75 24                	jne    c010f4d5 <find_mount+0x30>
c010f4b1:	c7 44 24 0c d4 81 11 	movl   $0xc01181d4,0xc(%esp)
c010f4b8:	c0 
c010f4b9:	c7 44 24 08 e4 81 11 	movl   $0xc01181e4,0x8(%esp)
c010f4c0:	c0 
c010f4c1:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010f4c8:	00 
c010f4c9:	c7 04 24 f9 81 11 c0 	movl   $0xc01181f9,(%esp)
c010f4d0:	e8 f3 19 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f4d5:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f4dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f4df:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f4e2:	eb 3a                	jmp    c010f51e <find_mount+0x79>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f4e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4e7:	83 e8 10             	sub    $0x10,%eax
c010f4ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
c010f4ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f4f0:	8b 40 0c             	mov    0xc(%eax),%eax
c010f4f3:	85 c0                	test   %eax,%eax
c010f4f5:	74 27                	je     c010f51e <find_mount+0x79>
c010f4f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f4fa:	8b 00                	mov    (%eax),%eax
c010f4fc:	8b 55 08             	mov    0x8(%ebp),%edx
c010f4ff:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f503:	89 04 24             	mov    %eax,(%esp)
c010f506:	e8 c6 57 00 00       	call   c0114cd1 <strcmp>
c010f50b:	85 c0                	test   %eax,%eax
c010f50d:	75 0f                	jne    c010f51e <find_mount+0x79>
            *vdev_store = vdev;
c010f50f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f512:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f515:	89 10                	mov    %edx,(%eax)
            return 0;
c010f517:	b8 00 00 00 00       	mov    $0x0,%eax
c010f51c:	eb 1c                	jmp    c010f53a <find_mount+0x95>
c010f51e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f521:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f524:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f527:	8b 40 04             	mov    0x4(%eax),%eax
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
    assert(devname != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f52a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f52d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f530:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f533:	75 af                	jne    c010f4e4 <find_mount+0x3f>
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
            *vdev_store = vdev;
            return 0;
        }
    }
    return -E_NO_DEV;
c010f535:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
c010f53a:	c9                   	leave  
c010f53b:	c3                   	ret    

c010f53c <vfs_mount>:
 *             set up the filesystem and hand back a struct fs.
 *
 * The DATA argument is passed through unchanged to MOUNTFUNC.
 */
int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
c010f53c:	55                   	push   %ebp
c010f53d:	89 e5                	mov    %esp,%ebp
c010f53f:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010f542:	e8 b4 fa ff ff       	call   c010effb <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010f547:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010f54a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f54e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f551:	89 04 24             	mov    %eax,(%esp)
c010f554:	e8 4c ff ff ff       	call   c010f4a5 <find_mount>
c010f559:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f55c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f560:	74 05                	je     c010f567 <vfs_mount+0x2b>
        goto out;
c010f562:	e9 f4 00 00 00       	jmp    c010f65b <vfs_mount+0x11f>
    }
    if (vdev->fs != NULL) {
c010f567:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f56a:	8b 40 08             	mov    0x8(%eax),%eax
c010f56d:	85 c0                	test   %eax,%eax
c010f56f:	74 0c                	je     c010f57d <vfs_mount+0x41>
        ret = -E_BUSY;
c010f571:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
        goto out;
c010f578:	e9 de 00 00 00       	jmp    c010f65b <vfs_mount+0x11f>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010f57d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f580:	8b 00                	mov    (%eax),%eax
c010f582:	85 c0                	test   %eax,%eax
c010f584:	74 0a                	je     c010f590 <vfs_mount+0x54>
c010f586:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f589:	8b 40 0c             	mov    0xc(%eax),%eax
c010f58c:	85 c0                	test   %eax,%eax
c010f58e:	75 24                	jne    c010f5b4 <vfs_mount+0x78>
c010f590:	c7 44 24 0c 78 82 11 	movl   $0xc0118278,0xc(%esp)
c010f597:	c0 
c010f598:	c7 44 24 08 e4 81 11 	movl   $0xc01181e4,0x8(%esp)
c010f59f:	c0 
c010f5a0:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c010f5a7:	00 
c010f5a8:	c7 04 24 f9 81 11 c0 	movl   $0xc01181f9,(%esp)
c010f5af:	e8 14 19 ff ff       	call   c0100ec8 <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
c010f5b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f5b7:	8b 40 04             	mov    0x4(%eax),%eax
c010f5ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f5bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f5c1:	74 0d                	je     c010f5d0 <vfs_mount+0x94>
c010f5c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f5c6:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f5c9:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f5ce:	74 24                	je     c010f5f4 <vfs_mount+0xb8>
c010f5d0:	c7 44 24 0c a4 82 11 	movl   $0xc01182a4,0xc(%esp)
c010f5d7:	c0 
c010f5d8:	c7 44 24 08 e4 81 11 	movl   $0xc01181e4,0x8(%esp)
c010f5df:	c0 
c010f5e0:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c010f5e7:	00 
c010f5e8:	c7 04 24 f9 81 11 c0 	movl   $0xc01181f9,(%esp)
c010f5ef:	e8 d4 18 ff ff       	call   c0100ec8 <__panic>
c010f5f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f5f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
c010f5fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f5fd:	83 c0 08             	add    $0x8,%eax
c010f600:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f604:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f607:	89 04 24             	mov    %eax,(%esp)
c010f60a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f60d:	ff d0                	call   *%eax
c010f60f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f612:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f616:	75 43                	jne    c010f65b <vfs_mount+0x11f>
        assert(vdev->fs != NULL);
c010f618:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f61b:	8b 40 08             	mov    0x8(%eax),%eax
c010f61e:	85 c0                	test   %eax,%eax
c010f620:	75 24                	jne    c010f646 <vfs_mount+0x10a>
c010f622:	c7 44 24 0c d7 82 11 	movl   $0xc01182d7,0xc(%esp)
c010f629:	c0 
c010f62a:	c7 44 24 08 e4 81 11 	movl   $0xc01181e4,0x8(%esp)
c010f631:	c0 
c010f632:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c010f639:	00 
c010f63a:	c7 04 24 f9 81 11 c0 	movl   $0xc01181f9,(%esp)
c010f641:	e8 82 18 ff ff       	call   c0100ec8 <__panic>
        cprintf("vfs: mount %s.\n", vdev->devname);
c010f646:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f649:	8b 00                	mov    (%eax),%eax
c010f64b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f64f:	c7 04 24 e8 82 11 c0 	movl   $0xc01182e8,(%esp)
c010f656:	e8 0a 0d ff ff       	call   c0100365 <cprintf>
    }

out:
    unlock_vdev_list();
c010f65b:	e8 af f9 ff ff       	call   c010f00f <unlock_vdev_list>
    return ret;
c010f660:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f663:	c9                   	leave  
c010f664:	c3                   	ret    

c010f665 <vfs_unmount>:
/*
 * vfs_unmount - Unmount a filesystem/device by name.
 *               First calls FSOP_SYNC on the filesystem; then calls FSOP_UNMOUNT.
 */
int
vfs_unmount(const char *devname) {
c010f665:	55                   	push   %ebp
c010f666:	89 e5                	mov    %esp,%ebp
c010f668:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010f66b:	e8 8b f9 ff ff       	call   c010effb <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010f670:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010f673:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f677:	8b 45 08             	mov    0x8(%ebp),%eax
c010f67a:	89 04 24             	mov    %eax,(%esp)
c010f67d:	e8 23 fe ff ff       	call   c010f4a5 <find_mount>
c010f682:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f685:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f689:	74 05                	je     c010f690 <vfs_unmount+0x2b>
        goto out;
c010f68b:	e9 a8 00 00 00       	jmp    c010f738 <vfs_unmount+0xd3>
    }
    if (vdev->fs == NULL) {
c010f690:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f693:	8b 40 08             	mov    0x8(%eax),%eax
c010f696:	85 c0                	test   %eax,%eax
c010f698:	75 0c                	jne    c010f6a6 <vfs_unmount+0x41>
        ret = -E_INVAL;
c010f69a:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        goto out;
c010f6a1:	e9 92 00 00 00       	jmp    c010f738 <vfs_unmount+0xd3>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010f6a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f6a9:	8b 00                	mov    (%eax),%eax
c010f6ab:	85 c0                	test   %eax,%eax
c010f6ad:	74 0a                	je     c010f6b9 <vfs_unmount+0x54>
c010f6af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f6b2:	8b 40 0c             	mov    0xc(%eax),%eax
c010f6b5:	85 c0                	test   %eax,%eax
c010f6b7:	75 24                	jne    c010f6dd <vfs_unmount+0x78>
c010f6b9:	c7 44 24 0c 78 82 11 	movl   $0xc0118278,0xc(%esp)
c010f6c0:	c0 
c010f6c1:	c7 44 24 08 e4 81 11 	movl   $0xc01181e4,0x8(%esp)
c010f6c8:	c0 
c010f6c9:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c010f6d0:	00 
c010f6d1:	c7 04 24 f9 81 11 c0 	movl   $0xc01181f9,(%esp)
c010f6d8:	e8 eb 17 ff ff       	call   c0100ec8 <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010f6dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f6e0:	8b 40 08             	mov    0x8(%eax),%eax
c010f6e3:	8b 40 70             	mov    0x70(%eax),%eax
c010f6e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f6e9:	8b 52 08             	mov    0x8(%edx),%edx
c010f6ec:	89 14 24             	mov    %edx,(%esp)
c010f6ef:	ff d0                	call   *%eax
c010f6f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f6f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f6f8:	74 02                	je     c010f6fc <vfs_unmount+0x97>
        goto out;
c010f6fa:	eb 3c                	jmp    c010f738 <vfs_unmount+0xd3>
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
c010f6fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f6ff:	8b 40 08             	mov    0x8(%eax),%eax
c010f702:	8b 40 78             	mov    0x78(%eax),%eax
c010f705:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f708:	8b 52 08             	mov    0x8(%edx),%edx
c010f70b:	89 14 24             	mov    %edx,(%esp)
c010f70e:	ff d0                	call   *%eax
c010f710:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f713:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f717:	75 1f                	jne    c010f738 <vfs_unmount+0xd3>
        vdev->fs = NULL;
c010f719:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f71c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        cprintf("vfs: unmount %s.\n", vdev->devname);
c010f723:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f726:	8b 00                	mov    (%eax),%eax
c010f728:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f72c:	c7 04 24 f8 82 11 c0 	movl   $0xc01182f8,(%esp)
c010f733:	e8 2d 0c ff ff       	call   c0100365 <cprintf>
    }

out:
    unlock_vdev_list();
c010f738:	e8 d2 f8 ff ff       	call   c010f00f <unlock_vdev_list>
    return ret;
c010f73d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f740:	c9                   	leave  
c010f741:	c3                   	ret    

c010f742 <vfs_unmount_all>:

/*
 * vfs_unmount_all - Global unmount function.
 */
int
vfs_unmount_all(void) {
c010f742:	55                   	push   %ebp
c010f743:	89 e5                	mov    %esp,%ebp
c010f745:	83 ec 38             	sub    $0x38,%esp
c010f748:	c7 45 e4 c8 1f 15 c0 	movl   $0xc0151fc8,-0x1c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f74f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f752:	8b 40 04             	mov    0x4(%eax),%eax
c010f755:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010f758:	0f 94 c0             	sete   %al
c010f75b:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f75e:	85 c0                	test   %eax,%eax
c010f760:	0f 85 f1 00 00 00    	jne    c010f857 <vfs_unmount_all+0x115>
        lock_vdev_list();
c010f766:	e8 90 f8 ff ff       	call   c010effb <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f76b:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f772:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f775:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010f778:	e9 ba 00 00 00       	jmp    c010f837 <vfs_unmount_all+0xf5>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f77d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f780:	83 e8 10             	sub    $0x10,%eax
c010f783:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->mountable && vdev->fs != NULL) {
c010f786:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f789:	8b 40 0c             	mov    0xc(%eax),%eax
c010f78c:	85 c0                	test   %eax,%eax
c010f78e:	0f 84 a3 00 00 00    	je     c010f837 <vfs_unmount_all+0xf5>
c010f794:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f797:	8b 40 08             	mov    0x8(%eax),%eax
c010f79a:	85 c0                	test   %eax,%eax
c010f79c:	0f 84 95 00 00 00    	je     c010f837 <vfs_unmount_all+0xf5>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010f7a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7a5:	8b 40 08             	mov    0x8(%eax),%eax
c010f7a8:	8b 40 70             	mov    0x70(%eax),%eax
c010f7ab:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f7ae:	8b 52 08             	mov    0x8(%edx),%edx
c010f7b1:	89 14 24             	mov    %edx,(%esp)
c010f7b4:	ff d0                	call   *%eax
c010f7b6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f7b9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f7bd:	74 1e                	je     c010f7dd <vfs_unmount_all+0x9b>
                        cprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
c010f7bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7c2:	8b 00                	mov    (%eax),%eax
c010f7c4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010f7c7:	89 54 24 08          	mov    %edx,0x8(%esp)
c010f7cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f7cf:	c7 04 24 0c 83 11 c0 	movl   $0xc011830c,(%esp)
c010f7d6:	e8 8a 0b ff ff       	call   c0100365 <cprintf>
                        continue ;
c010f7db:	eb 5a                	jmp    c010f837 <vfs_unmount_all+0xf5>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
c010f7dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7e0:	8b 40 08             	mov    0x8(%eax),%eax
c010f7e3:	8b 40 78             	mov    0x78(%eax),%eax
c010f7e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f7e9:	8b 52 08             	mov    0x8(%edx),%edx
c010f7ec:	89 14 24             	mov    %edx,(%esp)
c010f7ef:	ff d0                	call   *%eax
c010f7f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f7f4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f7f8:	74 1e                	je     c010f818 <vfs_unmount_all+0xd6>
                        cprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
c010f7fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7fd:	8b 00                	mov    (%eax),%eax
c010f7ff:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010f802:	89 54 24 08          	mov    %edx,0x8(%esp)
c010f806:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f80a:	c7 04 24 34 83 11 c0 	movl   $0xc0118334,(%esp)
c010f811:	e8 4f 0b ff ff       	call   c0100365 <cprintf>
                        continue ;
c010f816:	eb 1f                	jmp    c010f837 <vfs_unmount_all+0xf5>
                    }
                    vdev->fs = NULL;
c010f818:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f81b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                    cprintf("vfs: unmount %s.\n", vdev->devname);
c010f822:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f825:	8b 00                	mov    (%eax),%eax
c010f827:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f82b:	c7 04 24 f8 82 11 c0 	movl   $0xc01182f8,(%esp)
c010f832:	e8 2e 0b ff ff       	call   c0100365 <cprintf>
c010f837:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f83a:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f83d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f840:	8b 40 04             	mov    0x4(%eax),%eax
vfs_unmount_all(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f843:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f846:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f849:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f84c:	0f 85 2b ff ff ff    	jne    c010f77d <vfs_unmount_all+0x3b>
                    vdev->fs = NULL;
                    cprintf("vfs: unmount %s.\n", vdev->devname);
                }
            }
        }
        unlock_vdev_list();
c010f852:	e8 b8 f7 ff ff       	call   c010f00f <unlock_vdev_list>
    }
    return 0;
c010f857:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f85c:	c9                   	leave  
c010f85d:	c3                   	ret    

c010f85e <vfs_open>:
#include <assert.h>


// open file in vfs, get/create inode for file with filename path.
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
c010f85e:	55                   	push   %ebp
c010f85f:	89 e5                	mov    %esp,%ebp
c010f861:	53                   	push   %ebx
c010f862:	83 ec 44             	sub    $0x44,%esp
    bool can_write = 0;
c010f865:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    switch (open_flags & O_ACCMODE) {
c010f86c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f86f:	83 e0 03             	and    $0x3,%eax
c010f872:	85 c0                	test   %eax,%eax
c010f874:	74 18                	je     c010f88e <vfs_open+0x30>
c010f876:	83 f8 02             	cmp    $0x2,%eax
c010f879:	77 09                	ja     c010f884 <vfs_open+0x26>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
c010f87b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        break;
c010f882:	eb 0b                	jmp    c010f88f <vfs_open+0x31>
    default:
        return -E_INVAL;
c010f884:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f889:	e9 ba 02 00 00       	jmp    c010fb48 <vfs_open+0x2ea>
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
    bool can_write = 0;
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c010f88e:	90                   	nop
        break;
    default:
        return -E_INVAL;
    }

    if (open_flags & O_TRUNC) {
c010f88f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f892:	83 e0 10             	and    $0x10,%eax
c010f895:	85 c0                	test   %eax,%eax
c010f897:	74 10                	je     c010f8a9 <vfs_open+0x4b>
        if (!can_write) {
c010f899:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f89d:	75 0a                	jne    c010f8a9 <vfs_open+0x4b>
            return -E_INVAL;
c010f89f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f8a4:	e9 9f 02 00 00       	jmp    c010fb48 <vfs_open+0x2ea>
        }
    }

    int ret; 
    struct inode *node;
    bool excl = (open_flags & O_EXCL) != 0;
c010f8a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f8ac:	83 e0 08             	and    $0x8,%eax
c010f8af:	85 c0                	test   %eax,%eax
c010f8b1:	0f 95 c0             	setne  %al
c010f8b4:	0f b6 c0             	movzbl %al,%eax
c010f8b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bool create = (open_flags & O_CREAT) != 0;
c010f8ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f8bd:	83 e0 04             	and    $0x4,%eax
c010f8c0:	85 c0                	test   %eax,%eax
c010f8c2:	0f 95 c0             	setne  %al
c010f8c5:	0f b6 c0             	movzbl %al,%eax
c010f8c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ret = vfs_lookup(path, &node);
c010f8cb:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010f8ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f8d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010f8d5:	89 04 24             	mov    %eax,(%esp)
c010f8d8:	e8 7a 04 00 00       	call   c010fd57 <vfs_lookup>
c010f8dd:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (ret != 0) {
c010f8e0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f8e4:	0f 84 cc 00 00 00    	je     c010f9b6 <vfs_open+0x158>
        if (ret == -16 && (create)) {
c010f8ea:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
c010f8ee:	0f 85 ba 00 00 00    	jne    c010f9ae <vfs_open+0x150>
c010f8f4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f8f8:	0f 84 b0 00 00 00    	je     c010f9ae <vfs_open+0x150>
            char *name;
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c010f8fe:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010f901:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f905:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010f908:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f90c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f90f:	89 04 24             	mov    %eax,(%esp)
c010f912:	e8 20 05 00 00       	call   c010fe37 <vfs_lookup_parent>
c010f917:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f91a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f91e:	74 08                	je     c010f928 <vfs_open+0xca>
                return ret;
c010f920:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f923:	e9 20 02 00 00       	jmp    c010fb48 <vfs_open+0x2ea>
            }
            ret = vop_create(dir, name, excl, &node);
c010f928:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f92b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010f92e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010f932:	74 17                	je     c010f94b <vfs_open+0xed>
c010f934:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f937:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f93a:	85 c0                	test   %eax,%eax
c010f93c:	74 0d                	je     c010f94b <vfs_open+0xed>
c010f93e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f941:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f944:	8b 40 34             	mov    0x34(%eax),%eax
c010f947:	85 c0                	test   %eax,%eax
c010f949:	75 24                	jne    c010f96f <vfs_open+0x111>
c010f94b:	c7 44 24 0c 60 83 11 	movl   $0xc0118360,0xc(%esp)
c010f952:	c0 
c010f953:	c7 44 24 08 af 83 11 	movl   $0xc01183af,0x8(%esp)
c010f95a:	c0 
c010f95b:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010f962:	00 
c010f963:	c7 04 24 c4 83 11 c0 	movl   $0xc01183c4,(%esp)
c010f96a:	e8 59 15 ff ff       	call   c0100ec8 <__panic>
c010f96f:	c7 44 24 04 da 83 11 	movl   $0xc01183da,0x4(%esp)
c010f976:	c0 
c010f977:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f97a:	89 04 24             	mov    %eax,(%esp)
c010f97d:	e8 03 f4 ff ff       	call   c010ed85 <inode_check>
c010f982:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f985:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f988:	8b 40 34             	mov    0x34(%eax),%eax
c010f98b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010f98e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010f991:	8d 5d d8             	lea    -0x28(%ebp),%ebx
c010f994:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010f998:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010f99b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c010f99f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010f9a3:	89 14 24             	mov    %edx,(%esp)
c010f9a6:	ff d0                	call   *%eax
c010f9a8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    bool excl = (open_flags & O_EXCL) != 0;
    bool create = (open_flags & O_CREAT) != 0;
    ret = vfs_lookup(path, &node);

    if (ret != 0) {
        if (ret == -16 && (create)) {
c010f9ab:	90                   	nop
c010f9ac:	eb 1e                	jmp    c010f9cc <vfs_open+0x16e>
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
                return ret;
            }
            ret = vop_create(dir, name, excl, &node);
        } else return ret;
c010f9ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f9b1:	e9 92 01 00 00       	jmp    c010fb48 <vfs_open+0x2ea>
    } else if (excl && create) {
c010f9b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f9ba:	74 10                	je     c010f9cc <vfs_open+0x16e>
c010f9bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f9c0:	74 0a                	je     c010f9cc <vfs_open+0x16e>
        return -E_EXISTS;
c010f9c2:	b8 e9 ff ff ff       	mov    $0xffffffe9,%eax
c010f9c7:	e9 7c 01 00 00       	jmp    c010fb48 <vfs_open+0x2ea>
    }
    assert(node != NULL);
c010f9cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f9cf:	85 c0                	test   %eax,%eax
c010f9d1:	75 24                	jne    c010f9f7 <vfs_open+0x199>
c010f9d3:	c7 44 24 0c e1 83 11 	movl   $0xc01183e1,0xc(%esp)
c010f9da:	c0 
c010f9db:	c7 44 24 08 af 83 11 	movl   $0xc01183af,0x8(%esp)
c010f9e2:	c0 
c010f9e3:	c7 44 24 04 31 00 00 	movl   $0x31,0x4(%esp)
c010f9ea:	00 
c010f9eb:	c7 04 24 c4 83 11 c0 	movl   $0xc01183c4,(%esp)
c010f9f2:	e8 d1 14 ff ff       	call   c0100ec8 <__panic>
    
    if ((ret = vop_open(node, open_flags)) != 0) {
c010f9f7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f9fa:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010f9fd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010fa01:	74 17                	je     c010fa1a <vfs_open+0x1bc>
c010fa03:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fa06:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fa09:	85 c0                	test   %eax,%eax
c010fa0b:	74 0d                	je     c010fa1a <vfs_open+0x1bc>
c010fa0d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fa10:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fa13:	8b 40 04             	mov    0x4(%eax),%eax
c010fa16:	85 c0                	test   %eax,%eax
c010fa18:	75 24                	jne    c010fa3e <vfs_open+0x1e0>
c010fa1a:	c7 44 24 0c f0 83 11 	movl   $0xc01183f0,0xc(%esp)
c010fa21:	c0 
c010fa22:	c7 44 24 08 af 83 11 	movl   $0xc01183af,0x8(%esp)
c010fa29:	c0 
c010fa2a:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010fa31:	00 
c010fa32:	c7 04 24 c4 83 11 c0 	movl   $0xc01183c4,(%esp)
c010fa39:	e8 8a 14 ff ff       	call   c0100ec8 <__panic>
c010fa3e:	c7 44 24 04 3d 84 11 	movl   $0xc011843d,0x4(%esp)
c010fa45:	c0 
c010fa46:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fa49:	89 04 24             	mov    %eax,(%esp)
c010fa4c:	e8 34 f3 ff ff       	call   c010ed85 <inode_check>
c010fa51:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fa54:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fa57:	8b 40 04             	mov    0x4(%eax),%eax
c010fa5a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010fa5d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010fa60:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010fa64:	89 14 24             	mov    %edx,(%esp)
c010fa67:	ff d0                	call   *%eax
c010fa69:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fa6c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fa70:	74 13                	je     c010fa85 <vfs_open+0x227>
        vop_ref_dec(node);
c010fa72:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fa75:	89 04 24             	mov    %eax,(%esp)
c010fa78:	e8 1a f1 ff ff       	call   c010eb97 <inode_ref_dec>
        return ret;
c010fa7d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa80:	e9 c3 00 00 00       	jmp    c010fb48 <vfs_open+0x2ea>
    }

    vop_open_inc(node);
c010fa85:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fa88:	89 04 24             	mov    %eax,(%esp)
c010fa8b:	e8 f4 f1 ff ff       	call   c010ec84 <inode_open_inc>
    if (open_flags & O_TRUNC || create) {
c010fa90:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fa93:	83 e0 10             	and    $0x10,%eax
c010fa96:	85 c0                	test   %eax,%eax
c010fa98:	75 0a                	jne    c010faa4 <vfs_open+0x246>
c010fa9a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fa9e:	0f 84 97 00 00 00    	je     c010fb3b <vfs_open+0x2dd>
        if ((ret = vop_truncate(node, 0)) != 0) {
c010faa4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010faa7:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010faaa:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010faae:	74 17                	je     c010fac7 <vfs_open+0x269>
c010fab0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010fab3:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fab6:	85 c0                	test   %eax,%eax
c010fab8:	74 0d                	je     c010fac7 <vfs_open+0x269>
c010faba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010fabd:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fac0:	8b 40 30             	mov    0x30(%eax),%eax
c010fac3:	85 c0                	test   %eax,%eax
c010fac5:	75 24                	jne    c010faeb <vfs_open+0x28d>
c010fac7:	c7 44 24 0c 44 84 11 	movl   $0xc0118444,0xc(%esp)
c010face:	c0 
c010facf:	c7 44 24 08 af 83 11 	movl   $0xc01183af,0x8(%esp)
c010fad6:	c0 
c010fad7:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010fade:	00 
c010fadf:	c7 04 24 c4 83 11 c0 	movl   $0xc01183c4,(%esp)
c010fae6:	e8 dd 13 ff ff       	call   c0100ec8 <__panic>
c010faeb:	c7 44 24 04 95 84 11 	movl   $0xc0118495,0x4(%esp)
c010faf2:	c0 
c010faf3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010faf6:	89 04 24             	mov    %eax,(%esp)
c010faf9:	e8 87 f2 ff ff       	call   c010ed85 <inode_check>
c010fafe:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010fb01:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fb04:	8b 40 30             	mov    0x30(%eax),%eax
c010fb07:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010fb0a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010fb11:	00 
c010fb12:	89 14 24             	mov    %edx,(%esp)
c010fb15:	ff d0                	call   *%eax
c010fb17:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fb1a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fb1e:	74 1b                	je     c010fb3b <vfs_open+0x2dd>
            vop_open_dec(node);
c010fb20:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fb23:	89 04 24             	mov    %eax,(%esp)
c010fb26:	e8 73 f1 ff ff       	call   c010ec9e <inode_open_dec>
            vop_ref_dec(node);
c010fb2b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fb2e:	89 04 24             	mov    %eax,(%esp)
c010fb31:	e8 61 f0 ff ff       	call   c010eb97 <inode_ref_dec>
            return ret;
c010fb36:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fb39:	eb 0d                	jmp    c010fb48 <vfs_open+0x2ea>
        }
    }
    *node_store = node;
c010fb3b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010fb3e:	8b 45 10             	mov    0x10(%ebp),%eax
c010fb41:	89 10                	mov    %edx,(%eax)
    return 0;
c010fb43:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fb48:	83 c4 44             	add    $0x44,%esp
c010fb4b:	5b                   	pop    %ebx
c010fb4c:	5d                   	pop    %ebp
c010fb4d:	c3                   	ret    

c010fb4e <vfs_close>:

// close file in vfs
int
vfs_close(struct inode *node) {
c010fb4e:	55                   	push   %ebp
c010fb4f:	89 e5                	mov    %esp,%ebp
c010fb51:	83 ec 18             	sub    $0x18,%esp
    vop_open_dec(node);
c010fb54:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb57:	89 04 24             	mov    %eax,(%esp)
c010fb5a:	e8 3f f1 ff ff       	call   c010ec9e <inode_open_dec>
    vop_ref_dec(node);
c010fb5f:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb62:	89 04 24             	mov    %eax,(%esp)
c010fb65:	e8 2d f0 ff ff       	call   c010eb97 <inode_ref_dec>
    return 0;
c010fb6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fb6f:	c9                   	leave  
c010fb70:	c3                   	ret    

c010fb71 <vfs_unlink>:

// unimplement
int
vfs_unlink(char *path) {
c010fb71:	55                   	push   %ebp
c010fb72:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010fb74:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010fb79:	5d                   	pop    %ebp
c010fb7a:	c3                   	ret    

c010fb7b <vfs_rename>:

// unimplement
int
vfs_rename(char *old_path, char *new_path) {
c010fb7b:	55                   	push   %ebp
c010fb7c:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010fb7e:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010fb83:	5d                   	pop    %ebp
c010fb84:	c3                   	ret    

c010fb85 <vfs_link>:

// unimplement
int
vfs_link(char *old_path, char *new_path) {
c010fb85:	55                   	push   %ebp
c010fb86:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010fb88:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010fb8d:	5d                   	pop    %ebp
c010fb8e:	c3                   	ret    

c010fb8f <vfs_symlink>:

// unimplement
int
vfs_symlink(char *old_path, char *new_path) {
c010fb8f:	55                   	push   %ebp
c010fb90:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010fb92:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010fb97:	5d                   	pop    %ebp
c010fb98:	c3                   	ret    

c010fb99 <vfs_readlink>:

// unimplement
int
vfs_readlink(char *path, struct iobuf *iob) {
c010fb99:	55                   	push   %ebp
c010fb9a:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010fb9c:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010fba1:	5d                   	pop    %ebp
c010fba2:	c3                   	ret    

c010fba3 <vfs_mkdir>:

// unimplement
int
vfs_mkdir(char *path){
c010fba3:	55                   	push   %ebp
c010fba4:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010fba6:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010fbab:	5d                   	pop    %ebp
c010fbac:	c3                   	ret    

c010fbad <get_device>:
 * get_device- Common code to pull the device name, if any, off the front of a
 *             path and choose the inode to begin the name lookup relative to.
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
c010fbad:	55                   	push   %ebp
c010fbae:	89 e5                	mov    %esp,%ebp
c010fbb0:	83 ec 38             	sub    $0x38,%esp
    int i, slash = -1, colon = -1;
c010fbb3:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c010fbba:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
    for (i = 0; path[i] != '\0'; i ++) {
c010fbc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010fbc8:	eb 32                	jmp    c010fbfc <get_device+0x4f>
        if (path[i] == ':') { colon = i; break; }
c010fbca:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010fbcd:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbd0:	01 d0                	add    %edx,%eax
c010fbd2:	0f b6 00             	movzbl (%eax),%eax
c010fbd5:	3c 3a                	cmp    $0x3a,%al
c010fbd7:	75 08                	jne    c010fbe1 <get_device+0x34>
c010fbd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fbdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fbdf:	eb 2a                	jmp    c010fc0b <get_device+0x5e>
        if (path[i] == '/') { slash = i; break; }
c010fbe1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010fbe4:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbe7:	01 d0                	add    %edx,%eax
c010fbe9:	0f b6 00             	movzbl (%eax),%eax
c010fbec:	3c 2f                	cmp    $0x2f,%al
c010fbee:	75 08                	jne    c010fbf8 <get_device+0x4b>
c010fbf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fbf3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fbf6:	eb 13                	jmp    c010fc0b <get_device+0x5e>
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
    int i, slash = -1, colon = -1;
    for (i = 0; path[i] != '\0'; i ++) {
c010fbf8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010fbfc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010fbff:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc02:	01 d0                	add    %edx,%eax
c010fc04:	0f b6 00             	movzbl (%eax),%eax
c010fc07:	84 c0                	test   %al,%al
c010fc09:	75 bf                	jne    c010fbca <get_device+0x1d>
        if (path[i] == ':') { colon = i; break; }
        if (path[i] == '/') { slash = i; break; }
    }
    if (colon < 0 && slash != 0) {
c010fc0b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fc0f:	79 1e                	jns    c010fc2f <get_device+0x82>
c010fc11:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fc15:	74 18                	je     c010fc2f <get_device+0x82>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
c010fc17:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fc1a:	8b 55 08             	mov    0x8(%ebp),%edx
c010fc1d:	89 10                	mov    %edx,(%eax)
        return vfs_get_curdir(node_store);
c010fc1f:	8b 45 10             	mov    0x10(%ebp),%eax
c010fc22:	89 04 24             	mov    %eax,(%esp)
c010fc25:	e8 ae 02 00 00       	call   c010fed8 <vfs_get_curdir>
c010fc2a:	e9 26 01 00 00       	jmp    c010fd55 <get_device+0x1a8>
    }
    if (colon > 0) {
c010fc2f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fc33:	7e 42                	jle    c010fc77 <get_device+0xca>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
c010fc35:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fc38:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc3b:	01 d0                	add    %edx,%eax
c010fc3d:	c6 00 00             	movb   $0x0,(%eax)

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
c010fc40:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010fc44:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fc47:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc4a:	01 d0                	add    %edx,%eax
c010fc4c:	0f b6 00             	movzbl (%eax),%eax
c010fc4f:	3c 2f                	cmp    $0x2f,%al
c010fc51:	74 ed                	je     c010fc40 <get_device+0x93>
        *subpath = path + colon;
c010fc53:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fc56:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc59:	01 c2                	add    %eax,%edx
c010fc5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fc5e:	89 10                	mov    %edx,(%eax)
        return vfs_get_root(path, node_store);
c010fc60:	8b 45 10             	mov    0x10(%ebp),%eax
c010fc63:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc67:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc6a:	89 04 24             	mov    %eax,(%esp)
c010fc6d:	e8 61 f4 ff ff       	call   c010f0d3 <vfs_get_root>
c010fc72:	e9 de 00 00 00       	jmp    c010fd55 <get_device+0x1a8>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
c010fc77:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc7a:	0f b6 00             	movzbl (%eax),%eax
c010fc7d:	3c 2f                	cmp    $0x2f,%al
c010fc7f:	75 20                	jne    c010fca1 <get_device+0xf4>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
c010fc81:	8b 45 10             	mov    0x10(%ebp),%eax
c010fc84:	89 04 24             	mov    %eax,(%esp)
c010fc87:	e8 18 f3 ff ff       	call   c010efa4 <vfs_get_bootfs>
c010fc8c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fc8f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fc93:	0f 84 a1 00 00 00    	je     c010fd3a <get_device+0x18d>
            return ret;
c010fc99:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc9c:	e9 b4 00 00 00       	jmp    c010fd55 <get_device+0x1a8>
        }
    }
    else {
        assert(*path == ':');
c010fca1:	8b 45 08             	mov    0x8(%ebp),%eax
c010fca4:	0f b6 00             	movzbl (%eax),%eax
c010fca7:	3c 3a                	cmp    $0x3a,%al
c010fca9:	74 24                	je     c010fccf <get_device+0x122>
c010fcab:	c7 44 24 0c a0 84 11 	movl   $0xc01184a0,0xc(%esp)
c010fcb2:	c0 
c010fcb3:	c7 44 24 08 ad 84 11 	movl   $0xc01184ad,0x8(%esp)
c010fcba:	c0 
c010fcbb:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010fcc2:	00 
c010fcc3:	c7 04 24 c2 84 11 c0 	movl   $0xc01184c2,(%esp)
c010fcca:	e8 f9 11 ff ff       	call   c0100ec8 <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010fccf:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010fcd2:	89 04 24             	mov    %eax,(%esp)
c010fcd5:	e8 fe 01 00 00       	call   c010fed8 <vfs_get_curdir>
c010fcda:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fcdd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fce1:	74 05                	je     c010fce8 <get_device+0x13b>
            return ret;
c010fce3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fce6:	eb 6d                	jmp    c010fd55 <get_device+0x1a8>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
c010fce8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fceb:	8b 40 38             	mov    0x38(%eax),%eax
c010fcee:	85 c0                	test   %eax,%eax
c010fcf0:	75 24                	jne    c010fd16 <get_device+0x169>
c010fcf2:	c7 44 24 0c da 84 11 	movl   $0xc01184da,0xc(%esp)
c010fcf9:	c0 
c010fcfa:	c7 44 24 08 ad 84 11 	movl   $0xc01184ad,0x8(%esp)
c010fd01:	c0 
c010fd02:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c010fd09:	00 
c010fd0a:	c7 04 24 c2 84 11 c0 	movl   $0xc01184c2,(%esp)
c010fd11:	e8 b2 11 ff ff       	call   c0100ec8 <__panic>
        *node_store = fsop_get_root(node->in_fs);
c010fd16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fd19:	8b 40 38             	mov    0x38(%eax),%eax
c010fd1c:	8b 40 74             	mov    0x74(%eax),%eax
c010fd1f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010fd22:	8b 52 38             	mov    0x38(%edx),%edx
c010fd25:	89 14 24             	mov    %edx,(%esp)
c010fd28:	ff d0                	call   *%eax
c010fd2a:	8b 55 10             	mov    0x10(%ebp),%edx
c010fd2d:	89 02                	mov    %eax,(%edx)
        vop_ref_dec(node);
c010fd2f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fd32:	89 04 24             	mov    %eax,(%esp)
c010fd35:	e8 5d ee ff ff       	call   c010eb97 <inode_ref_dec>
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
c010fd3a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010fd3e:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd41:	0f b6 00             	movzbl (%eax),%eax
c010fd44:	3c 2f                	cmp    $0x2f,%al
c010fd46:	74 f2                	je     c010fd3a <get_device+0x18d>
    *subpath = path;
c010fd48:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fd4b:	8b 55 08             	mov    0x8(%ebp),%edx
c010fd4e:	89 10                	mov    %edx,(%eax)
    return 0;
c010fd50:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fd55:	c9                   	leave  
c010fd56:	c3                   	ret    

c010fd57 <vfs_lookup>:

/*
 * vfs_lookup - get the inode according to the path filename
 */
int
vfs_lookup(char *path, struct inode **node_store) {
c010fd57:	55                   	push   %ebp
c010fd58:	89 e5                	mov    %esp,%ebp
c010fd5a:	56                   	push   %esi
c010fd5b:	53                   	push   %ebx
c010fd5c:	83 ec 20             	sub    $0x20,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c010fd5f:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd62:	8d 55 ec             	lea    -0x14(%ebp),%edx
c010fd65:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fd69:	8d 75 08             	lea    0x8(%ebp),%esi
c010fd6c:	89 74 24 04          	mov    %esi,0x4(%esp)
c010fd70:	89 04 24             	mov    %eax,(%esp)
c010fd73:	e8 35 fe ff ff       	call   c010fbad <get_device>
c010fd78:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fd7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fd7f:	74 08                	je     c010fd89 <vfs_lookup+0x32>
        return ret;
c010fd81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fd84:	e9 a7 00 00 00       	jmp    c010fe30 <vfs_lookup+0xd9>
    }
    if (*path != '\0') {
c010fd89:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd8c:	0f b6 00             	movzbl (%eax),%eax
c010fd8f:	84 c0                	test   %al,%al
c010fd91:	0f 84 8c 00 00 00    	je     c010fe23 <vfs_lookup+0xcc>
        ret = vop_lookup(node, path, node_store);
c010fd97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fd9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fd9d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fda1:	74 17                	je     c010fdba <vfs_lookup+0x63>
c010fda3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fda6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fda9:	85 c0                	test   %eax,%eax
c010fdab:	74 0d                	je     c010fdba <vfs_lookup+0x63>
c010fdad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fdb0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fdb3:	8b 40 38             	mov    0x38(%eax),%eax
c010fdb6:	85 c0                	test   %eax,%eax
c010fdb8:	75 24                	jne    c010fdde <vfs_lookup+0x87>
c010fdba:	c7 44 24 0c f0 84 11 	movl   $0xc01184f0,0xc(%esp)
c010fdc1:	c0 
c010fdc2:	c7 44 24 08 ad 84 11 	movl   $0xc01184ad,0x8(%esp)
c010fdc9:	c0 
c010fdca:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
c010fdd1:	00 
c010fdd2:	c7 04 24 c2 84 11 c0 	movl   $0xc01184c2,(%esp)
c010fdd9:	e8 ea 10 ff ff       	call   c0100ec8 <__panic>
c010fdde:	c7 44 24 04 3f 85 11 	movl   $0xc011853f,0x4(%esp)
c010fde5:	c0 
c010fde6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fde9:	89 04 24             	mov    %eax,(%esp)
c010fdec:	e8 94 ef ff ff       	call   c010ed85 <inode_check>
c010fdf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fdf4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fdf7:	8b 40 38             	mov    0x38(%eax),%eax
c010fdfa:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010fdfd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fe00:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010fe03:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c010fe07:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010fe0b:	89 14 24             	mov    %edx,(%esp)
c010fe0e:	ff d0                	call   *%eax
c010fe10:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c010fe13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe16:	89 04 24             	mov    %eax,(%esp)
c010fe19:	e8 79 ed ff ff       	call   c010eb97 <inode_ref_dec>
        return ret;
c010fe1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fe21:	eb 0d                	jmp    c010fe30 <vfs_lookup+0xd9>
    }
    *node_store = node;
c010fe23:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fe26:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fe29:	89 10                	mov    %edx,(%eax)
    return 0;
c010fe2b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fe30:	83 c4 20             	add    $0x20,%esp
c010fe33:	5b                   	pop    %ebx
c010fe34:	5e                   	pop    %esi
c010fe35:	5d                   	pop    %ebp
c010fe36:	c3                   	ret    

c010fe37 <vfs_lookup_parent>:
/*
 * vfs_lookup_parent - Name-to-vnode translation.
 *  (In BSD, both of these are subsumed by namei().)
 */
int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
c010fe37:	55                   	push   %ebp
c010fe38:	89 e5                	mov    %esp,%ebp
c010fe3a:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c010fe3d:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe40:	8d 55 f0             	lea    -0x10(%ebp),%edx
c010fe43:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fe47:	8d 4d 08             	lea    0x8(%ebp),%ecx
c010fe4a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010fe4e:	89 04 24             	mov    %eax,(%esp)
c010fe51:	e8 57 fd ff ff       	call   c010fbad <get_device>
c010fe56:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fe59:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fe5d:	74 05                	je     c010fe64 <vfs_lookup_parent+0x2d>
        return ret;
c010fe5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fe62:	eb 15                	jmp    c010fe79 <vfs_lookup_parent+0x42>
    }
    *endp = path;
c010fe64:	8b 55 08             	mov    0x8(%ebp),%edx
c010fe67:	8b 45 10             	mov    0x10(%ebp),%eax
c010fe6a:	89 10                	mov    %edx,(%eax)
    *node_store = node;
c010fe6c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fe6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fe72:	89 10                	mov    %edx,(%eax)
    return 0;
c010fe74:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fe79:	c9                   	leave  
c010fe7a:	c3                   	ret    

c010fe7b <get_cwd_nolock>:

/*
 * get_cwd_nolock - retrieve current process's working directory. without lock protect
 */
static struct inode *
get_cwd_nolock(void) {
c010fe7b:	55                   	push   %ebp
c010fe7c:	89 e5                	mov    %esp,%ebp
    return current->filesp->pwd;
c010fe7e:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010fe83:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010fe89:	8b 00                	mov    (%eax),%eax
}
c010fe8b:	5d                   	pop    %ebp
c010fe8c:	c3                   	ret    

c010fe8d <set_cwd_nolock>:
/*
 * set_cwd_nolock - set current working directory.
 */
static void
set_cwd_nolock(struct inode *pwd) {
c010fe8d:	55                   	push   %ebp
c010fe8e:	89 e5                	mov    %esp,%ebp
    current->filesp->pwd = pwd;
c010fe90:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010fe95:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010fe9b:	8b 55 08             	mov    0x8(%ebp),%edx
c010fe9e:	89 10                	mov    %edx,(%eax)
}
c010fea0:	5d                   	pop    %ebp
c010fea1:	c3                   	ret    

c010fea2 <lock_cfs>:

/*
 * lock_cfs - lock the fs related process on current process 
 */
static void
lock_cfs(void) {
c010fea2:	55                   	push   %ebp
c010fea3:	89 e5                	mov    %esp,%ebp
c010fea5:	83 ec 18             	sub    $0x18,%esp
    lock_files(current->filesp);
c010fea8:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010fead:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010feb3:	89 04 24             	mov    %eax,(%esp)
c010feb6:	e8 57 ae ff ff       	call   c010ad12 <lock_files>
}
c010febb:	c9                   	leave  
c010febc:	c3                   	ret    

c010febd <unlock_cfs>:
/*
 * unlock_cfs - unlock the fs related process on current process 
 */
static void
unlock_cfs(void) {
c010febd:	55                   	push   %ebp
c010febe:	89 e5                	mov    %esp,%ebp
c010fec0:	83 ec 18             	sub    $0x18,%esp
    unlock_files(current->filesp);
c010fec3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010fec8:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010fece:	89 04 24             	mov    %eax,(%esp)
c010fed1:	e8 52 ae ff ff       	call   c010ad28 <unlock_files>
}
c010fed6:	c9                   	leave  
c010fed7:	c3                   	ret    

c010fed8 <vfs_get_curdir>:

/*
 *  vfs_get_curdir - Get current directory as a inode.
 */
int
vfs_get_curdir(struct inode **dir_store) {
c010fed8:	55                   	push   %ebp
c010fed9:	89 e5                	mov    %esp,%ebp
c010fedb:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
c010fede:	e8 98 ff ff ff       	call   c010fe7b <get_cwd_nolock>
c010fee3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fee6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010feea:	74 1a                	je     c010ff06 <vfs_get_curdir+0x2e>
        vop_ref_inc(node);
c010feec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010feef:	89 04 24             	mov    %eax,(%esp)
c010fef2:	e8 86 ec ff ff       	call   c010eb7d <inode_ref_inc>
        *dir_store = node;
c010fef7:	8b 45 08             	mov    0x8(%ebp),%eax
c010fefa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010fefd:	89 10                	mov    %edx,(%eax)
        return 0;
c010feff:	b8 00 00 00 00       	mov    $0x0,%eax
c010ff04:	eb 05                	jmp    c010ff0b <vfs_get_curdir+0x33>
    }
    return -E_NOENT;
c010ff06:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c010ff0b:	c9                   	leave  
c010ff0c:	c3                   	ret    

c010ff0d <vfs_set_curdir>:
/*
 * vfs_set_curdir - Set current directory as a inode.
 *                  The passed inode must in fact be a directory.
 */
int
vfs_set_curdir(struct inode *dir) {
c010ff0d:	55                   	push   %ebp
c010ff0e:	89 e5                	mov    %esp,%ebp
c010ff10:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
c010ff13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_cfs();
c010ff1a:	e8 83 ff ff ff       	call   c010fea2 <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
c010ff1f:	e8 57 ff ff ff       	call   c010fe7b <get_cwd_nolock>
c010ff24:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ff27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ff2a:	3b 45 08             	cmp    0x8(%ebp),%eax
c010ff2d:	0f 84 c7 00 00 00    	je     c010fffa <vfs_set_curdir+0xed>
        if (dir != NULL) {
c010ff33:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ff37:	0f 84 a1 00 00 00    	je     c010ffde <vfs_set_curdir+0xd1>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
c010ff3d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff40:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ff43:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ff47:	74 17                	je     c010ff60 <vfs_set_curdir+0x53>
c010ff49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ff4c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ff4f:	85 c0                	test   %eax,%eax
c010ff51:	74 0d                	je     c010ff60 <vfs_set_curdir+0x53>
c010ff53:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ff56:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ff59:	8b 40 28             	mov    0x28(%eax),%eax
c010ff5c:	85 c0                	test   %eax,%eax
c010ff5e:	75 24                	jne    c010ff84 <vfs_set_curdir+0x77>
c010ff60:	c7 44 24 0c 48 85 11 	movl   $0xc0118548,0xc(%esp)
c010ff67:	c0 
c010ff68:	c7 44 24 08 98 85 11 	movl   $0xc0118598,0x8(%esp)
c010ff6f:	c0 
c010ff70:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c010ff77:	00 
c010ff78:	c7 04 24 ad 85 11 c0 	movl   $0xc01185ad,(%esp)
c010ff7f:	e8 44 0f ff ff       	call   c0100ec8 <__panic>
c010ff84:	c7 44 24 04 c3 85 11 	movl   $0xc01185c3,0x4(%esp)
c010ff8b:	c0 
c010ff8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ff8f:	89 04 24             	mov    %eax,(%esp)
c010ff92:	e8 ee ed ff ff       	call   c010ed85 <inode_check>
c010ff97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ff9a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ff9d:	8b 40 28             	mov    0x28(%eax),%eax
c010ffa0:	8d 55 e8             	lea    -0x18(%ebp),%edx
c010ffa3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ffa7:	8b 55 08             	mov    0x8(%ebp),%edx
c010ffaa:	89 14 24             	mov    %edx,(%esp)
c010ffad:	ff d0                	call   *%eax
c010ffaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ffb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ffb6:	74 02                	je     c010ffba <vfs_set_curdir+0xad>
                goto out;
c010ffb8:	eb 40                	jmp    c010fffa <vfs_set_curdir+0xed>
            }
            if (!S_ISDIR(type)) {
c010ffba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ffbd:	25 00 70 00 00       	and    $0x7000,%eax
c010ffc2:	3d 00 20 00 00       	cmp    $0x2000,%eax
c010ffc7:	74 0a                	je     c010ffd3 <vfs_set_curdir+0xc6>
                ret = -E_NOTDIR;
c010ffc9:	c7 45 f4 ee ff ff ff 	movl   $0xffffffee,-0xc(%ebp)
                goto out;
c010ffd0:	90                   	nop
c010ffd1:	eb 27                	jmp    c010fffa <vfs_set_curdir+0xed>
            }
            vop_ref_inc(dir);
c010ffd3:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffd6:	89 04 24             	mov    %eax,(%esp)
c010ffd9:	e8 9f eb ff ff       	call   c010eb7d <inode_ref_inc>
        }
        set_cwd_nolock(dir);
c010ffde:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffe1:	89 04 24             	mov    %eax,(%esp)
c010ffe4:	e8 a4 fe ff ff       	call   c010fe8d <set_cwd_nolock>
        if (old_dir != NULL) {
c010ffe9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ffed:	74 0b                	je     c010fffa <vfs_set_curdir+0xed>
            vop_ref_dec(old_dir);
c010ffef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fff2:	89 04 24             	mov    %eax,(%esp)
c010fff5:	e8 9d eb ff ff       	call   c010eb97 <inode_ref_dec>
        }
    }
out:
    unlock_cfs();
c010fffa:	e8 be fe ff ff       	call   c010febd <unlock_cfs>
    return ret;
c010ffff:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110002:	c9                   	leave  
c0110003:	c3                   	ret    

c0110004 <vfs_chdir>:
/*
 * vfs_chdir - Set current directory, as a pathname. Use vfs_lookup to translate
 *             it to a inode.
 */
int
vfs_chdir(char *path) {
c0110004:	55                   	push   %ebp
c0110005:	89 e5                	mov    %esp,%ebp
c0110007:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
c011000a:	8d 45 f0             	lea    -0x10(%ebp),%eax
c011000d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110011:	8b 45 08             	mov    0x8(%ebp),%eax
c0110014:	89 04 24             	mov    %eax,(%esp)
c0110017:	e8 3b fd ff ff       	call   c010fd57 <vfs_lookup>
c011001c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011001f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110023:	75 19                	jne    c011003e <vfs_chdir+0x3a>
        ret = vfs_set_curdir(node);
c0110025:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110028:	89 04 24             	mov    %eax,(%esp)
c011002b:	e8 dd fe ff ff       	call   c010ff0d <vfs_set_curdir>
c0110030:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c0110033:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110036:	89 04 24             	mov    %eax,(%esp)
c0110039:	e8 59 eb ff ff       	call   c010eb97 <inode_ref_dec>
    }
    return ret;
c011003e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110041:	c9                   	leave  
c0110042:	c3                   	ret    

c0110043 <vfs_getcwd>:
/*
 * vfs_getcwd - retrieve current working directory(cwd).
 */
int
vfs_getcwd(struct iobuf *iob) {
c0110043:	55                   	push   %ebp
c0110044:	89 e5                	mov    %esp,%ebp
c0110046:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
c0110049:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011004c:	89 04 24             	mov    %eax,(%esp)
c011004f:	e8 84 fe ff ff       	call   c010fed8 <vfs_get_curdir>
c0110054:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110057:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011005b:	74 08                	je     c0110065 <vfs_getcwd+0x22>
        return ret;
c011005d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110060:	e9 3a 01 00 00       	jmp    c011019f <vfs_getcwd+0x15c>
    }
    assert(node->in_fs != NULL);
c0110065:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110068:	8b 40 38             	mov    0x38(%eax),%eax
c011006b:	85 c0                	test   %eax,%eax
c011006d:	75 24                	jne    c0110093 <vfs_getcwd+0x50>
c011006f:	c7 44 24 0c cb 85 11 	movl   $0xc01185cb,0xc(%esp)
c0110076:	c0 
c0110077:	c7 44 24 08 98 85 11 	movl   $0xc0118598,0x8(%esp)
c011007e:	c0 
c011007f:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c0110086:	00 
c0110087:	c7 04 24 ad 85 11 c0 	movl   $0xc01185ad,(%esp)
c011008e:	e8 35 0e ff ff       	call   c0100ec8 <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
c0110093:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110096:	8b 40 38             	mov    0x38(%eax),%eax
c0110099:	89 04 24             	mov    %eax,(%esp)
c011009c:	e8 4f f1 ff ff       	call   c010f1f0 <vfs_get_devname>
c01100a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
c01100a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01100a7:	89 04 24             	mov    %eax,(%esp)
c01100aa:	e8 2a 4b 00 00       	call   c0114bd9 <strlen>
c01100af:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01100b6:	00 
c01100b7:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01100be:	00 
c01100bf:	89 44 24 08          	mov    %eax,0x8(%esp)
c01100c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01100c6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01100ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01100cd:	89 04 24             	mov    %eax,(%esp)
c01100d0:	e8 35 af ff ff       	call   c010b00a <iobuf_move>
c01100d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01100d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01100dc:	74 05                	je     c01100e3 <vfs_getcwd+0xa0>
        goto out;
c01100de:	e9 ae 00 00 00       	jmp    c0110191 <vfs_getcwd+0x14e>
    }
    char colon = ':';
c01100e3:	c6 45 e7 3a          	movb   $0x3a,-0x19(%ebp)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
c01100e7:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01100ee:	00 
c01100ef:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01100f6:	00 
c01100f7:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01100fe:	00 
c01100ff:	8d 45 e7             	lea    -0x19(%ebp),%eax
c0110102:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110106:	8b 45 08             	mov    0x8(%ebp),%eax
c0110109:	89 04 24             	mov    %eax,(%esp)
c011010c:	e8 f9 ae ff ff       	call   c010b00a <iobuf_move>
c0110111:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110114:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110118:	74 02                	je     c011011c <vfs_getcwd+0xd9>
        goto out;
c011011a:	eb 75                	jmp    c0110191 <vfs_getcwd+0x14e>
    }
    ret = vop_namefile(node, iob);
c011011c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011011f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110122:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110126:	74 17                	je     c011013f <vfs_getcwd+0xfc>
c0110128:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011012b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011012e:	85 c0                	test   %eax,%eax
c0110130:	74 0d                	je     c011013f <vfs_getcwd+0xfc>
c0110132:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110135:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110138:	8b 40 1c             	mov    0x1c(%eax),%eax
c011013b:	85 c0                	test   %eax,%eax
c011013d:	75 24                	jne    c0110163 <vfs_getcwd+0x120>
c011013f:	c7 44 24 0c e0 85 11 	movl   $0xc01185e0,0xc(%esp)
c0110146:	c0 
c0110147:	c7 44 24 08 98 85 11 	movl   $0xc0118598,0x8(%esp)
c011014e:	c0 
c011014f:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c0110156:	00 
c0110157:	c7 04 24 ad 85 11 c0 	movl   $0xc01185ad,(%esp)
c011015e:	e8 65 0d ff ff       	call   c0100ec8 <__panic>
c0110163:	c7 44 24 04 31 86 11 	movl   $0xc0118631,0x4(%esp)
c011016a:	c0 
c011016b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011016e:	89 04 24             	mov    %eax,(%esp)
c0110171:	e8 0f ec ff ff       	call   c010ed85 <inode_check>
c0110176:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110179:	8b 40 3c             	mov    0x3c(%eax),%eax
c011017c:	8b 40 1c             	mov    0x1c(%eax),%eax
c011017f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110182:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0110185:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110189:	89 14 24             	mov    %edx,(%esp)
c011018c:	ff d0                	call   *%eax
c011018e:	89 45 f4             	mov    %eax,-0xc(%ebp)

out:
    vop_ref_dec(node);
c0110191:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110194:	89 04 24             	mov    %eax,(%esp)
c0110197:	e8 fb e9 ff ff       	call   c010eb97 <inode_ref_dec>
    return ret;
c011019c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011019f:	c9                   	leave  
c01101a0:	c3                   	ret    

c01101a1 <dev_open>:

/*
 * dev_open - Called for each open().
 */
static int
dev_open(struct inode *node, uint32_t open_flags) {
c01101a1:	55                   	push   %ebp
c01101a2:	89 e5                	mov    %esp,%ebp
c01101a4:	83 ec 28             	sub    $0x28,%esp
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
c01101a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01101aa:	83 e0 3c             	and    $0x3c,%eax
c01101ad:	85 c0                	test   %eax,%eax
c01101af:	74 07                	je     c01101b8 <dev_open+0x17>
        return -E_INVAL;
c01101b1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01101b6:	eb 58                	jmp    c0110210 <dev_open+0x6f>
    }
    struct device *dev = vop_info(node, device);
c01101b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01101bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01101be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01101c2:	74 0d                	je     c01101d1 <dev_open+0x30>
c01101c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01101c7:	8b 40 2c             	mov    0x2c(%eax),%eax
c01101ca:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01101cf:	74 24                	je     c01101f5 <dev_open+0x54>
c01101d1:	c7 44 24 0c 40 86 11 	movl   $0xc0118640,0xc(%esp)
c01101d8:	c0 
c01101d9:	c7 44 24 08 73 86 11 	movl   $0xc0118673,0x8(%esp)
c01101e0:	c0 
c01101e1:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c01101e8:	00 
c01101e9:	c7 04 24 88 86 11 c0 	movl   $0xc0118688,(%esp)
c01101f0:	e8 d3 0c ff ff       	call   c0100ec8 <__panic>
c01101f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01101f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_open(dev, open_flags);
c01101fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01101fe:	8b 40 08             	mov    0x8(%eax),%eax
c0110201:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110204:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110208:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011020b:	89 14 24             	mov    %edx,(%esp)
c011020e:	ff d0                	call   *%eax
}
c0110210:	c9                   	leave  
c0110211:	c3                   	ret    

c0110212 <dev_close>:

/*
 * dev_close - Called on the last close(). Just pass through.
 */
static int
dev_close(struct inode *node) {
c0110212:	55                   	push   %ebp
c0110213:	89 e5                	mov    %esp,%ebp
c0110215:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110218:	8b 45 08             	mov    0x8(%ebp),%eax
c011021b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011021e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110222:	74 0d                	je     c0110231 <dev_close+0x1f>
c0110224:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110227:	8b 40 2c             	mov    0x2c(%eax),%eax
c011022a:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011022f:	74 24                	je     c0110255 <dev_close+0x43>
c0110231:	c7 44 24 0c 40 86 11 	movl   $0xc0118640,0xc(%esp)
c0110238:	c0 
c0110239:	c7 44 24 08 73 86 11 	movl   $0xc0118673,0x8(%esp)
c0110240:	c0 
c0110241:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c0110248:	00 
c0110249:	c7 04 24 88 86 11 c0 	movl   $0xc0118688,(%esp)
c0110250:	e8 73 0c ff ff       	call   c0100ec8 <__panic>
c0110255:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110258:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_close(dev);
c011025b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011025e:	8b 40 0c             	mov    0xc(%eax),%eax
c0110261:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110264:	89 14 24             	mov    %edx,(%esp)
c0110267:	ff d0                	call   *%eax
}
c0110269:	c9                   	leave  
c011026a:	c3                   	ret    

c011026b <dev_read>:

/*
 * dev_read -Called for read. Hand off to iobuf.
 */
static int
dev_read(struct inode *node, struct iobuf *iob) {
c011026b:	55                   	push   %ebp
c011026c:	89 e5                	mov    %esp,%ebp
c011026e:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110271:	8b 45 08             	mov    0x8(%ebp),%eax
c0110274:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110277:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011027b:	74 0d                	je     c011028a <dev_read+0x1f>
c011027d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110280:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110283:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110288:	74 24                	je     c01102ae <dev_read+0x43>
c011028a:	c7 44 24 0c 40 86 11 	movl   $0xc0118640,0xc(%esp)
c0110291:	c0 
c0110292:	c7 44 24 08 73 86 11 	movl   $0xc0118673,0x8(%esp)
c0110299:	c0 
c011029a:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
c01102a1:	00 
c01102a2:	c7 04 24 88 86 11 c0 	movl   $0xc0118688,(%esp)
c01102a9:	e8 1a 0c ff ff       	call   c0100ec8 <__panic>
c01102ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 0);
c01102b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01102b7:	8b 40 10             	mov    0x10(%eax),%eax
c01102ba:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01102c1:	00 
c01102c2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01102c5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01102c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01102cc:	89 14 24             	mov    %edx,(%esp)
c01102cf:	ff d0                	call   *%eax
}
c01102d1:	c9                   	leave  
c01102d2:	c3                   	ret    

c01102d3 <dev_write>:

/*
 * dev_write -Called for write. Hand off to iobuf.
 */
static int
dev_write(struct inode *node, struct iobuf *iob) {
c01102d3:	55                   	push   %ebp
c01102d4:	89 e5                	mov    %esp,%ebp
c01102d6:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01102d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01102dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01102df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01102e3:	74 0d                	je     c01102f2 <dev_write+0x1f>
c01102e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102e8:	8b 40 2c             	mov    0x2c(%eax),%eax
c01102eb:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01102f0:	74 24                	je     c0110316 <dev_write+0x43>
c01102f2:	c7 44 24 0c 40 86 11 	movl   $0xc0118640,0xc(%esp)
c01102f9:	c0 
c01102fa:	c7 44 24 08 73 86 11 	movl   $0xc0118673,0x8(%esp)
c0110301:	c0 
c0110302:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0110309:	00 
c011030a:	c7 04 24 88 86 11 c0 	movl   $0xc0118688,(%esp)
c0110311:	e8 b2 0b ff ff       	call   c0100ec8 <__panic>
c0110316:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110319:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 1);
c011031c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011031f:	8b 40 10             	mov    0x10(%eax),%eax
c0110322:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110329:	00 
c011032a:	8b 55 0c             	mov    0xc(%ebp),%edx
c011032d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110331:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110334:	89 14 24             	mov    %edx,(%esp)
c0110337:	ff d0                	call   *%eax
}
c0110339:	c9                   	leave  
c011033a:	c3                   	ret    

c011033b <dev_ioctl>:

/*
 * dev_ioctl - Called for ioctl(). Just pass through.
 */
static int
dev_ioctl(struct inode *node, int op, void *data) {
c011033b:	55                   	push   %ebp
c011033c:	89 e5                	mov    %esp,%ebp
c011033e:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110341:	8b 45 08             	mov    0x8(%ebp),%eax
c0110344:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110347:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011034b:	74 0d                	je     c011035a <dev_ioctl+0x1f>
c011034d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110350:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110353:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110358:	74 24                	je     c011037e <dev_ioctl+0x43>
c011035a:	c7 44 24 0c 40 86 11 	movl   $0xc0118640,0xc(%esp)
c0110361:	c0 
c0110362:	c7 44 24 08 73 86 11 	movl   $0xc0118673,0x8(%esp)
c0110369:	c0 
c011036a:	c7 44 24 04 35 00 00 	movl   $0x35,0x4(%esp)
c0110371:	00 
c0110372:	c7 04 24 88 86 11 c0 	movl   $0xc0118688,(%esp)
c0110379:	e8 4a 0b ff ff       	call   c0100ec8 <__panic>
c011037e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110381:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_ioctl(dev, op, data);
c0110384:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110387:	8b 40 14             	mov    0x14(%eax),%eax
c011038a:	8b 55 10             	mov    0x10(%ebp),%edx
c011038d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110391:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110394:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110398:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011039b:	89 14 24             	mov    %edx,(%esp)
c011039e:	ff d0                	call   *%eax
}
c01103a0:	c9                   	leave  
c01103a1:	c3                   	ret    

c01103a2 <dev_fstat>:
 * dev_fstat - Called for stat().
 *             Set the type and the size (block devices only).
 *             The link count for a device is always 1.
 */
static int
dev_fstat(struct inode *node, struct stat *stat) {
c01103a2:	55                   	push   %ebp
c01103a3:	89 e5                	mov    %esp,%ebp
c01103a5:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c01103a8:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01103af:	00 
c01103b0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01103b7:	00 
c01103b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01103bb:	89 04 24             	mov    %eax,(%esp)
c01103be:	e8 6c 4b 00 00       	call   c0114f2f <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c01103c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01103c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01103c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01103cd:	74 17                	je     c01103e6 <dev_fstat+0x44>
c01103cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01103d2:	8b 40 3c             	mov    0x3c(%eax),%eax
c01103d5:	85 c0                	test   %eax,%eax
c01103d7:	74 0d                	je     c01103e6 <dev_fstat+0x44>
c01103d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01103dc:	8b 40 3c             	mov    0x3c(%eax),%eax
c01103df:	8b 40 28             	mov    0x28(%eax),%eax
c01103e2:	85 c0                	test   %eax,%eax
c01103e4:	75 24                	jne    c011040a <dev_fstat+0x68>
c01103e6:	c7 44 24 0c 9c 86 11 	movl   $0xc011869c,0xc(%esp)
c01103ed:	c0 
c01103ee:	c7 44 24 08 73 86 11 	movl   $0xc0118673,0x8(%esp)
c01103f5:	c0 
c01103f6:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c01103fd:	00 
c01103fe:	c7 04 24 88 86 11 c0 	movl   $0xc0118688,(%esp)
c0110405:	e8 be 0a ff ff       	call   c0100ec8 <__panic>
c011040a:	c7 44 24 04 ec 86 11 	movl   $0xc01186ec,0x4(%esp)
c0110411:	c0 
c0110412:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110415:	89 04 24             	mov    %eax,(%esp)
c0110418:	e8 68 e9 ff ff       	call   c010ed85 <inode_check>
c011041d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110420:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110423:	8b 40 28             	mov    0x28(%eax),%eax
c0110426:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110429:	89 54 24 04          	mov    %edx,0x4(%esp)
c011042d:	8b 55 08             	mov    0x8(%ebp),%edx
c0110430:	89 14 24             	mov    %edx,(%esp)
c0110433:	ff d0                	call   *%eax
c0110435:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110438:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011043c:	74 05                	je     c0110443 <dev_fstat+0xa1>
        return ret;
c011043e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110441:	eb 72                	jmp    c01104b5 <dev_fstat+0x113>
    }
    struct device *dev = vop_info(node, device);
c0110443:	8b 45 08             	mov    0x8(%ebp),%eax
c0110446:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110449:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011044d:	74 0d                	je     c011045c <dev_fstat+0xba>
c011044f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110452:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110455:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011045a:	74 24                	je     c0110480 <dev_fstat+0xde>
c011045c:	c7 44 24 0c 40 86 11 	movl   $0xc0118640,0xc(%esp)
c0110463:	c0 
c0110464:	c7 44 24 08 73 86 11 	movl   $0xc0118673,0x8(%esp)
c011046b:	c0 
c011046c:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c0110473:	00 
c0110474:	c7 04 24 88 86 11 c0 	movl   $0xc0118688,(%esp)
c011047b:	e8 48 0a ff ff       	call   c0100ec8 <__panic>
c0110480:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110483:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = 1;
c0110486:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110489:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    stat->st_blocks = dev->d_blocks;
c0110490:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110493:	8b 10                	mov    (%eax),%edx
c0110495:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110498:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
c011049b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011049e:	8b 50 08             	mov    0x8(%eax),%edx
c01104a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01104a4:	8b 40 04             	mov    0x4(%eax),%eax
c01104a7:	0f af d0             	imul   %eax,%edx
c01104aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01104ad:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c01104b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01104b5:	c9                   	leave  
c01104b6:	c3                   	ret    

c01104b7 <dev_gettype>:
 * dev_gettype - Return the type. A device is a "block device" if it has a known
 *               length. A device that generates data in a stream is a "character
 *               device".
 */
static int
dev_gettype(struct inode *node, uint32_t *type_store) {
c01104b7:	55                   	push   %ebp
c01104b8:	89 e5                	mov    %esp,%ebp
c01104ba:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01104bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01104c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01104c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01104c7:	74 0d                	je     c01104d6 <dev_gettype+0x1f>
c01104c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01104cc:	8b 40 2c             	mov    0x2c(%eax),%eax
c01104cf:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01104d4:	74 24                	je     c01104fa <dev_gettype+0x43>
c01104d6:	c7 44 24 0c 40 86 11 	movl   $0xc0118640,0xc(%esp)
c01104dd:	c0 
c01104de:	c7 44 24 08 73 86 11 	movl   $0xc0118673,0x8(%esp)
c01104e5:	c0 
c01104e6:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c01104ed:	00 
c01104ee:	c7 04 24 88 86 11 c0 	movl   $0xc0118688,(%esp)
c01104f5:	e8 ce 09 ff ff       	call   c0100ec8 <__panic>
c01104fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01104fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
c0110500:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110503:	8b 00                	mov    (%eax),%eax
c0110505:	85 c0                	test   %eax,%eax
c0110507:	74 07                	je     c0110510 <dev_gettype+0x59>
c0110509:	b8 00 50 00 00       	mov    $0x5000,%eax
c011050e:	eb 05                	jmp    c0110515 <dev_gettype+0x5e>
c0110510:	b8 00 40 00 00       	mov    $0x4000,%eax
c0110515:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110518:	89 02                	mov    %eax,(%edx)
    return 0;
c011051a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011051f:	c9                   	leave  
c0110520:	c3                   	ret    

c0110521 <dev_tryseek>:
 * dev_tryseek - Attempt a seek.
 *               For block devices, require block alignment.
 *               For character devices, prohibit seeking entirely.
 */
static int
dev_tryseek(struct inode *node, off_t pos) {
c0110521:	55                   	push   %ebp
c0110522:	89 e5                	mov    %esp,%ebp
c0110524:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110527:	8b 45 08             	mov    0x8(%ebp),%eax
c011052a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011052d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110531:	74 0d                	je     c0110540 <dev_tryseek+0x1f>
c0110533:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110536:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110539:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011053e:	74 24                	je     c0110564 <dev_tryseek+0x43>
c0110540:	c7 44 24 0c 40 86 11 	movl   $0xc0118640,0xc(%esp)
c0110547:	c0 
c0110548:	c7 44 24 08 73 86 11 	movl   $0xc0118673,0x8(%esp)
c011054f:	c0 
c0110550:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0110557:	00 
c0110558:	c7 04 24 88 86 11 c0 	movl   $0xc0118688,(%esp)
c011055f:	e8 64 09 ff ff       	call   c0100ec8 <__panic>
c0110564:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110567:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev->d_blocks > 0) {
c011056a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011056d:	8b 00                	mov    (%eax),%eax
c011056f:	85 c0                	test   %eax,%eax
c0110571:	74 38                	je     c01105ab <dev_tryseek+0x8a>
        if ((pos % dev->d_blocksize) == 0) {
c0110573:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110576:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110579:	8b 4a 04             	mov    0x4(%edx),%ecx
c011057c:	ba 00 00 00 00       	mov    $0x0,%edx
c0110581:	f7 f1                	div    %ecx
c0110583:	89 d0                	mov    %edx,%eax
c0110585:	85 c0                	test   %eax,%eax
c0110587:	75 22                	jne    c01105ab <dev_tryseek+0x8a>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
c0110589:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011058d:	78 1c                	js     c01105ab <dev_tryseek+0x8a>
c011058f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110592:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110595:	8b 08                	mov    (%eax),%ecx
c0110597:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011059a:	8b 40 04             	mov    0x4(%eax),%eax
c011059d:	0f af c1             	imul   %ecx,%eax
c01105a0:	39 c2                	cmp    %eax,%edx
c01105a2:	73 07                	jae    c01105ab <dev_tryseek+0x8a>
                return 0;
c01105a4:	b8 00 00 00 00       	mov    $0x0,%eax
c01105a9:	eb 05                	jmp    c01105b0 <dev_tryseek+0x8f>
            }
        }
    }
    return -E_INVAL;
c01105ab:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01105b0:	c9                   	leave  
c01105b1:	c3                   	ret    

c01105b2 <dev_lookup>:
 * mode.
 *
 * However, we have no support for this in the base system.
 */
static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
c01105b2:	55                   	push   %ebp
c01105b3:	89 e5                	mov    %esp,%ebp
c01105b5:	83 ec 18             	sub    $0x18,%esp
    if (*path != '\0') {
c01105b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01105bb:	0f b6 00             	movzbl (%eax),%eax
c01105be:	84 c0                	test   %al,%al
c01105c0:	74 07                	je     c01105c9 <dev_lookup+0x17>
        return -E_NOENT;
c01105c2:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c01105c7:	eb 18                	jmp    c01105e1 <dev_lookup+0x2f>
    }
    vop_ref_inc(node);
c01105c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01105cc:	89 04 24             	mov    %eax,(%esp)
c01105cf:	e8 a9 e5 ff ff       	call   c010eb7d <inode_ref_inc>
    *node_store = node;
c01105d4:	8b 45 10             	mov    0x10(%ebp),%eax
c01105d7:	8b 55 08             	mov    0x8(%ebp),%edx
c01105da:	89 10                	mov    %edx,(%eax)
    return 0;
c01105dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01105e1:	c9                   	leave  
c01105e2:	c3                   	ret    

c01105e3 <dev_init>:
        dev_init_##x();                                 \
    } while (0)

/* dev_init - Initialization functions for builtin vfs-level devices. */
void
dev_init(void) {
c01105e3:	55                   	push   %ebp
c01105e4:	89 e5                	mov    %esp,%ebp
c01105e6:	83 ec 08             	sub    $0x8,%esp
   // init_device(null);
    init_device(stdin);
c01105e9:	e8 8f 07 00 00       	call   c0110d7d <dev_init_stdin>
    init_device(stdout);
c01105ee:	e8 0a 09 00 00       	call   c0110efd <dev_init_stdout>
    init_device(disk0);
c01105f3:	e8 26 04 00 00       	call   c0110a1e <dev_init_disk0>
}
c01105f8:	c9                   	leave  
c01105f9:	c3                   	ret    

c01105fa <dev_create_inode>:
/* dev_create_inode - Create inode for a vfs-level device. */
struct inode *
dev_create_inode(void) {
c01105fa:	55                   	push   %ebp
c01105fb:	89 e5                	mov    %esp,%ebp
c01105fd:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
c0110600:	c7 04 24 34 12 00 00 	movl   $0x1234,(%esp)
c0110607:	e8 96 e4 ff ff       	call   c010eaa2 <__alloc_inode>
c011060c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011060f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110613:	74 1b                	je     c0110630 <dev_create_inode+0x36>
        vop_init(node, &dev_node_ops, NULL);
c0110615:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011061c:	00 
c011061d:	c7 44 24 04 00 87 11 	movl   $0xc0118700,0x4(%esp)
c0110624:	c0 
c0110625:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110628:	89 04 24             	mov    %eax,(%esp)
c011062b:	e8 9b e4 ff ff       	call   c010eacb <inode_init>
    }
    return node;
c0110630:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110633:	c9                   	leave  
c0110634:	c3                   	ret    

c0110635 <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
c0110635:	55                   	push   %ebp
c0110636:	89 e5                	mov    %esp,%ebp
c0110638:	83 ec 18             	sub    $0x18,%esp
    down(&(disk0_sem));
c011063b:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c0110642:	e8 4e 93 ff ff       	call   c0109995 <down>
}
c0110647:	c9                   	leave  
c0110648:	c3                   	ret    

c0110649 <unlock_disk0>:

static void
unlock_disk0(void) {
c0110649:	55                   	push   %ebp
c011064a:	89 e5                	mov    %esp,%ebp
c011064c:	83 ec 18             	sub    $0x18,%esp
    up(&(disk0_sem));
c011064f:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c0110656:	e8 1f 93 ff ff       	call   c010997a <up>
}
c011065b:	c9                   	leave  
c011065c:	c3                   	ret    

c011065d <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
c011065d:	55                   	push   %ebp
c011065e:	89 e5                	mov    %esp,%ebp
    return 0;
c0110660:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110665:	5d                   	pop    %ebp
c0110666:	c3                   	ret    

c0110667 <disk0_close>:

static int
disk0_close(struct device *dev) {
c0110667:	55                   	push   %ebp
c0110668:	89 e5                	mov    %esp,%ebp
    return 0;
c011066a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011066f:	5d                   	pop    %ebp
c0110670:	c3                   	ret    

c0110671 <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110671:	55                   	push   %ebp
c0110672:	89 e5                	mov    %esp,%ebp
c0110674:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110677:	8b 45 08             	mov    0x8(%ebp),%eax
c011067a:	c1 e0 03             	shl    $0x3,%eax
c011067d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110680:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110683:	c1 e0 03             	shl    $0x3,%eax
c0110686:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110689:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c011068e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110691:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110695:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110699:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011069c:	89 44 24 04          	mov    %eax,0x4(%esp)
c01106a0:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01106a7:	e8 f4 15 ff ff       	call   c0101ca0 <ide_read_secs>
c01106ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01106af:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01106b3:	74 3f                	je     c01106f4 <disk0_read_blks_nolock+0x83>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c01106b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01106b8:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01106bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01106bf:	89 44 24 18          	mov    %eax,0x18(%esp)
c01106c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01106c6:	89 44 24 14          	mov    %eax,0x14(%esp)
c01106ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01106cd:	89 44 24 10          	mov    %eax,0x10(%esp)
c01106d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01106d4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01106d8:	c7 44 24 08 40 87 11 	movl   $0xc0118740,0x8(%esp)
c01106df:	c0 
c01106e0:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c01106e7:	00 
c01106e8:	c7 04 24 88 87 11 c0 	movl   $0xc0118788,(%esp)
c01106ef:	e8 d4 07 ff ff       	call   c0100ec8 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c01106f4:	c9                   	leave  
c01106f5:	c3                   	ret    

c01106f6 <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
c01106f6:	55                   	push   %ebp
c01106f7:	89 e5                	mov    %esp,%ebp
c01106f9:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c01106fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01106ff:	c1 e0 03             	shl    $0x3,%eax
c0110702:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110705:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110708:	c1 e0 03             	shl    $0x3,%eax
c011070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c011070e:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110713:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110716:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011071a:	89 44 24 08          	mov    %eax,0x8(%esp)
c011071e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110721:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110725:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c011072c:	e8 b1 17 ff ff       	call   c0101ee2 <ide_write_secs>
c0110731:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110734:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110738:	74 3f                	je     c0110779 <disk0_write_blks_nolock+0x83>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c011073a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011073d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110741:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110744:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110748:	8b 45 0c             	mov    0xc(%ebp),%eax
c011074b:	89 44 24 14          	mov    %eax,0x14(%esp)
c011074f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110752:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110756:	8b 45 08             	mov    0x8(%ebp),%eax
c0110759:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011075d:	c7 44 24 08 a4 87 11 	movl   $0xc01187a4,0x8(%esp)
c0110764:	c0 
c0110765:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
c011076c:	00 
c011076d:	c7 04 24 88 87 11 c0 	movl   $0xc0118788,(%esp)
c0110774:	e8 4f 07 ff ff       	call   c0100ec8 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110779:	c9                   	leave  
c011077a:	c3                   	ret    

c011077b <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
c011077b:	55                   	push   %ebp
c011077c:	89 e5                	mov    %esp,%ebp
c011077e:	83 ec 48             	sub    $0x48,%esp
    off_t offset = iob->io_offset;
c0110781:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110784:	8b 40 04             	mov    0x4(%eax),%eax
c0110787:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t resid = iob->io_resid;
c011078a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011078d:	8b 40 0c             	mov    0xc(%eax),%eax
c0110790:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t blkno = offset / DISK0_BLKSIZE;
c0110793:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110796:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c011079c:	85 c0                	test   %eax,%eax
c011079e:	0f 48 c2             	cmovs  %edx,%eax
c01107a1:	c1 f8 0c             	sar    $0xc,%eax
c01107a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t nblks = resid / DISK0_BLKSIZE;
c01107a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01107aa:	c1 e8 0c             	shr    $0xc,%eax
c01107ad:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
c01107b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01107b3:	25 ff 0f 00 00       	and    $0xfff,%eax
c01107b8:	85 c0                	test   %eax,%eax
c01107ba:	75 0c                	jne    c01107c8 <disk0_io+0x4d>
c01107bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01107bf:	25 ff 0f 00 00       	and    $0xfff,%eax
c01107c4:	85 c0                	test   %eax,%eax
c01107c6:	74 0a                	je     c01107d2 <disk0_io+0x57>
        return -E_INVAL;
c01107c8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01107cd:	e9 7a 01 00 00       	jmp    c011094c <disk0_io+0x1d1>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
c01107d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01107d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01107d8:	01 c2                	add    %eax,%edx
c01107da:	8b 45 08             	mov    0x8(%ebp),%eax
c01107dd:	8b 00                	mov    (%eax),%eax
c01107df:	39 c2                	cmp    %eax,%edx
c01107e1:	76 0a                	jbe    c01107ed <disk0_io+0x72>
        return -E_INVAL;
c01107e3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01107e8:	e9 5f 01 00 00       	jmp    c011094c <disk0_io+0x1d1>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
c01107ed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01107f1:	75 0a                	jne    c01107fd <disk0_io+0x82>
        return 0;
c01107f3:	b8 00 00 00 00       	mov    $0x0,%eax
c01107f8:	e9 4f 01 00 00       	jmp    c011094c <disk0_io+0x1d1>
    }

    lock_disk0();
c01107fd:	e8 33 fe ff ff       	call   c0110635 <lock_disk0>
    while (resid != 0) {
c0110802:	e9 31 01 00 00       	jmp    c0110938 <disk0_io+0x1bd>
        size_t copied, alen = DISK0_BUFSIZE;
c0110807:	c7 45 e8 00 40 00 00 	movl   $0x4000,-0x18(%ebp)
        if (write) {
c011080e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0110812:	0f 84 89 00 00 00    	je     c01108a1 <disk0_io+0x126>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
c0110818:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c011081d:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110820:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110824:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c011082b:	00 
c011082c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011082f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110833:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110837:	8b 45 0c             	mov    0xc(%ebp),%eax
c011083a:	89 04 24             	mov    %eax,(%esp)
c011083d:	e8 c8 a7 ff ff       	call   c010b00a <iobuf_move>
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
c0110842:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110845:	85 c0                	test   %eax,%eax
c0110847:	74 14                	je     c011085d <disk0_io+0xe2>
c0110849:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011084c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c011084f:	77 0c                	ja     c011085d <disk0_io+0xe2>
c0110851:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110854:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110859:	85 c0                	test   %eax,%eax
c011085b:	74 24                	je     c0110881 <disk0_io+0x106>
c011085d:	c7 44 24 0c f0 87 11 	movl   $0xc01187f0,0xc(%esp)
c0110864:	c0 
c0110865:	c7 44 24 08 2e 88 11 	movl   $0xc011882e,0x8(%esp)
c011086c:	c0 
c011086d:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0110874:	00 
c0110875:	c7 04 24 88 87 11 c0 	movl   $0xc0118788,(%esp)
c011087c:	e8 47 06 ff ff       	call   c0100ec8 <__panic>
            nblks = copied / DISK0_BLKSIZE;
c0110881:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110884:	c1 e8 0c             	shr    $0xc,%eax
c0110887:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_write_blks_nolock(blkno, nblks);
c011088a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011088d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110891:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110894:	89 04 24             	mov    %eax,(%esp)
c0110897:	e8 5a fe ff ff       	call   c01106f6 <disk0_write_blks_nolock>
c011089c:	e9 8b 00 00 00       	jmp    c011092c <disk0_io+0x1b1>
        }
        else {
            if (alen > resid) {
c01108a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01108a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01108a7:	76 06                	jbe    c01108af <disk0_io+0x134>
                alen = resid;
c01108a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01108ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            nblks = alen / DISK0_BLKSIZE;
c01108af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01108b2:	c1 e8 0c             	shr    $0xc,%eax
c01108b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_read_blks_nolock(blkno, nblks);
c01108b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01108bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01108bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01108c2:	89 04 24             	mov    %eax,(%esp)
c01108c5:	e8 a7 fd ff ff       	call   c0110671 <disk0_read_blks_nolock>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
c01108ca:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c01108cf:	8d 55 e0             	lea    -0x20(%ebp),%edx
c01108d2:	89 54 24 10          	mov    %edx,0x10(%esp)
c01108d6:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01108dd:	00 
c01108de:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01108e1:	89 54 24 08          	mov    %edx,0x8(%esp)
c01108e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01108e9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108ec:	89 04 24             	mov    %eax,(%esp)
c01108ef:	e8 16 a7 ff ff       	call   c010b00a <iobuf_move>
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
c01108f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01108f7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01108fa:	75 0c                	jne    c0110908 <disk0_io+0x18d>
c01108fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01108ff:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110904:	85 c0                	test   %eax,%eax
c0110906:	74 24                	je     c011092c <disk0_io+0x1b1>
c0110908:	c7 44 24 0c 44 88 11 	movl   $0xc0118844,0xc(%esp)
c011090f:	c0 
c0110910:	c7 44 24 08 2e 88 11 	movl   $0xc011882e,0x8(%esp)
c0110917:	c0 
c0110918:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
c011091f:	00 
c0110920:	c7 04 24 88 87 11 c0 	movl   $0xc0118788,(%esp)
c0110927:	e8 9c 05 ff ff       	call   c0100ec8 <__panic>
        }
        resid -= copied, blkno += nblks;
c011092c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011092f:	29 45 f4             	sub    %eax,-0xc(%ebp)
c0110932:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110935:	01 45 f0             	add    %eax,-0x10(%ebp)
    if (nblks == 0) {
        return 0;
    }

    lock_disk0();
    while (resid != 0) {
c0110938:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011093c:	0f 85 c5 fe ff ff    	jne    c0110807 <disk0_io+0x8c>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
        }
        resid -= copied, blkno += nblks;
    }
    unlock_disk0();
c0110942:	e8 02 fd ff ff       	call   c0110649 <unlock_disk0>
    return 0;
c0110947:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011094c:	c9                   	leave  
c011094d:	c3                   	ret    

c011094e <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
c011094e:	55                   	push   %ebp
c011094f:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110951:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110956:	5d                   	pop    %ebp
c0110957:	c3                   	ret    

c0110958 <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
c0110958:	55                   	push   %ebp
c0110959:	89 e5                	mov    %esp,%ebp
c011095b:	83 ec 18             	sub    $0x18,%esp
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
c011095e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110965:	e8 b8 12 ff ff       	call   c0101c22 <ide_device_valid>
c011096a:	85 c0                	test   %eax,%eax
c011096c:	75 1c                	jne    c011098a <disk0_device_init+0x32>
        panic("disk0 device isn't available.\n");
c011096e:	c7 44 24 08 74 88 11 	movl   $0xc0118874,0x8(%esp)
c0110975:	c0 
c0110976:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c011097d:	00 
c011097e:	c7 04 24 88 87 11 c0 	movl   $0xc0118788,(%esp)
c0110985:	e8 3e 05 ff ff       	call   c0100ec8 <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
c011098a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110991:	e8 cb 12 ff ff       	call   c0101c61 <ide_device_size>
c0110996:	c1 e8 03             	shr    $0x3,%eax
c0110999:	89 c2                	mov    %eax,%edx
c011099b:	8b 45 08             	mov    0x8(%ebp),%eax
c011099e:	89 10                	mov    %edx,(%eax)
    dev->d_blocksize = DISK0_BLKSIZE;
c01109a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01109a3:	c7 40 04 00 10 00 00 	movl   $0x1000,0x4(%eax)
    dev->d_open = disk0_open;
c01109aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01109ad:	c7 40 08 5d 06 11 c0 	movl   $0xc011065d,0x8(%eax)
    dev->d_close = disk0_close;
c01109b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01109b7:	c7 40 0c 67 06 11 c0 	movl   $0xc0110667,0xc(%eax)
    dev->d_io = disk0_io;
c01109be:	8b 45 08             	mov    0x8(%ebp),%eax
c01109c1:	c7 40 10 7b 07 11 c0 	movl   $0xc011077b,0x10(%eax)
    dev->d_ioctl = disk0_ioctl;
c01109c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01109cb:	c7 40 14 4e 09 11 c0 	movl   $0xc011094e,0x14(%eax)
    sem_init(&(disk0_sem), 1);
c01109d2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01109d9:	00 
c01109da:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c01109e1:	e8 21 8e ff ff       	call   c0109807 <sem_init>

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
c01109e6:	c7 04 24 00 40 00 00 	movl   $0x4000,(%esp)
c01109ed:	e8 6c 40 ff ff       	call   c0104a5e <kmalloc>
c01109f2:	a3 dc 1f 15 c0       	mov    %eax,0xc0151fdc
c01109f7:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c01109fc:	85 c0                	test   %eax,%eax
c01109fe:	75 1c                	jne    c0110a1c <disk0_device_init+0xc4>
        panic("disk0 alloc buffer failed.\n");
c0110a00:	c7 44 24 08 93 88 11 	movl   $0xc0118893,0x8(%esp)
c0110a07:	c0 
c0110a08:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%esp)
c0110a0f:	00 
c0110a10:	c7 04 24 88 87 11 c0 	movl   $0xc0118788,(%esp)
c0110a17:	e8 ac 04 ff ff       	call   c0100ec8 <__panic>
    }
}
c0110a1c:	c9                   	leave  
c0110a1d:	c3                   	ret    

c0110a1e <dev_init_disk0>:

void
dev_init_disk0(void) {
c0110a1e:	55                   	push   %ebp
c0110a1f:	89 e5                	mov    %esp,%ebp
c0110a21:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0110a24:	e8 d1 fb ff ff       	call   c01105fa <dev_create_inode>
c0110a29:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110a30:	75 1c                	jne    c0110a4e <dev_init_disk0+0x30>
        panic("disk0: dev_create_node.\n");
c0110a32:	c7 44 24 08 af 88 11 	movl   $0xc01188af,0x8(%esp)
c0110a39:	c0 
c0110a3a:	c7 44 24 04 87 00 00 	movl   $0x87,0x4(%esp)
c0110a41:	00 
c0110a42:	c7 04 24 88 87 11 c0 	movl   $0xc0118788,(%esp)
c0110a49:	e8 7a 04 ff ff       	call   c0100ec8 <__panic>
    }
    disk0_device_init(vop_info(node, device));
c0110a4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a51:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110a54:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110a58:	74 0d                	je     c0110a67 <dev_init_disk0+0x49>
c0110a5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a5d:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110a60:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110a65:	74 24                	je     c0110a8b <dev_init_disk0+0x6d>
c0110a67:	c7 44 24 0c c8 88 11 	movl   $0xc01188c8,0xc(%esp)
c0110a6e:	c0 
c0110a6f:	c7 44 24 08 2e 88 11 	movl   $0xc011882e,0x8(%esp)
c0110a76:	c0 
c0110a77:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
c0110a7e:	00 
c0110a7f:	c7 04 24 88 87 11 c0 	movl   $0xc0118788,(%esp)
c0110a86:	e8 3d 04 ff ff       	call   c0100ec8 <__panic>
c0110a8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a8e:	89 04 24             	mov    %eax,(%esp)
c0110a91:	e8 c2 fe ff ff       	call   c0110958 <disk0_device_init>

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
c0110a96:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110a9d:	00 
c0110a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110aa1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110aa5:	c7 04 24 fb 88 11 c0 	movl   $0xc01188fb,(%esp)
c0110aac:	e8 cb e9 ff ff       	call   c010f47c <vfs_add_dev>
c0110ab1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110ab4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110ab8:	74 23                	je     c0110add <dev_init_disk0+0xbf>
        panic("disk0: vfs_add_dev: %e.\n", ret);
c0110aba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110abd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110ac1:	c7 44 24 08 01 89 11 	movl   $0xc0118901,0x8(%esp)
c0110ac8:	c0 
c0110ac9:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
c0110ad0:	00 
c0110ad1:	c7 04 24 88 87 11 c0 	movl   $0xc0118788,(%esp)
c0110ad8:	e8 eb 03 ff ff       	call   c0100ec8 <__panic>
    }
}
c0110add:	c9                   	leave  
c0110ade:	c3                   	ret    

c0110adf <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0110adf:	55                   	push   %ebp
c0110ae0:	89 e5                	mov    %esp,%ebp
c0110ae2:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0110ae5:	9c                   	pushf  
c0110ae6:	58                   	pop    %eax
c0110ae7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0110aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0110aed:	25 00 02 00 00       	and    $0x200,%eax
c0110af2:	85 c0                	test   %eax,%eax
c0110af4:	74 0c                	je     c0110b02 <__intr_save+0x23>
        intr_disable();
c0110af6:	e8 2f 16 ff ff       	call   c010212a <intr_disable>
        return 1;
c0110afb:	b8 01 00 00 00       	mov    $0x1,%eax
c0110b00:	eb 05                	jmp    c0110b07 <__intr_save+0x28>
    }
    return 0;
c0110b02:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110b07:	c9                   	leave  
c0110b08:	c3                   	ret    

c0110b09 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0110b09:	55                   	push   %ebp
c0110b0a:	89 e5                	mov    %esp,%ebp
c0110b0c:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0110b0f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0110b13:	74 05                	je     c0110b1a <__intr_restore+0x11>
        intr_enable();
c0110b15:	e8 0a 16 ff ff       	call   c0102124 <intr_enable>
    }
}
c0110b1a:	c9                   	leave  
c0110b1b:	c3                   	ret    

c0110b1c <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
c0110b1c:	55                   	push   %ebp
c0110b1d:	89 e5                	mov    %esp,%ebp
c0110b1f:	83 ec 28             	sub    $0x28,%esp
c0110b22:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b25:	88 45 e4             	mov    %al,-0x1c(%ebp)
    bool intr_flag;
    if (c != '\0') {
c0110b28:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0110b2c:	0f 84 80 00 00 00    	je     c0110bb2 <dev_stdin_write+0x96>
        local_intr_save(intr_flag);
c0110b32:	e8 a8 ff ff ff       	call   c0110adf <__intr_save>
c0110b37:	89 45 f4             	mov    %eax,-0xc(%ebp)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
c0110b3a:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c0110b3f:	99                   	cltd   
c0110b40:	c1 ea 14             	shr    $0x14,%edx
c0110b43:	01 d0                	add    %edx,%eax
c0110b45:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110b4a:	29 d0                	sub    %edx,%eax
c0110b4c:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0110b50:	88 90 00 20 15 c0    	mov    %dl,-0x3feae000(%eax)
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
c0110b56:	8b 15 04 30 15 c0    	mov    0xc0153004,%edx
c0110b5c:	a1 00 30 15 c0       	mov    0xc0153000,%eax
c0110b61:	29 c2                	sub    %eax,%edx
c0110b63:	89 d0                	mov    %edx,%eax
c0110b65:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0110b6a:	7f 0d                	jg     c0110b79 <dev_stdin_write+0x5d>
                p_wpos ++;
c0110b6c:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c0110b71:	83 c0 01             	add    $0x1,%eax
c0110b74:	a3 04 30 15 c0       	mov    %eax,0xc0153004
            }
            if (!wait_queue_empty(wait_queue)) {
c0110b79:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c0110b7e:	89 04 24             	mov    %eax,(%esp)
c0110b81:	e8 7b 91 ff ff       	call   c0109d01 <wait_queue_empty>
c0110b86:	85 c0                	test   %eax,%eax
c0110b88:	75 1d                	jne    c0110ba7 <dev_stdin_write+0x8b>
                wakeup_queue(wait_queue, WT_KBD, 1);
c0110b8a:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c0110b8f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110b96:	00 
c0110b97:	c7 44 24 04 04 00 00 	movl   $0x80000004,0x4(%esp)
c0110b9e:	80 
c0110b9f:	89 04 24             	mov    %eax,(%esp)
c0110ba2:	e8 11 92 ff ff       	call   c0109db8 <wakeup_queue>
            }
        }
        local_intr_restore(intr_flag);
c0110ba7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110baa:	89 04 24             	mov    %eax,(%esp)
c0110bad:	e8 57 ff ff ff       	call   c0110b09 <__intr_restore>
    }
}
c0110bb2:	c9                   	leave  
c0110bb3:	c3                   	ret    

c0110bb4 <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
c0110bb4:	55                   	push   %ebp
c0110bb5:	89 e5                	mov    %esp,%ebp
c0110bb7:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c0110bba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0110bc1:	e8 19 ff ff ff       	call   c0110adf <__intr_save>
c0110bc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        for (; ret < len; ret ++, p_rpos ++) {
c0110bc9:	e9 bb 00 00 00       	jmp    c0110c89 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
c0110bce:	8b 15 00 30 15 c0    	mov    0xc0153000,%edx
c0110bd4:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c0110bd9:	39 c2                	cmp    %eax,%edx
c0110bdb:	7d 3d                	jge    c0110c1a <dev_stdin_read+0x66>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
c0110bdd:	8b 45 08             	mov    0x8(%ebp),%eax
c0110be0:	8d 50 01             	lea    0x1(%eax),%edx
c0110be3:	89 55 08             	mov    %edx,0x8(%ebp)
c0110be6:	8b 15 00 30 15 c0    	mov    0xc0153000,%edx
c0110bec:	89 d1                	mov    %edx,%ecx
c0110bee:	c1 f9 1f             	sar    $0x1f,%ecx
c0110bf1:	c1 e9 14             	shr    $0x14,%ecx
c0110bf4:	01 ca                	add    %ecx,%edx
c0110bf6:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c0110bfc:	29 ca                	sub    %ecx,%edx
c0110bfe:	0f b6 92 00 20 15 c0 	movzbl -0x3feae000(%edx),%edx
c0110c05:	88 10                	mov    %dl,(%eax)
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c0110c07:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0110c0b:	a1 00 30 15 c0       	mov    0xc0153000,%eax
c0110c10:	83 c0 01             	add    $0x1,%eax
c0110c13:	a3 00 30 15 c0       	mov    %eax,0xc0153000
c0110c18:	eb 6f                	jmp    c0110c89 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
            }
            else {
                wait_t __wait, *wait = &__wait;
c0110c1a:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0110c1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
                wait_current_set(wait_queue, wait, WT_KBD);
c0110c20:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c0110c25:	c7 44 24 08 04 00 00 	movl   $0x80000004,0x8(%esp)
c0110c2c:	80 
c0110c2d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110c30:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110c34:	89 04 24             	mov    %eax,(%esp)
c0110c37:	e8 11 92 ff ff       	call   c0109e4d <wait_current_set>
                local_intr_restore(intr_flag);
c0110c3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110c3f:	89 04 24             	mov    %eax,(%esp)
c0110c42:	e8 c2 fe ff ff       	call   c0110b09 <__intr_restore>

                schedule();
c0110c47:	e8 cc d4 ff ff       	call   c010e118 <schedule>

                local_intr_save(intr_flag);
c0110c4c:	e8 8e fe ff ff       	call   c0110adf <__intr_save>
c0110c51:	89 45 f0             	mov    %eax,-0x10(%ebp)
                wait_current_del(wait_queue, wait);
c0110c54:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110c57:	89 04 24             	mov    %eax,(%esp)
c0110c5a:	e8 bf 90 ff ff       	call   c0109d1e <wait_in_queue>
c0110c5f:	85 c0                	test   %eax,%eax
c0110c61:	74 14                	je     c0110c77 <dev_stdin_read+0xc3>
c0110c63:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c0110c68:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110c6b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110c6f:	89 04 24             	mov    %eax,(%esp)
c0110c72:	e8 a2 8e ff ff       	call   c0109b19 <wait_queue_del>
                if (wait->wakeup_flags == WT_KBD) {
c0110c77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110c7a:	8b 40 04             	mov    0x4(%eax),%eax
c0110c7d:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c0110c82:	75 11                	jne    c0110c95 <dev_stdin_read+0xe1>
c0110c84:	e9 45 ff ff ff       	jmp    c0110bce <dev_stdin_read+0x1a>
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c0110c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c8c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0110c8f:	0f 82 39 ff ff ff    	jb     c0110bce <dev_stdin_read+0x1a>
                }
                break;
            }
        }
    }
    local_intr_restore(intr_flag);
c0110c95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110c98:	89 04 24             	mov    %eax,(%esp)
c0110c9b:	e8 69 fe ff ff       	call   c0110b09 <__intr_restore>
    return ret;
c0110ca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110ca3:	c9                   	leave  
c0110ca4:	c3                   	ret    

c0110ca5 <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
c0110ca5:	55                   	push   %ebp
c0110ca6:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_RDONLY) {
c0110ca8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0110cac:	74 07                	je     c0110cb5 <stdin_open+0x10>
        return -E_INVAL;
c0110cae:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110cb3:	eb 05                	jmp    c0110cba <stdin_open+0x15>
    }
    return 0;
c0110cb5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110cba:	5d                   	pop    %ebp
c0110cbb:	c3                   	ret    

c0110cbc <stdin_close>:

static int
stdin_close(struct device *dev) {
c0110cbc:	55                   	push   %ebp
c0110cbd:	89 e5                	mov    %esp,%ebp
    return 0;
c0110cbf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110cc4:	5d                   	pop    %ebp
c0110cc5:	c3                   	ret    

c0110cc6 <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
c0110cc6:	55                   	push   %ebp
c0110cc7:	89 e5                	mov    %esp,%ebp
c0110cc9:	83 ec 28             	sub    $0x28,%esp
    if (!write) {
c0110ccc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0110cd0:	75 36                	jne    c0110d08 <stdin_io+0x42>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
c0110cd2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110cd5:	8b 50 0c             	mov    0xc(%eax),%edx
c0110cd8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110cdb:	8b 00                	mov    (%eax),%eax
c0110cdd:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110ce1:	89 04 24             	mov    %eax,(%esp)
c0110ce4:	e8 cb fe ff ff       	call   c0110bb4 <dev_stdin_read>
c0110ce9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110cec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110cf0:	7e 11                	jle    c0110d03 <stdin_io+0x3d>
            iob->io_resid -= ret;
c0110cf2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110cf5:	8b 50 0c             	mov    0xc(%eax),%edx
c0110cf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110cfb:	29 c2                	sub    %eax,%edx
c0110cfd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110d00:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        return ret;
c0110d03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110d06:	eb 05                	jmp    c0110d0d <stdin_io+0x47>
    }
    return -E_INVAL;
c0110d08:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110d0d:	c9                   	leave  
c0110d0e:	c3                   	ret    

c0110d0f <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
c0110d0f:	55                   	push   %ebp
c0110d10:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c0110d12:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110d17:	5d                   	pop    %ebp
c0110d18:	c3                   	ret    

c0110d19 <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
c0110d19:	55                   	push   %ebp
c0110d1a:	89 e5                	mov    %esp,%ebp
c0110d1c:	83 ec 18             	sub    $0x18,%esp
    dev->d_blocks = 0;
c0110d1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d22:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c0110d28:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d2b:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdin_open;
c0110d32:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d35:	c7 40 08 a5 0c 11 c0 	movl   $0xc0110ca5,0x8(%eax)
    dev->d_close = stdin_close;
c0110d3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d3f:	c7 40 0c bc 0c 11 c0 	movl   $0xc0110cbc,0xc(%eax)
    dev->d_io = stdin_io;
c0110d46:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d49:	c7 40 10 c6 0c 11 c0 	movl   $0xc0110cc6,0x10(%eax)
    dev->d_ioctl = stdin_ioctl;
c0110d50:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d53:	c7 40 14 0f 0d 11 c0 	movl   $0xc0110d0f,0x14(%eax)

    p_rpos = p_wpos = 0;
c0110d5a:	c7 05 04 30 15 c0 00 	movl   $0x0,0xc0153004
c0110d61:	00 00 00 
c0110d64:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c0110d69:	a3 00 30 15 c0       	mov    %eax,0xc0153000
    wait_queue_init(wait_queue);
c0110d6e:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c0110d73:	89 04 24             	mov    %eax,(%esp)
c0110d76:	e8 db 8c ff ff       	call   c0109a56 <wait_queue_init>
}
c0110d7b:	c9                   	leave  
c0110d7c:	c3                   	ret    

c0110d7d <dev_init_stdin>:

void
dev_init_stdin(void) {
c0110d7d:	55                   	push   %ebp
c0110d7e:	89 e5                	mov    %esp,%ebp
c0110d80:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0110d83:	e8 72 f8 ff ff       	call   c01105fa <dev_create_inode>
c0110d88:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110d8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110d8f:	75 1c                	jne    c0110dad <dev_init_stdin+0x30>
        panic("stdin: dev_create_node.\n");
c0110d91:	c7 44 24 08 1c 89 11 	movl   $0xc011891c,0x8(%esp)
c0110d98:	c0 
c0110d99:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c0110da0:	00 
c0110da1:	c7 04 24 35 89 11 c0 	movl   $0xc0118935,(%esp)
c0110da8:	e8 1b 01 ff ff       	call   c0100ec8 <__panic>
    }
    stdin_device_init(vop_info(node, device));
c0110dad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110db0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110db3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110db7:	74 0d                	je     c0110dc6 <dev_init_stdin+0x49>
c0110db9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110dbc:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110dbf:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110dc4:	74 24                	je     c0110dea <dev_init_stdin+0x6d>
c0110dc6:	c7 44 24 0c 50 89 11 	movl   $0xc0118950,0xc(%esp)
c0110dcd:	c0 
c0110dce:	c7 44 24 08 83 89 11 	movl   $0xc0118983,0x8(%esp)
c0110dd5:	c0 
c0110dd6:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c0110ddd:	00 
c0110dde:	c7 04 24 35 89 11 c0 	movl   $0xc0118935,(%esp)
c0110de5:	e8 de 00 ff ff       	call   c0100ec8 <__panic>
c0110dea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110ded:	89 04 24             	mov    %eax,(%esp)
c0110df0:	e8 24 ff ff ff       	call   c0110d19 <stdin_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
c0110df5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110dfc:	00 
c0110dfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e00:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110e04:	c7 04 24 98 89 11 c0 	movl   $0xc0118998,(%esp)
c0110e0b:	e8 6c e6 ff ff       	call   c010f47c <vfs_add_dev>
c0110e10:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110e13:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110e17:	74 23                	je     c0110e3c <dev_init_stdin+0xbf>
        panic("stdin: vfs_add_dev: %e.\n", ret);
c0110e19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110e1c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110e20:	c7 44 24 08 9e 89 11 	movl   $0xc011899e,0x8(%esp)
c0110e27:	c0 
c0110e28:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
c0110e2f:	00 
c0110e30:	c7 04 24 35 89 11 c0 	movl   $0xc0118935,(%esp)
c0110e37:	e8 8c 00 ff ff       	call   c0100ec8 <__panic>
    }
}
c0110e3c:	c9                   	leave  
c0110e3d:	c3                   	ret    

c0110e3e <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
c0110e3e:	55                   	push   %ebp
c0110e3f:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_WRONLY) {
c0110e41:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0110e45:	74 07                	je     c0110e4e <stdout_open+0x10>
        return -E_INVAL;
c0110e47:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110e4c:	eb 05                	jmp    c0110e53 <stdout_open+0x15>
    }
    return 0;
c0110e4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110e53:	5d                   	pop    %ebp
c0110e54:	c3                   	ret    

c0110e55 <stdout_close>:

static int
stdout_close(struct device *dev) {
c0110e55:	55                   	push   %ebp
c0110e56:	89 e5                	mov    %esp,%ebp
    return 0;
c0110e58:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110e5d:	5d                   	pop    %ebp
c0110e5e:	c3                   	ret    

c0110e5f <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
c0110e5f:	55                   	push   %ebp
c0110e60:	89 e5                	mov    %esp,%ebp
c0110e62:	83 ec 28             	sub    $0x28,%esp
    if (write) {
c0110e65:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0110e69:	74 41                	je     c0110eac <stdout_io+0x4d>
        char *data = iob->io_base;
c0110e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e6e:	8b 00                	mov    (%eax),%eax
c0110e70:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; iob->io_resid != 0; iob->io_resid --) {
c0110e73:	eb 26                	jmp    c0110e9b <stdout_io+0x3c>
            cputchar(*data ++);
c0110e75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e78:	8d 50 01             	lea    0x1(%eax),%edx
c0110e7b:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0110e7e:	0f b6 00             	movzbl (%eax),%eax
c0110e81:	0f be c0             	movsbl %al,%eax
c0110e84:	89 04 24             	mov    %eax,(%esp)
c0110e87:	e8 ff f4 fe ff       	call   c010038b <cputchar>

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
    if (write) {
        char *data = iob->io_base;
        for (; iob->io_resid != 0; iob->io_resid --) {
c0110e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e8f:	8b 40 0c             	mov    0xc(%eax),%eax
c0110e92:	8d 50 ff             	lea    -0x1(%eax),%edx
c0110e95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e98:	89 50 0c             	mov    %edx,0xc(%eax)
c0110e9b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e9e:	8b 40 0c             	mov    0xc(%eax),%eax
c0110ea1:	85 c0                	test   %eax,%eax
c0110ea3:	75 d0                	jne    c0110e75 <stdout_io+0x16>
            cputchar(*data ++);
        }
        return 0;
c0110ea5:	b8 00 00 00 00       	mov    $0x0,%eax
c0110eaa:	eb 05                	jmp    c0110eb1 <stdout_io+0x52>
    }
    return -E_INVAL;
c0110eac:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110eb1:	c9                   	leave  
c0110eb2:	c3                   	ret    

c0110eb3 <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
c0110eb3:	55                   	push   %ebp
c0110eb4:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c0110eb6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110ebb:	5d                   	pop    %ebp
c0110ebc:	c3                   	ret    

c0110ebd <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
c0110ebd:	55                   	push   %ebp
c0110ebe:	89 e5                	mov    %esp,%ebp
    dev->d_blocks = 0;
c0110ec0:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ec3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c0110ec9:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ecc:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdout_open;
c0110ed3:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ed6:	c7 40 08 3e 0e 11 c0 	movl   $0xc0110e3e,0x8(%eax)
    dev->d_close = stdout_close;
c0110edd:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ee0:	c7 40 0c 55 0e 11 c0 	movl   $0xc0110e55,0xc(%eax)
    dev->d_io = stdout_io;
c0110ee7:	8b 45 08             	mov    0x8(%ebp),%eax
c0110eea:	c7 40 10 5f 0e 11 c0 	movl   $0xc0110e5f,0x10(%eax)
    dev->d_ioctl = stdout_ioctl;
c0110ef1:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ef4:	c7 40 14 b3 0e 11 c0 	movl   $0xc0110eb3,0x14(%eax)
}
c0110efb:	5d                   	pop    %ebp
c0110efc:	c3                   	ret    

c0110efd <dev_init_stdout>:

void
dev_init_stdout(void) {
c0110efd:	55                   	push   %ebp
c0110efe:	89 e5                	mov    %esp,%ebp
c0110f00:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0110f03:	e8 f2 f6 ff ff       	call   c01105fa <dev_create_inode>
c0110f08:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110f0b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110f0f:	75 1c                	jne    c0110f2d <dev_init_stdout+0x30>
        panic("stdout: dev_create_node.\n");
c0110f11:	c7 44 24 08 b8 89 11 	movl   $0xc01189b8,0x8(%esp)
c0110f18:	c0 
c0110f19:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c0110f20:	00 
c0110f21:	c7 04 24 d2 89 11 c0 	movl   $0xc01189d2,(%esp)
c0110f28:	e8 9b ff fe ff       	call   c0100ec8 <__panic>
    }
    stdout_device_init(vop_info(node, device));
c0110f2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110f30:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110f33:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110f37:	74 0d                	je     c0110f46 <dev_init_stdout+0x49>
c0110f39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110f3c:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110f3f:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110f44:	74 24                	je     c0110f6a <dev_init_stdout+0x6d>
c0110f46:	c7 44 24 0c ec 89 11 	movl   $0xc01189ec,0xc(%esp)
c0110f4d:	c0 
c0110f4e:	c7 44 24 08 1f 8a 11 	movl   $0xc0118a1f,0x8(%esp)
c0110f55:	c0 
c0110f56:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c0110f5d:	00 
c0110f5e:	c7 04 24 d2 89 11 c0 	movl   $0xc01189d2,(%esp)
c0110f65:	e8 5e ff fe ff       	call   c0100ec8 <__panic>
c0110f6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110f6d:	89 04 24             	mov    %eax,(%esp)
c0110f70:	e8 48 ff ff ff       	call   c0110ebd <stdout_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
c0110f75:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110f7c:	00 
c0110f7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110f80:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110f84:	c7 04 24 34 8a 11 c0 	movl   $0xc0118a34,(%esp)
c0110f8b:	e8 ec e4 ff ff       	call   c010f47c <vfs_add_dev>
c0110f90:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110f93:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110f97:	74 23                	je     c0110fbc <dev_init_stdout+0xbf>
        panic("stdout: vfs_add_dev: %e.\n", ret);
c0110f99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110f9c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110fa0:	c7 44 24 08 3b 8a 11 	movl   $0xc0118a3b,0x8(%esp)
c0110fa7:	c0 
c0110fa8:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c0110faf:	00 
c0110fb0:	c7 04 24 d2 89 11 c0 	movl   $0xc01189d2,(%esp)
c0110fb7:	e8 0c ff fe ff       	call   c0100ec8 <__panic>
    }
}
c0110fbc:	c9                   	leave  
c0110fbd:	c3                   	ret    

c0110fbe <bitmap_create>:
    WORD_TYPE *map;
};

// bitmap_create - allocate a new bitmap object.
struct bitmap *
bitmap_create(uint32_t nbits) {
c0110fbe:	55                   	push   %ebp
c0110fbf:	89 e5                	mov    %esp,%ebp
c0110fc1:	56                   	push   %esi
c0110fc2:	53                   	push   %ebx
c0110fc3:	83 ec 30             	sub    $0x30,%esp
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
c0110fc6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0110fca:	74 0b                	je     c0110fd7 <bitmap_create+0x19>
c0110fcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0110fcf:	83 c0 20             	add    $0x20,%eax
c0110fd2:	3b 45 08             	cmp    0x8(%ebp),%eax
c0110fd5:	77 24                	ja     c0110ffb <bitmap_create+0x3d>
c0110fd7:	c7 44 24 0c 58 8a 11 	movl   $0xc0118a58,0xc(%esp)
c0110fde:	c0 
c0110fdf:	c7 44 24 08 80 8a 11 	movl   $0xc0118a80,0x8(%esp)
c0110fe6:	c0 
c0110fe7:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0110fee:	00 
c0110fef:	c7 04 24 95 8a 11 c0 	movl   $0xc0118a95,(%esp)
c0110ff6:	e8 cd fe fe ff       	call   c0100ec8 <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
c0110ffb:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0111002:	e8 57 3a ff ff       	call   c0104a5e <kmalloc>
c0111007:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011100a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011100e:	75 0a                	jne    c011101a <bitmap_create+0x5c>
        return NULL;
c0111010:	b8 00 00 00 00       	mov    $0x0,%eax
c0111015:	e9 43 01 00 00       	jmp    c011115d <bitmap_create+0x19f>
    }

    uint32_t nwords = ROUNDUP_DIV(nbits, WORD_BITS);
c011101a:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
c0111021:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111024:	8b 55 08             	mov    0x8(%ebp),%edx
c0111027:	01 d0                	add    %edx,%eax
c0111029:	83 e8 01             	sub    $0x1,%eax
c011102c:	ba 00 00 00 00       	mov    $0x0,%edx
c0111031:	f7 75 ec             	divl   -0x14(%ebp)
c0111034:	89 45 e8             	mov    %eax,-0x18(%ebp)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
c0111037:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011103a:	c1 e0 02             	shl    $0x2,%eax
c011103d:	89 04 24             	mov    %eax,(%esp)
c0111040:	e8 19 3a ff ff       	call   c0104a5e <kmalloc>
c0111045:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111048:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011104c:	75 15                	jne    c0111063 <bitmap_create+0xa5>
        kfree(bitmap);
c011104e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111051:	89 04 24             	mov    %eax,(%esp)
c0111054:	e8 20 3a ff ff       	call   c0104a79 <kfree>
        return NULL;
c0111059:	b8 00 00 00 00       	mov    $0x0,%eax
c011105e:	e9 fa 00 00 00       	jmp    c011115d <bitmap_create+0x19f>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
c0111063:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111066:	8b 55 08             	mov    0x8(%ebp),%edx
c0111069:	89 10                	mov    %edx,(%eax)
c011106b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011106e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111071:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
c0111074:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111077:	c1 e0 02             	shl    $0x2,%eax
c011107a:	89 44 24 08          	mov    %eax,0x8(%esp)
c011107e:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
c0111085:	ff 
c0111086:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111089:	89 04 24             	mov    %eax,(%esp)
c011108c:	e8 9e 3e 00 00       	call   c0114f2f <memset>
c0111091:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111094:	89 42 08             	mov    %eax,0x8(%edx)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
c0111097:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011109a:	c1 e0 05             	shl    $0x5,%eax
c011109d:	3b 45 08             	cmp    0x8(%ebp),%eax
c01110a0:	0f 84 b4 00 00 00    	je     c011115a <bitmap_create+0x19c>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
c01110a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01110a9:	83 e8 01             	sub    $0x1,%eax
c01110ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01110af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01110b2:	c1 e0 05             	shl    $0x5,%eax
c01110b5:	89 c2                	mov    %eax,%edx
c01110b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01110ba:	29 d0                	sub    %edx,%eax
c01110bc:	89 45 f4             	mov    %eax,-0xc(%ebp)

        assert(nbits / WORD_BITS == ix);
c01110bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01110c2:	c1 e8 05             	shr    $0x5,%eax
c01110c5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01110c8:	74 24                	je     c01110ee <bitmap_create+0x130>
c01110ca:	c7 44 24 0c aa 8a 11 	movl   $0xc0118aaa,0xc(%esp)
c01110d1:	c0 
c01110d2:	c7 44 24 08 80 8a 11 	movl   $0xc0118a80,0x8(%esp)
c01110d9:	c0 
c01110da:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c01110e1:	00 
c01110e2:	c7 04 24 95 8a 11 c0 	movl   $0xc0118a95,(%esp)
c01110e9:	e8 da fd fe ff       	call   c0100ec8 <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
c01110ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01110f2:	74 06                	je     c01110fa <bitmap_create+0x13c>
c01110f4:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c01110f8:	76 24                	jbe    c011111e <bitmap_create+0x160>
c01110fa:	c7 44 24 0c c4 8a 11 	movl   $0xc0118ac4,0xc(%esp)
c0111101:	c0 
c0111102:	c7 44 24 08 80 8a 11 	movl   $0xc0118a80,0x8(%esp)
c0111109:	c0 
c011110a:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
c0111111:	00 
c0111112:	c7 04 24 95 8a 11 c0 	movl   $0xc0118a95,(%esp)
c0111119:	e8 aa fd fe ff       	call   c0100ec8 <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
c011111e:	eb 34                	jmp    c0111154 <bitmap_create+0x196>
            bitmap->map[ix] ^= (1 << overbits);
c0111120:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111123:	8b 40 08             	mov    0x8(%eax),%eax
c0111126:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0111129:	c1 e2 02             	shl    $0x2,%edx
c011112c:	01 c2                	add    %eax,%edx
c011112e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111131:	8b 40 08             	mov    0x8(%eax),%eax
c0111134:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0111137:	c1 e1 02             	shl    $0x2,%ecx
c011113a:	01 c8                	add    %ecx,%eax
c011113c:	8b 18                	mov    (%eax),%ebx
c011113e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111141:	be 01 00 00 00       	mov    $0x1,%esi
c0111146:	89 c1                	mov    %eax,%ecx
c0111148:	d3 e6                	shl    %cl,%esi
c011114a:	89 f0                	mov    %esi,%eax
c011114c:	31 d8                	xor    %ebx,%eax
c011114e:	89 02                	mov    %eax,(%edx)
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;

        assert(nbits / WORD_BITS == ix);
        assert(overbits > 0 && overbits < WORD_BITS);

        for (; overbits < WORD_BITS; overbits ++) {
c0111150:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111154:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111158:	76 c6                	jbe    c0111120 <bitmap_create+0x162>
            bitmap->map[ix] ^= (1 << overbits);
        }
    }
    return bitmap;
c011115a:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c011115d:	83 c4 30             	add    $0x30,%esp
c0111160:	5b                   	pop    %ebx
c0111161:	5e                   	pop    %esi
c0111162:	5d                   	pop    %ebp
c0111163:	c3                   	ret    

c0111164 <bitmap_alloc>:

// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
c0111164:	55                   	push   %ebp
c0111165:	89 e5                	mov    %esp,%ebp
c0111167:	83 ec 38             	sub    $0x38,%esp
    WORD_TYPE *map = bitmap->map;
c011116a:	8b 45 08             	mov    0x8(%ebp),%eax
c011116d:	8b 40 08             	mov    0x8(%eax),%eax
c0111170:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t ix, offset, nwords = bitmap->nwords;
c0111173:	8b 45 08             	mov    0x8(%ebp),%eax
c0111176:	8b 40 04             	mov    0x4(%eax),%eax
c0111179:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (ix = 0; ix < nwords; ix ++) {
c011117c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111183:	e9 bb 00 00 00       	jmp    c0111243 <bitmap_alloc+0xdf>
        if (map[ix] != 0) {
c0111188:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011118b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111192:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111195:	01 d0                	add    %edx,%eax
c0111197:	8b 00                	mov    (%eax),%eax
c0111199:	85 c0                	test   %eax,%eax
c011119b:	0f 84 9e 00 00 00    	je     c011123f <bitmap_alloc+0xdb>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c01111a1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01111a8:	eb 6b                	jmp    c0111215 <bitmap_alloc+0xb1>
                WORD_TYPE mask = (1 << offset);
c01111aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01111ad:	ba 01 00 00 00       	mov    $0x1,%edx
c01111b2:	89 c1                	mov    %eax,%ecx
c01111b4:	d3 e2                	shl    %cl,%edx
c01111b6:	89 d0                	mov    %edx,%eax
c01111b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (map[ix] & mask) {
c01111bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01111be:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01111c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01111c8:	01 d0                	add    %edx,%eax
c01111ca:	8b 00                	mov    (%eax),%eax
c01111cc:	23 45 e4             	and    -0x1c(%ebp),%eax
c01111cf:	85 c0                	test   %eax,%eax
c01111d1:	74 3e                	je     c0111211 <bitmap_alloc+0xad>
                    map[ix] ^= mask;
c01111d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01111d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01111dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01111e0:	01 c2                	add    %eax,%edx
c01111e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01111e5:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c01111ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01111ef:	01 c8                	add    %ecx,%eax
c01111f1:	8b 00                	mov    (%eax),%eax
c01111f3:	33 45 e4             	xor    -0x1c(%ebp),%eax
c01111f6:	89 02                	mov    %eax,(%edx)
                    *index_store = ix * WORD_BITS + offset;
c01111f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01111fb:	c1 e0 05             	shl    $0x5,%eax
c01111fe:	89 c2                	mov    %eax,%edx
c0111200:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111203:	01 c2                	add    %eax,%edx
c0111205:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111208:	89 10                	mov    %edx,(%eax)
                    return 0;
c011120a:	b8 00 00 00 00       	mov    $0x0,%eax
c011120f:	eb 43                	jmp    c0111254 <bitmap_alloc+0xf0>
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
        if (map[ix] != 0) {
            for (offset = 0; offset < WORD_BITS; offset ++) {
c0111211:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111215:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0111219:	76 8f                	jbe    c01111aa <bitmap_alloc+0x46>
                    map[ix] ^= mask;
                    *index_store = ix * WORD_BITS + offset;
                    return 0;
                }
            }
            assert(0);
c011121b:	c7 44 24 0c e9 8a 11 	movl   $0xc0118ae9,0xc(%esp)
c0111222:	c0 
c0111223:	c7 44 24 08 80 8a 11 	movl   $0xc0118a80,0x8(%esp)
c011122a:	c0 
c011122b:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c0111232:	00 
c0111233:	c7 04 24 95 8a 11 c0 	movl   $0xc0118a95,(%esp)
c011123a:	e8 89 fc fe ff       	call   c0100ec8 <__panic>
// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
c011123f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111243:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111246:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111249:	0f 82 39 ff ff ff    	jb     c0111188 <bitmap_alloc+0x24>
                }
            }
            assert(0);
        }
    }
    return -E_NO_MEM;
c011124f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0111254:	c9                   	leave  
c0111255:	c3                   	ret    

c0111256 <bitmap_translate>:

// bitmap_translate - according index, get the related word and mask
static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
c0111256:	55                   	push   %ebp
c0111257:	89 e5                	mov    %esp,%ebp
c0111259:	83 ec 28             	sub    $0x28,%esp
    assert(index < bitmap->nbits);
c011125c:	8b 45 08             	mov    0x8(%ebp),%eax
c011125f:	8b 00                	mov    (%eax),%eax
c0111261:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0111264:	77 24                	ja     c011128a <bitmap_translate+0x34>
c0111266:	c7 44 24 0c eb 8a 11 	movl   $0xc0118aeb,0xc(%esp)
c011126d:	c0 
c011126e:	c7 44 24 08 80 8a 11 	movl   $0xc0118a80,0x8(%esp)
c0111275:	c0 
c0111276:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c011127d:	00 
c011127e:	c7 04 24 95 8a 11 c0 	movl   $0xc0118a95,(%esp)
c0111285:	e8 3e fc fe ff       	call   c0100ec8 <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
c011128a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011128d:	c1 e8 05             	shr    $0x5,%eax
c0111290:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111293:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111296:	83 e0 1f             	and    $0x1f,%eax
c0111299:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *word = bitmap->map + ix;
c011129c:	8b 45 08             	mov    0x8(%ebp),%eax
c011129f:	8b 40 08             	mov    0x8(%eax),%eax
c01112a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01112a5:	c1 e2 02             	shl    $0x2,%edx
c01112a8:	01 c2                	add    %eax,%edx
c01112aa:	8b 45 10             	mov    0x10(%ebp),%eax
c01112ad:	89 10                	mov    %edx,(%eax)
    *mask = (1 << offset);
c01112af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01112b2:	ba 01 00 00 00       	mov    $0x1,%edx
c01112b7:	89 c1                	mov    %eax,%ecx
c01112b9:	d3 e2                	shl    %cl,%edx
c01112bb:	89 d0                	mov    %edx,%eax
c01112bd:	89 c2                	mov    %eax,%edx
c01112bf:	8b 45 14             	mov    0x14(%ebp),%eax
c01112c2:	89 10                	mov    %edx,(%eax)
}
c01112c4:	c9                   	leave  
c01112c5:	c3                   	ret    

c01112c6 <bitmap_test>:

// bitmap_test - according index, get the related value (0 OR 1) in the bitmap
bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
c01112c6:	55                   	push   %ebp
c01112c7:	89 e5                	mov    %esp,%ebp
c01112c9:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c01112cc:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01112cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01112d3:	8d 45 f4             	lea    -0xc(%ebp),%eax
c01112d6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01112da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01112dd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01112e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01112e4:	89 04 24             	mov    %eax,(%esp)
c01112e7:	e8 6a ff ff ff       	call   c0111256 <bitmap_translate>
    return (*word & mask);
c01112ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01112ef:	8b 10                	mov    (%eax),%edx
c01112f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01112f4:	21 d0                	and    %edx,%eax
}
c01112f6:	c9                   	leave  
c01112f7:	c3                   	ret    

c01112f8 <bitmap_free>:

// bitmap_free - according index, set related bit to 1
void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
c01112f8:	55                   	push   %ebp
c01112f9:	89 e5                	mov    %esp,%ebp
c01112fb:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c01112fe:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111301:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111305:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0111308:	89 44 24 08          	mov    %eax,0x8(%esp)
c011130c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011130f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111313:	8b 45 08             	mov    0x8(%ebp),%eax
c0111316:	89 04 24             	mov    %eax,(%esp)
c0111319:	e8 38 ff ff ff       	call   c0111256 <bitmap_translate>
    assert(!(*word & mask));
c011131e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111321:	8b 10                	mov    (%eax),%edx
c0111323:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111326:	21 d0                	and    %edx,%eax
c0111328:	85 c0                	test   %eax,%eax
c011132a:	74 24                	je     c0111350 <bitmap_free+0x58>
c011132c:	c7 44 24 0c 01 8b 11 	movl   $0xc0118b01,0xc(%esp)
c0111333:	c0 
c0111334:	c7 44 24 08 80 8a 11 	movl   $0xc0118a80,0x8(%esp)
c011133b:	c0 
c011133c:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111343:	00 
c0111344:	c7 04 24 95 8a 11 c0 	movl   $0xc0118a95,(%esp)
c011134b:	e8 78 fb fe ff       	call   c0100ec8 <__panic>
    *word |= mask;
c0111350:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111353:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111356:	8b 0a                	mov    (%edx),%ecx
c0111358:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011135b:	09 ca                	or     %ecx,%edx
c011135d:	89 10                	mov    %edx,(%eax)
}
c011135f:	c9                   	leave  
c0111360:	c3                   	ret    

c0111361 <bitmap_destroy>:

// bitmap_destroy - free memory contains bitmap
void
bitmap_destroy(struct bitmap *bitmap) {
c0111361:	55                   	push   %ebp
c0111362:	89 e5                	mov    %esp,%ebp
c0111364:	83 ec 18             	sub    $0x18,%esp
    kfree(bitmap->map);
c0111367:	8b 45 08             	mov    0x8(%ebp),%eax
c011136a:	8b 40 08             	mov    0x8(%eax),%eax
c011136d:	89 04 24             	mov    %eax,(%esp)
c0111370:	e8 04 37 ff ff       	call   c0104a79 <kfree>
    kfree(bitmap);
c0111375:	8b 45 08             	mov    0x8(%ebp),%eax
c0111378:	89 04 24             	mov    %eax,(%esp)
c011137b:	e8 f9 36 ff ff       	call   c0104a79 <kfree>
}
c0111380:	c9                   	leave  
c0111381:	c3                   	ret    

c0111382 <bitmap_getdata>:

// bitmap_getdata - return bitmap->map, return the length of bits to len_store
void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
c0111382:	55                   	push   %ebp
c0111383:	89 e5                	mov    %esp,%ebp
    if (len_store != NULL) {
c0111385:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0111389:	74 12                	je     c011139d <bitmap_getdata+0x1b>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
c011138b:	8b 45 08             	mov    0x8(%ebp),%eax
c011138e:	8b 40 04             	mov    0x4(%eax),%eax
c0111391:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111398:	8b 45 0c             	mov    0xc(%ebp),%eax
c011139b:	89 10                	mov    %edx,(%eax)
    }
    return bitmap->map;
c011139d:	8b 45 08             	mov    0x8(%ebp),%eax
c01113a0:	8b 40 08             	mov    0x8(%eax),%eax
}
c01113a3:	5d                   	pop    %ebp
c01113a4:	c3                   	ret    

c01113a5 <sfs_init>:
 *
 * CALL GRAPH:
 *   kern_init-->fs_init-->sfs_init
 */
void
sfs_init(void) {
c01113a5:	55                   	push   %ebp
c01113a6:	89 e5                	mov    %esp,%ebp
c01113a8:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
c01113ab:	c7 04 24 11 8b 11 c0 	movl   $0xc0118b11,(%esp)
c01113b2:	e8 d6 08 00 00       	call   c0111c8d <sfs_mount>
c01113b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01113ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01113be:	74 23                	je     c01113e3 <sfs_init+0x3e>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
c01113c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01113c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01113c7:	c7 44 24 08 17 8b 11 	movl   $0xc0118b17,0x8(%esp)
c01113ce:	c0 
c01113cf:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c01113d6:	00 
c01113d7:	c7 04 24 34 8b 11 c0 	movl   $0xc0118b34,(%esp)
c01113de:	e8 e5 fa fe ff       	call   c0100ec8 <__panic>
    }
}
c01113e3:	c9                   	leave  
c01113e4:	c3                   	ret    

c01113e5 <sfs_sync>:

/*
 * sfs_sync - sync sfs's superblock and freemap in memroy into disk
 */
static int
sfs_sync(struct fs *fs) {
c01113e5:	55                   	push   %ebp
c01113e6:	89 e5                	mov    %esp,%ebp
c01113e8:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c01113eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01113ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01113f1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01113f5:	74 0a                	je     c0111401 <sfs_sync+0x1c>
c01113f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01113fa:	8b 40 6c             	mov    0x6c(%eax),%eax
c01113fd:	85 c0                	test   %eax,%eax
c01113ff:	74 24                	je     c0111425 <sfs_sync+0x40>
c0111401:	c7 44 24 0c 48 8b 11 	movl   $0xc0118b48,0xc(%esp)
c0111408:	c0 
c0111409:	c7 44 24 08 71 8b 11 	movl   $0xc0118b71,0x8(%esp)
c0111410:	c0 
c0111411:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0111418:	00 
c0111419:	c7 04 24 86 8b 11 c0 	movl   $0xc0118b86,(%esp)
c0111420:	e8 a3 fa fe ff       	call   c0100ec8 <__panic>
c0111425:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111428:	89 45 ec             	mov    %eax,-0x14(%ebp)
    lock_sfs_fs(sfs);
c011142b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011142e:	89 04 24             	mov    %eax,(%esp)
c0111431:	e8 47 2f 00 00       	call   c011437d <lock_sfs_fs>
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
c0111436:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111439:	83 c0 60             	add    $0x60,%eax
c011143c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011143f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111442:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0111445:	eb 74                	jmp    c01114bb <sfs_sync+0xd6>
            struct sfs_inode *sin = le2sin(le, inode_link);
c0111447:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011144a:	83 e8 1c             	sub    $0x1c,%eax
c011144d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vop_fsync(info2node(sin, sfs_inode));
c0111450:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111453:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0111456:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c011145a:	74 17                	je     c0111473 <sfs_sync+0x8e>
c011145c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011145f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111462:	85 c0                	test   %eax,%eax
c0111464:	74 0d                	je     c0111473 <sfs_sync+0x8e>
c0111466:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111469:	8b 40 3c             	mov    0x3c(%eax),%eax
c011146c:	8b 40 18             	mov    0x18(%eax),%eax
c011146f:	85 c0                	test   %eax,%eax
c0111471:	75 24                	jne    c0111497 <sfs_sync+0xb2>
c0111473:	c7 44 24 0c 9c 8b 11 	movl   $0xc0118b9c,0xc(%esp)
c011147a:	c0 
c011147b:	c7 44 24 08 71 8b 11 	movl   $0xc0118b71,0x8(%esp)
c0111482:	c0 
c0111483:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
c011148a:	00 
c011148b:	c7 04 24 86 8b 11 c0 	movl   $0xc0118b86,(%esp)
c0111492:	e8 31 fa fe ff       	call   c0100ec8 <__panic>
c0111497:	c7 44 24 04 ea 8b 11 	movl   $0xc0118bea,0x4(%esp)
c011149e:	c0 
c011149f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01114a2:	89 04 24             	mov    %eax,(%esp)
c01114a5:	e8 db d8 ff ff       	call   c010ed85 <inode_check>
c01114aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01114ad:	8b 40 3c             	mov    0x3c(%eax),%eax
c01114b0:	8b 40 18             	mov    0x18(%eax),%eax
c01114b3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01114b6:	89 14 24             	mov    %edx,(%esp)
c01114b9:	ff d0                	call   *%eax
c01114bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01114be:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01114c1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01114c4:	8b 40 04             	mov    0x4(%eax),%eax
sfs_sync(struct fs *fs) {
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    lock_sfs_fs(sfs);
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
        while ((le = list_next(le)) != list) {
c01114c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01114ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01114cd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01114d0:	0f 85 71 ff ff ff    	jne    c0111447 <sfs_sync+0x62>
            struct sfs_inode *sin = le2sin(le, inode_link);
            vop_fsync(info2node(sin, sfs_inode));
        }
    }
    unlock_sfs_fs(sfs);
c01114d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01114d9:	89 04 24             	mov    %eax,(%esp)
c01114dc:	e8 c8 2e 00 00       	call   c01143a9 <unlock_sfs_fs>

    int ret;
    if (sfs->super_dirty) {
c01114e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01114e4:	8b 40 34             	mov    0x34(%eax),%eax
c01114e7:	85 c0                	test   %eax,%eax
c01114e9:	74 50                	je     c011153b <sfs_sync+0x156>
        sfs->super_dirty = 0;
c01114eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01114ee:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        if ((ret = sfs_sync_super(sfs)) != 0) {
c01114f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01114f8:	89 04 24             	mov    %eax,(%esp)
c01114fb:	e8 0f 2d 00 00       	call   c011420f <sfs_sync_super>
c0111500:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111503:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111507:	74 0f                	je     c0111518 <sfs_sync+0x133>
            sfs->super_dirty = 1;
c0111509:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011150c:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111513:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111516:	eb 28                	jmp    c0111540 <sfs_sync+0x15b>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
c0111518:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011151b:	89 04 24             	mov    %eax,(%esp)
c011151e:	e8 78 2d 00 00       	call   c011429b <sfs_sync_freemap>
c0111523:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111526:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011152a:	74 0f                	je     c011153b <sfs_sync+0x156>
            sfs->super_dirty = 1;
c011152c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011152f:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111536:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111539:	eb 05                	jmp    c0111540 <sfs_sync+0x15b>
        }
    }
    return 0;
c011153b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111540:	c9                   	leave  
c0111541:	c3                   	ret    

c0111542 <sfs_get_root>:

/*
 * sfs_get_root - get the root directory inode  from disk (SFS_BLKN_ROOT,1)
 */
static struct inode *
sfs_get_root(struct fs *fs) {
c0111542:	55                   	push   %ebp
c0111543:	89 e5                	mov    %esp,%ebp
c0111545:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
c0111548:	8b 45 08             	mov    0x8(%ebp),%eax
c011154b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011154e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111552:	74 0a                	je     c011155e <sfs_get_root+0x1c>
c0111554:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111557:	8b 40 6c             	mov    0x6c(%eax),%eax
c011155a:	85 c0                	test   %eax,%eax
c011155c:	74 24                	je     c0111582 <sfs_get_root+0x40>
c011155e:	c7 44 24 0c 48 8b 11 	movl   $0xc0118b48,0xc(%esp)
c0111565:	c0 
c0111566:	c7 44 24 08 71 8b 11 	movl   $0xc0118b71,0x8(%esp)
c011156d:	c0 
c011156e:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
c0111575:	00 
c0111576:	c7 04 24 86 8b 11 c0 	movl   $0xc0118b86,(%esp)
c011157d:	e8 46 f9 fe ff       	call   c0100ec8 <__panic>
c0111582:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111585:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011158c:	00 
c011158d:	8d 55 ec             	lea    -0x14(%ebp),%edx
c0111590:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111594:	89 04 24             	mov    %eax,(%esp)
c0111597:	e8 e1 0b 00 00       	call   c011217d <sfs_load_inode>
c011159c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011159f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01115a3:	74 23                	je     c01115c8 <sfs_get_root+0x86>
        panic("load sfs root failed: %e", ret);
c01115a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01115a8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01115ac:	c7 44 24 08 f0 8b 11 	movl   $0xc0118bf0,0x8(%esp)
c01115b3:	c0 
c01115b4:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c01115bb:	00 
c01115bc:	c7 04 24 86 8b 11 c0 	movl   $0xc0118b86,(%esp)
c01115c3:	e8 00 f9 fe ff       	call   c0100ec8 <__panic>
    }
    return node;
c01115c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c01115cb:	c9                   	leave  
c01115cc:	c3                   	ret    

c01115cd <sfs_unmount>:

/*
 * sfs_unmount - unmount sfs, and free the memorys contain sfs->freemap/sfs_buffer/hash_liskt and sfs itself.
 */
static int
sfs_unmount(struct fs *fs) {
c01115cd:	55                   	push   %ebp
c01115ce:	89 e5                	mov    %esp,%ebp
c01115d0:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c01115d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01115d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01115d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01115dd:	74 0a                	je     c01115e9 <sfs_unmount+0x1c>
c01115df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01115e2:	8b 40 6c             	mov    0x6c(%eax),%eax
c01115e5:	85 c0                	test   %eax,%eax
c01115e7:	74 24                	je     c011160d <sfs_unmount+0x40>
c01115e9:	c7 44 24 0c 48 8b 11 	movl   $0xc0118b48,0xc(%esp)
c01115f0:	c0 
c01115f1:	c7 44 24 08 71 8b 11 	movl   $0xc0118b71,0x8(%esp)
c01115f8:	c0 
c01115f9:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0111600:	00 
c0111601:	c7 04 24 86 8b 11 c0 	movl   $0xc0118b86,(%esp)
c0111608:	e8 bb f8 fe ff       	call   c0100ec8 <__panic>
c011160d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111610:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!list_empty(&(sfs->inode_list))) {
c0111613:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111616:	83 c0 60             	add    $0x60,%eax
c0111619:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c011161c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011161f:	8b 40 04             	mov    0x4(%eax),%eax
c0111622:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0111625:	0f 94 c0             	sete   %al
c0111628:	0f b6 c0             	movzbl %al,%eax
c011162b:	85 c0                	test   %eax,%eax
c011162d:	75 07                	jne    c0111636 <sfs_unmount+0x69>
        return -E_BUSY;
c011162f:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c0111634:	eb 68                	jmp    c011169e <sfs_unmount+0xd1>
    }
    assert(!sfs->super_dirty);
c0111636:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111639:	8b 40 34             	mov    0x34(%eax),%eax
c011163c:	85 c0                	test   %eax,%eax
c011163e:	74 24                	je     c0111664 <sfs_unmount+0x97>
c0111640:	c7 44 24 0c 09 8c 11 	movl   $0xc0118c09,0xc(%esp)
c0111647:	c0 
c0111648:	c7 44 24 08 71 8b 11 	movl   $0xc0118b71,0x8(%esp)
c011164f:	c0 
c0111650:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c0111657:	00 
c0111658:	c7 04 24 86 8b 11 c0 	movl   $0xc0118b86,(%esp)
c011165f:	e8 64 f8 fe ff       	call   c0100ec8 <__panic>
    bitmap_destroy(sfs->freemap);
c0111664:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111667:	8b 40 30             	mov    0x30(%eax),%eax
c011166a:	89 04 24             	mov    %eax,(%esp)
c011166d:	e8 ef fc ff ff       	call   c0111361 <bitmap_destroy>
    kfree(sfs->sfs_buffer);
c0111672:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111675:	8b 40 38             	mov    0x38(%eax),%eax
c0111678:	89 04 24             	mov    %eax,(%esp)
c011167b:	e8 f9 33 ff ff       	call   c0104a79 <kfree>
    kfree(sfs->hash_list);
c0111680:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111683:	8b 40 68             	mov    0x68(%eax),%eax
c0111686:	89 04 24             	mov    %eax,(%esp)
c0111689:	e8 eb 33 ff ff       	call   c0104a79 <kfree>
    kfree(sfs);
c011168e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111691:	89 04 24             	mov    %eax,(%esp)
c0111694:	e8 e0 33 ff ff       	call   c0104a79 <kfree>
    return 0;
c0111699:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011169e:	c9                   	leave  
c011169f:	c3                   	ret    

c01116a0 <sfs_cleanup>:
 * sfs_cleanup - when sfs failed, then should call this function to sync sfs by calling sfs_sync
 *
 * NOTICE: nouse now.
 */
static void
sfs_cleanup(struct fs *fs) {
c01116a0:	55                   	push   %ebp
c01116a1:	89 e5                	mov    %esp,%ebp
c01116a3:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c01116a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01116a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01116ac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01116b0:	74 0a                	je     c01116bc <sfs_cleanup+0x1c>
c01116b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01116b5:	8b 40 6c             	mov    0x6c(%eax),%eax
c01116b8:	85 c0                	test   %eax,%eax
c01116ba:	74 24                	je     c01116e0 <sfs_cleanup+0x40>
c01116bc:	c7 44 24 0c 48 8b 11 	movl   $0xc0118b48,0xc(%esp)
c01116c3:	c0 
c01116c4:	c7 44 24 08 71 8b 11 	movl   $0xc0118b71,0x8(%esp)
c01116cb:	c0 
c01116cc:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c01116d3:	00 
c01116d4:	c7 04 24 86 8b 11 c0 	movl   $0xc0118b86,(%esp)
c01116db:	e8 e8 f7 fe ff       	call   c0100ec8 <__panic>
c01116e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01116e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
c01116e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01116e9:	8b 40 04             	mov    0x4(%eax),%eax
c01116ec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01116ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01116f2:	8b 40 08             	mov    0x8(%eax),%eax
c01116f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
c01116f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01116fb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01116fe:	89 d1                	mov    %edx,%ecx
c0111700:	29 c1                	sub    %eax,%ecx
c0111702:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111705:	8d 50 0c             	lea    0xc(%eax),%edx
c0111708:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011170b:	89 44 24 10          	mov    %eax,0x10(%esp)
c011170f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111712:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111716:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c011171a:	89 54 24 04          	mov    %edx,0x4(%esp)
c011171e:	c7 04 24 1c 8c 11 c0 	movl   $0xc0118c1c,(%esp)
c0111725:	e8 3b ec fe ff       	call   c0100365 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c011172a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111731:	eb 1d                	jmp    c0111750 <sfs_cleanup+0xb0>
        if ((ret = fsop_sync(fs)) == 0) {
c0111733:	8b 45 08             	mov    0x8(%ebp),%eax
c0111736:	8b 40 70             	mov    0x70(%eax),%eax
c0111739:	8b 55 08             	mov    0x8(%ebp),%edx
c011173c:	89 14 24             	mov    %edx,(%esp)
c011173f:	ff d0                	call   *%eax
c0111741:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111744:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111748:	75 02                	jne    c011174c <sfs_cleanup+0xac>
            break;
c011174a:	eb 0a                	jmp    c0111756 <sfs_cleanup+0xb6>
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c011174c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111750:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111754:	7e dd                	jle    c0111733 <sfs_cleanup+0x93>
        if ((ret = fsop_sync(fs)) == 0) {
            break;
        }
    }
    if (ret != 0) {
c0111756:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011175a:	74 2d                	je     c0111789 <sfs_cleanup+0xe9>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
c011175c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011175f:	8d 50 0c             	lea    0xc(%eax),%edx
c0111762:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111765:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111769:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011176d:	c7 44 24 08 3b 8c 11 	movl   $0xc0118c3b,0x8(%esp)
c0111774:	c0 
c0111775:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c011177c:	00 
c011177d:	c7 04 24 86 8b 11 c0 	movl   $0xc0118b86,(%esp)
c0111784:	e8 ab f7 fe ff       	call   c0100f34 <__warn>
    }
}
c0111789:	c9                   	leave  
c011178a:	c3                   	ret    

c011178b <sfs_init_read>:
 *
 *      (1) init iobuf
 *      (2) read dev into iobuf
 */
static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
c011178b:	55                   	push   %ebp
c011178c:	89 e5                	mov    %esp,%ebp
c011178e:	83 ec 38             	sub    $0x38,%esp
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0111791:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111794:	c1 e0 0c             	shl    $0xc,%eax
c0111797:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011179b:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01117a2:	00 
c01117a3:	8b 45 10             	mov    0x10(%ebp),%eax
c01117a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01117aa:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01117ad:	89 04 24             	mov    %eax,(%esp)
c01117b0:	e8 27 98 ff ff       	call   c010afdc <iobuf_init>
c01117b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(dev, iob, 0);
c01117b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01117bb:	8b 40 10             	mov    0x10(%eax),%eax
c01117be:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01117c5:	00 
c01117c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01117c9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01117cd:	8b 55 08             	mov    0x8(%ebp),%edx
c01117d0:	89 14 24             	mov    %edx,(%esp)
c01117d3:	ff d0                	call   *%eax
}
c01117d5:	c9                   	leave  
c01117d6:	c3                   	ret    

c01117d7 <sfs_init_freemap>:
 *
 *      (1) get data addr in bitmap
 *      (2) read dev into iobuf
 */
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
c01117d7:	55                   	push   %ebp
c01117d8:	89 e5                	mov    %esp,%ebp
c01117da:	83 ec 28             	sub    $0x28,%esp
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
c01117dd:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01117e0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01117e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01117e7:	89 04 24             	mov    %eax,(%esp)
c01117ea:	e8 93 fb ff ff       	call   c0111382 <bitmap_getdata>
c01117ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
c01117f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01117f6:	74 0f                	je     c0111807 <sfs_init_freemap+0x30>
c01117f8:	8b 45 14             	mov    0x14(%ebp),%eax
c01117fb:	c1 e0 0c             	shl    $0xc,%eax
c01117fe:	89 c2                	mov    %eax,%edx
c0111800:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111803:	39 c2                	cmp    %eax,%edx
c0111805:	74 24                	je     c011182b <sfs_init_freemap+0x54>
c0111807:	c7 44 24 0c 58 8c 11 	movl   $0xc0118c58,0xc(%esp)
c011180e:	c0 
c011180f:	c7 44 24 08 71 8b 11 	movl   $0xc0118b71,0x8(%esp)
c0111816:	c0 
c0111817:	c7 44 24 04 83 00 00 	movl   $0x83,0x4(%esp)
c011181e:	00 
c011181f:	c7 04 24 86 8b 11 c0 	movl   $0xc0118b86,(%esp)
c0111826:	e8 9d f6 fe ff       	call   c0100ec8 <__panic>
    while (nblks != 0) {
c011182b:	eb 36                	jmp    c0111863 <sfs_init_freemap+0x8c>
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
c011182d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111830:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111834:	8b 45 10             	mov    0x10(%ebp),%eax
c0111837:	89 44 24 04          	mov    %eax,0x4(%esp)
c011183b:	8b 45 08             	mov    0x8(%ebp),%eax
c011183e:	89 04 24             	mov    %eax,(%esp)
c0111841:	e8 45 ff ff ff       	call   c011178b <sfs_init_read>
c0111846:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111849:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011184d:	74 05                	je     c0111854 <sfs_init_freemap+0x7d>
            return ret;
c011184f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111852:	eb 1a                	jmp    c011186e <sfs_init_freemap+0x97>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
c0111854:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0111858:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c011185c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
    while (nblks != 0) {
c0111863:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111867:	75 c4                	jne    c011182d <sfs_init_freemap+0x56>
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
            return ret;
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
    }
    return 0;
c0111869:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011186e:	c9                   	leave  
c011186f:	c3                   	ret    

c0111870 <sfs_do_mount>:
 *
 * @dev:        the block device contains sfs file system
 * @fs_store:   the fs struct in memroy
 */
static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
c0111870:	55                   	push   %ebp
c0111871:	89 e5                	mov    %esp,%ebp
c0111873:	83 ec 78             	sub    $0x78,%esp
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
c0111876:	8b 45 08             	mov    0x8(%ebp),%eax
c0111879:	8b 40 04             	mov    0x4(%eax),%eax
c011187c:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0111881:	74 0a                	je     c011188d <sfs_do_mount+0x1d>
        return -E_NA_DEV;
c0111883:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
c0111888:	e9 fe 03 00 00       	jmp    c0111c8b <sfs_do_mount+0x41b>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
c011188d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0111894:	e8 df d5 ff ff       	call   c010ee78 <__alloc_fs>
c0111899:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011189c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01118a0:	75 0a                	jne    c01118ac <sfs_do_mount+0x3c>
        return -E_NO_MEM;
c01118a2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01118a7:	e9 df 03 00 00       	jmp    c0111c8b <sfs_do_mount+0x41b>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c01118ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01118af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01118b2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01118b6:	74 0a                	je     c01118c2 <sfs_do_mount+0x52>
c01118b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01118bb:	8b 40 6c             	mov    0x6c(%eax),%eax
c01118be:	85 c0                	test   %eax,%eax
c01118c0:	74 24                	je     c01118e6 <sfs_do_mount+0x76>
c01118c2:	c7 44 24 0c 48 8b 11 	movl   $0xc0118b48,0xc(%esp)
c01118c9:	c0 
c01118ca:	c7 44 24 08 71 8b 11 	movl   $0xc0118b71,0x8(%esp)
c01118d1:	c0 
c01118d2:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c01118d9:	00 
c01118da:	c7 04 24 86 8b 11 c0 	movl   $0xc0118b86,(%esp)
c01118e1:	e8 e2 f5 fe ff       	call   c0100ec8 <__panic>
c01118e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01118e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
    sfs->dev = dev;
c01118ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01118ef:	8b 55 08             	mov    0x8(%ebp),%edx
c01118f2:	89 50 2c             	mov    %edx,0x2c(%eax)

    int ret = -E_NO_MEM;
c01118f5:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
c01118fc:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0111903:	e8 56 31 ff ff       	call   c0104a5e <kmalloc>
c0111908:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011190b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011190e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0111911:	89 50 38             	mov    %edx,0x38(%eax)
c0111914:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111917:	8b 40 38             	mov    0x38(%eax),%eax
c011191a:	85 c0                	test   %eax,%eax
c011191c:	75 05                	jne    c0111923 <sfs_do_mount+0xb3>
        goto failed_cleanup_fs;
c011191e:	e9 5a 03 00 00       	jmp    c0111c7d <sfs_do_mount+0x40d>
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
c0111923:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111926:	89 44 24 08          	mov    %eax,0x8(%esp)
c011192a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0111931:	00 
c0111932:	8b 45 08             	mov    0x8(%ebp),%eax
c0111935:	89 04 24             	mov    %eax,(%esp)
c0111938:	e8 4e fe ff ff       	call   c011178b <sfs_init_read>
c011193d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111940:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111944:	74 05                	je     c011194b <sfs_do_mount+0xdb>
        goto failed_cleanup_sfs_buffer;
c0111946:	e9 27 03 00 00       	jmp    c0111c72 <sfs_do_mount+0x402>
    }

    ret = -E_INVAL;
c011194b:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct sfs_super *super = sfs_buffer;
c0111952:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111955:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (super->magic != SFS_MAGIC) {
c0111958:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011195b:	8b 00                	mov    (%eax),%eax
c011195d:	3d 2a be 8d 2f       	cmp    $0x2f8dbe2a,%eax
c0111962:	74 22                	je     c0111986 <sfs_do_mount+0x116>
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
c0111964:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111967:	8b 00                	mov    (%eax),%eax
c0111969:	c7 44 24 08 2a be 8d 	movl   $0x2f8dbe2a,0x8(%esp)
c0111970:	2f 
c0111971:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111975:	c7 04 24 84 8c 11 c0 	movl   $0xc0118c84,(%esp)
c011197c:	e8 e4 e9 fe ff       	call   c0100365 <cprintf>
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
c0111981:	e9 ec 02 00 00       	jmp    c0111c72 <sfs_do_mount+0x402>
    }
    if (super->blocks > dev->d_blocks) {
c0111986:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111989:	8b 50 04             	mov    0x4(%eax),%edx
c011198c:	8b 45 08             	mov    0x8(%ebp),%eax
c011198f:	8b 00                	mov    (%eax),%eax
c0111991:	39 c2                	cmp    %eax,%edx
c0111993:	76 24                	jbe    c01119b9 <sfs_do_mount+0x149>
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c0111995:	8b 45 08             	mov    0x8(%ebp),%eax
c0111998:	8b 10                	mov    (%eax),%edx
c011199a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011199d:	8b 40 04             	mov    0x4(%eax),%eax
c01119a0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01119a4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01119a8:	c7 04 24 bc 8c 11 c0 	movl   $0xc0118cbc,(%esp)
c01119af:	e8 b1 e9 fe ff       	call   c0100365 <cprintf>
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
c01119b4:	e9 b9 02 00 00       	jmp    c0111c72 <sfs_do_mount+0x402>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
c01119b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01119bc:	c6 40 2b 00          	movb   $0x0,0x2b(%eax)
    sfs->super = *super;
c01119c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01119c3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01119c6:	8b 0a                	mov    (%edx),%ecx
c01119c8:	89 08                	mov    %ecx,(%eax)
c01119ca:	8b 4a 04             	mov    0x4(%edx),%ecx
c01119cd:	89 48 04             	mov    %ecx,0x4(%eax)
c01119d0:	8b 4a 08             	mov    0x8(%edx),%ecx
c01119d3:	89 48 08             	mov    %ecx,0x8(%eax)
c01119d6:	8b 4a 0c             	mov    0xc(%edx),%ecx
c01119d9:	89 48 0c             	mov    %ecx,0xc(%eax)
c01119dc:	8b 4a 10             	mov    0x10(%edx),%ecx
c01119df:	89 48 10             	mov    %ecx,0x10(%eax)
c01119e2:	8b 4a 14             	mov    0x14(%edx),%ecx
c01119e5:	89 48 14             	mov    %ecx,0x14(%eax)
c01119e8:	8b 4a 18             	mov    0x18(%edx),%ecx
c01119eb:	89 48 18             	mov    %ecx,0x18(%eax)
c01119ee:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c01119f1:	89 48 1c             	mov    %ecx,0x1c(%eax)
c01119f4:	8b 4a 20             	mov    0x20(%edx),%ecx
c01119f7:	89 48 20             	mov    %ecx,0x20(%eax)
c01119fa:	8b 4a 24             	mov    0x24(%edx),%ecx
c01119fd:	89 48 24             	mov    %ecx,0x24(%eax)
c0111a00:	8b 52 28             	mov    0x28(%edx),%edx
c0111a03:	89 50 28             	mov    %edx,0x28(%eax)

    ret = -E_NO_MEM;
c0111a06:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
c0111a0d:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
c0111a14:	e8 45 30 ff ff       	call   c0104a5e <kmalloc>
c0111a19:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0111a1c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111a1f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0111a22:	89 50 68             	mov    %edx,0x68(%eax)
c0111a25:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111a28:	8b 40 68             	mov    0x68(%eax),%eax
c0111a2b:	85 c0                	test   %eax,%eax
c0111a2d:	75 05                	jne    c0111a34 <sfs_do_mount+0x1c4>
        goto failed_cleanup_sfs_buffer;
c0111a2f:	e9 3e 02 00 00       	jmp    c0111c72 <sfs_do_mount+0x402>
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0111a34:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111a3b:	eb 2a                	jmp    c0111a67 <sfs_do_mount+0x1f7>
        list_init(hash_list + i);
c0111a3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a40:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0111a47:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0111a4a:	01 d0                	add    %edx,%eax
c0111a4c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0111a4f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111a52:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0111a55:	89 50 04             	mov    %edx,0x4(%eax)
c0111a58:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111a5b:	8b 50 04             	mov    0x4(%eax),%edx
c0111a5e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111a61:	89 10                	mov    %edx,(%eax)
    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0111a63:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111a67:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c0111a6e:	76 cd                	jbe    c0111a3d <sfs_do_mount+0x1cd>
        list_init(hash_list + i);
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
c0111a70:	c7 45 d0 00 80 00 00 	movl   $0x8000,-0x30(%ebp)
c0111a77:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111a7a:	8b 50 04             	mov    0x4(%eax),%edx
c0111a7d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0111a80:	01 d0                	add    %edx,%eax
c0111a82:	83 e8 01             	sub    $0x1,%eax
c0111a85:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0111a88:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111a8b:	ba 00 00 00 00       	mov    $0x0,%edx
c0111a90:	f7 75 d0             	divl   -0x30(%ebp)
c0111a93:	89 d0                	mov    %edx,%eax
c0111a95:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0111a98:	29 c2                	sub    %eax,%edx
c0111a9a:	89 d0                	mov    %edx,%eax
c0111a9c:	89 45 c8             	mov    %eax,-0x38(%ebp)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
c0111a9f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0111aa2:	89 04 24             	mov    %eax,(%esp)
c0111aa5:	e8 14 f5 ff ff       	call   c0110fbe <bitmap_create>
c0111aaa:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0111aad:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111ab0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0111ab3:	89 50 30             	mov    %edx,0x30(%eax)
c0111ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111ab9:	8b 40 30             	mov    0x30(%eax),%eax
c0111abc:	85 c0                	test   %eax,%eax
c0111abe:	75 05                	jne    c0111ac5 <sfs_do_mount+0x255>
        goto failed_cleanup_hash_list;
c0111ac0:	e9 a2 01 00 00       	jmp    c0111c67 <sfs_do_mount+0x3f7>
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
c0111ac5:	c7 45 c0 00 80 00 00 	movl   $0x8000,-0x40(%ebp)
c0111acc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111acf:	8b 50 04             	mov    0x4(%eax),%edx
c0111ad2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0111ad5:	01 d0                	add    %edx,%eax
c0111ad7:	83 e8 01             	sub    $0x1,%eax
c0111ada:	ba 00 00 00 00       	mov    $0x0,%edx
c0111adf:	f7 75 c0             	divl   -0x40(%ebp)
c0111ae2:	89 45 bc             	mov    %eax,-0x44(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
c0111ae5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111ae8:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111aec:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0111aef:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111af3:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0111afa:	00 
c0111afb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0111afe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111b02:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b05:	89 04 24             	mov    %eax,(%esp)
c0111b08:	e8 ca fc ff ff       	call   c01117d7 <sfs_init_freemap>
c0111b0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111b10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111b14:	74 11                	je     c0111b27 <sfs_do_mount+0x2b7>
        goto failed_cleanup_freemap;
c0111b16:	90                   	nop
    fs->fs_cleanup = sfs_cleanup;
    *fs_store = fs;
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
c0111b17:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0111b1a:	89 04 24             	mov    %eax,(%esp)
c0111b1d:	e8 3f f8 ff ff       	call   c0111361 <bitmap_destroy>
c0111b22:	e9 40 01 00 00       	jmp    c0111c67 <sfs_do_mount+0x3f7>
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
c0111b27:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111b2a:	8b 40 04             	mov    0x4(%eax),%eax
c0111b2d:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0111b30:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c0111b37:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111b3e:	eb 1e                	jmp    c0111b5e <sfs_do_mount+0x2ee>
        if (bitmap_test(freemap, i)) {
c0111b40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b43:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111b47:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0111b4a:	89 04 24             	mov    %eax,(%esp)
c0111b4d:	e8 74 f7 ff ff       	call   c01112c6 <bitmap_test>
c0111b52:	85 c0                	test   %eax,%eax
c0111b54:	74 04                	je     c0111b5a <sfs_do_mount+0x2ea>
            unused_blocks ++;
c0111b56:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
    for (i = 0; i < freemap_size_nbits; i ++) {
c0111b5a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111b5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b61:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0111b64:	72 da                	jb     c0111b40 <sfs_do_mount+0x2d0>
        if (bitmap_test(freemap, i)) {
            unused_blocks ++;
        }
    }
    assert(unused_blocks == sfs->super.unused_blocks);
c0111b66:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111b69:	8b 40 08             	mov    0x8(%eax),%eax
c0111b6c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0111b6f:	74 24                	je     c0111b95 <sfs_do_mount+0x325>
c0111b71:	c7 44 24 0c ec 8c 11 	movl   $0xc0118cec,0xc(%esp)
c0111b78:	c0 
c0111b79:	c7 44 24 08 71 8b 11 	movl   $0xc0118b71,0x8(%esp)
c0111b80:	c0 
c0111b81:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0111b88:	00 
c0111b89:	c7 04 24 86 8b 11 c0 	movl   $0xc0118b86,(%esp)
c0111b90:	e8 33 f3 fe ff       	call   c0100ec8 <__panic>

    /* and other fields */
    sfs->super_dirty = 0;
c0111b95:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111b98:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    sem_init(&(sfs->fs_sem), 1);
c0111b9f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111ba2:	83 c0 3c             	add    $0x3c,%eax
c0111ba5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0111bac:	00 
c0111bad:	89 04 24             	mov    %eax,(%esp)
c0111bb0:	e8 52 7c ff ff       	call   c0109807 <sem_init>
    sem_init(&(sfs->io_sem), 1);
c0111bb5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111bb8:	83 c0 48             	add    $0x48,%eax
c0111bbb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0111bc2:	00 
c0111bc3:	89 04 24             	mov    %eax,(%esp)
c0111bc6:	e8 3c 7c ff ff       	call   c0109807 <sem_init>
    sem_init(&(sfs->mutex_sem), 1);
c0111bcb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111bce:	83 c0 54             	add    $0x54,%eax
c0111bd1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0111bd8:	00 
c0111bd9:	89 04 24             	mov    %eax,(%esp)
c0111bdc:	e8 26 7c ff ff       	call   c0109807 <sem_init>
    list_init(&(sfs->inode_list));
c0111be1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111be4:	83 c0 60             	add    $0x60,%eax
c0111be7:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0111bea:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0111bed:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0111bf0:	89 50 04             	mov    %edx,0x4(%eax)
c0111bf3:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0111bf6:	8b 50 04             	mov    0x4(%eax),%edx
c0111bf9:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0111bfc:	89 10                	mov    %edx,(%eax)
    cprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
c0111bfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c01:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0111c04:	89 d1                	mov    %edx,%ecx
c0111c06:	29 c1                	sub    %eax,%ecx
c0111c08:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111c0b:	8d 50 0c             	lea    0xc(%eax),%edx
c0111c0e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0111c11:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111c15:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c18:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111c1c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0111c20:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111c24:	c7 04 24 16 8d 11 c0 	movl   $0xc0118d16,(%esp)
c0111c2b:	e8 35 e7 fe ff       	call   c0100365 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);

    /* link addr of sync/get_root/unmount/cleanup funciton  fs's function pointers*/
    fs->fs_sync = sfs_sync;
c0111c30:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111c33:	c7 40 70 e5 13 11 c0 	movl   $0xc01113e5,0x70(%eax)
    fs->fs_get_root = sfs_get_root;
c0111c3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111c3d:	c7 40 74 42 15 11 c0 	movl   $0xc0111542,0x74(%eax)
    fs->fs_unmount = sfs_unmount;
c0111c44:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111c47:	c7 40 78 cd 15 11 c0 	movl   $0xc01115cd,0x78(%eax)
    fs->fs_cleanup = sfs_cleanup;
c0111c4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111c51:	c7 40 7c a0 16 11 c0 	movl   $0xc01116a0,0x7c(%eax)
    *fs_store = fs;
c0111c58:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111c5b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111c5e:	89 10                	mov    %edx,(%eax)
    return 0;
c0111c60:	b8 00 00 00 00       	mov    $0x0,%eax
c0111c65:	eb 24                	jmp    c0111c8b <sfs_do_mount+0x41b>

failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
c0111c67:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0111c6a:	89 04 24             	mov    %eax,(%esp)
c0111c6d:	e8 07 2e ff ff       	call   c0104a79 <kfree>
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
c0111c72:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111c75:	89 04 24             	mov    %eax,(%esp)
c0111c78:	e8 fc 2d ff ff       	call   c0104a79 <kfree>
failed_cleanup_fs:
    kfree(fs);
c0111c7d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111c80:	89 04 24             	mov    %eax,(%esp)
c0111c83:	e8 f1 2d ff ff       	call   c0104a79 <kfree>
    return ret;
c0111c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111c8b:	c9                   	leave  
c0111c8c:	c3                   	ret    

c0111c8d <sfs_mount>:

int
sfs_mount(const char *devname) {
c0111c8d:	55                   	push   %ebp
c0111c8e:	89 e5                	mov    %esp,%ebp
c0111c90:	83 ec 18             	sub    $0x18,%esp
    return vfs_mount(devname, sfs_do_mount);
c0111c93:	c7 44 24 04 70 18 11 	movl   $0xc0111870,0x4(%esp)
c0111c9a:	c0 
c0111c9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c9e:	89 04 24             	mov    %eax,(%esp)
c0111ca1:	e8 96 d8 ff ff       	call   c010f53c <vfs_mount>
}
c0111ca6:	c9                   	leave  
c0111ca7:	c3                   	ret    

c0111ca8 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c0111ca8:	55                   	push   %ebp
c0111ca9:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c0111cab:	8b 45 08             	mov    0x8(%ebp),%eax
c0111cae:	8b 40 30             	mov    0x30(%eax),%eax
}
c0111cb1:	5d                   	pop    %ebp
c0111cb2:	c3                   	ret    

c0111cb3 <lock_sin>:

/*
 * lock_sin - lock the process of inode Rd/Wr
 */
static void
lock_sin(struct sfs_inode *sin) {
c0111cb3:	55                   	push   %ebp
c0111cb4:	89 e5                	mov    %esp,%ebp
c0111cb6:	83 ec 18             	sub    $0x18,%esp
    down(&(sin->sem));
c0111cb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0111cbc:	83 c0 10             	add    $0x10,%eax
c0111cbf:	89 04 24             	mov    %eax,(%esp)
c0111cc2:	e8 ce 7c ff ff       	call   c0109995 <down>
}
c0111cc7:	c9                   	leave  
c0111cc8:	c3                   	ret    

c0111cc9 <unlock_sin>:

/*
 * unlock_sin - unlock the process of inode Rd/Wr
 */
static void
unlock_sin(struct sfs_inode *sin) {
c0111cc9:	55                   	push   %ebp
c0111cca:	89 e5                	mov    %esp,%ebp
c0111ccc:	83 ec 18             	sub    $0x18,%esp
    up(&(sin->sem));
c0111ccf:	8b 45 08             	mov    0x8(%ebp),%eax
c0111cd2:	83 c0 10             	add    $0x10,%eax
c0111cd5:	89 04 24             	mov    %eax,(%esp)
c0111cd8:	e8 9d 7c ff ff       	call   c010997a <up>
}
c0111cdd:	c9                   	leave  
c0111cde:	c3                   	ret    

c0111cdf <sfs_get_ops>:

/*
 * sfs_get_ops - return function addr of fs_node_dirops/sfs_node_fileops
 */
static const struct inode_ops *
sfs_get_ops(uint16_t type) {
c0111cdf:	55                   	push   %ebp
c0111ce0:	89 e5                	mov    %esp,%ebp
c0111ce2:	83 ec 28             	sub    $0x28,%esp
c0111ce5:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ce8:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    switch (type) {
c0111cec:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0111cf0:	83 f8 01             	cmp    $0x1,%eax
c0111cf3:	74 0c                	je     c0111d01 <sfs_get_ops+0x22>
c0111cf5:	83 f8 02             	cmp    $0x2,%eax
c0111cf8:	75 0e                	jne    c0111d08 <sfs_get_ops+0x29>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
c0111cfa:	b8 40 8d 11 c0       	mov    $0xc0118d40,%eax
c0111cff:	eb 2b                	jmp    c0111d2c <sfs_get_ops+0x4d>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
c0111d01:	b8 80 8d 11 c0       	mov    $0xc0118d80,%eax
c0111d06:	eb 24                	jmp    c0111d2c <sfs_get_ops+0x4d>
    }
    panic("invalid file type %d.\n", type);
c0111d08:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0111d0c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111d10:	c7 44 24 08 c0 8d 11 	movl   $0xc0118dc0,0x8(%esp)
c0111d17:	c0 
c0111d18:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c0111d1f:	00 
c0111d20:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0111d27:	e8 9c f1 fe ff       	call   c0100ec8 <__panic>
}
c0111d2c:	c9                   	leave  
c0111d2d:	c3                   	ret    

c0111d2e <sfs_hash_list>:

/*
 * sfs_hash_list - return inode entry in sfs->hash_list
 */
static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
c0111d2e:	55                   	push   %ebp
c0111d2f:	89 e5                	mov    %esp,%ebp
c0111d31:	53                   	push   %ebx
c0111d32:	83 ec 14             	sub    $0x14,%esp
    return sfs->hash_list + sin_hashfn(ino);
c0111d35:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d38:	8b 58 68             	mov    0x68(%eax),%ebx
c0111d3b:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c0111d42:	00 
c0111d43:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111d46:	89 04 24             	mov    %eax,(%esp)
c0111d49:	e8 87 26 00 00       	call   c01143d5 <hash32>
c0111d4e:	c1 e0 03             	shl    $0x3,%eax
c0111d51:	01 d8                	add    %ebx,%eax
}
c0111d53:	83 c4 14             	add    $0x14,%esp
c0111d56:	5b                   	pop    %ebx
c0111d57:	5d                   	pop    %ebp
c0111d58:	c3                   	ret    

c0111d59 <sfs_set_links>:

/*
 * sfs_set_links - link inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0111d59:	55                   	push   %ebp
c0111d5a:	89 e5                	mov    %esp,%ebp
c0111d5c:	53                   	push   %ebx
c0111d5d:	83 ec 54             	sub    $0x54,%esp
    list_add(&(sfs->inode_list), &(sin->inode_link));
c0111d60:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111d63:	83 c0 1c             	add    $0x1c,%eax
c0111d66:	8b 55 08             	mov    0x8(%ebp),%edx
c0111d69:	83 c2 60             	add    $0x60,%edx
c0111d6c:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0111d6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111d72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111d75:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111d78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d7b:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0111d7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111d81:	8b 40 04             	mov    0x4(%eax),%eax
c0111d84:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111d87:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0111d8a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0111d8d:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0111d90:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0111d93:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111d96:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111d99:	89 10                	mov    %edx,(%eax)
c0111d9b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111d9e:	8b 10                	mov    (%eax),%edx
c0111da0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111da3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0111da6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111da9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0111dac:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0111daf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111db2:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0111db5:	89 10                	mov    %edx,(%eax)
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
c0111db7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111dba:	8d 58 24             	lea    0x24(%eax),%ebx
c0111dbd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111dc0:	8b 40 04             	mov    0x4(%eax),%eax
c0111dc3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111dc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0111dca:	89 04 24             	mov    %eax,(%esp)
c0111dcd:	e8 5c ff ff ff       	call   c0111d2e <sfs_hash_list>
c0111dd2:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0111dd5:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c0111dd8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111ddb:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0111dde:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0111de1:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0111de4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0111de7:	8b 40 04             	mov    0x4(%eax),%eax
c0111dea:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0111ded:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0111df0:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0111df3:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c0111df6:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0111df9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0111dfc:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0111dff:	89 10                	mov    %edx,(%eax)
c0111e01:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0111e04:	8b 10                	mov    (%eax),%edx
c0111e06:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0111e09:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0111e0c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0111e0f:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0111e12:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0111e15:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0111e18:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0111e1b:	89 10                	mov    %edx,(%eax)
}
c0111e1d:	83 c4 54             	add    $0x54,%esp
c0111e20:	5b                   	pop    %ebx
c0111e21:	5d                   	pop    %ebp
c0111e22:	c3                   	ret    

c0111e23 <sfs_remove_links>:

/*
 * sfs_remove_links - unlink inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_remove_links(struct sfs_inode *sin) {
c0111e23:	55                   	push   %ebp
c0111e24:	89 e5                	mov    %esp,%ebp
c0111e26:	83 ec 20             	sub    $0x20,%esp
    list_del(&(sin->inode_link));
c0111e29:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e2c:	83 c0 1c             	add    $0x1c,%eax
c0111e2f:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0111e32:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0111e35:	8b 40 04             	mov    0x4(%eax),%eax
c0111e38:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0111e3b:	8b 12                	mov    (%edx),%edx
c0111e3d:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0111e40:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0111e43:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0111e46:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111e49:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0111e4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111e4f:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0111e52:	89 10                	mov    %edx,(%eax)
    list_del(&(sin->hash_link));
c0111e54:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e57:	83 c0 24             	add    $0x24,%eax
c0111e5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0111e5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111e60:	8b 40 04             	mov    0x4(%eax),%eax
c0111e63:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111e66:	8b 12                	mov    (%edx),%edx
c0111e68:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0111e6b:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0111e6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111e71:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111e74:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0111e77:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111e7a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0111e7d:	89 10                	mov    %edx,(%eax)
}
c0111e7f:	c9                   	leave  
c0111e80:	c3                   	ret    

c0111e81 <sfs_block_inuse>:

/*
 * sfs_block_inuse - check the inode with NO. ino inuse info in bitmap
 */
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
c0111e81:	55                   	push   %ebp
c0111e82:	89 e5                	mov    %esp,%ebp
c0111e84:	83 ec 28             	sub    $0x28,%esp
    if (ino != 0 && ino < sfs->super.blocks) {
c0111e87:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0111e8b:	74 2a                	je     c0111eb7 <sfs_block_inuse+0x36>
c0111e8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e90:	8b 40 04             	mov    0x4(%eax),%eax
c0111e93:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0111e96:	76 1f                	jbe    c0111eb7 <sfs_block_inuse+0x36>
        return !bitmap_test(sfs->freemap, ino);
c0111e98:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e9b:	8b 40 30             	mov    0x30(%eax),%eax
c0111e9e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111ea1:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111ea5:	89 04 24             	mov    %eax,(%esp)
c0111ea8:	e8 19 f4 ff ff       	call   c01112c6 <bitmap_test>
c0111ead:	85 c0                	test   %eax,%eax
c0111eaf:	0f 94 c0             	sete   %al
c0111eb2:	0f b6 c0             	movzbl %al,%eax
c0111eb5:	eb 2d                	jmp    c0111ee4 <sfs_block_inuse+0x63>
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
c0111eb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0111eba:	8b 40 04             	mov    0x4(%eax),%eax
c0111ebd:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111ec0:	89 54 24 10          	mov    %edx,0x10(%esp)
c0111ec4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111ec8:	c7 44 24 08 f0 8d 11 	movl   $0xc0118df0,0x8(%esp)
c0111ecf:	c0 
c0111ed0:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c0111ed7:	00 
c0111ed8:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0111edf:	e8 e4 ef fe ff       	call   c0100ec8 <__panic>
}
c0111ee4:	c9                   	leave  
c0111ee5:	c3                   	ret    

c0111ee6 <sfs_block_alloc>:

/*
 * sfs_block_alloc -  check and get a free disk block
 */
static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
c0111ee6:	55                   	push   %ebp
c0111ee7:	89 e5                	mov    %esp,%ebp
c0111ee9:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
c0111eec:	8b 45 08             	mov    0x8(%ebp),%eax
c0111eef:	8b 40 30             	mov    0x30(%eax),%eax
c0111ef2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111ef5:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111ef9:	89 04 24             	mov    %eax,(%esp)
c0111efc:	e8 63 f2 ff ff       	call   c0111164 <bitmap_alloc>
c0111f01:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111f04:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111f08:	74 08                	je     c0111f12 <sfs_block_alloc+0x2c>
        return ret;
c0111f0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111f0d:	e9 9f 00 00 00       	jmp    c0111fb1 <sfs_block_alloc+0xcb>
    }
    assert(sfs->super.unused_blocks > 0);
c0111f12:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f15:	8b 40 08             	mov    0x8(%eax),%eax
c0111f18:	85 c0                	test   %eax,%eax
c0111f1a:	75 24                	jne    c0111f40 <sfs_block_alloc+0x5a>
c0111f1c:	c7 44 24 0c 22 8e 11 	movl   $0xc0118e22,0xc(%esp)
c0111f23:	c0 
c0111f24:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0111f2b:	c0 
c0111f2c:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111f33:	00 
c0111f34:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0111f3b:	e8 88 ef fe ff       	call   c0100ec8 <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
c0111f40:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f43:	8b 40 08             	mov    0x8(%eax),%eax
c0111f46:	8d 50 ff             	lea    -0x1(%eax),%edx
c0111f49:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f4c:	89 50 08             	mov    %edx,0x8(%eax)
c0111f4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f52:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
    assert(sfs_block_inuse(sfs, *ino_store));
c0111f59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111f5c:	8b 00                	mov    (%eax),%eax
c0111f5e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f62:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f65:	89 04 24             	mov    %eax,(%esp)
c0111f68:	e8 14 ff ff ff       	call   c0111e81 <sfs_block_inuse>
c0111f6d:	85 c0                	test   %eax,%eax
c0111f6f:	75 24                	jne    c0111f95 <sfs_block_alloc+0xaf>
c0111f71:	c7 44 24 0c 54 8e 11 	movl   $0xc0118e54,0xc(%esp)
c0111f78:	c0 
c0111f79:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0111f80:	c0 
c0111f81:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0111f88:	00 
c0111f89:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0111f90:	e8 33 ef fe ff       	call   c0100ec8 <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
c0111f95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111f98:	8b 00                	mov    (%eax),%eax
c0111f9a:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111fa1:	00 
c0111fa2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111fa6:	8b 45 08             	mov    0x8(%ebp),%eax
c0111fa9:	89 04 24             	mov    %eax,(%esp)
c0111fac:	e8 46 23 00 00       	call   c01142f7 <sfs_clear_block>
}
c0111fb1:	c9                   	leave  
c0111fb2:	c3                   	ret    

c0111fb3 <sfs_block_free>:

/*
 * sfs_block_free - set related bits for ino block to 1(means free) in bitmap, add sfs->super.unused_blocks, set superblock dirty *
 */
static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
c0111fb3:	55                   	push   %ebp
c0111fb4:	89 e5                	mov    %esp,%ebp
c0111fb6:	83 ec 18             	sub    $0x18,%esp
    assert(sfs_block_inuse(sfs, ino));
c0111fb9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111fbc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111fc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0111fc3:	89 04 24             	mov    %eax,(%esp)
c0111fc6:	e8 b6 fe ff ff       	call   c0111e81 <sfs_block_inuse>
c0111fcb:	85 c0                	test   %eax,%eax
c0111fcd:	75 24                	jne    c0111ff3 <sfs_block_free+0x40>
c0111fcf:	c7 44 24 0c 75 8e 11 	movl   $0xc0118e75,0xc(%esp)
c0111fd6:	c0 
c0111fd7:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0111fde:	c0 
c0111fdf:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0111fe6:	00 
c0111fe7:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0111fee:	e8 d5 ee fe ff       	call   c0100ec8 <__panic>
    bitmap_free(sfs->freemap, ino);
c0111ff3:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ff6:	8b 40 30             	mov    0x30(%eax),%eax
c0111ff9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111ffc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112000:	89 04 24             	mov    %eax,(%esp)
c0112003:	e8 f0 f2 ff ff       	call   c01112f8 <bitmap_free>
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
c0112008:	8b 45 08             	mov    0x8(%ebp),%eax
c011200b:	8b 40 08             	mov    0x8(%eax),%eax
c011200e:	8d 50 01             	lea    0x1(%eax),%edx
c0112011:	8b 45 08             	mov    0x8(%ebp),%eax
c0112014:	89 50 08             	mov    %edx,0x8(%eax)
c0112017:	8b 45 08             	mov    0x8(%ebp),%eax
c011201a:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
}
c0112021:	c9                   	leave  
c0112022:	c3                   	ret    

c0112023 <sfs_create_inode>:

/*
 * sfs_create_inode - alloc a inode in memroy, and init din/ino/dirty/reclian_count/sem fields in sfs_inode in inode
 */
static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
c0112023:	55                   	push   %ebp
c0112024:	89 e5                	mov    %esp,%ebp
c0112026:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
c0112029:	c7 04 24 35 12 00 00 	movl   $0x1235,(%esp)
c0112030:	e8 6d ca ff ff       	call   c010eaa2 <__alloc_inode>
c0112035:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112038:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011203c:	0f 84 b5 00 00 00    	je     c01120f7 <sfs_create_inode+0xd4>
        vop_init(node, sfs_get_ops(din->type), info2fs(sfs, sfs));
c0112042:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112045:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112049:	0f b7 c0             	movzwl %ax,%eax
c011204c:	89 04 24             	mov    %eax,(%esp)
c011204f:	e8 8b fc ff ff       	call   c0111cdf <sfs_get_ops>
c0112054:	8b 55 08             	mov    0x8(%ebp),%edx
c0112057:	89 54 24 08          	mov    %edx,0x8(%esp)
c011205b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011205f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112062:	89 04 24             	mov    %eax,(%esp)
c0112065:	e8 61 ca ff ff       	call   c010eacb <inode_init>
        struct sfs_inode *sin = vop_info(node, sfs_inode);
c011206a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011206d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112070:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112074:	74 0d                	je     c0112083 <sfs_create_inode+0x60>
c0112076:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112079:	8b 40 2c             	mov    0x2c(%eax),%eax
c011207c:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0112081:	74 24                	je     c01120a7 <sfs_create_inode+0x84>
c0112083:	c7 44 24 0c 90 8e 11 	movl   $0xc0118e90,0xc(%esp)
c011208a:	c0 
c011208b:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0112092:	c0 
c0112093:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c011209a:	00 
c011209b:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c01120a2:	e8 21 ee fe ff       	call   c0100ec8 <__panic>
c01120a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01120aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
c01120ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01120b0:	8b 55 0c             	mov    0xc(%ebp),%edx
c01120b3:	89 10                	mov    %edx,(%eax)
c01120b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01120b8:	8b 55 10             	mov    0x10(%ebp),%edx
c01120bb:	89 50 04             	mov    %edx,0x4(%eax)
c01120be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01120c1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c01120c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01120cb:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
        sem_init(&(sin->sem), 1);
c01120d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01120d5:	83 c0 10             	add    $0x10,%eax
c01120d8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01120df:	00 
c01120e0:	89 04 24             	mov    %eax,(%esp)
c01120e3:	e8 1f 77 ff ff       	call   c0109807 <sem_init>
        *node_store = node;
c01120e8:	8b 45 14             	mov    0x14(%ebp),%eax
c01120eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01120ee:	89 10                	mov    %edx,(%eax)
        return 0;
c01120f0:	b8 00 00 00 00       	mov    $0x0,%eax
c01120f5:	eb 05                	jmp    c01120fc <sfs_create_inode+0xd9>
    }
    return -E_NO_MEM;
c01120f7:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c01120fc:	c9                   	leave  
c01120fd:	c3                   	ret    

c01120fe <lookup_sfs_nolock>:
 * lookup_sfs_nolock - according ino, find related inode
 *
 * NOTICE: le2sin, info2node MACRO
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
c01120fe:	55                   	push   %ebp
c01120ff:	89 e5                	mov    %esp,%ebp
c0112101:	83 ec 38             	sub    $0x38,%esp
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
c0112104:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112107:	89 44 24 04          	mov    %eax,0x4(%esp)
c011210b:	8b 45 08             	mov    0x8(%ebp),%eax
c011210e:	89 04 24             	mov    %eax,(%esp)
c0112111:	e8 18 fc ff ff       	call   c0111d2e <sfs_hash_list>
c0112116:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112119:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011211c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c011211f:	eb 3e                	jmp    c011215f <lookup_sfs_nolock+0x61>
        struct sfs_inode *sin = le2sin(le, hash_link);
c0112121:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112124:	83 e8 24             	sub    $0x24,%eax
c0112127:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (sin->ino == ino) {
c011212a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011212d:	8b 40 04             	mov    0x4(%eax),%eax
c0112130:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0112133:	75 2a                	jne    c011215f <lookup_sfs_nolock+0x61>
            node = info2node(sin, sfs_inode);
c0112135:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112138:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (vop_ref_inc(node) == 1) {
c011213b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011213e:	89 04 24             	mov    %eax,(%esp)
c0112141:	e8 37 ca ff ff       	call   c010eb7d <inode_ref_inc>
c0112146:	83 f8 01             	cmp    $0x1,%eax
c0112149:	75 0f                	jne    c011215a <lookup_sfs_nolock+0x5c>
                sin->reclaim_count ++;
c011214b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011214e:	8b 40 0c             	mov    0xc(%eax),%eax
c0112151:	8d 50 01             	lea    0x1(%eax),%edx
c0112154:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112157:	89 50 0c             	mov    %edx,0xc(%eax)
            }
            return node;
c011215a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011215d:	eb 1c                	jmp    c011217b <lookup_sfs_nolock+0x7d>
c011215f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112162:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0112165:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112168:	8b 40 04             	mov    0x4(%eax),%eax
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
    while ((le = list_next(le)) != list) {
c011216b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011216e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112171:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0112174:	75 ab                	jne    c0112121 <lookup_sfs_nolock+0x23>
                sin->reclaim_count ++;
            }
            return node;
        }
    }
    return NULL;
c0112176:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011217b:	c9                   	leave  
c011217c:	c3                   	ret    

c011217d <sfs_load_inode>:
/*
 * sfs_load_inode - If the inode isn't existed, load inode related ino disk block data into a new created inode.
 *                  If the inode is in memory alreadily, then do nothing
 */
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
c011217d:	55                   	push   %ebp
c011217e:	89 e5                	mov    %esp,%ebp
c0112180:	83 ec 38             	sub    $0x38,%esp
    lock_sfs_fs(sfs);
c0112183:	8b 45 08             	mov    0x8(%ebp),%eax
c0112186:	89 04 24             	mov    %eax,(%esp)
c0112189:	e8 ef 21 00 00       	call   c011437d <lock_sfs_fs>
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
c011218e:	8b 45 10             	mov    0x10(%ebp),%eax
c0112191:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112195:	8b 45 08             	mov    0x8(%ebp),%eax
c0112198:	89 04 24             	mov    %eax,(%esp)
c011219b:	e8 5e ff ff ff       	call   c01120fe <lookup_sfs_nolock>
c01121a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01121a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01121a6:	85 c0                	test   %eax,%eax
c01121a8:	74 05                	je     c01121af <sfs_load_inode+0x32>
        goto out_unlock;
c01121aa:	e9 3c 01 00 00       	jmp    c01122eb <sfs_load_inode+0x16e>
    }

    int ret = -E_NO_MEM;
c01121af:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
c01121b6:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c01121bd:	e8 9c 28 ff ff       	call   c0104a5e <kmalloc>
c01121c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01121c5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01121c9:	75 05                	jne    c01121d0 <sfs_load_inode+0x53>
        goto failed_unlock;
c01121cb:	e9 40 01 00 00       	jmp    c0112310 <sfs_load_inode+0x193>
    }

    assert(sfs_block_inuse(sfs, ino));
c01121d0:	8b 45 10             	mov    0x10(%ebp),%eax
c01121d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01121d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01121da:	89 04 24             	mov    %eax,(%esp)
c01121dd:	e8 9f fc ff ff       	call   c0111e81 <sfs_block_inuse>
c01121e2:	85 c0                	test   %eax,%eax
c01121e4:	75 24                	jne    c011220a <sfs_load_inode+0x8d>
c01121e6:	c7 44 24 0c 75 8e 11 	movl   $0xc0118e75,0xc(%esp)
c01121ed:	c0 
c01121ee:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c01121f5:	c0 
c01121f6:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c01121fd:	00 
c01121fe:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0112205:	e8 be ec fe ff       	call   c0100ec8 <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
c011220a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0112211:	00 
c0112212:	8b 45 10             	mov    0x10(%ebp),%eax
c0112215:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112219:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c0112220:	00 
c0112221:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112224:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112228:	8b 45 08             	mov    0x8(%ebp),%eax
c011222b:	89 04 24             	mov    %eax,(%esp)
c011222e:	e8 3b 1e 00 00       	call   c011406e <sfs_rbuf>
c0112233:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112236:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011223a:	74 05                	je     c0112241 <sfs_load_inode+0xc4>
        goto failed_cleanup_din;
c011223c:	e9 c4 00 00 00       	jmp    c0112305 <sfs_load_inode+0x188>
    }

    assert(din->nlinks != 0);
c0112241:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112244:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0112248:	66 85 c0             	test   %ax,%ax
c011224b:	75 24                	jne    c0112271 <sfs_load_inode+0xf4>
c011224d:	c7 44 24 0c c6 8e 11 	movl   $0xc0118ec6,0xc(%esp)
c0112254:	c0 
c0112255:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c011225c:	c0 
c011225d:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0112264:	00 
c0112265:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c011226c:	e8 57 ec fe ff       	call   c0100ec8 <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
c0112271:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112274:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112278:	8b 45 10             	mov    0x10(%ebp),%eax
c011227b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011227f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112282:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112286:	8b 45 08             	mov    0x8(%ebp),%eax
c0112289:	89 04 24             	mov    %eax,(%esp)
c011228c:	e8 92 fd ff ff       	call   c0112023 <sfs_create_inode>
c0112291:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112294:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112298:	74 02                	je     c011229c <sfs_load_inode+0x11f>
        goto failed_cleanup_din;
c011229a:	eb 69                	jmp    c0112305 <sfs_load_inode+0x188>
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
c011229c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011229f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01122a2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01122a6:	74 0d                	je     c01122b5 <sfs_load_inode+0x138>
c01122a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01122ab:	8b 40 2c             	mov    0x2c(%eax),%eax
c01122ae:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01122b3:	74 24                	je     c01122d9 <sfs_load_inode+0x15c>
c01122b5:	c7 44 24 0c 90 8e 11 	movl   $0xc0118e90,0xc(%esp)
c01122bc:	c0 
c01122bd:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c01122c4:	c0 
c01122c5:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c01122cc:	00 
c01122cd:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c01122d4:	e8 ef eb fe ff       	call   c0100ec8 <__panic>
c01122d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01122dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01122e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01122e3:	89 04 24             	mov    %eax,(%esp)
c01122e6:	e8 6e fa ff ff       	call   c0111d59 <sfs_set_links>

out_unlock:
    unlock_sfs_fs(sfs);
c01122eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01122ee:	89 04 24             	mov    %eax,(%esp)
c01122f1:	e8 b3 20 00 00       	call   c01143a9 <unlock_sfs_fs>
    *node_store = node;
c01122f6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01122f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01122fc:	89 10                	mov    %edx,(%eax)
    return 0;
c01122fe:	b8 00 00 00 00       	mov    $0x0,%eax
c0112303:	eb 19                	jmp    c011231e <sfs_load_inode+0x1a1>

failed_cleanup_din:
    kfree(din);
c0112305:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112308:	89 04 24             	mov    %eax,(%esp)
c011230b:	e8 69 27 ff ff       	call   c0104a79 <kfree>
failed_unlock:
    unlock_sfs_fs(sfs);
c0112310:	8b 45 08             	mov    0x8(%ebp),%eax
c0112313:	89 04 24             	mov    %eax,(%esp)
c0112316:	e8 8e 20 00 00       	call   c01143a9 <unlock_sfs_fs>
    return ret;
c011231b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011231e:	c9                   	leave  
c011231f:	c3                   	ret    

c0112320 <sfs_bmap_get_sub_nolock>:
 * @index:    the index of block in indrect block
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
c0112320:	55                   	push   %ebp
c0112321:	89 e5                	mov    %esp,%ebp
c0112323:	83 ec 38             	sub    $0x38,%esp
    assert(index < SFS_BLK_NENTRY);
c0112326:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c011232d:	76 24                	jbe    c0112353 <sfs_bmap_get_sub_nolock+0x33>
c011232f:	c7 44 24 0c d7 8e 11 	movl   $0xc0118ed7,0xc(%esp)
c0112336:	c0 
c0112337:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c011233e:	c0 
c011233f:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0112346:	00 
c0112347:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c011234e:	e8 75 eb fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ent, ino = 0;
c0112353:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);  // the offset of entry in entry block
c011235a:	8b 45 10             	mov    0x10(%ebp),%eax
c011235d:	c1 e0 02             	shl    $0x2,%eax
c0112360:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// if entry block is existd, read the content of entry block into  sfs->sfs_buffer
    if ((ent = *entp) != 0) {
c0112363:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112366:	8b 00                	mov    (%eax),%eax
c0112368:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011236b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011236e:	85 c0                	test   %eax,%eax
c0112370:	74 50                	je     c01123c2 <sfs_bmap_get_sub_nolock+0xa2>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112372:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112375:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112378:	89 54 24 10          	mov    %edx,0x10(%esp)
c011237c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112380:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112387:	00 
c0112388:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011238b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011238f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112392:	89 04 24             	mov    %eax,(%esp)
c0112395:	e8 d4 1c 00 00       	call   c011406e <sfs_rbuf>
c011239a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011239d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01123a1:	74 08                	je     c01123ab <sfs_bmap_get_sub_nolock+0x8b>
            return ret;
c01123a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01123a6:	e9 eb 00 00 00       	jmp    c0112496 <sfs_bmap_get_sub_nolock+0x176>
        }
        if (ino != 0 || !create) {
c01123ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01123ae:	85 c0                	test   %eax,%eax
c01123b0:	0f 85 9c 00 00 00    	jne    c0112452 <sfs_bmap_get_sub_nolock+0x132>
c01123b6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01123ba:	0f 84 92 00 00 00    	je     c0112452 <sfs_bmap_get_sub_nolock+0x132>
c01123c0:	eb 2e                	jmp    c01123f0 <sfs_bmap_get_sub_nolock+0xd0>
            goto out;
        }
    }
    else {
        if (!create) {
c01123c2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01123c6:	75 05                	jne    c01123cd <sfs_bmap_get_sub_nolock+0xad>
            goto out;
c01123c8:	e9 85 00 00 00       	jmp    c0112452 <sfs_bmap_get_sub_nolock+0x132>
        }
		//if entry block isn't existd, allocated a entry block (for indrect block)
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
c01123cd:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01123d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01123d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01123d7:	89 04 24             	mov    %eax,(%esp)
c01123da:	e8 07 fb ff ff       	call   c0111ee6 <sfs_block_alloc>
c01123df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01123e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01123e6:	74 08                	je     c01123f0 <sfs_bmap_get_sub_nolock+0xd0>
            return ret;
c01123e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01123eb:	e9 a6 00 00 00       	jmp    c0112496 <sfs_bmap_get_sub_nolock+0x176>
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c01123f0:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01123f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01123f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01123fa:	89 04 24             	mov    %eax,(%esp)
c01123fd:	e8 e4 fa ff ff       	call   c0111ee6 <sfs_block_alloc>
c0112402:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112405:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112409:	74 02                	je     c011240d <sfs_bmap_get_sub_nolock+0xed>
        goto failed_cleanup;
c011240b:	eb 68                	jmp    c0112475 <sfs_bmap_get_sub_nolock+0x155>
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c011240d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112410:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112413:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112417:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011241b:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112422:	00 
c0112423:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112426:	89 44 24 04          	mov    %eax,0x4(%esp)
c011242a:	8b 45 08             	mov    0x8(%ebp),%eax
c011242d:	89 04 24             	mov    %eax,(%esp)
c0112430:	e8 f2 1c 00 00       	call   c0114127 <sfs_wbuf>
c0112435:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112438:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011243c:	74 14                	je     c0112452 <sfs_bmap_get_sub_nolock+0x132>
        sfs_block_free(sfs, ino);
c011243e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112441:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112445:	8b 45 08             	mov    0x8(%ebp),%eax
c0112448:	89 04 24             	mov    %eax,(%esp)
c011244b:	e8 63 fb ff ff       	call   c0111fb3 <sfs_block_free>
        goto failed_cleanup;
c0112450:	eb 23                	jmp    c0112475 <sfs_bmap_get_sub_nolock+0x155>
    }

out:
    if (ent != *entp) {
c0112452:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112455:	8b 10                	mov    (%eax),%edx
c0112457:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011245a:	39 c2                	cmp    %eax,%edx
c011245c:	74 08                	je     c0112466 <sfs_bmap_get_sub_nolock+0x146>
        *entp = ent;
c011245e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112461:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112464:	89 10                	mov    %edx,(%eax)
    }
    *ino_store = ino;
c0112466:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112469:	8b 45 18             	mov    0x18(%ebp),%eax
c011246c:	89 10                	mov    %edx,(%eax)
    return 0;
c011246e:	b8 00 00 00 00       	mov    $0x0,%eax
c0112473:	eb 21                	jmp    c0112496 <sfs_bmap_get_sub_nolock+0x176>

failed_cleanup:
    if (ent != *entp) {
c0112475:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112478:	8b 10                	mov    (%eax),%edx
c011247a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011247d:	39 c2                	cmp    %eax,%edx
c011247f:	74 12                	je     c0112493 <sfs_bmap_get_sub_nolock+0x173>
        sfs_block_free(sfs, ent);
c0112481:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112484:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112488:	8b 45 08             	mov    0x8(%ebp),%eax
c011248b:	89 04 24             	mov    %eax,(%esp)
c011248e:	e8 20 fb ff ff       	call   c0111fb3 <sfs_block_free>
    }
    return ret;
c0112493:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112496:	c9                   	leave  
c0112497:	c3                   	ret    

c0112498 <sfs_bmap_get_nolock>:
 * @index:    the index of block in inode
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
c0112498:	55                   	push   %ebp
c0112499:	89 e5                	mov    %esp,%ebp
c011249b:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c011249e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01124a1:	8b 00                	mov    (%eax),%eax
c01124a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
	// the index of disk block is in the fist SFS_NDIRECT  direct blocks
    if (index < SFS_NDIRECT) {
c01124a6:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c01124aa:	77 5e                	ja     c011250a <sfs_bmap_get_nolock+0x72>
        if ((ino = din->direct[index]) == 0 && create) {
c01124ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01124af:	8b 55 10             	mov    0x10(%ebp),%edx
c01124b2:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c01124b6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01124b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01124bc:	85 c0                	test   %eax,%eax
c01124be:	75 45                	jne    c0112505 <sfs_bmap_get_nolock+0x6d>
c01124c0:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01124c4:	74 3f                	je     c0112505 <sfs_bmap_get_nolock+0x6d>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c01124c6:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01124c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01124cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01124d0:	89 04 24             	mov    %eax,(%esp)
c01124d3:	e8 0e fa ff ff       	call   c0111ee6 <sfs_block_alloc>
c01124d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01124db:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01124df:	74 08                	je     c01124e9 <sfs_bmap_get_nolock+0x51>
                return ret;
c01124e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01124e4:	e9 2f 01 00 00       	jmp    c0112618 <sfs_bmap_get_nolock+0x180>
            }
            din->direct[index] = ino;
c01124e9:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01124ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01124ef:	8b 55 10             	mov    0x10(%ebp),%edx
c01124f2:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
            sin->dirty = 1;
c01124f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01124f9:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112500:	e9 c5 00 00 00       	jmp    c01125ca <sfs_bmap_get_nolock+0x132>
c0112505:	e9 c0 00 00 00       	jmp    c01125ca <sfs_bmap_get_nolock+0x132>
    }
    // the index of disk block is in the indirect blocks.
    index -= SFS_NDIRECT;
c011250a:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c011250e:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112515:	0f 87 93 00 00 00    	ja     c01125ae <sfs_bmap_get_nolock+0x116>
        ent = din->indirect;
c011251b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011251e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112521:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
c0112524:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112527:	89 44 24 10          	mov    %eax,0x10(%esp)
c011252b:	8b 45 14             	mov    0x14(%ebp),%eax
c011252e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112532:	8b 45 10             	mov    0x10(%ebp),%eax
c0112535:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112539:	8d 45 ec             	lea    -0x14(%ebp),%eax
c011253c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112540:	8b 45 08             	mov    0x8(%ebp),%eax
c0112543:	89 04 24             	mov    %eax,(%esp)
c0112546:	e8 d5 fd ff ff       	call   c0112320 <sfs_bmap_get_sub_nolock>
c011254b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011254e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112552:	74 08                	je     c011255c <sfs_bmap_get_nolock+0xc4>
            return ret;
c0112554:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112557:	e9 bc 00 00 00       	jmp    c0112618 <sfs_bmap_get_nolock+0x180>
        }
        if (ent != din->indirect) {
c011255c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011255f:	8b 50 3c             	mov    0x3c(%eax),%edx
c0112562:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112565:	39 c2                	cmp    %eax,%edx
c0112567:	74 43                	je     c01125ac <sfs_bmap_get_nolock+0x114>
            assert(din->indirect == 0);
c0112569:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011256c:	8b 40 3c             	mov    0x3c(%eax),%eax
c011256f:	85 c0                	test   %eax,%eax
c0112571:	74 24                	je     c0112597 <sfs_bmap_get_nolock+0xff>
c0112573:	c7 44 24 0c ee 8e 11 	movl   $0xc0118eee,0xc(%esp)
c011257a:	c0 
c011257b:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0112582:	c0 
c0112583:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c011258a:	00 
c011258b:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0112592:	e8 31 e9 fe ff       	call   c0100ec8 <__panic>
            din->indirect = ent;
c0112597:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011259a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011259d:	89 50 3c             	mov    %edx,0x3c(%eax)
            sin->dirty = 1;
c01125a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01125a3:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c01125aa:	eb 1e                	jmp    c01125ca <sfs_bmap_get_nolock+0x132>
c01125ac:	eb 1c                	jmp    c01125ca <sfs_bmap_get_nolock+0x132>
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
c01125ae:	c7 44 24 08 04 8f 11 	movl   $0xc0118f04,0x8(%esp)
c01125b5:	c0 
c01125b6:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c01125bd:	00 
c01125be:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c01125c5:	e8 fe e8 fe ff       	call   c0100ec8 <__panic>
	}
out:
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
c01125ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01125cd:	85 c0                	test   %eax,%eax
c01125cf:	74 3a                	je     c011260b <sfs_bmap_get_nolock+0x173>
c01125d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01125d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01125d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01125db:	89 04 24             	mov    %eax,(%esp)
c01125de:	e8 9e f8 ff ff       	call   c0111e81 <sfs_block_inuse>
c01125e3:	85 c0                	test   %eax,%eax
c01125e5:	75 24                	jne    c011260b <sfs_bmap_get_nolock+0x173>
c01125e7:	c7 44 24 0c 30 8f 11 	movl   $0xc0118f30,0xc(%esp)
c01125ee:	c0 
c01125ef:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c01125f6:	c0 
c01125f7:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c01125fe:	00 
c01125ff:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0112606:	e8 bd e8 fe ff       	call   c0100ec8 <__panic>
    *ino_store = ino;
c011260b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011260e:	8b 45 18             	mov    0x18(%ebp),%eax
c0112611:	89 10                	mov    %edx,(%eax)
    return 0;
c0112613:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112618:	c9                   	leave  
c0112619:	c3                   	ret    

c011261a <sfs_bmap_free_sub_nolock>:

/*
 * sfs_bmap_free_sub_nolock - set the entry item to 0 (free) in the indirect block
 */
static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
c011261a:	55                   	push   %ebp
c011261b:	89 e5                	mov    %esp,%ebp
c011261d:	83 ec 38             	sub    $0x38,%esp
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
c0112620:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112623:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112627:	8b 45 08             	mov    0x8(%ebp),%eax
c011262a:	89 04 24             	mov    %eax,(%esp)
c011262d:	e8 4f f8 ff ff       	call   c0111e81 <sfs_block_inuse>
c0112632:	85 c0                	test   %eax,%eax
c0112634:	74 09                	je     c011263f <sfs_bmap_free_sub_nolock+0x25>
c0112636:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c011263d:	76 24                	jbe    c0112663 <sfs_bmap_free_sub_nolock+0x49>
c011263f:	c7 44 24 0c 58 8f 11 	movl   $0xc0118f58,0xc(%esp)
c0112646:	c0 
c0112647:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c011264e:	c0 
c011264f:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
c0112656:	00 
c0112657:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c011265e:	e8 65 e8 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino, zero = 0;
c0112663:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);
c011266a:	8b 45 10             	mov    0x10(%ebp),%eax
c011266d:	c1 e0 02             	shl    $0x2,%eax
c0112670:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112673:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112676:	89 44 24 10          	mov    %eax,0x10(%esp)
c011267a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011267d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112681:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112688:	00 
c0112689:	8d 45 ec             	lea    -0x14(%ebp),%eax
c011268c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112690:	8b 45 08             	mov    0x8(%ebp),%eax
c0112693:	89 04 24             	mov    %eax,(%esp)
c0112696:	e8 d3 19 00 00       	call   c011406e <sfs_rbuf>
c011269b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011269e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01126a2:	74 05                	je     c01126a9 <sfs_bmap_free_sub_nolock+0x8f>
        return ret;
c01126a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01126a7:	eb 54                	jmp    c01126fd <sfs_bmap_free_sub_nolock+0xe3>
    }
    if (ino != 0) {
c01126a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01126ac:	85 c0                	test   %eax,%eax
c01126ae:	74 48                	je     c01126f8 <sfs_bmap_free_sub_nolock+0xde>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c01126b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01126b3:	89 44 24 10          	mov    %eax,0x10(%esp)
c01126b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01126ba:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01126be:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c01126c5:	00 
c01126c6:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01126c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01126d0:	89 04 24             	mov    %eax,(%esp)
c01126d3:	e8 4f 1a 00 00       	call   c0114127 <sfs_wbuf>
c01126d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01126db:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01126df:	74 05                	je     c01126e6 <sfs_bmap_free_sub_nolock+0xcc>
            return ret;
c01126e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01126e4:	eb 17                	jmp    c01126fd <sfs_bmap_free_sub_nolock+0xe3>
        }
        sfs_block_free(sfs, ino);
c01126e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01126e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01126f0:	89 04 24             	mov    %eax,(%esp)
c01126f3:	e8 bb f8 ff ff       	call   c0111fb3 <sfs_block_free>
    }
    return 0;
c01126f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01126fd:	c9                   	leave  
c01126fe:	c3                   	ret    

c01126ff <sfs_bmap_free_nolock>:

/*
 * sfs_bmap_free_nolock - free a block with logical index in inode and reset the inode's fields
 */
static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
c01126ff:	55                   	push   %ebp
c0112700:	89 e5                	mov    %esp,%ebp
c0112702:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112705:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112708:	8b 00                	mov    (%eax),%eax
c011270a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
c011270d:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112711:	77 44                	ja     c0112757 <sfs_bmap_free_nolock+0x58>
        if ((ino = din->direct[index]) != 0) {
c0112713:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112716:	8b 55 10             	mov    0x10(%ebp),%edx
c0112719:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c011271d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112720:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112724:	74 2a                	je     c0112750 <sfs_bmap_free_nolock+0x51>
			// free the block
            sfs_block_free(sfs, ino);
c0112726:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112729:	89 44 24 04          	mov    %eax,0x4(%esp)
c011272d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112730:	89 04 24             	mov    %eax,(%esp)
c0112733:	e8 7b f8 ff ff       	call   c0111fb3 <sfs_block_free>
            din->direct[index] = 0;
c0112738:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011273b:	8b 55 10             	mov    0x10(%ebp),%edx
c011273e:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c0112745:	00 
            sin->dirty = 1;
c0112746:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112749:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        return 0;
c0112750:	b8 00 00 00 00       	mov    $0x0,%eax
c0112755:	eb 4f                	jmp    c01127a6 <sfs_bmap_free_nolock+0xa7>
    }

    index -= SFS_NDIRECT;
c0112757:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c011275b:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112762:	77 3d                	ja     c01127a1 <sfs_bmap_free_nolock+0xa2>
        if ((ent = din->indirect) != 0) {
c0112764:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112767:	8b 40 3c             	mov    0x3c(%eax),%eax
c011276a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011276d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112771:	74 27                	je     c011279a <sfs_bmap_free_nolock+0x9b>
			// set the entry item to 0 in the indirect block
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
c0112773:	8b 45 10             	mov    0x10(%ebp),%eax
c0112776:	89 44 24 08          	mov    %eax,0x8(%esp)
c011277a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011277d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112781:	8b 45 08             	mov    0x8(%ebp),%eax
c0112784:	89 04 24             	mov    %eax,(%esp)
c0112787:	e8 8e fe ff ff       	call   c011261a <sfs_bmap_free_sub_nolock>
c011278c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011278f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112793:	74 05                	je     c011279a <sfs_bmap_free_nolock+0x9b>
                return ret;
c0112795:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112798:	eb 0c                	jmp    c01127a6 <sfs_bmap_free_nolock+0xa7>
            }
        }
        return 0;
c011279a:	b8 00 00 00 00       	mov    $0x0,%eax
c011279f:	eb 05                	jmp    c01127a6 <sfs_bmap_free_nolock+0xa7>
    }
    return 0;
c01127a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01127a6:	c9                   	leave  
c01127a7:	c3                   	ret    

c01127a8 <sfs_bmap_load_nolock>:
 * @sin:      sfs inode in memory
 * @index:    the logical index of disk block in inode
 * @ino_store:the NO. of disk block
 */
static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
c01127a8:	55                   	push   %ebp
c01127a9:	89 e5                	mov    %esp,%ebp
c01127ab:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c01127ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c01127b1:	8b 00                	mov    (%eax),%eax
c01127b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(index <= din->blocks);
c01127b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01127b9:	8b 40 08             	mov    0x8(%eax),%eax
c01127bc:	3b 45 10             	cmp    0x10(%ebp),%eax
c01127bf:	73 24                	jae    c01127e5 <sfs_bmap_load_nolock+0x3d>
c01127c1:	c7 44 24 0c 8c 8f 11 	movl   $0xc0118f8c,0xc(%esp)
c01127c8:	c0 
c01127c9:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c01127d0:	c0 
c01127d1:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
c01127d8:	00 
c01127d9:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c01127e0:	e8 e3 e6 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
c01127e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01127e8:	8b 40 08             	mov    0x8(%eax),%eax
c01127eb:	3b 45 10             	cmp    0x10(%ebp),%eax
c01127ee:	0f 94 c0             	sete   %al
c01127f1:	0f b6 c0             	movzbl %al,%eax
c01127f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
c01127f7:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01127fa:	89 44 24 10          	mov    %eax,0x10(%esp)
c01127fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112801:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112805:	8b 45 10             	mov    0x10(%ebp),%eax
c0112808:	89 44 24 08          	mov    %eax,0x8(%esp)
c011280c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011280f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112813:	8b 45 08             	mov    0x8(%ebp),%eax
c0112816:	89 04 24             	mov    %eax,(%esp)
c0112819:	e8 7a fc ff ff       	call   c0112498 <sfs_bmap_get_nolock>
c011281e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112821:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112825:	74 05                	je     c011282c <sfs_bmap_load_nolock+0x84>
        return ret;
c0112827:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011282a:	eb 62                	jmp    c011288e <sfs_bmap_load_nolock+0xe6>
    }
    assert(sfs_block_inuse(sfs, ino));
c011282c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011282f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112833:	8b 45 08             	mov    0x8(%ebp),%eax
c0112836:	89 04 24             	mov    %eax,(%esp)
c0112839:	e8 43 f6 ff ff       	call   c0111e81 <sfs_block_inuse>
c011283e:	85 c0                	test   %eax,%eax
c0112840:	75 24                	jne    c0112866 <sfs_bmap_load_nolock+0xbe>
c0112842:	c7 44 24 0c 75 8e 11 	movl   $0xc0118e75,0xc(%esp)
c0112849:	c0 
c011284a:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0112851:	c0 
c0112852:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0112859:	00 
c011285a:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0112861:	e8 62 e6 fe ff       	call   c0100ec8 <__panic>
    if (create) {
c0112866:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011286a:	74 0f                	je     c011287b <sfs_bmap_load_nolock+0xd3>
        din->blocks ++;
c011286c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011286f:	8b 40 08             	mov    0x8(%eax),%eax
c0112872:	8d 50 01             	lea    0x1(%eax),%edx
c0112875:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112878:	89 50 08             	mov    %edx,0x8(%eax)
    }
    if (ino_store != NULL) {
c011287b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011287f:	74 08                	je     c0112889 <sfs_bmap_load_nolock+0xe1>
        *ino_store = ino;
c0112881:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112884:	8b 45 14             	mov    0x14(%ebp),%eax
c0112887:	89 10                	mov    %edx,(%eax)
    }
    return 0;
c0112889:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011288e:	c9                   	leave  
c011288f:	c3                   	ret    

c0112890 <sfs_bmap_truncate_nolock>:

/*
 * sfs_bmap_truncate_nolock - free the disk block at the end of file
 */
static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0112890:	55                   	push   %ebp
c0112891:	89 e5                	mov    %esp,%ebp
c0112893:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112896:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112899:	8b 00                	mov    (%eax),%eax
c011289b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(din->blocks != 0);
c011289e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01128a1:	8b 40 08             	mov    0x8(%eax),%eax
c01128a4:	85 c0                	test   %eax,%eax
c01128a6:	75 24                	jne    c01128cc <sfs_bmap_truncate_nolock+0x3c>
c01128a8:	c7 44 24 0c a1 8f 11 	movl   $0xc0118fa1,0xc(%esp)
c01128af:	c0 
c01128b0:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c01128b7:	c0 
c01128b8:	c7 44 24 04 7b 01 00 	movl   $0x17b,0x4(%esp)
c01128bf:	00 
c01128c0:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c01128c7:	e8 fc e5 fe ff       	call   c0100ec8 <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
c01128cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01128cf:	8b 40 08             	mov    0x8(%eax),%eax
c01128d2:	83 e8 01             	sub    $0x1,%eax
c01128d5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01128d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01128dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01128e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01128e3:	89 04 24             	mov    %eax,(%esp)
c01128e6:	e8 14 fe ff ff       	call   c01126ff <sfs_bmap_free_nolock>
c01128eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01128ee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01128f2:	74 05                	je     c01128f9 <sfs_bmap_truncate_nolock+0x69>
        return ret;
c01128f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01128f7:	eb 1e                	jmp    c0112917 <sfs_bmap_truncate_nolock+0x87>
    }
    din->blocks --;
c01128f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01128fc:	8b 40 08             	mov    0x8(%eax),%eax
c01128ff:	8d 50 ff             	lea    -0x1(%eax),%edx
c0112902:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112905:	89 50 08             	mov    %edx,0x8(%eax)
    sin->dirty = 1;
c0112908:	8b 45 0c             	mov    0xc(%ebp),%eax
c011290b:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    return 0;
c0112912:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112917:	c9                   	leave  
c0112918:	c3                   	ret    

c0112919 <sfs_dirent_read_nolock>:
 * @sin:      sfs inode in memory
 * @slot:     the index of file entry
 * @entry:    file entry
 */
static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0112919:	55                   	push   %ebp
c011291a:	89 e5                	mov    %esp,%ebp
c011291c:	83 ec 38             	sub    $0x38,%esp
    assert(sin->din->type == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
c011291f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112922:	8b 00                	mov    (%eax),%eax
c0112924:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112928:	66 83 f8 02          	cmp    $0x2,%ax
c011292c:	75 15                	jne    c0112943 <sfs_dirent_read_nolock+0x2a>
c011292e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0112932:	78 0f                	js     c0112943 <sfs_dirent_read_nolock+0x2a>
c0112934:	8b 55 10             	mov    0x10(%ebp),%edx
c0112937:	8b 45 0c             	mov    0xc(%ebp),%eax
c011293a:	8b 00                	mov    (%eax),%eax
c011293c:	8b 40 08             	mov    0x8(%eax),%eax
c011293f:	39 c2                	cmp    %eax,%edx
c0112941:	72 24                	jb     c0112967 <sfs_dirent_read_nolock+0x4e>
c0112943:	c7 44 24 0c b4 8f 11 	movl   $0xc0118fb4,0xc(%esp)
c011294a:	c0 
c011294b:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0112952:	c0 
c0112953:	c7 44 24 04 8e 01 00 	movl   $0x18e,0x4(%esp)
c011295a:	00 
c011295b:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0112962:	e8 61 e5 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino;
	// according to the DIR's inode and the slot of file entry, find the index of disk block which contains this file entry
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
c0112967:	8b 45 10             	mov    0x10(%ebp),%eax
c011296a:	8d 55 f0             	lea    -0x10(%ebp),%edx
c011296d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0112971:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112975:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112978:	89 44 24 04          	mov    %eax,0x4(%esp)
c011297c:	8b 45 08             	mov    0x8(%ebp),%eax
c011297f:	89 04 24             	mov    %eax,(%esp)
c0112982:	e8 21 fe ff ff       	call   c01127a8 <sfs_bmap_load_nolock>
c0112987:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011298a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011298e:	74 08                	je     c0112998 <sfs_dirent_read_nolock+0x7f>
        return ret;
c0112990:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112993:	e9 80 00 00 00       	jmp    c0112a18 <sfs_dirent_read_nolock+0xff>
    }
    assert(sfs_block_inuse(sfs, ino));
c0112998:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011299b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011299f:	8b 45 08             	mov    0x8(%ebp),%eax
c01129a2:	89 04 24             	mov    %eax,(%esp)
c01129a5:	e8 d7 f4 ff ff       	call   c0111e81 <sfs_block_inuse>
c01129aa:	85 c0                	test   %eax,%eax
c01129ac:	75 24                	jne    c01129d2 <sfs_dirent_read_nolock+0xb9>
c01129ae:	c7 44 24 0c 75 8e 11 	movl   $0xc0118e75,0xc(%esp)
c01129b5:	c0 
c01129b6:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c01129bd:	c0 
c01129be:	c7 44 24 04 95 01 00 	movl   $0x195,0x4(%esp)
c01129c5:	00 
c01129c6:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c01129cd:	e8 f6 e4 fe ff       	call   c0100ec8 <__panic>
	// read the content of file entry in the disk block 
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
c01129d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01129d5:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01129dc:	00 
c01129dd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01129e1:	c7 44 24 08 04 01 00 	movl   $0x104,0x8(%esp)
c01129e8:	00 
c01129e9:	8b 45 14             	mov    0x14(%ebp),%eax
c01129ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c01129f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01129f3:	89 04 24             	mov    %eax,(%esp)
c01129f6:	e8 73 16 00 00       	call   c011406e <sfs_rbuf>
c01129fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01129fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112a02:	74 05                	je     c0112a09 <sfs_dirent_read_nolock+0xf0>
        return ret;
c0112a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112a07:	eb 0f                	jmp    c0112a18 <sfs_dirent_read_nolock+0xff>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
c0112a09:	8b 45 14             	mov    0x14(%ebp),%eax
c0112a0c:	c6 80 03 01 00 00 00 	movb   $0x0,0x103(%eax)
    return 0;
c0112a13:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112a18:	c9                   	leave  
c0112a19:	c3                   	ret    

c0112a1a <sfs_dirent_search_nolock>:
 * @ino_store:  NO. of disk of this file (with the filename)'s inode
 * @slot:       logical index of file entry (NOTICE: each file entry ocupied one  disk block)
 * @empty_slot: the empty logical index of file entry.
 */
static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
c0112a1a:	55                   	push   %ebp
c0112a1b:	89 e5                	mov    %esp,%ebp
c0112a1d:	83 ec 28             	sub    $0x28,%esp
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
c0112a20:	8b 45 10             	mov    0x10(%ebp),%eax
c0112a23:	89 04 24             	mov    %eax,(%esp)
c0112a26:	e8 ae 21 00 00       	call   c0114bd9 <strlen>
c0112a2b:	3d ff 00 00 00       	cmp    $0xff,%eax
c0112a30:	76 24                	jbe    c0112a56 <sfs_dirent_search_nolock+0x3c>
c0112a32:	c7 44 24 0c 00 90 11 	movl   $0xc0119000,0xc(%esp)
c0112a39:	c0 
c0112a3a:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0112a41:	c0 
c0112a42:	c7 44 24 04 ba 01 00 	movl   $0x1ba,0x4(%esp)
c0112a49:	00 
c0112a4a:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0112a51:	e8 72 e4 fe ff       	call   c0100ec8 <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0112a56:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0112a5d:	e8 fc 1f ff ff       	call   c0104a5e <kmalloc>
c0112a62:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112a65:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112a69:	75 0a                	jne    c0112a75 <sfs_dirent_search_nolock+0x5b>
        return -E_NO_MEM;
c0112a6b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0112a70:	e9 cb 00 00 00       	jmp    c0112b40 <sfs_dirent_search_nolock+0x126>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
c0112a75:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112a78:	8b 00                	mov    (%eax),%eax
c0112a7a:	8b 40 08             	mov    0x8(%eax),%eax
c0112a7d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    set_pvalue(empty_slot, nslots);
c0112a80:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0112a84:	74 08                	je     c0112a8e <sfs_dirent_search_nolock+0x74>
c0112a86:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0112a89:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112a8c:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < nslots; i ++) {
c0112a8e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0112a95:	e9 85 00 00 00       	jmp    c0112b1f <sfs_dirent_search_nolock+0x105>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0112a9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112a9d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112aa1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112aa4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112aa8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112aab:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112aaf:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ab2:	89 04 24             	mov    %eax,(%esp)
c0112ab5:	e8 5f fe ff ff       	call   c0112919 <sfs_dirent_read_nolock>
c0112aba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112abd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112ac1:	74 02                	je     c0112ac5 <sfs_dirent_search_nolock+0xab>
            goto out;
c0112ac3:	eb 6d                	jmp    c0112b32 <sfs_dirent_search_nolock+0x118>
        }
        if (entry->ino == 0) {
c0112ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ac8:	8b 00                	mov    (%eax),%eax
c0112aca:	85 c0                	test   %eax,%eax
c0112acc:	75 12                	jne    c0112ae0 <sfs_dirent_search_nolock+0xc6>
            set_pvalue(empty_slot, i);
c0112ace:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0112ad2:	74 0a                	je     c0112ade <sfs_dirent_search_nolock+0xc4>
c0112ad4:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0112ad7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112ada:	89 10                	mov    %edx,(%eax)
            continue ;
c0112adc:	eb 3d                	jmp    c0112b1b <sfs_dirent_search_nolock+0x101>
c0112ade:	eb 3b                	jmp    c0112b1b <sfs_dirent_search_nolock+0x101>
        }
        if (strcmp(name, entry->name) == 0) {
c0112ae0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ae3:	83 c0 04             	add    $0x4,%eax
c0112ae6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112aea:	8b 45 10             	mov    0x10(%ebp),%eax
c0112aed:	89 04 24             	mov    %eax,(%esp)
c0112af0:	e8 dc 21 00 00       	call   c0114cd1 <strcmp>
c0112af5:	85 c0                	test   %eax,%eax
c0112af7:	75 22                	jne    c0112b1b <sfs_dirent_search_nolock+0x101>
            set_pvalue(slot, i);
c0112af9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0112afd:	74 08                	je     c0112b07 <sfs_dirent_search_nolock+0xed>
c0112aff:	8b 45 18             	mov    0x18(%ebp),%eax
c0112b02:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112b05:	89 10                	mov    %edx,(%eax)
            set_pvalue(ino_store, entry->ino);
c0112b07:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112b0b:	74 0c                	je     c0112b19 <sfs_dirent_search_nolock+0xff>
c0112b0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b10:	8b 10                	mov    (%eax),%edx
c0112b12:	8b 45 14             	mov    0x14(%ebp),%eax
c0112b15:	89 10                	mov    %edx,(%eax)
            goto out;
c0112b17:	eb 19                	jmp    c0112b32 <sfs_dirent_search_nolock+0x118>
c0112b19:	eb 17                	jmp    c0112b32 <sfs_dirent_search_nolock+0x118>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
c0112b1b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0112b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112b22:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0112b25:	0f 8c 6f ff ff ff    	jl     c0112a9a <sfs_dirent_search_nolock+0x80>
            set_pvalue(ino_store, entry->ino);
            goto out;
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
c0112b2b:	c7 45 f4 f0 ff ff ff 	movl   $0xfffffff0,-0xc(%ebp)
out:
    kfree(entry);
c0112b32:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b35:	89 04 24             	mov    %eax,(%esp)
c0112b38:	e8 3c 1f ff ff       	call   c0104a79 <kfree>
    return ret;
c0112b3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112b40:	c9                   	leave  
c0112b41:	c3                   	ret    

c0112b42 <sfs_dirent_findino_nolock>:
/*
 * sfs_dirent_findino_nolock - read all file entries in DIR's inode and find a entry->ino == ino
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
c0112b42:	55                   	push   %ebp
c0112b43:	89 e5                	mov    %esp,%ebp
c0112b45:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0112b48:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b4b:	8b 00                	mov    (%eax),%eax
c0112b4d:	8b 40 08             	mov    0x8(%eax),%eax
c0112b50:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0112b53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0112b5a:	eb 43                	jmp    c0112b9f <sfs_dirent_findino_nolock+0x5d>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0112b5c:	8b 45 14             	mov    0x14(%ebp),%eax
c0112b5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112b63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b66:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112b6a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b6d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b71:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b74:	89 04 24             	mov    %eax,(%esp)
c0112b77:	e8 9d fd ff ff       	call   c0112919 <sfs_dirent_read_nolock>
c0112b7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112b7f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112b83:	74 05                	je     c0112b8a <sfs_dirent_findino_nolock+0x48>
            return ret;
c0112b85:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b88:	eb 22                	jmp    c0112bac <sfs_dirent_findino_nolock+0x6a>
        }
        if (entry->ino == ino) {
c0112b8a:	8b 45 14             	mov    0x14(%ebp),%eax
c0112b8d:	8b 00                	mov    (%eax),%eax
c0112b8f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112b92:	75 07                	jne    c0112b9b <sfs_dirent_findino_nolock+0x59>
            return 0;
c0112b94:	b8 00 00 00 00       	mov    $0x0,%eax
c0112b99:	eb 11                	jmp    c0112bac <sfs_dirent_findino_nolock+0x6a>
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0112b9b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0112b9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ba2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0112ba5:	7c b5                	jl     c0112b5c <sfs_dirent_findino_nolock+0x1a>
        }
        if (entry->ino == ino) {
            return 0;
        }
    }
    return -E_NOENT;
c0112ba7:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0112bac:	c9                   	leave  
c0112bad:	c3                   	ret    

c0112bae <sfs_lookup_once>:
 * @name:       the file name in DIR
 * @node_store: the inode corresponding the file name in DIR
 * @slot:       the logical index of file entry
 */
static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
c0112bae:	55                   	push   %ebp
c0112baf:	89 e5                	mov    %esp,%ebp
c0112bb1:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t ino;
    lock_sin(sin);
c0112bb4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112bb7:	89 04 24             	mov    %eax,(%esp)
c0112bba:	e8 f4 f0 ff ff       	call   c0111cb3 <lock_sin>
    {   // find the NO. of disk block and logical index of file entry
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
c0112bbf:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c0112bc6:	00 
c0112bc7:	8b 45 18             	mov    0x18(%ebp),%eax
c0112bca:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112bce:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0112bd1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112bd5:	8b 45 10             	mov    0x10(%ebp),%eax
c0112bd8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112bdc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112bdf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112be3:	8b 45 08             	mov    0x8(%ebp),%eax
c0112be6:	89 04 24             	mov    %eax,(%esp)
c0112be9:	e8 2c fe ff ff       	call   c0112a1a <sfs_dirent_search_nolock>
c0112bee:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sin(sin);
c0112bf1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112bf4:	89 04 24             	mov    %eax,(%esp)
c0112bf7:	e8 cd f0 ff ff       	call   c0111cc9 <unlock_sin>
    if (ret == 0) {
c0112bfc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112c00:	75 1c                	jne    c0112c1e <sfs_lookup_once+0x70>
		// load the content of inode with the the NO. of disk block
        ret = sfs_load_inode(sfs, node_store, ino);
c0112c02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112c05:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112c09:	8b 45 14             	mov    0x14(%ebp),%eax
c0112c0c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c10:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c13:	89 04 24             	mov    %eax,(%esp)
c0112c16:	e8 62 f5 ff ff       	call   c011217d <sfs_load_inode>
c0112c1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    return ret;
c0112c1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112c21:	c9                   	leave  
c0112c22:	c3                   	ret    

c0112c23 <sfs_opendir>:

// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
c0112c23:	55                   	push   %ebp
c0112c24:	89 e5                	mov    %esp,%ebp
    switch (open_flags & O_ACCMODE) {
c0112c26:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c29:	83 e0 03             	and    $0x3,%eax
c0112c2c:	85 c0                	test   %eax,%eax
c0112c2e:	74 07                	je     c0112c37 <sfs_opendir+0x14>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
c0112c30:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c0112c35:	eb 17                	jmp    c0112c4e <sfs_opendir+0x2b>
// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c0112c37:	90                   	nop
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
    }
    if (open_flags & O_APPEND) {
c0112c38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c3b:	83 e0 20             	and    $0x20,%eax
c0112c3e:	85 c0                	test   %eax,%eax
c0112c40:	74 07                	je     c0112c49 <sfs_opendir+0x26>
        return -E_ISDIR;
c0112c42:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c0112c47:	eb 05                	jmp    c0112c4e <sfs_opendir+0x2b>
    }
    return 0;
c0112c49:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112c4e:	5d                   	pop    %ebp
c0112c4f:	c3                   	ret    

c0112c50 <sfs_openfile>:

// sfs_openfile - open file (no use)
static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
c0112c50:	55                   	push   %ebp
c0112c51:	89 e5                	mov    %esp,%ebp
    return 0;
c0112c53:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112c58:	5d                   	pop    %ebp
c0112c59:	c3                   	ret    

c0112c5a <sfs_close>:

// sfs_close - close file
static int
sfs_close(struct inode *node) {
c0112c5a:	55                   	push   %ebp
c0112c5b:	89 e5                	mov    %esp,%ebp
c0112c5d:	83 ec 28             	sub    $0x28,%esp
    return vop_fsync(node);
c0112c60:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c63:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112c66:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112c6a:	74 17                	je     c0112c83 <sfs_close+0x29>
c0112c6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c6f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112c72:	85 c0                	test   %eax,%eax
c0112c74:	74 0d                	je     c0112c83 <sfs_close+0x29>
c0112c76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c79:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112c7c:	8b 40 18             	mov    0x18(%eax),%eax
c0112c7f:	85 c0                	test   %eax,%eax
c0112c81:	75 24                	jne    c0112ca7 <sfs_close+0x4d>
c0112c83:	c7 44 24 0c 24 90 11 	movl   $0xc0119024,0xc(%esp)
c0112c8a:	c0 
c0112c8b:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0112c92:	c0 
c0112c93:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
c0112c9a:	00 
c0112c9b:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0112ca2:	e8 21 e2 fe ff       	call   c0100ec8 <__panic>
c0112ca7:	c7 44 24 04 72 90 11 	movl   $0xc0119072,0x4(%esp)
c0112cae:	c0 
c0112caf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112cb2:	89 04 24             	mov    %eax,(%esp)
c0112cb5:	e8 cb c0 ff ff       	call   c010ed85 <inode_check>
c0112cba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112cbd:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112cc0:	8b 40 18             	mov    0x18(%eax),%eax
c0112cc3:	8b 55 08             	mov    0x8(%ebp),%edx
c0112cc6:	89 14 24             	mov    %edx,(%esp)
c0112cc9:	ff d0                	call   *%eax
}
c0112ccb:	c9                   	leave  
c0112ccc:	c3                   	ret    

c0112ccd <sfs_io_nolock>:
 * @offset:   the offset of file
 * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr lenght
 * @write:    BOOL, 0 read, 1 write
 */
static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
c0112ccd:	55                   	push   %ebp
c0112cce:	89 e5                	mov    %esp,%ebp
c0112cd0:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_inode *din = sin->din;
c0112cd3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112cd6:	8b 00                	mov    (%eax),%eax
c0112cd8:	89 45 dc             	mov    %eax,-0x24(%ebp)
    assert(din->type != SFS_TYPE_DIR);
c0112cdb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112cde:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112ce2:	66 83 f8 02          	cmp    $0x2,%ax
c0112ce6:	75 24                	jne    c0112d0c <sfs_io_nolock+0x3f>
c0112ce8:	c7 44 24 0c 78 90 11 	movl   $0xc0119078,0xc(%esp)
c0112cef:	c0 
c0112cf0:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0112cf7:	c0 
c0112cf8:	c7 44 24 04 2b 02 00 	movl   $0x22b,0x4(%esp)
c0112cff:	00 
c0112d00:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0112d07:	e8 bc e1 fe ff       	call   c0100ec8 <__panic>
    off_t endpos = offset + *alenp, blkoff;
c0112d0c:	8b 45 18             	mov    0x18(%ebp),%eax
c0112d0f:	8b 10                	mov    (%eax),%edx
c0112d11:	8b 45 14             	mov    0x14(%ebp),%eax
c0112d14:	01 d0                	add    %edx,%eax
c0112d16:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *alenp = 0;
c0112d19:	8b 45 18             	mov    0x18(%ebp),%eax
c0112d1c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// calculate the Rd/Wr end position
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
c0112d22:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112d26:	78 12                	js     c0112d3a <sfs_io_nolock+0x6d>
c0112d28:	8b 45 14             	mov    0x14(%ebp),%eax
c0112d2b:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0112d30:	77 08                	ja     c0112d3a <sfs_io_nolock+0x6d>
c0112d32:	8b 45 14             	mov    0x14(%ebp),%eax
c0112d35:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0112d38:	7e 0a                	jle    c0112d44 <sfs_io_nolock+0x77>
        return -E_INVAL;
c0112d3a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0112d3f:	e9 f2 01 00 00       	jmp    c0112f36 <sfs_io_nolock+0x269>
    }
    if (offset == endpos) {
c0112d44:	8b 45 14             	mov    0x14(%ebp),%eax
c0112d47:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0112d4a:	75 0a                	jne    c0112d56 <sfs_io_nolock+0x89>
        return 0;
c0112d4c:	b8 00 00 00 00       	mov    $0x0,%eax
c0112d51:	e9 e0 01 00 00       	jmp    c0112f36 <sfs_io_nolock+0x269>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
c0112d56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d59:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c0112d5e:	76 07                	jbe    c0112d67 <sfs_io_nolock+0x9a>
        endpos = SFS_MAX_FILE_SIZE;
c0112d60:	c7 45 f4 00 00 00 08 	movl   $0x8000000,-0xc(%ebp)
    }
    if (!write) {
c0112d67:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0112d6b:	75 2a                	jne    c0112d97 <sfs_io_nolock+0xca>
        if (offset >= din->size) {
c0112d6d:	8b 55 14             	mov    0x14(%ebp),%edx
c0112d70:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112d73:	8b 00                	mov    (%eax),%eax
c0112d75:	39 c2                	cmp    %eax,%edx
c0112d77:	72 0a                	jb     c0112d83 <sfs_io_nolock+0xb6>
            return 0;
c0112d79:	b8 00 00 00 00       	mov    $0x0,%eax
c0112d7e:	e9 b3 01 00 00       	jmp    c0112f36 <sfs_io_nolock+0x269>
        }
        if (endpos > din->size) {
c0112d83:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112d86:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112d89:	8b 00                	mov    (%eax),%eax
c0112d8b:	39 c2                	cmp    %eax,%edx
c0112d8d:	76 08                	jbe    c0112d97 <sfs_io_nolock+0xca>
            endpos = din->size;
c0112d8f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112d92:	8b 00                	mov    (%eax),%eax
c0112d94:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
c0112d97:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0112d9b:	74 10                	je     c0112dad <sfs_io_nolock+0xe0>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
c0112d9d:	c7 45 f0 27 41 11 c0 	movl   $0xc0114127,-0x10(%ebp)
c0112da4:	c7 45 ec 3e 40 11 c0 	movl   $0xc011403e,-0x14(%ebp)
c0112dab:	eb 0e                	jmp    c0112dbb <sfs_io_nolock+0xee>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
c0112dad:	c7 45 f0 6e 40 11 c0 	movl   $0xc011406e,-0x10(%ebp)
c0112db4:	c7 45 ec 0e 40 11 c0 	movl   $0xc011400e,-0x14(%ebp)
    }

    int ret = 0;
c0112dbb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    size_t size, alen = 0;
c0112dc2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;          // The NO. of Rd/Wr begin block
c0112dc9:	8b 45 14             	mov    0x14(%ebp),%eax
c0112dcc:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0112dd2:	85 c0                	test   %eax,%eax
c0112dd4:	0f 48 c2             	cmovs  %edx,%eax
c0112dd7:	c1 f8 0c             	sar    $0xc,%eax
c0112dda:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;  // The size of Rd/Wr blocks
c0112ddd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112de0:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0112de6:	85 c0                	test   %eax,%eax
c0112de8:	0f 48 c2             	cmovs  %edx,%eax
c0112deb:	c1 f8 0c             	sar    $0xc,%eax
c0112dee:	2b 45 e0             	sub    -0x20(%ebp),%eax
c0112df1:	89 45 d8             	mov    %eax,-0x28(%ebp)
	 * (2) Rd/Wr aligned blocks 
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
    while (alen + offset < endpos) {
c0112df4:	e9 f3 00 00 00       	jmp    c0112eec <sfs_io_nolock+0x21f>
        size_t blkend = (blkno + 1) * SFS_BLKSIZE;
c0112df9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112dfc:	83 c0 01             	add    $0x1,%eax
c0112dff:	c1 e0 0c             	shl    $0xc,%eax
c0112e02:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        size = (blkend > endpos) ? (endpos - alen - offset) : (blkend - alen - offset);
c0112e05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e08:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0112e0b:	73 11                	jae    c0112e1e <sfs_io_nolock+0x151>
c0112e0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e10:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0112e13:	89 c2                	mov    %eax,%edx
c0112e15:	8b 45 14             	mov    0x14(%ebp),%eax
c0112e18:	29 c2                	sub    %eax,%edx
c0112e1a:	89 d0                	mov    %edx,%eax
c0112e1c:	eb 0f                	jmp    c0112e2d <sfs_io_nolock+0x160>
c0112e1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112e21:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0112e24:	29 c2                	sub    %eax,%edx
c0112e26:	8b 45 14             	mov    0x14(%ebp),%eax
c0112e29:	29 c2                	sub    %eax,%edx
c0112e2b:	89 d0                	mov    %edx,%eax
c0112e2d:	89 45 d0             	mov    %eax,-0x30(%ebp)
        blkoff = alen + offset - blkend + SFS_BLKSIZE;
c0112e30:	8b 55 14             	mov    0x14(%ebp),%edx
c0112e33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112e36:	01 d0                	add    %edx,%eax
c0112e38:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0112e3b:	05 00 10 00 00       	add    $0x1000,%eax
c0112e40:	89 45 cc             	mov    %eax,-0x34(%ebp)
        if (ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) goto out;
c0112e43:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0112e46:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112e4a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112e4d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112e51:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e54:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e58:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e5b:	89 04 24             	mov    %eax,(%esp)
c0112e5e:	e8 45 f9 ff ff       	call   c01127a8 <sfs_bmap_load_nolock>
c0112e63:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112e66:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112e6a:	74 05                	je     c0112e71 <sfs_io_nolock+0x1a4>
c0112e6c:	e9 8e 00 00 00       	jmp    c0112eff <sfs_io_nolock+0x232>
        if (size == SFS_BLKSIZE) { if (ret = sfs_block_op(sfs, buf + alen, ino, 1)) goto out; }
c0112e71:	81 7d d0 00 10 00 00 	cmpl   $0x1000,-0x30(%ebp)
c0112e78:	75 31                	jne    c0112eab <sfs_io_nolock+0x1de>
c0112e7a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112e7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0112e80:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0112e83:	01 ca                	add    %ecx,%edx
c0112e85:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0112e8c:	00 
c0112e8d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112e91:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112e95:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e98:	89 04 24             	mov    %eax,(%esp)
c0112e9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112e9e:	ff d0                	call   *%eax
c0112ea0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112ea3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112ea7:	74 39                	je     c0112ee2 <sfs_io_nolock+0x215>
c0112ea9:	eb 54                	jmp    c0112eff <sfs_io_nolock+0x232>
        else { if (ret = sfs_buf_op(sfs, buf + alen, size, ino, blkoff)) goto out; }
c0112eab:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112eae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0112eb1:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0112eb4:	01 d1                	add    %edx,%ecx
c0112eb6:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0112eb9:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112ebd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112ec1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112ec4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112ec8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0112ecc:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ecf:	89 04 24             	mov    %eax,(%esp)
c0112ed2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112ed5:	ff d0                	call   *%eax
c0112ed7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112eda:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112ede:	74 02                	je     c0112ee2 <sfs_io_nolock+0x215>
c0112ee0:	eb 1d                	jmp    c0112eff <sfs_io_nolock+0x232>
        alen += size;
c0112ee2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112ee5:	01 45 e4             	add    %eax,-0x1c(%ebp)
        blkno++;
c0112ee8:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
	 * (2) Rd/Wr aligned blocks 
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
    while (alen + offset < endpos) {
c0112eec:	8b 55 14             	mov    0x14(%ebp),%edx
c0112eef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112ef2:	01 c2                	add    %eax,%edx
c0112ef4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ef7:	39 c2                	cmp    %eax,%edx
c0112ef9:	0f 82 fa fe ff ff    	jb     c0112df9 <sfs_io_nolock+0x12c>
        else { if (ret = sfs_buf_op(sfs, buf + alen, size, ino, blkoff)) goto out; }
        alen += size;
        blkno++;
    }
out:
    *alenp = alen;
c0112eff:	8b 45 18             	mov    0x18(%ebp),%eax
c0112f02:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0112f05:	89 10                	mov    %edx,(%eax)
    if (offset + alen > sin->din->size) {
c0112f07:	8b 55 14             	mov    0x14(%ebp),%edx
c0112f0a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112f0d:	01 c2                	add    %eax,%edx
c0112f0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f12:	8b 00                	mov    (%eax),%eax
c0112f14:	8b 00                	mov    (%eax),%eax
c0112f16:	39 c2                	cmp    %eax,%edx
c0112f18:	76 19                	jbe    c0112f33 <sfs_io_nolock+0x266>
        sin->din->size = offset + alen;
c0112f1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f1d:	8b 00                	mov    (%eax),%eax
c0112f1f:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0112f22:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0112f25:	01 ca                	add    %ecx,%edx
c0112f27:	89 10                	mov    %edx,(%eax)
        sin->dirty = 1;
c0112f29:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f2c:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    }
    return ret;
c0112f33:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c0112f36:	c9                   	leave  
c0112f37:	c3                   	ret    

c0112f38 <sfs_io>:
/*
 * sfs_io - Rd/Wr file. the wrapper of sfs_io_nolock
            with lock protect
 */
static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
c0112f38:	55                   	push   %ebp
c0112f39:	89 e5                	mov    %esp,%ebp
c0112f3b:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0112f3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f41:	8b 40 38             	mov    0x38(%eax),%eax
c0112f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112f47:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112f4b:	74 0a                	je     c0112f57 <sfs_io+0x1f>
c0112f4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f50:	8b 40 6c             	mov    0x6c(%eax),%eax
c0112f53:	85 c0                	test   %eax,%eax
c0112f55:	74 24                	je     c0112f7b <sfs_io+0x43>
c0112f57:	c7 44 24 0c 94 90 11 	movl   $0xc0119094,0xc(%esp)
c0112f5e:	c0 
c0112f5f:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0112f66:	c0 
c0112f67:	c7 44 24 04 73 02 00 	movl   $0x273,0x4(%esp)
c0112f6e:	00 
c0112f6f:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0112f76:	e8 4d df fe ff       	call   c0100ec8 <__panic>
c0112f7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0112f81:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f84:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112f87:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112f8b:	74 0d                	je     c0112f9a <sfs_io+0x62>
c0112f8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f90:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112f93:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0112f98:	74 24                	je     c0112fbe <sfs_io+0x86>
c0112f9a:	c7 44 24 0c 90 8e 11 	movl   $0xc0118e90,0xc(%esp)
c0112fa1:	c0 
c0112fa2:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0112fa9:	c0 
c0112faa:	c7 44 24 04 74 02 00 	movl   $0x274,0x4(%esp)
c0112fb1:	00 
c0112fb2:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0112fb9:	e8 0a df fe ff       	call   c0100ec8 <__panic>
c0112fbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112fc1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int ret;
    lock_sin(sin);
c0112fc4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112fc7:	89 04 24             	mov    %eax,(%esp)
c0112fca:	e8 e4 ec ff ff       	call   c0111cb3 <lock_sin>
    {
        size_t alen = iob->io_resid;
c0112fcf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fd2:	8b 40 0c             	mov    0xc(%eax),%eax
c0112fd5:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
c0112fd8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fdb:	8b 50 04             	mov    0x4(%eax),%edx
c0112fde:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fe1:	8b 00                	mov    (%eax),%eax
c0112fe3:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0112fe6:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0112fea:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0112fed:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0112ff1:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0112ff5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112ff9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112ffc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113000:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113003:	89 04 24             	mov    %eax,(%esp)
c0113006:	e8 c2 fc ff ff       	call   c0112ccd <sfs_io_nolock>
c011300b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (alen != 0) {
c011300e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113011:	85 c0                	test   %eax,%eax
c0113013:	74 12                	je     c0113027 <sfs_io+0xef>
            iobuf_skip(iob, alen);
c0113015:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113018:	89 44 24 04          	mov    %eax,0x4(%esp)
c011301c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011301f:	89 04 24             	mov    %eax,(%esp)
c0113022:	e8 f8 80 ff ff       	call   c010b11f <iobuf_skip>
        }
    }
    unlock_sin(sin);
c0113027:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011302a:	89 04 24             	mov    %eax,(%esp)
c011302d:	e8 97 ec ff ff       	call   c0111cc9 <unlock_sin>
    return ret;
c0113032:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c0113035:	c9                   	leave  
c0113036:	c3                   	ret    

c0113037 <sfs_read>:

// sfs_read - read file
static int
sfs_read(struct inode *node, struct iobuf *iob) {
c0113037:	55                   	push   %ebp
c0113038:	89 e5                	mov    %esp,%ebp
c011303a:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 0);
c011303d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0113044:	00 
c0113045:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113048:	89 44 24 04          	mov    %eax,0x4(%esp)
c011304c:	8b 45 08             	mov    0x8(%ebp),%eax
c011304f:	89 04 24             	mov    %eax,(%esp)
c0113052:	e8 e1 fe ff ff       	call   c0112f38 <sfs_io>
}
c0113057:	c9                   	leave  
c0113058:	c3                   	ret    

c0113059 <sfs_write>:

// sfs_write - write file
static int
sfs_write(struct inode *node, struct iobuf *iob) {
c0113059:	55                   	push   %ebp
c011305a:	89 e5                	mov    %esp,%ebp
c011305c:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 1);
c011305f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0113066:	00 
c0113067:	8b 45 0c             	mov    0xc(%ebp),%eax
c011306a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011306e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113071:	89 04 24             	mov    %eax,(%esp)
c0113074:	e8 bf fe ff ff       	call   c0112f38 <sfs_io>
}
c0113079:	c9                   	leave  
c011307a:	c3                   	ret    

c011307b <sfs_fstat>:

/*
 * sfs_fstat - Return nlinks/block/size, etc. info about a file. The pointer is a pointer to struct stat;
 */
static int
sfs_fstat(struct inode *node, struct stat *stat) {
c011307b:	55                   	push   %ebp
c011307c:	89 e5                	mov    %esp,%ebp
c011307e:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c0113081:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0113088:	00 
c0113089:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0113090:	00 
c0113091:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113094:	89 04 24             	mov    %eax,(%esp)
c0113097:	e8 93 1e 00 00       	call   c0114f2f <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c011309c:	8b 45 08             	mov    0x8(%ebp),%eax
c011309f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01130a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01130a6:	74 17                	je     c01130bf <sfs_fstat+0x44>
c01130a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01130ab:	8b 40 3c             	mov    0x3c(%eax),%eax
c01130ae:	85 c0                	test   %eax,%eax
c01130b0:	74 0d                	je     c01130bf <sfs_fstat+0x44>
c01130b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01130b5:	8b 40 3c             	mov    0x3c(%eax),%eax
c01130b8:	8b 40 28             	mov    0x28(%eax),%eax
c01130bb:	85 c0                	test   %eax,%eax
c01130bd:	75 24                	jne    c01130e3 <sfs_fstat+0x68>
c01130bf:	c7 44 24 0c c0 90 11 	movl   $0xc01190c0,0xc(%esp)
c01130c6:	c0 
c01130c7:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c01130ce:	c0 
c01130cf:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c01130d6:	00 
c01130d7:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c01130de:	e8 e5 dd fe ff       	call   c0100ec8 <__panic>
c01130e3:	c7 44 24 04 10 91 11 	movl   $0xc0119110,0x4(%esp)
c01130ea:	c0 
c01130eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01130ee:	89 04 24             	mov    %eax,(%esp)
c01130f1:	e8 8f bc ff ff       	call   c010ed85 <inode_check>
c01130f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01130f9:	8b 40 3c             	mov    0x3c(%eax),%eax
c01130fc:	8b 40 28             	mov    0x28(%eax),%eax
c01130ff:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113102:	89 54 24 04          	mov    %edx,0x4(%esp)
c0113106:	8b 55 08             	mov    0x8(%ebp),%edx
c0113109:	89 14 24             	mov    %edx,(%esp)
c011310c:	ff d0                	call   *%eax
c011310e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113111:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113115:	74 05                	je     c011311c <sfs_fstat+0xa1>
        return ret;
c0113117:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011311a:	eb 71                	jmp    c011318d <sfs_fstat+0x112>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c011311c:	8b 45 08             	mov    0x8(%ebp),%eax
c011311f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113122:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113126:	74 0d                	je     c0113135 <sfs_fstat+0xba>
c0113128:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011312b:	8b 40 2c             	mov    0x2c(%eax),%eax
c011312e:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113133:	74 24                	je     c0113159 <sfs_fstat+0xde>
c0113135:	c7 44 24 0c 90 8e 11 	movl   $0xc0118e90,0xc(%esp)
c011313c:	c0 
c011313d:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113144:	c0 
c0113145:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c011314c:	00 
c011314d:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113154:	e8 6f dd fe ff       	call   c0100ec8 <__panic>
c0113159:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011315c:	8b 00                	mov    (%eax),%eax
c011315e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = din->nlinks;
c0113161:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113164:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0113168:	0f b7 d0             	movzwl %ax,%edx
c011316b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011316e:	89 50 04             	mov    %edx,0x4(%eax)
    stat->st_blocks = din->blocks;
c0113171:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113174:	8b 50 08             	mov    0x8(%eax),%edx
c0113177:	8b 45 0c             	mov    0xc(%ebp),%eax
c011317a:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = din->size;
c011317d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113180:	8b 10                	mov    (%eax),%edx
c0113182:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113185:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0113188:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011318d:	c9                   	leave  
c011318e:	c3                   	ret    

c011318f <sfs_fsync>:

/*
 * sfs_fsync - Force any dirty inode info associated with this file to stable storage.
 */
static int
sfs_fsync(struct inode *node) {
c011318f:	55                   	push   %ebp
c0113190:	89 e5                	mov    %esp,%ebp
c0113192:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113195:	8b 45 08             	mov    0x8(%ebp),%eax
c0113198:	8b 40 38             	mov    0x38(%eax),%eax
c011319b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011319e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01131a2:	74 0a                	je     c01131ae <sfs_fsync+0x1f>
c01131a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01131a7:	8b 40 6c             	mov    0x6c(%eax),%eax
c01131aa:	85 c0                	test   %eax,%eax
c01131ac:	74 24                	je     c01131d2 <sfs_fsync+0x43>
c01131ae:	c7 44 24 0c 94 90 11 	movl   $0xc0119094,0xc(%esp)
c01131b5:	c0 
c01131b6:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c01131bd:	c0 
c01131be:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c01131c5:	00 
c01131c6:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c01131cd:	e8 f6 dc fe ff       	call   c0100ec8 <__panic>
c01131d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01131d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01131d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01131db:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01131de:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01131e2:	74 0d                	je     c01131f1 <sfs_fsync+0x62>
c01131e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01131e7:	8b 40 2c             	mov    0x2c(%eax),%eax
c01131ea:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01131ef:	74 24                	je     c0113215 <sfs_fsync+0x86>
c01131f1:	c7 44 24 0c 90 8e 11 	movl   $0xc0118e90,0xc(%esp)
c01131f8:	c0 
c01131f9:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113200:	c0 
c0113201:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
c0113208:	00 
c0113209:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113210:	e8 b3 dc fe ff       	call   c0100ec8 <__panic>
c0113215:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113218:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int ret = 0;
c011321b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (sin->dirty) {
c0113222:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113225:	8b 40 08             	mov    0x8(%eax),%eax
c0113228:	85 c0                	test   %eax,%eax
c011322a:	74 6b                	je     c0113297 <sfs_fsync+0x108>
        lock_sin(sin);
c011322c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011322f:	89 04 24             	mov    %eax,(%esp)
c0113232:	e8 7c ea ff ff       	call   c0111cb3 <lock_sin>
        {
            if (sin->dirty) {
c0113237:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011323a:	8b 40 08             	mov    0x8(%eax),%eax
c011323d:	85 c0                	test   %eax,%eax
c011323f:	74 4b                	je     c011328c <sfs_fsync+0xfd>
                sin->dirty = 0;
c0113241:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113244:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
c011324b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011324e:	8b 50 04             	mov    0x4(%eax),%edx
c0113251:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113254:	8b 00                	mov    (%eax),%eax
c0113256:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011325d:	00 
c011325e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0113262:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c0113269:	00 
c011326a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011326e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113271:	89 04 24             	mov    %eax,(%esp)
c0113274:	e8 ae 0e 00 00       	call   c0114127 <sfs_wbuf>
c0113279:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011327c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113280:	74 0a                	je     c011328c <sfs_fsync+0xfd>
                    sin->dirty = 1;
c0113282:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113285:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                }
            }
        }
        unlock_sin(sin);
c011328c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011328f:	89 04 24             	mov    %eax,(%esp)
c0113292:	e8 32 ea ff ff       	call   c0111cc9 <unlock_sin>
    }
    return ret;
c0113297:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011329a:	c9                   	leave  
c011329b:	c3                   	ret    

c011329c <sfs_namefile>:
/*
 *sfs_namefile -Compute pathname relative to filesystem root of the file and copy to the specified io buffer.
 *  
 */
static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
c011329c:	55                   	push   %ebp
c011329d:	89 e5                	mov    %esp,%ebp
c011329f:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c01132a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132a5:	8b 40 0c             	mov    0xc(%eax),%eax
c01132a8:	83 f8 02             	cmp    $0x2,%eax
c01132ab:	76 15                	jbe    c01132c2 <sfs_namefile+0x26>
c01132ad:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c01132b4:	e8 a5 17 ff ff       	call   c0104a5e <kmalloc>
c01132b9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01132bc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01132c0:	75 0a                	jne    c01132cc <sfs_namefile+0x30>
        return -E_NO_MEM;
c01132c2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01132c7:	e9 bd 02 00 00       	jmp    c0113589 <sfs_namefile+0x2ed>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01132cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01132cf:	8b 40 38             	mov    0x38(%eax),%eax
c01132d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01132d5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01132d9:	74 0a                	je     c01132e5 <sfs_namefile+0x49>
c01132db:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01132de:	8b 40 6c             	mov    0x6c(%eax),%eax
c01132e1:	85 c0                	test   %eax,%eax
c01132e3:	74 24                	je     c0113309 <sfs_namefile+0x6d>
c01132e5:	c7 44 24 0c 94 90 11 	movl   $0xc0119094,0xc(%esp)
c01132ec:	c0 
c01132ed:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c01132f4:	c0 
c01132f5:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c01132fc:	00 
c01132fd:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113304:	e8 bf db fe ff       	call   c0100ec8 <__panic>
c0113309:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011330c:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011330f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113312:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113315:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0113319:	74 0d                	je     c0113328 <sfs_namefile+0x8c>
c011331b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011331e:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113321:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113326:	74 24                	je     c011334c <sfs_namefile+0xb0>
c0113328:	c7 44 24 0c 90 8e 11 	movl   $0xc0118e90,0xc(%esp)
c011332f:	c0 
c0113330:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113337:	c0 
c0113338:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c011333f:	00 
c0113340:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113347:	e8 7c db fe ff       	call   c0100ec8 <__panic>
c011334c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011334f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
c0113352:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113355:	8b 10                	mov    (%eax),%edx
c0113357:	8b 45 0c             	mov    0xc(%ebp),%eax
c011335a:	8b 40 0c             	mov    0xc(%eax),%eax
c011335d:	01 d0                	add    %edx,%eax
c011335f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t alen, resid = iob->io_resid - 2;
c0113362:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113365:	8b 40 0c             	mov    0xc(%eax),%eax
c0113368:	83 e8 02             	sub    $0x2,%eax
c011336b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c011336e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113371:	89 04 24             	mov    %eax,(%esp)
c0113374:	e8 04 b8 ff ff       	call   c010eb7d <inode_ref_inc>
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
c0113379:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113380:	00 
c0113381:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0113384:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113388:	c7 44 24 08 18 91 11 	movl   $0xc0119118,0x8(%esp)
c011338f:	c0 
c0113390:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113393:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113397:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011339a:	89 04 24             	mov    %eax,(%esp)
c011339d:	e8 0c f8 ff ff       	call   c0112bae <sfs_lookup_once>
c01133a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01133a5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01133a9:	74 05                	je     c01133b0 <sfs_namefile+0x114>
            goto failed;
c01133ab:	e9 c0 01 00 00       	jmp    c0113570 <sfs_namefile+0x2d4>
        }

        uint32_t ino = sin->ino;
c01133b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01133b3:	8b 40 04             	mov    0x4(%eax),%eax
c01133b6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vop_ref_dec(node);
c01133b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01133bc:	89 04 24             	mov    %eax,(%esp)
c01133bf:	e8 d3 b7 ff ff       	call   c010eb97 <inode_ref_dec>
        if (node == parent) {
c01133c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01133c7:	39 45 08             	cmp    %eax,0x8(%ebp)
c01133ca:	75 76                	jne    c0113442 <sfs_namefile+0x1a6>
            vop_ref_dec(node);
c01133cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01133cf:	89 04 24             	mov    %eax,(%esp)
c01133d2:	e8 c0 b7 ff ff       	call   c010eb97 <inode_ref_dec>
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
c01133d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01133da:	8b 40 0c             	mov    0xc(%eax),%eax
c01133dd:	2b 45 e8             	sub    -0x18(%ebp),%eax
c01133e0:	83 e8 02             	sub    $0x2,%eax
c01133e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
    ptr = memmove(iob->io_base + 1, ptr, alen);
c01133e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01133e9:	8b 00                	mov    (%eax),%eax
c01133eb:	8d 50 01             	lea    0x1(%eax),%edx
c01133ee:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01133f1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01133f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01133f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01133fc:	89 14 24             	mov    %edx,(%esp)
c01133ff:	e8 6a 1b 00 00       	call   c0114f6e <memmove>
c0113404:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptr[-1] = '/', ptr[alen] = '\0';
c0113407:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011340a:	83 e8 01             	sub    $0x1,%eax
c011340d:	c6 00 2f             	movb   $0x2f,(%eax)
c0113410:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113413:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0113416:	01 d0                	add    %edx,%eax
c0113418:	c6 00 00             	movb   $0x0,(%eax)
    iobuf_skip(iob, alen);
c011341b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011341e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113422:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113425:	89 04 24             	mov    %eax,(%esp)
c0113428:	e8 f2 7c ff ff       	call   c010b11f <iobuf_skip>
    kfree(entry);
c011342d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113430:	89 04 24             	mov    %eax,(%esp)
c0113433:	e8 41 16 ff ff       	call   c0104a79 <kfree>
    return 0;
c0113438:	b8 00 00 00 00       	mov    $0x0,%eax
c011343d:	e9 47 01 00 00       	jmp    c0113589 <sfs_namefile+0x2ed>
        if (node == parent) {
            vop_ref_dec(node);
            break;
        }

        node = parent, sin = vop_info(node, sfs_inode);
c0113442:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113445:	89 45 08             	mov    %eax,0x8(%ebp)
c0113448:	8b 45 08             	mov    0x8(%ebp),%eax
c011344b:	89 45 cc             	mov    %eax,-0x34(%ebp)
c011344e:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0113452:	74 0d                	je     c0113461 <sfs_namefile+0x1c5>
c0113454:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113457:	8b 40 2c             	mov    0x2c(%eax),%eax
c011345a:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011345f:	74 24                	je     c0113485 <sfs_namefile+0x1e9>
c0113461:	c7 44 24 0c 90 8e 11 	movl   $0xc0118e90,0xc(%esp)
c0113468:	c0 
c0113469:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113470:	c0 
c0113471:	c7 44 24 04 d5 02 00 	movl   $0x2d5,0x4(%esp)
c0113478:	00 
c0113479:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113480:	e8 43 da fe ff       	call   c0100ec8 <__panic>
c0113485:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113488:	89 45 f4             	mov    %eax,-0xc(%ebp)
        assert(ino != sin->ino && sin->din->type == SFS_TYPE_DIR);
c011348b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011348e:	8b 40 04             	mov    0x4(%eax),%eax
c0113491:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113494:	74 0f                	je     c01134a5 <sfs_namefile+0x209>
c0113496:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113499:	8b 00                	mov    (%eax),%eax
c011349b:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011349f:	66 83 f8 02          	cmp    $0x2,%ax
c01134a3:	74 24                	je     c01134c9 <sfs_namefile+0x22d>
c01134a5:	c7 44 24 0c 1c 91 11 	movl   $0xc011911c,0xc(%esp)
c01134ac:	c0 
c01134ad:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c01134b4:	c0 
c01134b5:	c7 44 24 04 d6 02 00 	movl   $0x2d6,0x4(%esp)
c01134bc:	00 
c01134bd:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c01134c4:	e8 ff d9 fe ff       	call   c0100ec8 <__panic>

        lock_sin(sin);
c01134c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01134cc:	89 04 24             	mov    %eax,(%esp)
c01134cf:	e8 df e7 ff ff       	call   c0111cb3 <lock_sin>
        {
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
c01134d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01134d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01134db:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01134de:	89 44 24 08          	mov    %eax,0x8(%esp)
c01134e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01134e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01134e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01134ec:	89 04 24             	mov    %eax,(%esp)
c01134ef:	e8 4e f6 ff ff       	call   c0112b42 <sfs_dirent_findino_nolock>
c01134f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        unlock_sin(sin);
c01134f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01134fa:	89 04 24             	mov    %eax,(%esp)
c01134fd:	e8 c7 e7 ff ff       	call   c0111cc9 <unlock_sin>

        if (ret != 0) {
c0113502:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113506:	74 03                	je     c011350b <sfs_namefile+0x26f>
            goto failed;
c0113508:	90                   	nop
c0113509:	eb 65                	jmp    c0113570 <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
c011350b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011350e:	83 c0 04             	add    $0x4,%eax
c0113511:	89 04 24             	mov    %eax,(%esp)
c0113514:	e8 c0 16 00 00       	call   c0114bd9 <strlen>
c0113519:	83 c0 01             	add    $0x1,%eax
c011351c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011351f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113522:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0113525:	76 09                	jbe    c0113530 <sfs_namefile+0x294>
    iobuf_skip(iob, alen);
    kfree(entry);
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c0113527:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c011352e:	eb 40                	jmp    c0113570 <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
            goto failed_nomem;
        }
        resid -= alen, ptr -= alen;
c0113530:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113533:	29 45 e8             	sub    %eax,-0x18(%ebp)
c0113536:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113539:	f7 d8                	neg    %eax
c011353b:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(ptr, entry->name, alen - 1);
c011353e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113541:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113544:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113547:	83 c0 04             	add    $0x4,%eax
c011354a:	89 54 24 08          	mov    %edx,0x8(%esp)
c011354e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113552:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113555:	89 04 24             	mov    %eax,(%esp)
c0113558:	e8 b4 1a 00 00       	call   c0115011 <memcpy>
        ptr[alen - 1] = '/';
c011355d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113560:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113563:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113566:	01 d0                	add    %edx,%eax
c0113568:	c6 00 2f             	movb   $0x2f,(%eax)
    }
c011356b:	e9 09 fe ff ff       	jmp    c0113379 <sfs_namefile+0xdd>
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
failed:
    vop_ref_dec(node);
c0113570:	8b 45 08             	mov    0x8(%ebp),%eax
c0113573:	89 04 24             	mov    %eax,(%esp)
c0113576:	e8 1c b6 ff ff       	call   c010eb97 <inode_ref_dec>
    kfree(entry);
c011357b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011357e:	89 04 24             	mov    %eax,(%esp)
c0113581:	e8 f3 14 ff ff       	call   c0104a79 <kfree>
    return ret;
c0113586:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0113589:	c9                   	leave  
c011358a:	c3                   	ret    

c011358b <sfs_getdirentry_sub_nolock>:

/*
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c011358b:	55                   	push   %ebp
c011358c:	89 e5                	mov    %esp,%ebp
c011358e:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0113591:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113594:	8b 00                	mov    (%eax),%eax
c0113596:	8b 40 08             	mov    0x8(%eax),%eax
c0113599:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c011359c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01135a3:	eb 4c                	jmp    c01135f1 <sfs_getdirentry_sub_nolock+0x66>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c01135a5:	8b 45 14             	mov    0x14(%ebp),%eax
c01135a8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01135ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01135af:	89 44 24 08          	mov    %eax,0x8(%esp)
c01135b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01135b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01135ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01135bd:	89 04 24             	mov    %eax,(%esp)
c01135c0:	e8 54 f3 ff ff       	call   c0112919 <sfs_dirent_read_nolock>
c01135c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01135c8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01135cc:	74 05                	je     c01135d3 <sfs_getdirentry_sub_nolock+0x48>
            return ret;
c01135ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01135d1:	eb 2b                	jmp    c01135fe <sfs_getdirentry_sub_nolock+0x73>
        }
        if (entry->ino != 0) {
c01135d3:	8b 45 14             	mov    0x14(%ebp),%eax
c01135d6:	8b 00                	mov    (%eax),%eax
c01135d8:	85 c0                	test   %eax,%eax
c01135da:	74 11                	je     c01135ed <sfs_getdirentry_sub_nolock+0x62>
            if (slot == 0) {
c01135dc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01135e0:	75 07                	jne    c01135e9 <sfs_getdirentry_sub_nolock+0x5e>
                return 0;
c01135e2:	b8 00 00 00 00       	mov    $0x0,%eax
c01135e7:	eb 15                	jmp    c01135fe <sfs_getdirentry_sub_nolock+0x73>
            }
            slot --;
c01135e9:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c01135ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01135f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01135f4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01135f7:	7c ac                	jl     c01135a5 <sfs_getdirentry_sub_nolock+0x1a>
                return 0;
            }
            slot --;
        }
    }
    return -E_NOENT;
c01135f9:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c01135fe:	c9                   	leave  
c01135ff:	c3                   	ret    

c0113600 <sfs_getdirentry>:
/*
 * sfs_getdirentry - according to the iob->io_offset, calculate the dir entry's slot in disk block,
                     get dir entry content from the disk 
 */
static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
c0113600:	55                   	push   %ebp
c0113601:	89 e5                	mov    %esp,%ebp
c0113603:	83 ec 48             	sub    $0x48,%esp
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0113606:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c011360d:	e8 4c 14 ff ff       	call   c0104a5e <kmalloc>
c0113612:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113615:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113619:	75 0a                	jne    c0113625 <sfs_getdirentry+0x25>
        return -E_NO_MEM;
c011361b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113620:	e9 6b 01 00 00       	jmp    c0113790 <sfs_getdirentry+0x190>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113625:	8b 45 08             	mov    0x8(%ebp),%eax
c0113628:	8b 40 38             	mov    0x38(%eax),%eax
c011362b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011362e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113632:	74 0a                	je     c011363e <sfs_getdirentry+0x3e>
c0113634:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113637:	8b 40 6c             	mov    0x6c(%eax),%eax
c011363a:	85 c0                	test   %eax,%eax
c011363c:	74 24                	je     c0113662 <sfs_getdirentry+0x62>
c011363e:	c7 44 24 0c 94 90 11 	movl   $0xc0119094,0xc(%esp)
c0113645:	c0 
c0113646:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c011364d:	c0 
c011364e:	c7 44 24 04 17 03 00 	movl   $0x317,0x4(%esp)
c0113655:	00 
c0113656:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c011365d:	e8 66 d8 fe ff       	call   c0100ec8 <__panic>
c0113662:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113665:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113668:	8b 45 08             	mov    0x8(%ebp),%eax
c011366b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011366e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113672:	74 0d                	je     c0113681 <sfs_getdirentry+0x81>
c0113674:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113677:	8b 40 2c             	mov    0x2c(%eax),%eax
c011367a:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011367f:	74 24                	je     c01136a5 <sfs_getdirentry+0xa5>
c0113681:	c7 44 24 0c 90 8e 11 	movl   $0xc0118e90,0xc(%esp)
c0113688:	c0 
c0113689:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113690:	c0 
c0113691:	c7 44 24 04 18 03 00 	movl   $0x318,0x4(%esp)
c0113698:	00 
c0113699:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c01136a0:	e8 23 d8 fe ff       	call   c0100ec8 <__panic>
c01136a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01136a8:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int ret, slot;
    off_t offset = iob->io_offset;
c01136ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c01136ae:	8b 40 04             	mov    0x4(%eax),%eax
c01136b1:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
c01136b4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01136b8:	78 0a                	js     c01136c4 <sfs_getdirentry+0xc4>
c01136ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01136bd:	0f b6 c0             	movzbl %al,%eax
c01136c0:	85 c0                	test   %eax,%eax
c01136c2:	74 15                	je     c01136d9 <sfs_getdirentry+0xd9>
        kfree(entry);
c01136c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01136c7:	89 04 24             	mov    %eax,(%esp)
c01136ca:	e8 aa 13 ff ff       	call   c0104a79 <kfree>
        return -E_INVAL;
c01136cf:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01136d4:	e9 b7 00 00 00       	jmp    c0113790 <sfs_getdirentry+0x190>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
c01136d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01136dc:	c1 e8 08             	shr    $0x8,%eax
c01136df:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01136e2:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01136e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01136e8:	8b 00                	mov    (%eax),%eax
c01136ea:	8b 40 08             	mov    0x8(%eax),%eax
c01136ed:	39 c2                	cmp    %eax,%edx
c01136ef:	76 15                	jbe    c0113706 <sfs_getdirentry+0x106>
        kfree(entry);
c01136f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01136f4:	89 04 24             	mov    %eax,(%esp)
c01136f7:	e8 7d 13 ff ff       	call   c0104a79 <kfree>
        return -E_NOENT;
c01136fc:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0113701:	e9 8a 00 00 00       	jmp    c0113790 <sfs_getdirentry+0x190>
    }
    lock_sin(sin);
c0113706:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113709:	89 04 24             	mov    %eax,(%esp)
c011370c:	e8 a2 e5 ff ff       	call   c0111cb3 <lock_sin>
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
c0113711:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113714:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113718:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011371b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011371f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113722:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113726:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113729:	89 04 24             	mov    %eax,(%esp)
c011372c:	e8 5a fe ff ff       	call   c011358b <sfs_getdirentry_sub_nolock>
c0113731:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113734:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113738:	74 0d                	je     c0113747 <sfs_getdirentry+0x147>
        unlock_sin(sin);
c011373a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011373d:	89 04 24             	mov    %eax,(%esp)
c0113740:	e8 84 e5 ff ff       	call   c0111cc9 <unlock_sin>
        goto out;
c0113745:	eb 3b                	jmp    c0113782 <sfs_getdirentry+0x182>
    }
    unlock_sin(sin);
c0113747:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011374a:	89 04 24             	mov    %eax,(%esp)
c011374d:	e8 77 e5 ff ff       	call   c0111cc9 <unlock_sin>
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
c0113752:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113755:	83 c0 04             	add    $0x4,%eax
c0113758:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011375f:	00 
c0113760:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0113767:	00 
c0113768:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c011376f:	00 
c0113770:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113774:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113777:	89 04 24             	mov    %eax,(%esp)
c011377a:	e8 8b 78 ff ff       	call   c010b00a <iobuf_move>
c011377f:	89 45 f4             	mov    %eax,-0xc(%ebp)
out:
    kfree(entry);
c0113782:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113785:	89 04 24             	mov    %eax,(%esp)
c0113788:	e8 ec 12 ff ff       	call   c0104a79 <kfree>
    return ret;
c011378d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113790:	c9                   	leave  
c0113791:	c3                   	ret    

c0113792 <sfs_reclaim>:

/*
 * sfs_reclaim - Free all resources inode occupied . Called when inode is no longer in use. 
 */
static int
sfs_reclaim(struct inode *node) {
c0113792:	55                   	push   %ebp
c0113793:	89 e5                	mov    %esp,%ebp
c0113795:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113798:	8b 45 08             	mov    0x8(%ebp),%eax
c011379b:	8b 40 38             	mov    0x38(%eax),%eax
c011379e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01137a1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01137a5:	74 0a                	je     c01137b1 <sfs_reclaim+0x1f>
c01137a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01137aa:	8b 40 6c             	mov    0x6c(%eax),%eax
c01137ad:	85 c0                	test   %eax,%eax
c01137af:	74 24                	je     c01137d5 <sfs_reclaim+0x43>
c01137b1:	c7 44 24 0c 94 90 11 	movl   $0xc0119094,0xc(%esp)
c01137b8:	c0 
c01137b9:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c01137c0:	c0 
c01137c1:	c7 44 24 04 35 03 00 	movl   $0x335,0x4(%esp)
c01137c8:	00 
c01137c9:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c01137d0:	e8 f3 d6 fe ff       	call   c0100ec8 <__panic>
c01137d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01137d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01137db:	8b 45 08             	mov    0x8(%ebp),%eax
c01137de:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01137e1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01137e5:	74 0d                	je     c01137f4 <sfs_reclaim+0x62>
c01137e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01137ea:	8b 40 2c             	mov    0x2c(%eax),%eax
c01137ed:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01137f2:	74 24                	je     c0113818 <sfs_reclaim+0x86>
c01137f4:	c7 44 24 0c 90 8e 11 	movl   $0xc0118e90,0xc(%esp)
c01137fb:	c0 
c01137fc:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113803:	c0 
c0113804:	c7 44 24 04 36 03 00 	movl   $0x336,0x4(%esp)
c011380b:	00 
c011380c:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113813:	e8 b0 d6 fe ff       	call   c0100ec8 <__panic>
c0113818:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011381b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int  ret = -E_BUSY;
c011381e:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
    uint32_t ent;
    lock_sfs_fs(sfs);
c0113825:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113828:	89 04 24             	mov    %eax,(%esp)
c011382b:	e8 4d 0b 00 00       	call   c011437d <lock_sfs_fs>
    assert(sin->reclaim_count > 0);
c0113830:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113833:	8b 40 0c             	mov    0xc(%eax),%eax
c0113836:	85 c0                	test   %eax,%eax
c0113838:	7f 24                	jg     c011385e <sfs_reclaim+0xcc>
c011383a:	c7 44 24 0c 4e 91 11 	movl   $0xc011914e,0xc(%esp)
c0113841:	c0 
c0113842:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113849:	c0 
c011384a:	c7 44 24 04 3b 03 00 	movl   $0x33b,0x4(%esp)
c0113851:	00 
c0113852:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113859:	e8 6a d6 fe ff       	call   c0100ec8 <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
c011385e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113861:	8b 40 0c             	mov    0xc(%eax),%eax
c0113864:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113867:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011386a:	89 50 0c             	mov    %edx,0xc(%eax)
c011386d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113870:	8b 40 0c             	mov    0xc(%eax),%eax
c0113873:	85 c0                	test   %eax,%eax
c0113875:	0f 85 a1 01 00 00    	jne    c0113a1c <sfs_reclaim+0x28a>
c011387b:	8b 45 08             	mov    0x8(%ebp),%eax
c011387e:	89 04 24             	mov    %eax,(%esp)
c0113881:	e8 22 e4 ff ff       	call   c0111ca8 <inode_ref_count>
c0113886:	85 c0                	test   %eax,%eax
c0113888:	0f 85 8e 01 00 00    	jne    c0113a1c <sfs_reclaim+0x28a>
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
c011388e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113891:	8b 00                	mov    (%eax),%eax
c0113893:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0113897:	66 85 c0             	test   %ax,%ax
c011389a:	0f 85 81 00 00 00    	jne    c0113921 <sfs_reclaim+0x18f>
        if ((ret = vop_truncate(node, 0)) != 0) {
c01138a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01138a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01138a6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01138aa:	74 17                	je     c01138c3 <sfs_reclaim+0x131>
c01138ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01138af:	8b 40 3c             	mov    0x3c(%eax),%eax
c01138b2:	85 c0                	test   %eax,%eax
c01138b4:	74 0d                	je     c01138c3 <sfs_reclaim+0x131>
c01138b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01138b9:	8b 40 3c             	mov    0x3c(%eax),%eax
c01138bc:	8b 40 30             	mov    0x30(%eax),%eax
c01138bf:	85 c0                	test   %eax,%eax
c01138c1:	75 24                	jne    c01138e7 <sfs_reclaim+0x155>
c01138c3:	c7 44 24 0c 68 91 11 	movl   $0xc0119168,0xc(%esp)
c01138ca:	c0 
c01138cb:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c01138d2:	c0 
c01138d3:	c7 44 24 04 40 03 00 	movl   $0x340,0x4(%esp)
c01138da:	00 
c01138db:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c01138e2:	e8 e1 d5 fe ff       	call   c0100ec8 <__panic>
c01138e7:	c7 44 24 04 b9 91 11 	movl   $0xc01191b9,0x4(%esp)
c01138ee:	c0 
c01138ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01138f2:	89 04 24             	mov    %eax,(%esp)
c01138f5:	e8 8b b4 ff ff       	call   c010ed85 <inode_check>
c01138fa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01138fd:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113900:	8b 40 30             	mov    0x30(%eax),%eax
c0113903:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011390a:	00 
c011390b:	8b 55 08             	mov    0x8(%ebp),%edx
c011390e:	89 14 24             	mov    %edx,(%esp)
c0113911:	ff d0                	call   *%eax
c0113913:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113916:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011391a:	74 05                	je     c0113921 <sfs_reclaim+0x18f>
            goto failed_unlock;
c011391c:	e9 fb 00 00 00       	jmp    c0113a1c <sfs_reclaim+0x28a>
        }
    }
    if (sin->dirty) {
c0113921:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113924:	8b 40 08             	mov    0x8(%eax),%eax
c0113927:	85 c0                	test   %eax,%eax
c0113929:	74 76                	je     c01139a1 <sfs_reclaim+0x20f>
        if ((ret = vop_fsync(node)) != 0) {
c011392b:	8b 45 08             	mov    0x8(%ebp),%eax
c011392e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0113931:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113935:	74 17                	je     c011394e <sfs_reclaim+0x1bc>
c0113937:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011393a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011393d:	85 c0                	test   %eax,%eax
c011393f:	74 0d                	je     c011394e <sfs_reclaim+0x1bc>
c0113941:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113944:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113947:	8b 40 18             	mov    0x18(%eax),%eax
c011394a:	85 c0                	test   %eax,%eax
c011394c:	75 24                	jne    c0113972 <sfs_reclaim+0x1e0>
c011394e:	c7 44 24 0c 24 90 11 	movl   $0xc0119024,0xc(%esp)
c0113955:	c0 
c0113956:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c011395d:	c0 
c011395e:	c7 44 24 04 45 03 00 	movl   $0x345,0x4(%esp)
c0113965:	00 
c0113966:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c011396d:	e8 56 d5 fe ff       	call   c0100ec8 <__panic>
c0113972:	c7 44 24 04 72 90 11 	movl   $0xc0119072,0x4(%esp)
c0113979:	c0 
c011397a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011397d:	89 04 24             	mov    %eax,(%esp)
c0113980:	e8 00 b4 ff ff       	call   c010ed85 <inode_check>
c0113985:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113988:	8b 40 3c             	mov    0x3c(%eax),%eax
c011398b:	8b 40 18             	mov    0x18(%eax),%eax
c011398e:	8b 55 08             	mov    0x8(%ebp),%edx
c0113991:	89 14 24             	mov    %edx,(%esp)
c0113994:	ff d0                	call   *%eax
c0113996:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113999:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011399d:	74 02                	je     c01139a1 <sfs_reclaim+0x20f>
            goto failed_unlock;
c011399f:	eb 7b                	jmp    c0113a1c <sfs_reclaim+0x28a>
        }
    }
    sfs_remove_links(sin);
c01139a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139a4:	89 04 24             	mov    %eax,(%esp)
c01139a7:	e8 77 e4 ff ff       	call   c0111e23 <sfs_remove_links>
    unlock_sfs_fs(sfs);
c01139ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01139af:	89 04 24             	mov    %eax,(%esp)
c01139b2:	e8 f2 09 00 00       	call   c01143a9 <unlock_sfs_fs>

    if (sin->din->nlinks == 0) {
c01139b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139ba:	8b 00                	mov    (%eax),%eax
c01139bc:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01139c0:	66 85 c0             	test   %ax,%ax
c01139c3:	75 38                	jne    c01139fd <sfs_reclaim+0x26b>
        sfs_block_free(sfs, sin->ino);
c01139c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139c8:	8b 40 04             	mov    0x4(%eax),%eax
c01139cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01139cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01139d2:	89 04 24             	mov    %eax,(%esp)
c01139d5:	e8 d9 e5 ff ff       	call   c0111fb3 <sfs_block_free>
        if ((ent = sin->din->indirect) != 0) {
c01139da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139dd:	8b 00                	mov    (%eax),%eax
c01139df:	8b 40 3c             	mov    0x3c(%eax),%eax
c01139e2:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01139e5:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01139e9:	74 12                	je     c01139fd <sfs_reclaim+0x26b>
            sfs_block_free(sfs, ent);
c01139eb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01139ee:	89 44 24 04          	mov    %eax,0x4(%esp)
c01139f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01139f5:	89 04 24             	mov    %eax,(%esp)
c01139f8:	e8 b6 e5 ff ff       	call   c0111fb3 <sfs_block_free>
        }
    }
    kfree(sin->din);
c01139fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a00:	8b 00                	mov    (%eax),%eax
c0113a02:	89 04 24             	mov    %eax,(%esp)
c0113a05:	e8 6f 10 ff ff       	call   c0104a79 <kfree>
    vop_kill(node);
c0113a0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0113a0d:	89 04 24             	mov    %eax,(%esp)
c0113a10:	e8 ef b0 ff ff       	call   c010eb04 <inode_kill>
    return 0;
c0113a15:	b8 00 00 00 00       	mov    $0x0,%eax
c0113a1a:	eb 0e                	jmp    c0113a2a <sfs_reclaim+0x298>

failed_unlock:
    unlock_sfs_fs(sfs);
c0113a1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113a1f:	89 04 24             	mov    %eax,(%esp)
c0113a22:	e8 82 09 00 00       	call   c01143a9 <unlock_sfs_fs>
    return ret;
c0113a27:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113a2a:	c9                   	leave  
c0113a2b:	c3                   	ret    

c0113a2c <sfs_gettype>:

/*
 * sfs_gettype - Return type of file. The values for file types are in sfs.h.
 */
static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
c0113a2c:	55                   	push   %ebp
c0113a2d:	89 e5                	mov    %esp,%ebp
c0113a2f:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0113a32:	8b 45 08             	mov    0x8(%ebp),%eax
c0113a35:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113a38:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113a3c:	74 0d                	je     c0113a4b <sfs_gettype+0x1f>
c0113a3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113a41:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113a44:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113a49:	74 24                	je     c0113a6f <sfs_gettype+0x43>
c0113a4b:	c7 44 24 0c 90 8e 11 	movl   $0xc0118e90,0xc(%esp)
c0113a52:	c0 
c0113a53:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113a5a:	c0 
c0113a5b:	c7 44 24 04 60 03 00 	movl   $0x360,0x4(%esp)
c0113a62:	00 
c0113a63:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113a6a:	e8 59 d4 fe ff       	call   c0100ec8 <__panic>
c0113a6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113a72:	8b 00                	mov    (%eax),%eax
c0113a74:	89 45 f0             	mov    %eax,-0x10(%ebp)
    switch (din->type) {
c0113a77:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113a7a:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113a7e:	0f b7 c0             	movzwl %ax,%eax
c0113a81:	83 f8 02             	cmp    $0x2,%eax
c0113a84:	74 0c                	je     c0113a92 <sfs_gettype+0x66>
c0113a86:	83 f8 03             	cmp    $0x3,%eax
c0113a89:	74 27                	je     c0113ab2 <sfs_gettype+0x86>
c0113a8b:	83 f8 01             	cmp    $0x1,%eax
c0113a8e:	74 12                	je     c0113aa2 <sfs_gettype+0x76>
c0113a90:	eb 30                	jmp    c0113ac2 <sfs_gettype+0x96>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
c0113a92:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a95:	c7 00 00 20 00 00    	movl   $0x2000,(%eax)
        return 0;
c0113a9b:	b8 00 00 00 00       	mov    $0x0,%eax
c0113aa0:	eb 4a                	jmp    c0113aec <sfs_gettype+0xc0>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
c0113aa2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113aa5:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
        return 0;
c0113aab:	b8 00 00 00 00       	mov    $0x0,%eax
c0113ab0:	eb 3a                	jmp    c0113aec <sfs_gettype+0xc0>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
c0113ab2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113ab5:	c7 00 00 30 00 00    	movl   $0x3000,(%eax)
        return 0;
c0113abb:	b8 00 00 00 00       	mov    $0x0,%eax
c0113ac0:	eb 2a                	jmp    c0113aec <sfs_gettype+0xc0>
    }
    panic("invalid file type %d.\n", din->type);
c0113ac2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ac5:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113ac9:	0f b7 c0             	movzwl %ax,%eax
c0113acc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113ad0:	c7 44 24 08 c0 8d 11 	movl   $0xc0118dc0,0x8(%esp)
c0113ad7:	c0 
c0113ad8:	c7 44 24 04 6c 03 00 	movl   $0x36c,0x4(%esp)
c0113adf:	00 
c0113ae0:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113ae7:	e8 dc d3 fe ff       	call   c0100ec8 <__panic>
}
c0113aec:	c9                   	leave  
c0113aed:	c3                   	ret    

c0113aee <sfs_tryseek>:

/* 
 * sfs_tryseek - Check if seeking to the specified position within the file is legal.
 */
static int
sfs_tryseek(struct inode *node, off_t pos) {
c0113aee:	55                   	push   %ebp
c0113aef:	89 e5                	mov    %esp,%ebp
c0113af1:	83 ec 28             	sub    $0x28,%esp
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
c0113af4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0113af8:	78 0a                	js     c0113b04 <sfs_tryseek+0x16>
c0113afa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113afd:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0113b02:	76 0a                	jbe    c0113b0e <sfs_tryseek+0x20>
        return -E_INVAL;
c0113b04:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113b09:	e9 ca 00 00 00       	jmp    c0113bd8 <sfs_tryseek+0xea>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113b0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b11:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113b14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113b18:	74 0d                	je     c0113b27 <sfs_tryseek+0x39>
c0113b1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113b1d:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113b20:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113b25:	74 24                	je     c0113b4b <sfs_tryseek+0x5d>
c0113b27:	c7 44 24 0c 90 8e 11 	movl   $0xc0118e90,0xc(%esp)
c0113b2e:	c0 
c0113b2f:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113b36:	c0 
c0113b37:	c7 44 24 04 77 03 00 	movl   $0x377,0x4(%esp)
c0113b3e:	00 
c0113b3f:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113b46:	e8 7d d3 fe ff       	call   c0100ec8 <__panic>
c0113b4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113b4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pos > sin->din->size) {
c0113b51:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113b54:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113b57:	8b 00                	mov    (%eax),%eax
c0113b59:	8b 00                	mov    (%eax),%eax
c0113b5b:	39 c2                	cmp    %eax,%edx
c0113b5d:	76 74                	jbe    c0113bd3 <sfs_tryseek+0xe5>
        return vop_truncate(node, pos);
c0113b5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b62:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113b65:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113b69:	74 17                	je     c0113b82 <sfs_tryseek+0x94>
c0113b6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b6e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113b71:	85 c0                	test   %eax,%eax
c0113b73:	74 0d                	je     c0113b82 <sfs_tryseek+0x94>
c0113b75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b78:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113b7b:	8b 40 30             	mov    0x30(%eax),%eax
c0113b7e:	85 c0                	test   %eax,%eax
c0113b80:	75 24                	jne    c0113ba6 <sfs_tryseek+0xb8>
c0113b82:	c7 44 24 0c 68 91 11 	movl   $0xc0119168,0xc(%esp)
c0113b89:	c0 
c0113b8a:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113b91:	c0 
c0113b92:	c7 44 24 04 79 03 00 	movl   $0x379,0x4(%esp)
c0113b99:	00 
c0113b9a:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113ba1:	e8 22 d3 fe ff       	call   c0100ec8 <__panic>
c0113ba6:	c7 44 24 04 b9 91 11 	movl   $0xc01191b9,0x4(%esp)
c0113bad:	c0 
c0113bae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113bb1:	89 04 24             	mov    %eax,(%esp)
c0113bb4:	e8 cc b1 ff ff       	call   c010ed85 <inode_check>
c0113bb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113bbc:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113bbf:	8b 40 30             	mov    0x30(%eax),%eax
c0113bc2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113bc5:	89 54 24 04          	mov    %edx,0x4(%esp)
c0113bc9:	8b 55 08             	mov    0x8(%ebp),%edx
c0113bcc:	89 14 24             	mov    %edx,(%esp)
c0113bcf:	ff d0                	call   *%eax
c0113bd1:	eb 05                	jmp    c0113bd8 <sfs_tryseek+0xea>
    }
    return 0;
c0113bd3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113bd8:	c9                   	leave  
c0113bd9:	c3                   	ret    

c0113bda <sfs_truncfile>:

/*
 * sfs_truncfile : reszie the file with new length
 */
static int
sfs_truncfile(struct inode *node, off_t len) {
c0113bda:	55                   	push   %ebp
c0113bdb:	89 e5                	mov    %esp,%ebp
c0113bdd:	83 ec 48             	sub    $0x48,%esp
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
c0113be0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0113be4:	78 0a                	js     c0113bf0 <sfs_truncfile+0x16>
c0113be6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113be9:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c0113bee:	76 0a                	jbe    c0113bfa <sfs_truncfile+0x20>
        return -E_INVAL;
c0113bf0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113bf5:	e9 d4 01 00 00       	jmp    c0113dce <sfs_truncfile+0x1f4>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113bfa:	8b 45 08             	mov    0x8(%ebp),%eax
c0113bfd:	8b 40 38             	mov    0x38(%eax),%eax
c0113c00:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113c03:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113c07:	74 0a                	je     c0113c13 <sfs_truncfile+0x39>
c0113c09:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113c0c:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113c0f:	85 c0                	test   %eax,%eax
c0113c11:	74 24                	je     c0113c37 <sfs_truncfile+0x5d>
c0113c13:	c7 44 24 0c 94 90 11 	movl   $0xc0119094,0xc(%esp)
c0113c1a:	c0 
c0113c1b:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113c22:	c0 
c0113c23:	c7 44 24 04 86 03 00 	movl   $0x386,0x4(%esp)
c0113c2a:	00 
c0113c2b:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113c32:	e8 91 d2 fe ff       	call   c0100ec8 <__panic>
c0113c37:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113c3a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113c3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113c40:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113c43:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113c47:	74 0d                	je     c0113c56 <sfs_truncfile+0x7c>
c0113c49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113c4c:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113c4f:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113c54:	74 24                	je     c0113c7a <sfs_truncfile+0xa0>
c0113c56:	c7 44 24 0c 90 8e 11 	movl   $0xc0118e90,0xc(%esp)
c0113c5d:	c0 
c0113c5e:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113c65:	c0 
c0113c66:	c7 44 24 04 87 03 00 	movl   $0x387,0x4(%esp)
c0113c6d:	00 
c0113c6e:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113c75:	e8 4e d2 fe ff       	call   c0100ec8 <__panic>
c0113c7a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113c7d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct sfs_disk_inode *din = sin->din;
c0113c80:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c83:	8b 00                	mov    (%eax),%eax
c0113c85:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int ret = 0;
c0113c88:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//new number of disk blocks of file
    uint32_t nblks, tblks = ROUNDUP_DIV(len, SFS_BLKSIZE);
c0113c8f:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
c0113c96:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113c99:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113c9c:	01 d0                	add    %edx,%eax
c0113c9e:	83 e8 01             	sub    $0x1,%eax
c0113ca1:	ba 00 00 00 00       	mov    $0x0,%edx
c0113ca6:	f7 75 d8             	divl   -0x28(%ebp)
c0113ca9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (din->size == len) {
c0113cac:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113caf:	8b 10                	mov    (%eax),%edx
c0113cb1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113cb4:	39 c2                	cmp    %eax,%edx
c0113cb6:	75 39                	jne    c0113cf1 <sfs_truncfile+0x117>
        assert(tblks == din->blocks);
c0113cb8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113cbb:	8b 40 08             	mov    0x8(%eax),%eax
c0113cbe:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113cc1:	74 24                	je     c0113ce7 <sfs_truncfile+0x10d>
c0113cc3:	c7 44 24 0c c2 91 11 	movl   $0xc01191c2,0xc(%esp)
c0113cca:	c0 
c0113ccb:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113cd2:	c0 
c0113cd3:	c7 44 24 04 8e 03 00 	movl   $0x38e,0x4(%esp)
c0113cda:	00 
c0113cdb:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113ce2:	e8 e1 d1 fe ff       	call   c0100ec8 <__panic>
        return 0;
c0113ce7:	b8 00 00 00 00       	mov    $0x0,%eax
c0113cec:	e9 dd 00 00 00       	jmp    c0113dce <sfs_truncfile+0x1f4>
    }

    lock_sin(sin);
c0113cf1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113cf4:	89 04 24             	mov    %eax,(%esp)
c0113cf7:	e8 b7 df ff ff       	call   c0111cb3 <lock_sin>
	// old number of disk blocks of file
    nblks = din->blocks;
c0113cfc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113cff:	8b 40 08             	mov    0x8(%eax),%eax
c0113d02:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (nblks < tblks) {
c0113d05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113d08:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113d0b:	73 3f                	jae    c0113d4c <sfs_truncfile+0x172>
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0113d0d:	eb 33                	jmp    c0113d42 <sfs_truncfile+0x168>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
c0113d0f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0113d16:	00 
c0113d17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113d1a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113d1e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113d21:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113d25:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113d28:	89 04 24             	mov    %eax,(%esp)
c0113d2b:	e8 78 ea ff ff       	call   c01127a8 <sfs_bmap_load_nolock>
c0113d30:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113d33:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113d37:	74 05                	je     c0113d3e <sfs_truncfile+0x164>
                goto out_unlock;
c0113d39:	e9 82 00 00 00       	jmp    c0113dc0 <sfs_truncfile+0x1e6>
            }
            nblks ++;
c0113d3e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    lock_sin(sin);
	// old number of disk blocks of file
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0113d42:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113d45:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113d48:	75 c5                	jne    c0113d0f <sfs_truncfile+0x135>
c0113d4a:	eb 33                	jmp    c0113d7f <sfs_truncfile+0x1a5>
                goto out_unlock;
            }
            nblks ++;
        }
    }
    else if (tblks < nblks) {
c0113d4c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113d4f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0113d52:	73 2b                	jae    c0113d7f <sfs_truncfile+0x1a5>
		// try to reduce the file size 
        while (tblks != nblks) {
c0113d54:	eb 21                	jmp    c0113d77 <sfs_truncfile+0x19d>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
c0113d56:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113d59:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113d5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113d60:	89 04 24             	mov    %eax,(%esp)
c0113d63:	e8 28 eb ff ff       	call   c0112890 <sfs_bmap_truncate_nolock>
c0113d68:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113d6b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113d6f:	74 02                	je     c0113d73 <sfs_truncfile+0x199>
                goto out_unlock;
c0113d71:	eb 4d                	jmp    c0113dc0 <sfs_truncfile+0x1e6>
            }
            nblks --;
c0113d73:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            nblks ++;
        }
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
c0113d77:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113d7a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0113d7d:	75 d7                	jne    c0113d56 <sfs_truncfile+0x17c>
                goto out_unlock;
            }
            nblks --;
        }
    }
    assert(din->blocks == tblks);
c0113d7f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113d82:	8b 40 08             	mov    0x8(%eax),%eax
c0113d85:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113d88:	74 24                	je     c0113dae <sfs_truncfile+0x1d4>
c0113d8a:	c7 44 24 0c d7 91 11 	movl   $0xc01191d7,0xc(%esp)
c0113d91:	c0 
c0113d92:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113d99:	c0 
c0113d9a:	c7 44 24 04 a7 03 00 	movl   $0x3a7,0x4(%esp)
c0113da1:	00 
c0113da2:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113da9:	e8 1a d1 fe ff       	call   c0100ec8 <__panic>
    din->size = len;
c0113dae:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113db1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113db4:	89 10                	mov    %edx,(%eax)
    sin->dirty = 1;
c0113db6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113db9:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

out_unlock:
    unlock_sin(sin);
c0113dc0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113dc3:	89 04 24             	mov    %eax,(%esp)
c0113dc6:	e8 fe de ff ff       	call   c0111cc9 <unlock_sin>
    return ret;
c0113dcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113dce:	c9                   	leave  
c0113dcf:	c3                   	ret    

c0113dd0 <sfs_lookup>:
 * sfs_lookup - Parse path relative to the passed directory
 *              DIR, and hand back the inode for the file it
 *              refers to.
 */
static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
c0113dd0:	55                   	push   %ebp
c0113dd1:	89 e5                	mov    %esp,%ebp
c0113dd3:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113dd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0113dd9:	8b 40 38             	mov    0x38(%eax),%eax
c0113ddc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113ddf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113de3:	74 0a                	je     c0113def <sfs_lookup+0x1f>
c0113de5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113de8:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113deb:	85 c0                	test   %eax,%eax
c0113ded:	74 24                	je     c0113e13 <sfs_lookup+0x43>
c0113def:	c7 44 24 0c 94 90 11 	movl   $0xc0119094,0xc(%esp)
c0113df6:	c0 
c0113df7:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113dfe:	c0 
c0113dff:	c7 44 24 04 b7 03 00 	movl   $0x3b7,0x4(%esp)
c0113e06:	00 
c0113e07:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113e0e:	e8 b5 d0 fe ff       	call   c0100ec8 <__panic>
c0113e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113e16:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(*path != '\0' && *path != '/');
c0113e19:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113e1c:	0f b6 00             	movzbl (%eax),%eax
c0113e1f:	84 c0                	test   %al,%al
c0113e21:	74 0a                	je     c0113e2d <sfs_lookup+0x5d>
c0113e23:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113e26:	0f b6 00             	movzbl (%eax),%eax
c0113e29:	3c 2f                	cmp    $0x2f,%al
c0113e2b:	75 24                	jne    c0113e51 <sfs_lookup+0x81>
c0113e2d:	c7 44 24 0c ec 91 11 	movl   $0xc01191ec,0xc(%esp)
c0113e34:	c0 
c0113e35:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113e3c:	c0 
c0113e3d:	c7 44 24 04 b8 03 00 	movl   $0x3b8,0x4(%esp)
c0113e44:	00 
c0113e45:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113e4c:	e8 77 d0 fe ff       	call   c0100ec8 <__panic>
    vop_ref_inc(node);
c0113e51:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e54:	89 04 24             	mov    %eax,(%esp)
c0113e57:	e8 21 ad ff ff       	call   c010eb7d <inode_ref_inc>
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113e5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e5f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113e62:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113e66:	74 0d                	je     c0113e75 <sfs_lookup+0xa5>
c0113e68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113e6b:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113e6e:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113e73:	74 24                	je     c0113e99 <sfs_lookup+0xc9>
c0113e75:	c7 44 24 0c 90 8e 11 	movl   $0xc0118e90,0xc(%esp)
c0113e7c:	c0 
c0113e7d:	c7 44 24 08 3f 8e 11 	movl   $0xc0118e3f,0x8(%esp)
c0113e84:	c0 
c0113e85:	c7 44 24 04 ba 03 00 	movl   $0x3ba,0x4(%esp)
c0113e8c:	00 
c0113e8d:	c7 04 24 d7 8d 11 c0 	movl   $0xc0118dd7,(%esp)
c0113e94:	e8 2f d0 fe ff       	call   c0100ec8 <__panic>
c0113e99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113e9c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sin->din->type != SFS_TYPE_DIR) {
c0113e9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113ea2:	8b 00                	mov    (%eax),%eax
c0113ea4:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113ea8:	66 83 f8 02          	cmp    $0x2,%ax
c0113eac:	74 12                	je     c0113ec0 <sfs_lookup+0xf0>
        vop_ref_dec(node);
c0113eae:	8b 45 08             	mov    0x8(%ebp),%eax
c0113eb1:	89 04 24             	mov    %eax,(%esp)
c0113eb4:	e8 de ac ff ff       	call   c010eb97 <inode_ref_dec>
        return -E_NOTDIR;
c0113eb9:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c0113ebe:	eb 4e                	jmp    c0113f0e <sfs_lookup+0x13e>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
c0113ec0:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113ec7:	00 
c0113ec8:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0113ecb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113ecf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113ed2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113ed6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113ed9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113edd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ee0:	89 04 24             	mov    %eax,(%esp)
c0113ee3:	e8 c6 ec ff ff       	call   c0112bae <sfs_lookup_once>
c0113ee8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    vop_ref_dec(node);
c0113eeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0113eee:	89 04 24             	mov    %eax,(%esp)
c0113ef1:	e8 a1 ac ff ff       	call   c010eb97 <inode_ref_dec>
    if (ret != 0) {
c0113ef6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113efa:	74 05                	je     c0113f01 <sfs_lookup+0x131>
        return ret;
c0113efc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113eff:	eb 0d                	jmp    c0113f0e <sfs_lookup+0x13e>
    }
    *node_store = subnode;
c0113f01:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0113f04:	8b 45 10             	mov    0x10(%ebp),%eax
c0113f07:	89 10                	mov    %edx,(%eax)
    return 0;
c0113f09:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113f0e:	c9                   	leave  
c0113f0f:	c3                   	ret    

c0113f10 <sfs_rwblock_nolock>:
 * @blkno: the NO. of disk block
 * @write: BOOL: Read or Write
 * @check: BOOL: if check (blono < sfs super.blocks)
 */
static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
c0113f10:	55                   	push   %ebp
c0113f11:	89 e5                	mov    %esp,%ebp
c0113f13:	83 ec 38             	sub    $0x38,%esp
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
c0113f16:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113f1a:	75 06                	jne    c0113f22 <sfs_rwblock_nolock+0x12>
c0113f1c:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0113f20:	75 0b                	jne    c0113f2d <sfs_rwblock_nolock+0x1d>
c0113f22:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f25:	8b 40 04             	mov    0x4(%eax),%eax
c0113f28:	3b 45 10             	cmp    0x10(%ebp),%eax
c0113f2b:	77 24                	ja     c0113f51 <sfs_rwblock_nolock+0x41>
c0113f2d:	c7 44 24 0c 0c 92 11 	movl   $0xc011920c,0xc(%esp)
c0113f34:	c0 
c0113f35:	c7 44 24 08 40 92 11 	movl   $0xc0119240,0x8(%esp)
c0113f3c:	c0 
c0113f3d:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0113f44:	00 
c0113f45:	c7 04 24 55 92 11 c0 	movl   $0xc0119255,(%esp)
c0113f4c:	e8 77 cf fe ff       	call   c0100ec8 <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0113f51:	8b 45 10             	mov    0x10(%ebp),%eax
c0113f54:	c1 e0 0c             	shl    $0xc,%eax
c0113f57:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113f5b:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0113f62:	00 
c0113f63:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113f66:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113f6a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0113f6d:	89 04 24             	mov    %eax,(%esp)
c0113f70:	e8 67 70 ff ff       	call   c010afdc <iobuf_init>
c0113f75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(sfs->dev, iob, write);
c0113f78:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f7b:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113f7e:	8b 40 10             	mov    0x10(%eax),%eax
c0113f81:	8b 55 08             	mov    0x8(%ebp),%edx
c0113f84:	8b 52 2c             	mov    0x2c(%edx),%edx
c0113f87:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0113f8a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0113f8e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0113f91:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0113f95:	89 14 24             	mov    %edx,(%esp)
c0113f98:	ff d0                	call   *%eax
}
c0113f9a:	c9                   	leave  
c0113f9b:	c3                   	ret    

c0113f9c <sfs_rwblock>:
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 * @write: BOOL: Read - 0 or Write - 1
 */
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
c0113f9c:	55                   	push   %ebp
c0113f9d:	89 e5                	mov    %esp,%ebp
c0113f9f:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c0113fa2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_sfs_io(sfs);
c0113fa9:	8b 45 08             	mov    0x8(%ebp),%eax
c0113fac:	89 04 24             	mov    %eax,(%esp)
c0113faf:	e8 df 03 00 00       	call   c0114393 <lock_sfs_io>
    {
        while (nblks != 0) {
c0113fb4:	eb 42                	jmp    c0113ff8 <sfs_rwblock+0x5c>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
c0113fb6:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0113fbd:	00 
c0113fbe:	8b 45 18             	mov    0x18(%ebp),%eax
c0113fc1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113fc5:	8b 45 10             	mov    0x10(%ebp),%eax
c0113fc8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113fcc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113fcf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113fd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0113fd6:	89 04 24             	mov    %eax,(%esp)
c0113fd9:	e8 32 ff ff ff       	call   c0113f10 <sfs_rwblock_nolock>
c0113fde:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113fe1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113fe5:	74 02                	je     c0113fe9 <sfs_rwblock+0x4d>
                break;
c0113fe7:	eb 15                	jmp    c0113ffe <sfs_rwblock+0x62>
            }
            blkno ++, nblks --;
c0113fe9:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0113fed:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
            buf += SFS_BLKSIZE;
c0113ff1:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
    int ret = 0;
    lock_sfs_io(sfs);
    {
        while (nblks != 0) {
c0113ff8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0113ffc:	75 b8                	jne    c0113fb6 <sfs_rwblock+0x1a>
            }
            blkno ++, nblks --;
            buf += SFS_BLKSIZE;
        }
    }
    unlock_sfs_io(sfs);
c0113ffe:	8b 45 08             	mov    0x8(%ebp),%eax
c0114001:	89 04 24             	mov    %eax,(%esp)
c0114004:	e8 b6 03 00 00       	call   c01143bf <unlock_sfs_io>
    return ret;
c0114009:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011400c:	c9                   	leave  
c011400d:	c3                   	ret    

c011400e <sfs_rblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c011400e:	55                   	push   %ebp
c011400f:	89 e5                	mov    %esp,%ebp
c0114011:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
c0114014:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011401b:	00 
c011401c:	8b 45 14             	mov    0x14(%ebp),%eax
c011401f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114023:	8b 45 10             	mov    0x10(%ebp),%eax
c0114026:	89 44 24 08          	mov    %eax,0x8(%esp)
c011402a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011402d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114031:	8b 45 08             	mov    0x8(%ebp),%eax
c0114034:	89 04 24             	mov    %eax,(%esp)
c0114037:	e8 60 ff ff ff       	call   c0113f9c <sfs_rwblock>
}
c011403c:	c9                   	leave  
c011403d:	c3                   	ret    

c011403e <sfs_wblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c011403e:	55                   	push   %ebp
c011403f:	89 e5                	mov    %esp,%ebp
c0114041:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
c0114044:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c011404b:	00 
c011404c:	8b 45 14             	mov    0x14(%ebp),%eax
c011404f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114053:	8b 45 10             	mov    0x10(%ebp),%eax
c0114056:	89 44 24 08          	mov    %eax,0x8(%esp)
c011405a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011405d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114061:	8b 45 08             	mov    0x8(%ebp),%eax
c0114064:	89 04 24             	mov    %eax,(%esp)
c0114067:	e8 30 ff ff ff       	call   c0113f9c <sfs_rwblock>
}
c011406c:	c9                   	leave  
c011406d:	c3                   	ret    

c011406e <sfs_rbuf>:
 * @len:    the length need to Rd
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c011406e:	55                   	push   %ebp
c011406f:	89 e5                	mov    %esp,%ebp
c0114071:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c0114074:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114078:	78 18                	js     c0114092 <sfs_rbuf+0x24>
c011407a:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0114081:	7f 0f                	jg     c0114092 <sfs_rbuf+0x24>
c0114083:	8b 55 18             	mov    0x18(%ebp),%edx
c0114086:	8b 45 10             	mov    0x10(%ebp),%eax
c0114089:	01 d0                	add    %edx,%eax
c011408b:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0114090:	76 24                	jbe    c01140b6 <sfs_rbuf+0x48>
c0114092:	c7 44 24 0c 6c 92 11 	movl   $0xc011926c,0xc(%esp)
c0114099:	c0 
c011409a:	c7 44 24 08 40 92 11 	movl   $0xc0119240,0x8(%esp)
c01140a1:	c0 
c01140a2:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c01140a9:	00 
c01140aa:	c7 04 24 55 92 11 c0 	movl   $0xc0119255,(%esp)
c01140b1:	e8 12 ce fe ff       	call   c0100ec8 <__panic>
    int ret;
    lock_sfs_io(sfs);
c01140b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01140b9:	89 04 24             	mov    %eax,(%esp)
c01140bc:	e8 d2 02 00 00       	call   c0114393 <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c01140c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01140c4:	8b 40 38             	mov    0x38(%eax),%eax
c01140c7:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01140ce:	00 
c01140cf:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01140d6:	00 
c01140d7:	8b 55 14             	mov    0x14(%ebp),%edx
c01140da:	89 54 24 08          	mov    %edx,0x8(%esp)
c01140de:	89 44 24 04          	mov    %eax,0x4(%esp)
c01140e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01140e5:	89 04 24             	mov    %eax,(%esp)
c01140e8:	e8 23 fe ff ff       	call   c0113f10 <sfs_rwblock_nolock>
c01140ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01140f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01140f4:	75 21                	jne    c0114117 <sfs_rbuf+0xa9>
            memcpy(buf, sfs->sfs_buffer + offset, len);
c01140f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01140f9:	8b 50 38             	mov    0x38(%eax),%edx
c01140fc:	8b 45 18             	mov    0x18(%ebp),%eax
c01140ff:	01 c2                	add    %eax,%edx
c0114101:	8b 45 10             	mov    0x10(%ebp),%eax
c0114104:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114108:	89 54 24 04          	mov    %edx,0x4(%esp)
c011410c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011410f:	89 04 24             	mov    %eax,(%esp)
c0114112:	e8 fa 0e 00 00       	call   c0115011 <memcpy>
        }
    }
    unlock_sfs_io(sfs);
c0114117:	8b 45 08             	mov    0x8(%ebp),%eax
c011411a:	89 04 24             	mov    %eax,(%esp)
c011411d:	e8 9d 02 00 00       	call   c01143bf <unlock_sfs_io>
    return ret;
c0114122:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114125:	c9                   	leave  
c0114126:	c3                   	ret    

c0114127 <sfs_wbuf>:
 * @len:    the length need to Wr
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c0114127:	55                   	push   %ebp
c0114128:	89 e5                	mov    %esp,%ebp
c011412a:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c011412d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114131:	78 18                	js     c011414b <sfs_wbuf+0x24>
c0114133:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c011413a:	7f 0f                	jg     c011414b <sfs_wbuf+0x24>
c011413c:	8b 55 18             	mov    0x18(%ebp),%edx
c011413f:	8b 45 10             	mov    0x10(%ebp),%eax
c0114142:	01 d0                	add    %edx,%eax
c0114144:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0114149:	76 24                	jbe    c011416f <sfs_wbuf+0x48>
c011414b:	c7 44 24 0c 6c 92 11 	movl   $0xc011926c,0xc(%esp)
c0114152:	c0 
c0114153:	c7 44 24 08 40 92 11 	movl   $0xc0119240,0x8(%esp)
c011415a:	c0 
c011415b:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0114162:	00 
c0114163:	c7 04 24 55 92 11 c0 	movl   $0xc0119255,(%esp)
c011416a:	e8 59 cd fe ff       	call   c0100ec8 <__panic>
    int ret;
    lock_sfs_io(sfs);
c011416f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114172:	89 04 24             	mov    %eax,(%esp)
c0114175:	e8 19 02 00 00       	call   c0114393 <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c011417a:	8b 45 08             	mov    0x8(%ebp),%eax
c011417d:	8b 40 38             	mov    0x38(%eax),%eax
c0114180:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114187:	00 
c0114188:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c011418f:	00 
c0114190:	8b 55 14             	mov    0x14(%ebp),%edx
c0114193:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114197:	89 44 24 04          	mov    %eax,0x4(%esp)
c011419b:	8b 45 08             	mov    0x8(%ebp),%eax
c011419e:	89 04 24             	mov    %eax,(%esp)
c01141a1:	e8 6a fd ff ff       	call   c0113f10 <sfs_rwblock_nolock>
c01141a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01141a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01141ad:	75 50                	jne    c01141ff <sfs_wbuf+0xd8>
            memcpy(sfs->sfs_buffer + offset, buf, len);
c01141af:	8b 45 08             	mov    0x8(%ebp),%eax
c01141b2:	8b 50 38             	mov    0x38(%eax),%edx
c01141b5:	8b 45 18             	mov    0x18(%ebp),%eax
c01141b8:	01 c2                	add    %eax,%edx
c01141ba:	8b 45 10             	mov    0x10(%ebp),%eax
c01141bd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01141c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01141c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01141c8:	89 14 24             	mov    %edx,(%esp)
c01141cb:	e8 41 0e 00 00       	call   c0115011 <memcpy>
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
c01141d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01141d3:	8b 40 38             	mov    0x38(%eax),%eax
c01141d6:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01141dd:	00 
c01141de:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01141e5:	00 
c01141e6:	8b 55 14             	mov    0x14(%ebp),%edx
c01141e9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01141ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01141f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01141f4:	89 04 24             	mov    %eax,(%esp)
c01141f7:	e8 14 fd ff ff       	call   c0113f10 <sfs_rwblock_nolock>
c01141fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_sfs_io(sfs);
c01141ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0114202:	89 04 24             	mov    %eax,(%esp)
c0114205:	e8 b5 01 00 00       	call   c01143bf <unlock_sfs_io>
    return ret;
c011420a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011420d:	c9                   	leave  
c011420e:	c3                   	ret    

c011420f <sfs_sync_super>:

/*
 * sfs_sync_super - write sfs->super (in memory) into disk (SFS_BLKN_SUPER, 1) with lock protect.
 */
int
sfs_sync_super(struct sfs_fs *sfs) {
c011420f:	55                   	push   %ebp
c0114210:	89 e5                	mov    %esp,%ebp
c0114212:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c0114215:	8b 45 08             	mov    0x8(%ebp),%eax
c0114218:	89 04 24             	mov    %eax,(%esp)
c011421b:	e8 73 01 00 00       	call   c0114393 <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0114220:	8b 45 08             	mov    0x8(%ebp),%eax
c0114223:	8b 40 38             	mov    0x38(%eax),%eax
c0114226:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c011422d:	00 
c011422e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114235:	00 
c0114236:	89 04 24             	mov    %eax,(%esp)
c0114239:	e8 f1 0c 00 00       	call   c0114f2f <memset>
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
c011423e:	8b 55 08             	mov    0x8(%ebp),%edx
c0114241:	8b 45 08             	mov    0x8(%ebp),%eax
c0114244:	8b 40 38             	mov    0x38(%eax),%eax
c0114247:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
c011424e:	00 
c011424f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114253:	89 04 24             	mov    %eax,(%esp)
c0114256:	e8 b6 0d 00 00       	call   c0115011 <memcpy>
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
c011425b:	8b 45 08             	mov    0x8(%ebp),%eax
c011425e:	8b 40 38             	mov    0x38(%eax),%eax
c0114261:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0114268:	00 
c0114269:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114270:	00 
c0114271:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0114278:	00 
c0114279:	89 44 24 04          	mov    %eax,0x4(%esp)
c011427d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114280:	89 04 24             	mov    %eax,(%esp)
c0114283:	e8 88 fc ff ff       	call   c0113f10 <sfs_rwblock_nolock>
c0114288:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sfs_io(sfs);
c011428b:	8b 45 08             	mov    0x8(%ebp),%eax
c011428e:	89 04 24             	mov    %eax,(%esp)
c0114291:	e8 29 01 00 00       	call   c01143bf <unlock_sfs_io>
    return ret;
c0114296:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114299:	c9                   	leave  
c011429a:	c3                   	ret    

c011429b <sfs_sync_freemap>:

/*
 * sfs_sync_freemap - write sfs bitmap into disk (SFS_BLKN_FREEMAP, nblks)  without lock protect.
 */
int
sfs_sync_freemap(struct sfs_fs *sfs) {
c011429b:	55                   	push   %ebp
c011429c:	89 e5                	mov    %esp,%ebp
c011429e:	83 ec 28             	sub    $0x28,%esp
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
c01142a1:	c7 45 f4 00 80 00 00 	movl   $0x8000,-0xc(%ebp)
c01142a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01142ab:	8b 50 04             	mov    0x4(%eax),%edx
c01142ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01142b1:	01 d0                	add    %edx,%eax
c01142b3:	83 e8 01             	sub    $0x1,%eax
c01142b6:	ba 00 00 00 00       	mov    $0x0,%edx
c01142bb:	f7 75 f4             	divl   -0xc(%ebp)
c01142be:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
c01142c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01142c4:	8b 40 30             	mov    0x30(%eax),%eax
c01142c7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01142ce:	00 
c01142cf:	89 04 24             	mov    %eax,(%esp)
c01142d2:	e8 ab d0 ff ff       	call   c0111382 <bitmap_getdata>
c01142d7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01142da:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01142de:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c01142e5:	00 
c01142e6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01142ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01142ed:	89 04 24             	mov    %eax,(%esp)
c01142f0:	e8 49 fd ff ff       	call   c011403e <sfs_wblock>
}
c01142f5:	c9                   	leave  
c01142f6:	c3                   	ret    

c01142f7 <sfs_clear_block>:
 * @sfs:   sfs_fs which will be process
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
c01142f7:	55                   	push   %ebp
c01142f8:	89 e5                	mov    %esp,%ebp
c01142fa:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c01142fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0114300:	89 04 24             	mov    %eax,(%esp)
c0114303:	e8 8b 00 00 00       	call   c0114393 <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0114308:	8b 45 08             	mov    0x8(%ebp),%eax
c011430b:	8b 40 38             	mov    0x38(%eax),%eax
c011430e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114315:	00 
c0114316:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011431d:	00 
c011431e:	89 04 24             	mov    %eax,(%esp)
c0114321:	e8 09 0c 00 00       	call   c0114f2f <memset>
        while (nblks != 0) {
c0114326:	eb 3f                	jmp    c0114367 <sfs_clear_block+0x70>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
c0114328:	8b 45 08             	mov    0x8(%ebp),%eax
c011432b:	8b 40 38             	mov    0x38(%eax),%eax
c011432e:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114335:	00 
c0114336:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011433d:	00 
c011433e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114341:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114345:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114349:	8b 45 08             	mov    0x8(%ebp),%eax
c011434c:	89 04 24             	mov    %eax,(%esp)
c011434f:	e8 bc fb ff ff       	call   c0113f10 <sfs_rwblock_nolock>
c0114354:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114357:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011435b:	74 02                	je     c011435f <sfs_clear_block+0x68>
                break;
c011435d:	eb 0e                	jmp    c011436d <sfs_clear_block+0x76>
            }
            blkno ++, nblks --;
c011435f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0114363:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
    int ret;
    lock_sfs_io(sfs);
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
        while (nblks != 0) {
c0114367:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011436b:	75 bb                	jne    c0114328 <sfs_clear_block+0x31>
                break;
            }
            blkno ++, nblks --;
        }
    }
    unlock_sfs_io(sfs);
c011436d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114370:	89 04 24             	mov    %eax,(%esp)
c0114373:	e8 47 00 00 00       	call   c01143bf <unlock_sfs_io>
    return ret;
c0114378:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011437b:	c9                   	leave  
c011437c:	c3                   	ret    

c011437d <lock_sfs_fs>:
 * lock_sfs_fs - lock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
lock_sfs_fs(struct sfs_fs *sfs) {
c011437d:	55                   	push   %ebp
c011437e:	89 e5                	mov    %esp,%ebp
c0114380:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->fs_sem));
c0114383:	8b 45 08             	mov    0x8(%ebp),%eax
c0114386:	83 c0 3c             	add    $0x3c,%eax
c0114389:	89 04 24             	mov    %eax,(%esp)
c011438c:	e8 04 56 ff ff       	call   c0109995 <down>
}
c0114391:	c9                   	leave  
c0114392:	c3                   	ret    

c0114393 <lock_sfs_io>:
 * lock_sfs_io - lock the process of SFS File Rd/Wr Disk Block
 *
 * called by: sfs_rwblock, sfs_clear_block, sfs_sync_super
 */
void
lock_sfs_io(struct sfs_fs *sfs) {
c0114393:	55                   	push   %ebp
c0114394:	89 e5                	mov    %esp,%ebp
c0114396:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->io_sem));
c0114399:	8b 45 08             	mov    0x8(%ebp),%eax
c011439c:	83 c0 48             	add    $0x48,%eax
c011439f:	89 04 24             	mov    %eax,(%esp)
c01143a2:	e8 ee 55 ff ff       	call   c0109995 <down>
}
c01143a7:	c9                   	leave  
c01143a8:	c3                   	ret    

c01143a9 <unlock_sfs_fs>:
 * unlock_sfs_fs - unlock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
unlock_sfs_fs(struct sfs_fs *sfs) {
c01143a9:	55                   	push   %ebp
c01143aa:	89 e5                	mov    %esp,%ebp
c01143ac:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->fs_sem));
c01143af:	8b 45 08             	mov    0x8(%ebp),%eax
c01143b2:	83 c0 3c             	add    $0x3c,%eax
c01143b5:	89 04 24             	mov    %eax,(%esp)
c01143b8:	e8 bd 55 ff ff       	call   c010997a <up>
}
c01143bd:	c9                   	leave  
c01143be:	c3                   	ret    

c01143bf <unlock_sfs_io>:
 * unlock_sfs_io - unlock the process of sfs Rd/Wr Disk Block
 *
 * called by: sfs_rwblock sfs_clear_block sfs_sync_super
 */
void
unlock_sfs_io(struct sfs_fs *sfs) {
c01143bf:	55                   	push   %ebp
c01143c0:	89 e5                	mov    %esp,%ebp
c01143c2:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->io_sem));
c01143c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01143c8:	83 c0 48             	add    $0x48,%eax
c01143cb:	89 04 24             	mov    %eax,(%esp)
c01143ce:	e8 a7 55 ff ff       	call   c010997a <up>
}
c01143d3:	c9                   	leave  
c01143d4:	c3                   	ret    

c01143d5 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c01143d5:	55                   	push   %ebp
c01143d6:	89 e5                	mov    %esp,%ebp
c01143d8:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c01143db:	8b 45 08             	mov    0x8(%ebp),%eax
c01143de:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c01143e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c01143e7:	b8 20 00 00 00       	mov    $0x20,%eax
c01143ec:	2b 45 0c             	sub    0xc(%ebp),%eax
c01143ef:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01143f2:	89 c1                	mov    %eax,%ecx
c01143f4:	d3 ea                	shr    %cl,%edx
c01143f6:	89 d0                	mov    %edx,%eax
}
c01143f8:	c9                   	leave  
c01143f9:	c3                   	ret    

c01143fa <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c01143fa:	55                   	push   %ebp
c01143fb:	89 e5                	mov    %esp,%ebp
c01143fd:	83 ec 58             	sub    $0x58,%esp
c0114400:	8b 45 14             	mov    0x14(%ebp),%eax
c0114403:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0114406:	8b 45 18             	mov    0x18(%ebp),%eax
c0114409:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c011440c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011440f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0114412:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114415:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c0114418:	8b 45 1c             	mov    0x1c(%ebp),%eax
c011441b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011441e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114421:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114424:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114427:	89 55 f0             	mov    %edx,-0x10(%ebp)
c011442a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011442d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114430:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0114434:	74 1c                	je     c0114452 <printnum+0x58>
c0114436:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114439:	ba 00 00 00 00       	mov    $0x0,%edx
c011443e:	f7 75 e4             	divl   -0x1c(%ebp)
c0114441:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0114444:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114447:	ba 00 00 00 00       	mov    $0x0,%edx
c011444c:	f7 75 e4             	divl   -0x1c(%ebp)
c011444f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114452:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114455:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114458:	f7 75 e4             	divl   -0x1c(%ebp)
c011445b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011445e:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0114461:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114464:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114467:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011446a:	89 55 ec             	mov    %edx,-0x14(%ebp)
c011446d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114470:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c0114473:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114476:	ba 00 00 00 00       	mov    $0x0,%edx
c011447b:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c011447e:	77 64                	ja     c01144e4 <printnum+0xea>
c0114480:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0114483:	72 05                	jb     c011448a <printnum+0x90>
c0114485:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0114488:	77 5a                	ja     c01144e4 <printnum+0xea>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
c011448a:	8b 45 20             	mov    0x20(%ebp),%eax
c011448d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114490:	8b 45 24             	mov    0x24(%ebp),%eax
c0114493:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0114497:	89 54 24 18          	mov    %edx,0x18(%esp)
c011449b:	8b 45 1c             	mov    0x1c(%ebp),%eax
c011449e:	89 44 24 14          	mov    %eax,0x14(%esp)
c01144a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01144a5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01144a8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01144ac:	89 54 24 10          	mov    %edx,0x10(%esp)
c01144b0:	8b 45 10             	mov    0x10(%ebp),%eax
c01144b3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01144b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01144ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01144be:	8b 45 08             	mov    0x8(%ebp),%eax
c01144c1:	89 04 24             	mov    %eax,(%esp)
c01144c4:	e8 31 ff ff ff       	call   c01143fa <printnum>
c01144c9:	eb 23                	jmp    c01144ee <printnum+0xf4>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
c01144cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01144ce:	89 44 24 08          	mov    %eax,0x8(%esp)
c01144d2:	8b 45 10             	mov    0x10(%ebp),%eax
c01144d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01144d9:	8b 45 24             	mov    0x24(%ebp),%eax
c01144dc:	89 04 24             	mov    %eax,(%esp)
c01144df:	8b 45 08             	mov    0x8(%ebp),%eax
c01144e2:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, fd, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c01144e4:	83 6d 20 01          	subl   $0x1,0x20(%ebp)
c01144e8:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c01144ec:	7f dd                	jg     c01144cb <printnum+0xd1>
            putch(padc, putdat, fd);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
c01144ee:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01144f1:	05 c4 94 11 c0       	add    $0xc01194c4,%eax
c01144f6:	0f b6 00             	movzbl (%eax),%eax
c01144f9:	0f be c0             	movsbl %al,%eax
c01144fc:	8b 55 0c             	mov    0xc(%ebp),%edx
c01144ff:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114503:	8b 55 10             	mov    0x10(%ebp),%edx
c0114506:	89 54 24 04          	mov    %edx,0x4(%esp)
c011450a:	89 04 24             	mov    %eax,(%esp)
c011450d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114510:	ff d0                	call   *%eax
}
c0114512:	c9                   	leave  
c0114513:	c3                   	ret    

c0114514 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c0114514:	55                   	push   %ebp
c0114515:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114517:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c011451b:	7e 14                	jle    c0114531 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c011451d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114520:	8b 00                	mov    (%eax),%eax
c0114522:	8d 48 08             	lea    0x8(%eax),%ecx
c0114525:	8b 55 08             	mov    0x8(%ebp),%edx
c0114528:	89 0a                	mov    %ecx,(%edx)
c011452a:	8b 50 04             	mov    0x4(%eax),%edx
c011452d:	8b 00                	mov    (%eax),%eax
c011452f:	eb 30                	jmp    c0114561 <getuint+0x4d>
    }
    else if (lflag) {
c0114531:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114535:	74 16                	je     c011454d <getuint+0x39>
        return va_arg(*ap, unsigned long);
c0114537:	8b 45 08             	mov    0x8(%ebp),%eax
c011453a:	8b 00                	mov    (%eax),%eax
c011453c:	8d 48 04             	lea    0x4(%eax),%ecx
c011453f:	8b 55 08             	mov    0x8(%ebp),%edx
c0114542:	89 0a                	mov    %ecx,(%edx)
c0114544:	8b 00                	mov    (%eax),%eax
c0114546:	ba 00 00 00 00       	mov    $0x0,%edx
c011454b:	eb 14                	jmp    c0114561 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c011454d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114550:	8b 00                	mov    (%eax),%eax
c0114552:	8d 48 04             	lea    0x4(%eax),%ecx
c0114555:	8b 55 08             	mov    0x8(%ebp),%edx
c0114558:	89 0a                	mov    %ecx,(%edx)
c011455a:	8b 00                	mov    (%eax),%eax
c011455c:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c0114561:	5d                   	pop    %ebp
c0114562:	c3                   	ret    

c0114563 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c0114563:	55                   	push   %ebp
c0114564:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114566:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c011456a:	7e 14                	jle    c0114580 <getint+0x1d>
        return va_arg(*ap, long long);
c011456c:	8b 45 08             	mov    0x8(%ebp),%eax
c011456f:	8b 00                	mov    (%eax),%eax
c0114571:	8d 48 08             	lea    0x8(%eax),%ecx
c0114574:	8b 55 08             	mov    0x8(%ebp),%edx
c0114577:	89 0a                	mov    %ecx,(%edx)
c0114579:	8b 50 04             	mov    0x4(%eax),%edx
c011457c:	8b 00                	mov    (%eax),%eax
c011457e:	eb 28                	jmp    c01145a8 <getint+0x45>
    }
    else if (lflag) {
c0114580:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114584:	74 12                	je     c0114598 <getint+0x35>
        return va_arg(*ap, long);
c0114586:	8b 45 08             	mov    0x8(%ebp),%eax
c0114589:	8b 00                	mov    (%eax),%eax
c011458b:	8d 48 04             	lea    0x4(%eax),%ecx
c011458e:	8b 55 08             	mov    0x8(%ebp),%edx
c0114591:	89 0a                	mov    %ecx,(%edx)
c0114593:	8b 00                	mov    (%eax),%eax
c0114595:	99                   	cltd   
c0114596:	eb 10                	jmp    c01145a8 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c0114598:	8b 45 08             	mov    0x8(%ebp),%eax
c011459b:	8b 00                	mov    (%eax),%eax
c011459d:	8d 48 04             	lea    0x4(%eax),%ecx
c01145a0:	8b 55 08             	mov    0x8(%ebp),%edx
c01145a3:	89 0a                	mov    %ecx,(%edx)
c01145a5:	8b 00                	mov    (%eax),%eax
c01145a7:	99                   	cltd   
    }
}
c01145a8:	5d                   	pop    %ebp
c01145a9:	c3                   	ret    

c01145aa <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
c01145aa:	55                   	push   %ebp
c01145ab:	89 e5                	mov    %esp,%ebp
c01145ad:	83 ec 38             	sub    $0x38,%esp
    va_list ap;

    va_start(ap, fmt);
c01145b0:	8d 45 18             	lea    0x18(%ebp),%eax
c01145b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, fd, putdat, fmt, ap);
c01145b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01145b9:	89 44 24 10          	mov    %eax,0x10(%esp)
c01145bd:	8b 45 14             	mov    0x14(%ebp),%eax
c01145c0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01145c4:	8b 45 10             	mov    0x10(%ebp),%eax
c01145c7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01145cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01145ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01145d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01145d5:	89 04 24             	mov    %eax,(%esp)
c01145d8:	e8 02 00 00 00       	call   c01145df <vprintfmt>
    va_end(ap);
}
c01145dd:	c9                   	leave  
c01145de:	c3                   	ret    

c01145df <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
c01145df:	55                   	push   %ebp
c01145e0:	89 e5                	mov    %esp,%ebp
c01145e2:	56                   	push   %esi
c01145e3:	53                   	push   %ebx
c01145e4:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c01145e7:	eb 1f                	jmp    c0114608 <vprintfmt+0x29>
            if (ch == '\0') {
c01145e9:	85 db                	test   %ebx,%ebx
c01145eb:	75 05                	jne    c01145f2 <vprintfmt+0x13>
                return;
c01145ed:	e9 33 04 00 00       	jmp    c0114a25 <vprintfmt+0x446>
            }
            putch(ch, putdat, fd);
c01145f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01145f5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01145f9:	8b 45 10             	mov    0x10(%ebp),%eax
c01145fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114600:	89 1c 24             	mov    %ebx,(%esp)
c0114603:	8b 45 08             	mov    0x8(%ebp),%eax
c0114606:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114608:	8b 45 14             	mov    0x14(%ebp),%eax
c011460b:	8d 50 01             	lea    0x1(%eax),%edx
c011460e:	89 55 14             	mov    %edx,0x14(%ebp)
c0114611:	0f b6 00             	movzbl (%eax),%eax
c0114614:	0f b6 d8             	movzbl %al,%ebx
c0114617:	83 fb 25             	cmp    $0x25,%ebx
c011461a:	75 cd                	jne    c01145e9 <vprintfmt+0xa>
            }
            putch(ch, putdat, fd);
        }

        // Process a %-escape sequence
        char padc = ' ';
c011461c:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c0114620:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c0114627:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011462a:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c011462d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0114634:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114637:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c011463a:	8b 45 14             	mov    0x14(%ebp),%eax
c011463d:	8d 50 01             	lea    0x1(%eax),%edx
c0114640:	89 55 14             	mov    %edx,0x14(%ebp)
c0114643:	0f b6 00             	movzbl (%eax),%eax
c0114646:	0f b6 d8             	movzbl %al,%ebx
c0114649:	8d 43 dd             	lea    -0x23(%ebx),%eax
c011464c:	83 f8 55             	cmp    $0x55,%eax
c011464f:	0f 87 98 03 00 00    	ja     c01149ed <vprintfmt+0x40e>
c0114655:	8b 04 85 e8 94 11 c0 	mov    -0x3fee6b18(,%eax,4),%eax
c011465c:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c011465e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c0114662:	eb d6                	jmp    c011463a <vprintfmt+0x5b>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c0114664:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c0114668:	eb d0                	jmp    c011463a <vprintfmt+0x5b>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c011466a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c0114671:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0114674:	89 d0                	mov    %edx,%eax
c0114676:	c1 e0 02             	shl    $0x2,%eax
c0114679:	01 d0                	add    %edx,%eax
c011467b:	01 c0                	add    %eax,%eax
c011467d:	01 d8                	add    %ebx,%eax
c011467f:	83 e8 30             	sub    $0x30,%eax
c0114682:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c0114685:	8b 45 14             	mov    0x14(%ebp),%eax
c0114688:	0f b6 00             	movzbl (%eax),%eax
c011468b:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c011468e:	83 fb 2f             	cmp    $0x2f,%ebx
c0114691:	7e 0b                	jle    c011469e <vprintfmt+0xbf>
c0114693:	83 fb 39             	cmp    $0x39,%ebx
c0114696:	7f 06                	jg     c011469e <vprintfmt+0xbf>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114698:	83 45 14 01          	addl   $0x1,0x14(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c011469c:	eb d3                	jmp    c0114671 <vprintfmt+0x92>
            goto process_precision;
c011469e:	eb 33                	jmp    c01146d3 <vprintfmt+0xf4>

        case '*':
            precision = va_arg(ap, int);
c01146a0:	8b 45 18             	mov    0x18(%ebp),%eax
c01146a3:	8d 50 04             	lea    0x4(%eax),%edx
c01146a6:	89 55 18             	mov    %edx,0x18(%ebp)
c01146a9:	8b 00                	mov    (%eax),%eax
c01146ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c01146ae:	eb 23                	jmp    c01146d3 <vprintfmt+0xf4>

        case '.':
            if (width < 0)
c01146b0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01146b4:	79 0c                	jns    c01146c2 <vprintfmt+0xe3>
                width = 0;
c01146b6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c01146bd:	e9 78 ff ff ff       	jmp    c011463a <vprintfmt+0x5b>
c01146c2:	e9 73 ff ff ff       	jmp    c011463a <vprintfmt+0x5b>

        case '#':
            altflag = 1;
c01146c7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c01146ce:	e9 67 ff ff ff       	jmp    c011463a <vprintfmt+0x5b>

        process_precision:
            if (width < 0)
c01146d3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01146d7:	79 12                	jns    c01146eb <vprintfmt+0x10c>
                width = precision, precision = -1;
c01146d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01146dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01146df:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c01146e6:	e9 4f ff ff ff       	jmp    c011463a <vprintfmt+0x5b>
c01146eb:	e9 4a ff ff ff       	jmp    c011463a <vprintfmt+0x5b>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c01146f0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c01146f4:	e9 41 ff ff ff       	jmp    c011463a <vprintfmt+0x5b>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
c01146f9:	8b 45 18             	mov    0x18(%ebp),%eax
c01146fc:	8d 50 04             	lea    0x4(%eax),%edx
c01146ff:	89 55 18             	mov    %edx,0x18(%ebp)
c0114702:	8b 00                	mov    (%eax),%eax
c0114704:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114707:	89 54 24 08          	mov    %edx,0x8(%esp)
c011470b:	8b 55 10             	mov    0x10(%ebp),%edx
c011470e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114712:	89 04 24             	mov    %eax,(%esp)
c0114715:	8b 45 08             	mov    0x8(%ebp),%eax
c0114718:	ff d0                	call   *%eax
            break;
c011471a:	e9 00 03 00 00       	jmp    c0114a1f <vprintfmt+0x440>

        // error message
        case 'e':
            err = va_arg(ap, int);
c011471f:	8b 45 18             	mov    0x18(%ebp),%eax
c0114722:	8d 50 04             	lea    0x4(%eax),%edx
c0114725:	89 55 18             	mov    %edx,0x18(%ebp)
c0114728:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c011472a:	85 db                	test   %ebx,%ebx
c011472c:	79 02                	jns    c0114730 <vprintfmt+0x151>
                err = -err;
c011472e:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0114730:	83 fb 18             	cmp    $0x18,%ebx
c0114733:	7f 0b                	jg     c0114740 <vprintfmt+0x161>
c0114735:	8b 34 9d 60 94 11 c0 	mov    -0x3fee6ba0(,%ebx,4),%esi
c011473c:	85 f6                	test   %esi,%esi
c011473e:	75 2a                	jne    c011476a <vprintfmt+0x18b>
                printfmt(putch, fd, putdat, "error %d", err);
c0114740:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0114744:	c7 44 24 0c d5 94 11 	movl   $0xc01194d5,0xc(%esp)
c011474b:	c0 
c011474c:	8b 45 10             	mov    0x10(%ebp),%eax
c011474f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114753:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114756:	89 44 24 04          	mov    %eax,0x4(%esp)
c011475a:	8b 45 08             	mov    0x8(%ebp),%eax
c011475d:	89 04 24             	mov    %eax,(%esp)
c0114760:	e8 45 fe ff ff       	call   c01145aa <printfmt>
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
c0114765:	e9 b5 02 00 00       	jmp    c0114a1f <vprintfmt+0x440>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, fd, putdat, "error %d", err);
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
c011476a:	89 74 24 10          	mov    %esi,0x10(%esp)
c011476e:	c7 44 24 0c de 94 11 	movl   $0xc01194de,0xc(%esp)
c0114775:	c0 
c0114776:	8b 45 10             	mov    0x10(%ebp),%eax
c0114779:	89 44 24 08          	mov    %eax,0x8(%esp)
c011477d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114780:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114784:	8b 45 08             	mov    0x8(%ebp),%eax
c0114787:	89 04 24             	mov    %eax,(%esp)
c011478a:	e8 1b fe ff ff       	call   c01145aa <printfmt>
            }
            break;
c011478f:	e9 8b 02 00 00       	jmp    c0114a1f <vprintfmt+0x440>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c0114794:	8b 45 18             	mov    0x18(%ebp),%eax
c0114797:	8d 50 04             	lea    0x4(%eax),%edx
c011479a:	89 55 18             	mov    %edx,0x18(%ebp)
c011479d:	8b 30                	mov    (%eax),%esi
c011479f:	85 f6                	test   %esi,%esi
c01147a1:	75 05                	jne    c01147a8 <vprintfmt+0x1c9>
                p = "(null)";
c01147a3:	be e1 94 11 c0       	mov    $0xc01194e1,%esi
            }
            if (width > 0 && padc != '-') {
c01147a8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01147ac:	7e 45                	jle    c01147f3 <vprintfmt+0x214>
c01147ae:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c01147b2:	74 3f                	je     c01147f3 <vprintfmt+0x214>
                for (width -= strnlen(p, precision); width > 0; width --) {
c01147b4:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c01147b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01147ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01147be:	89 34 24             	mov    %esi,(%esp)
c01147c1:	e8 3b 04 00 00       	call   c0114c01 <strnlen>
c01147c6:	29 c3                	sub    %eax,%ebx
c01147c8:	89 d8                	mov    %ebx,%eax
c01147ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01147cd:	eb 1e                	jmp    c01147ed <vprintfmt+0x20e>
                    putch(padc, putdat, fd);
c01147cf:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c01147d3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01147d6:	89 54 24 08          	mov    %edx,0x8(%esp)
c01147da:	8b 55 10             	mov    0x10(%ebp),%edx
c01147dd:	89 54 24 04          	mov    %edx,0x4(%esp)
c01147e1:	89 04 24             	mov    %eax,(%esp)
c01147e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01147e7:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c01147e9:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c01147ed:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01147f1:	7f dc                	jg     c01147cf <vprintfmt+0x1f0>
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c01147f3:	eb 46                	jmp    c011483b <vprintfmt+0x25c>
                if (altflag && (ch < ' ' || ch > '~')) {
c01147f5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01147f9:	74 26                	je     c0114821 <vprintfmt+0x242>
c01147fb:	83 fb 1f             	cmp    $0x1f,%ebx
c01147fe:	7e 05                	jle    c0114805 <vprintfmt+0x226>
c0114800:	83 fb 7e             	cmp    $0x7e,%ebx
c0114803:	7e 1c                	jle    c0114821 <vprintfmt+0x242>
                    putch('?', putdat, fd);
c0114805:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114808:	89 44 24 08          	mov    %eax,0x8(%esp)
c011480c:	8b 45 10             	mov    0x10(%ebp),%eax
c011480f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114813:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c011481a:	8b 45 08             	mov    0x8(%ebp),%eax
c011481d:	ff d0                	call   *%eax
c011481f:	eb 16                	jmp    c0114837 <vprintfmt+0x258>
                }
                else {
                    putch(ch, putdat, fd);
c0114821:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114824:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114828:	8b 45 10             	mov    0x10(%ebp),%eax
c011482b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011482f:	89 1c 24             	mov    %ebx,(%esp)
c0114832:	8b 45 08             	mov    0x8(%ebp),%eax
c0114835:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0114837:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c011483b:	89 f0                	mov    %esi,%eax
c011483d:	8d 70 01             	lea    0x1(%eax),%esi
c0114840:	0f b6 00             	movzbl (%eax),%eax
c0114843:	0f be d8             	movsbl %al,%ebx
c0114846:	85 db                	test   %ebx,%ebx
c0114848:	74 10                	je     c011485a <vprintfmt+0x27b>
c011484a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011484e:	78 a5                	js     c01147f5 <vprintfmt+0x216>
c0114850:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c0114854:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114858:	79 9b                	jns    c01147f5 <vprintfmt+0x216>
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c011485a:	eb 1e                	jmp    c011487a <vprintfmt+0x29b>
                putch(' ', putdat, fd);
c011485c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011485f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114863:	8b 45 10             	mov    0x10(%ebp),%eax
c0114866:	89 44 24 04          	mov    %eax,0x4(%esp)
c011486a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0114871:	8b 45 08             	mov    0x8(%ebp),%eax
c0114874:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0114876:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c011487a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011487e:	7f dc                	jg     c011485c <vprintfmt+0x27d>
                putch(' ', putdat, fd);
            }
            break;
c0114880:	e9 9a 01 00 00       	jmp    c0114a1f <vprintfmt+0x440>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c0114885:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114888:	89 44 24 04          	mov    %eax,0x4(%esp)
c011488c:	8d 45 18             	lea    0x18(%ebp),%eax
c011488f:	89 04 24             	mov    %eax,(%esp)
c0114892:	e8 cc fc ff ff       	call   c0114563 <getint>
c0114897:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011489a:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c011489d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01148a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01148a3:	85 d2                	test   %edx,%edx
c01148a5:	79 2d                	jns    c01148d4 <vprintfmt+0x2f5>
                putch('-', putdat, fd);
c01148a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01148aa:	89 44 24 08          	mov    %eax,0x8(%esp)
c01148ae:	8b 45 10             	mov    0x10(%ebp),%eax
c01148b1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01148b5:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c01148bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01148bf:	ff d0                	call   *%eax
                num = -(long long)num;
c01148c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01148c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01148c7:	f7 d8                	neg    %eax
c01148c9:	83 d2 00             	adc    $0x0,%edx
c01148cc:	f7 da                	neg    %edx
c01148ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01148d1:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c01148d4:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c01148db:	e9 b6 00 00 00       	jmp    c0114996 <vprintfmt+0x3b7>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c01148e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01148e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01148e7:	8d 45 18             	lea    0x18(%ebp),%eax
c01148ea:	89 04 24             	mov    %eax,(%esp)
c01148ed:	e8 22 fc ff ff       	call   c0114514 <getuint>
c01148f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01148f5:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c01148f8:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c01148ff:	e9 92 00 00 00       	jmp    c0114996 <vprintfmt+0x3b7>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c0114904:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114907:	89 44 24 04          	mov    %eax,0x4(%esp)
c011490b:	8d 45 18             	lea    0x18(%ebp),%eax
c011490e:	89 04 24             	mov    %eax,(%esp)
c0114911:	e8 fe fb ff ff       	call   c0114514 <getuint>
c0114916:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114919:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c011491c:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c0114923:	eb 71                	jmp    c0114996 <vprintfmt+0x3b7>

        // pointer
        case 'p':
            putch('0', putdat, fd);
c0114925:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114928:	89 44 24 08          	mov    %eax,0x8(%esp)
c011492c:	8b 45 10             	mov    0x10(%ebp),%eax
c011492f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114933:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c011493a:	8b 45 08             	mov    0x8(%ebp),%eax
c011493d:	ff d0                	call   *%eax
            putch('x', putdat, fd);
c011493f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114942:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114946:	8b 45 10             	mov    0x10(%ebp),%eax
c0114949:	89 44 24 04          	mov    %eax,0x4(%esp)
c011494d:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c0114954:	8b 45 08             	mov    0x8(%ebp),%eax
c0114957:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c0114959:	8b 45 18             	mov    0x18(%ebp),%eax
c011495c:	8d 50 04             	lea    0x4(%eax),%edx
c011495f:	89 55 18             	mov    %edx,0x18(%ebp)
c0114962:	8b 00                	mov    (%eax),%eax
c0114964:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114967:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c011496e:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c0114975:	eb 1f                	jmp    c0114996 <vprintfmt+0x3b7>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c0114977:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011497a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011497e:	8d 45 18             	lea    0x18(%ebp),%eax
c0114981:	89 04 24             	mov    %eax,(%esp)
c0114984:	e8 8b fb ff ff       	call   c0114514 <getuint>
c0114989:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011498c:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c011498f:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
c0114996:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c011499a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011499d:	89 54 24 1c          	mov    %edx,0x1c(%esp)
c01149a1:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01149a4:	89 54 24 18          	mov    %edx,0x18(%esp)
c01149a8:	89 44 24 14          	mov    %eax,0x14(%esp)
c01149ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01149af:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01149b2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01149b6:	89 54 24 10          	mov    %edx,0x10(%esp)
c01149ba:	8b 45 10             	mov    0x10(%ebp),%eax
c01149bd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01149c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01149c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01149c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01149cb:	89 04 24             	mov    %eax,(%esp)
c01149ce:	e8 27 fa ff ff       	call   c01143fa <printnum>
            break;
c01149d3:	eb 4a                	jmp    c0114a1f <vprintfmt+0x440>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
c01149d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01149d8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01149dc:	8b 45 10             	mov    0x10(%ebp),%eax
c01149df:	89 44 24 04          	mov    %eax,0x4(%esp)
c01149e3:	89 1c 24             	mov    %ebx,(%esp)
c01149e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01149e9:	ff d0                	call   *%eax
            break;
c01149eb:	eb 32                	jmp    c0114a1f <vprintfmt+0x440>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
c01149ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01149f0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01149f4:	8b 45 10             	mov    0x10(%ebp),%eax
c01149f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01149fb:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c0114a02:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a05:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c0114a07:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0114a0b:	eb 04                	jmp    c0114a11 <vprintfmt+0x432>
c0114a0d:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0114a11:	8b 45 14             	mov    0x14(%ebp),%eax
c0114a14:	83 e8 01             	sub    $0x1,%eax
c0114a17:	0f b6 00             	movzbl (%eax),%eax
c0114a1a:	3c 25                	cmp    $0x25,%al
c0114a1c:	75 ef                	jne    c0114a0d <vprintfmt+0x42e>
                /* do nothing */;
            break;
c0114a1e:	90                   	nop
        }
    }
c0114a1f:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114a20:	e9 e3 fb ff ff       	jmp    c0114608 <vprintfmt+0x29>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c0114a25:	83 c4 40             	add    $0x40,%esp
c0114a28:	5b                   	pop    %ebx
c0114a29:	5e                   	pop    %esi
c0114a2a:	5d                   	pop    %ebp
c0114a2b:	c3                   	ret    

c0114a2c <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c0114a2c:	55                   	push   %ebp
c0114a2d:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c0114a2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a32:	8b 40 08             	mov    0x8(%eax),%eax
c0114a35:	8d 50 01             	lea    0x1(%eax),%edx
c0114a38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a3b:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c0114a3e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a41:	8b 10                	mov    (%eax),%edx
c0114a43:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a46:	8b 40 04             	mov    0x4(%eax),%eax
c0114a49:	39 c2                	cmp    %eax,%edx
c0114a4b:	73 12                	jae    c0114a5f <sprintputch+0x33>
        *b->buf ++ = ch;
c0114a4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a50:	8b 00                	mov    (%eax),%eax
c0114a52:	8d 48 01             	lea    0x1(%eax),%ecx
c0114a55:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114a58:	89 0a                	mov    %ecx,(%edx)
c0114a5a:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a5d:	88 10                	mov    %dl,(%eax)
    }
}
c0114a5f:	5d                   	pop    %ebp
c0114a60:	c3                   	ret    

c0114a61 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c0114a61:	55                   	push   %ebp
c0114a62:	89 e5                	mov    %esp,%ebp
c0114a64:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0114a67:	8d 45 14             	lea    0x14(%ebp),%eax
c0114a6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c0114a6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114a70:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114a74:	8b 45 10             	mov    0x10(%ebp),%eax
c0114a77:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114a7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a7e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a82:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a85:	89 04 24             	mov    %eax,(%esp)
c0114a88:	e8 08 00 00 00       	call   c0114a95 <vsnprintf>
c0114a8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0114a90:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114a93:	c9                   	leave  
c0114a94:	c3                   	ret    

c0114a95 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c0114a95:	55                   	push   %ebp
c0114a96:	89 e5                	mov    %esp,%ebp
c0114a98:	83 ec 38             	sub    $0x38,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c0114a9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a9e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114aa1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114aa4:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114aa7:	8b 45 08             	mov    0x8(%ebp),%eax
c0114aaa:	01 d0                	add    %edx,%eax
c0114aac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114aaf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c0114ab6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0114aba:	74 0a                	je     c0114ac6 <vsnprintf+0x31>
c0114abc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114abf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114ac2:	39 c2                	cmp    %eax,%edx
c0114ac4:	76 07                	jbe    c0114acd <vsnprintf+0x38>
        return -E_INVAL;
c0114ac6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0114acb:	eb 32                	jmp    c0114aff <vsnprintf+0x6a>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
c0114acd:	8b 45 14             	mov    0x14(%ebp),%eax
c0114ad0:	89 44 24 10          	mov    %eax,0x10(%esp)
c0114ad4:	8b 45 10             	mov    0x10(%ebp),%eax
c0114ad7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114adb:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0114ade:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114ae2:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c0114ae9:	ff 
c0114aea:	c7 04 24 2c 4a 11 c0 	movl   $0xc0114a2c,(%esp)
c0114af1:	e8 e9 fa ff ff       	call   c01145df <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c0114af6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114af9:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c0114afc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114aff:	c9                   	leave  
c0114b00:	c3                   	ret    

c0114b01 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c0114b01:	55                   	push   %ebp
c0114b02:	89 e5                	mov    %esp,%ebp
c0114b04:	57                   	push   %edi
c0114b05:	56                   	push   %esi
c0114b06:	53                   	push   %ebx
c0114b07:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c0114b0a:	a1 c8 ee 14 c0       	mov    0xc014eec8,%eax
c0114b0f:	8b 15 cc ee 14 c0    	mov    0xc014eecc,%edx
c0114b15:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c0114b1b:	6b f0 05             	imul   $0x5,%eax,%esi
c0114b1e:	01 f7                	add    %esi,%edi
c0114b20:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c0114b25:	f7 e6                	mul    %esi
c0114b27:	8d 34 17             	lea    (%edi,%edx,1),%esi
c0114b2a:	89 f2                	mov    %esi,%edx
c0114b2c:	83 c0 0b             	add    $0xb,%eax
c0114b2f:	83 d2 00             	adc    $0x0,%edx
c0114b32:	89 c7                	mov    %eax,%edi
c0114b34:	83 e7 ff             	and    $0xffffffff,%edi
c0114b37:	89 f9                	mov    %edi,%ecx
c0114b39:	0f b7 da             	movzwl %dx,%ebx
c0114b3c:	89 0d c8 ee 14 c0    	mov    %ecx,0xc014eec8
c0114b42:	89 1d cc ee 14 c0    	mov    %ebx,0xc014eecc
    unsigned long long result = (next >> 12);
c0114b48:	a1 c8 ee 14 c0       	mov    0xc014eec8,%eax
c0114b4d:	8b 15 cc ee 14 c0    	mov    0xc014eecc,%edx
c0114b53:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0114b57:	c1 ea 0c             	shr    $0xc,%edx
c0114b5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114b5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c0114b60:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c0114b67:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114b6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0114b6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0114b70:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0114b73:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114b76:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114b79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114b7d:	74 1c                	je     c0114b9b <rand+0x9a>
c0114b7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114b82:	ba 00 00 00 00       	mov    $0x0,%edx
c0114b87:	f7 75 dc             	divl   -0x24(%ebp)
c0114b8a:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0114b8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114b90:	ba 00 00 00 00       	mov    $0x0,%edx
c0114b95:	f7 75 dc             	divl   -0x24(%ebp)
c0114b98:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114b9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0114b9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114ba1:	f7 75 dc             	divl   -0x24(%ebp)
c0114ba4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0114ba7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0114baa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0114bad:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0114bb0:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114bb3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0114bb6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c0114bb9:	83 c4 24             	add    $0x24,%esp
c0114bbc:	5b                   	pop    %ebx
c0114bbd:	5e                   	pop    %esi
c0114bbe:	5f                   	pop    %edi
c0114bbf:	5d                   	pop    %ebp
c0114bc0:	c3                   	ret    

c0114bc1 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c0114bc1:	55                   	push   %ebp
c0114bc2:	89 e5                	mov    %esp,%ebp
    next = seed;
c0114bc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0114bc7:	ba 00 00 00 00       	mov    $0x0,%edx
c0114bcc:	a3 c8 ee 14 c0       	mov    %eax,0xc014eec8
c0114bd1:	89 15 cc ee 14 c0    	mov    %edx,0xc014eecc
}
c0114bd7:	5d                   	pop    %ebp
c0114bd8:	c3                   	ret    

c0114bd9 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c0114bd9:	55                   	push   %ebp
c0114bda:	89 e5                	mov    %esp,%ebp
c0114bdc:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c0114bdf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c0114be6:	eb 04                	jmp    c0114bec <strlen+0x13>
        cnt ++;
c0114be8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c0114bec:	8b 45 08             	mov    0x8(%ebp),%eax
c0114bef:	8d 50 01             	lea    0x1(%eax),%edx
c0114bf2:	89 55 08             	mov    %edx,0x8(%ebp)
c0114bf5:	0f b6 00             	movzbl (%eax),%eax
c0114bf8:	84 c0                	test   %al,%al
c0114bfa:	75 ec                	jne    c0114be8 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c0114bfc:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0114bff:	c9                   	leave  
c0114c00:	c3                   	ret    

c0114c01 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c0114c01:	55                   	push   %ebp
c0114c02:	89 e5                	mov    %esp,%ebp
c0114c04:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c0114c07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c0114c0e:	eb 04                	jmp    c0114c14 <strnlen+0x13>
        cnt ++;
c0114c10:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c0114c14:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0114c17:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0114c1a:	73 10                	jae    c0114c2c <strnlen+0x2b>
c0114c1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c1f:	8d 50 01             	lea    0x1(%eax),%edx
c0114c22:	89 55 08             	mov    %edx,0x8(%ebp)
c0114c25:	0f b6 00             	movzbl (%eax),%eax
c0114c28:	84 c0                	test   %al,%al
c0114c2a:	75 e4                	jne    c0114c10 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c0114c2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0114c2f:	c9                   	leave  
c0114c30:	c3                   	ret    

c0114c31 <strcat>:
 * @dst:    pointer to the @dst array, which should be large enough to contain the concatenated
 *          resulting string.
 * @src:    string to be appended, this should not overlap @dst
 * */
char *
strcat(char *dst, const char *src) {
c0114c31:	55                   	push   %ebp
c0114c32:	89 e5                	mov    %esp,%ebp
c0114c34:	83 ec 18             	sub    $0x18,%esp
    return strcpy(dst + strlen(dst), src);
c0114c37:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c3a:	89 04 24             	mov    %eax,(%esp)
c0114c3d:	e8 97 ff ff ff       	call   c0114bd9 <strlen>
c0114c42:	8b 55 08             	mov    0x8(%ebp),%edx
c0114c45:	01 c2                	add    %eax,%edx
c0114c47:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114c4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114c4e:	89 14 24             	mov    %edx,(%esp)
c0114c51:	e8 02 00 00 00       	call   c0114c58 <strcpy>
}
c0114c56:	c9                   	leave  
c0114c57:	c3                   	ret    

c0114c58 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c0114c58:	55                   	push   %ebp
c0114c59:	89 e5                	mov    %esp,%ebp
c0114c5b:	57                   	push   %edi
c0114c5c:	56                   	push   %esi
c0114c5d:	83 ec 20             	sub    $0x20,%esp
c0114c60:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c63:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114c66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114c69:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c0114c6c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114c6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114c72:	89 d1                	mov    %edx,%ecx
c0114c74:	89 c2                	mov    %eax,%edx
c0114c76:	89 ce                	mov    %ecx,%esi
c0114c78:	89 d7                	mov    %edx,%edi
c0114c7a:	ac                   	lods   %ds:(%esi),%al
c0114c7b:	aa                   	stos   %al,%es:(%edi)
c0114c7c:	84 c0                	test   %al,%al
c0114c7e:	75 fa                	jne    c0114c7a <strcpy+0x22>
c0114c80:	89 fa                	mov    %edi,%edx
c0114c82:	89 f1                	mov    %esi,%ecx
c0114c84:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0114c87:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0114c8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c0114c8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c0114c90:	83 c4 20             	add    $0x20,%esp
c0114c93:	5e                   	pop    %esi
c0114c94:	5f                   	pop    %edi
c0114c95:	5d                   	pop    %ebp
c0114c96:	c3                   	ret    

c0114c97 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c0114c97:	55                   	push   %ebp
c0114c98:	89 e5                	mov    %esp,%ebp
c0114c9a:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c0114c9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ca0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c0114ca3:	eb 21                	jmp    c0114cc6 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c0114ca5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ca8:	0f b6 10             	movzbl (%eax),%edx
c0114cab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0114cae:	88 10                	mov    %dl,(%eax)
c0114cb0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0114cb3:	0f b6 00             	movzbl (%eax),%eax
c0114cb6:	84 c0                	test   %al,%al
c0114cb8:	74 04                	je     c0114cbe <strncpy+0x27>
            src ++;
c0114cba:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c0114cbe:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0114cc2:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c0114cc6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114cca:	75 d9                	jne    c0114ca5 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c0114ccc:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0114ccf:	c9                   	leave  
c0114cd0:	c3                   	ret    

c0114cd1 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c0114cd1:	55                   	push   %ebp
c0114cd2:	89 e5                	mov    %esp,%ebp
c0114cd4:	57                   	push   %edi
c0114cd5:	56                   	push   %esi
c0114cd6:	83 ec 20             	sub    $0x20,%esp
c0114cd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114cdf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ce2:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c0114ce5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114ceb:	89 d1                	mov    %edx,%ecx
c0114ced:	89 c2                	mov    %eax,%edx
c0114cef:	89 ce                	mov    %ecx,%esi
c0114cf1:	89 d7                	mov    %edx,%edi
c0114cf3:	ac                   	lods   %ds:(%esi),%al
c0114cf4:	ae                   	scas   %es:(%edi),%al
c0114cf5:	75 08                	jne    c0114cff <strcmp+0x2e>
c0114cf7:	84 c0                	test   %al,%al
c0114cf9:	75 f8                	jne    c0114cf3 <strcmp+0x22>
c0114cfb:	31 c0                	xor    %eax,%eax
c0114cfd:	eb 04                	jmp    c0114d03 <strcmp+0x32>
c0114cff:	19 c0                	sbb    %eax,%eax
c0114d01:	0c 01                	or     $0x1,%al
c0114d03:	89 fa                	mov    %edi,%edx
c0114d05:	89 f1                	mov    %esi,%ecx
c0114d07:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114d0a:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0114d0d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c0114d10:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c0114d13:	83 c4 20             	add    $0x20,%esp
c0114d16:	5e                   	pop    %esi
c0114d17:	5f                   	pop    %edi
c0114d18:	5d                   	pop    %ebp
c0114d19:	c3                   	ret    

c0114d1a <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c0114d1a:	55                   	push   %ebp
c0114d1b:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0114d1d:	eb 0c                	jmp    c0114d2b <strncmp+0x11>
        n --, s1 ++, s2 ++;
c0114d1f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c0114d23:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0114d27:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0114d2b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114d2f:	74 1a                	je     c0114d4b <strncmp+0x31>
c0114d31:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d34:	0f b6 00             	movzbl (%eax),%eax
c0114d37:	84 c0                	test   %al,%al
c0114d39:	74 10                	je     c0114d4b <strncmp+0x31>
c0114d3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d3e:	0f b6 10             	movzbl (%eax),%edx
c0114d41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d44:	0f b6 00             	movzbl (%eax),%eax
c0114d47:	38 c2                	cmp    %al,%dl
c0114d49:	74 d4                	je     c0114d1f <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c0114d4b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114d4f:	74 18                	je     c0114d69 <strncmp+0x4f>
c0114d51:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d54:	0f b6 00             	movzbl (%eax),%eax
c0114d57:	0f b6 d0             	movzbl %al,%edx
c0114d5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d5d:	0f b6 00             	movzbl (%eax),%eax
c0114d60:	0f b6 c0             	movzbl %al,%eax
c0114d63:	29 c2                	sub    %eax,%edx
c0114d65:	89 d0                	mov    %edx,%eax
c0114d67:	eb 05                	jmp    c0114d6e <strncmp+0x54>
c0114d69:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0114d6e:	5d                   	pop    %ebp
c0114d6f:	c3                   	ret    

c0114d70 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c0114d70:	55                   	push   %ebp
c0114d71:	89 e5                	mov    %esp,%ebp
c0114d73:	83 ec 04             	sub    $0x4,%esp
c0114d76:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d79:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c0114d7c:	eb 14                	jmp    c0114d92 <strchr+0x22>
        if (*s == c) {
c0114d7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d81:	0f b6 00             	movzbl (%eax),%eax
c0114d84:	3a 45 fc             	cmp    -0x4(%ebp),%al
c0114d87:	75 05                	jne    c0114d8e <strchr+0x1e>
            return (char *)s;
c0114d89:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d8c:	eb 13                	jmp    c0114da1 <strchr+0x31>
        }
        s ++;
c0114d8e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c0114d92:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d95:	0f b6 00             	movzbl (%eax),%eax
c0114d98:	84 c0                	test   %al,%al
c0114d9a:	75 e2                	jne    c0114d7e <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c0114d9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0114da1:	c9                   	leave  
c0114da2:	c3                   	ret    

c0114da3 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c0114da3:	55                   	push   %ebp
c0114da4:	89 e5                	mov    %esp,%ebp
c0114da6:	83 ec 04             	sub    $0x4,%esp
c0114da9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114dac:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c0114daf:	eb 11                	jmp    c0114dc2 <strfind+0x1f>
        if (*s == c) {
c0114db1:	8b 45 08             	mov    0x8(%ebp),%eax
c0114db4:	0f b6 00             	movzbl (%eax),%eax
c0114db7:	3a 45 fc             	cmp    -0x4(%ebp),%al
c0114dba:	75 02                	jne    c0114dbe <strfind+0x1b>
            break;
c0114dbc:	eb 0e                	jmp    c0114dcc <strfind+0x29>
        }
        s ++;
c0114dbe:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c0114dc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0114dc5:	0f b6 00             	movzbl (%eax),%eax
c0114dc8:	84 c0                	test   %al,%al
c0114dca:	75 e5                	jne    c0114db1 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c0114dcc:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0114dcf:	c9                   	leave  
c0114dd0:	c3                   	ret    

c0114dd1 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c0114dd1:	55                   	push   %ebp
c0114dd2:	89 e5                	mov    %esp,%ebp
c0114dd4:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c0114dd7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c0114dde:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c0114de5:	eb 04                	jmp    c0114deb <strtol+0x1a>
        s ++;
c0114de7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c0114deb:	8b 45 08             	mov    0x8(%ebp),%eax
c0114dee:	0f b6 00             	movzbl (%eax),%eax
c0114df1:	3c 20                	cmp    $0x20,%al
c0114df3:	74 f2                	je     c0114de7 <strtol+0x16>
c0114df5:	8b 45 08             	mov    0x8(%ebp),%eax
c0114df8:	0f b6 00             	movzbl (%eax),%eax
c0114dfb:	3c 09                	cmp    $0x9,%al
c0114dfd:	74 e8                	je     c0114de7 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c0114dff:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e02:	0f b6 00             	movzbl (%eax),%eax
c0114e05:	3c 2b                	cmp    $0x2b,%al
c0114e07:	75 06                	jne    c0114e0f <strtol+0x3e>
        s ++;
c0114e09:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0114e0d:	eb 15                	jmp    c0114e24 <strtol+0x53>
    }
    else if (*s == '-') {
c0114e0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e12:	0f b6 00             	movzbl (%eax),%eax
c0114e15:	3c 2d                	cmp    $0x2d,%al
c0114e17:	75 0b                	jne    c0114e24 <strtol+0x53>
        s ++, neg = 1;
c0114e19:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0114e1d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c0114e24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114e28:	74 06                	je     c0114e30 <strtol+0x5f>
c0114e2a:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c0114e2e:	75 24                	jne    c0114e54 <strtol+0x83>
c0114e30:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e33:	0f b6 00             	movzbl (%eax),%eax
c0114e36:	3c 30                	cmp    $0x30,%al
c0114e38:	75 1a                	jne    c0114e54 <strtol+0x83>
c0114e3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e3d:	83 c0 01             	add    $0x1,%eax
c0114e40:	0f b6 00             	movzbl (%eax),%eax
c0114e43:	3c 78                	cmp    $0x78,%al
c0114e45:	75 0d                	jne    c0114e54 <strtol+0x83>
        s += 2, base = 16;
c0114e47:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c0114e4b:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c0114e52:	eb 2a                	jmp    c0114e7e <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c0114e54:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114e58:	75 17                	jne    c0114e71 <strtol+0xa0>
c0114e5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e5d:	0f b6 00             	movzbl (%eax),%eax
c0114e60:	3c 30                	cmp    $0x30,%al
c0114e62:	75 0d                	jne    c0114e71 <strtol+0xa0>
        s ++, base = 8;
c0114e64:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0114e68:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c0114e6f:	eb 0d                	jmp    c0114e7e <strtol+0xad>
    }
    else if (base == 0) {
c0114e71:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114e75:	75 07                	jne    c0114e7e <strtol+0xad>
        base = 10;
c0114e77:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c0114e7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e81:	0f b6 00             	movzbl (%eax),%eax
c0114e84:	3c 2f                	cmp    $0x2f,%al
c0114e86:	7e 1b                	jle    c0114ea3 <strtol+0xd2>
c0114e88:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e8b:	0f b6 00             	movzbl (%eax),%eax
c0114e8e:	3c 39                	cmp    $0x39,%al
c0114e90:	7f 11                	jg     c0114ea3 <strtol+0xd2>
            dig = *s - '0';
c0114e92:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e95:	0f b6 00             	movzbl (%eax),%eax
c0114e98:	0f be c0             	movsbl %al,%eax
c0114e9b:	83 e8 30             	sub    $0x30,%eax
c0114e9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114ea1:	eb 48                	jmp    c0114eeb <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c0114ea3:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ea6:	0f b6 00             	movzbl (%eax),%eax
c0114ea9:	3c 60                	cmp    $0x60,%al
c0114eab:	7e 1b                	jle    c0114ec8 <strtol+0xf7>
c0114ead:	8b 45 08             	mov    0x8(%ebp),%eax
c0114eb0:	0f b6 00             	movzbl (%eax),%eax
c0114eb3:	3c 7a                	cmp    $0x7a,%al
c0114eb5:	7f 11                	jg     c0114ec8 <strtol+0xf7>
            dig = *s - 'a' + 10;
c0114eb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0114eba:	0f b6 00             	movzbl (%eax),%eax
c0114ebd:	0f be c0             	movsbl %al,%eax
c0114ec0:	83 e8 57             	sub    $0x57,%eax
c0114ec3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114ec6:	eb 23                	jmp    c0114eeb <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c0114ec8:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ecb:	0f b6 00             	movzbl (%eax),%eax
c0114ece:	3c 40                	cmp    $0x40,%al
c0114ed0:	7e 3d                	jle    c0114f0f <strtol+0x13e>
c0114ed2:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ed5:	0f b6 00             	movzbl (%eax),%eax
c0114ed8:	3c 5a                	cmp    $0x5a,%al
c0114eda:	7f 33                	jg     c0114f0f <strtol+0x13e>
            dig = *s - 'A' + 10;
c0114edc:	8b 45 08             	mov    0x8(%ebp),%eax
c0114edf:	0f b6 00             	movzbl (%eax),%eax
c0114ee2:	0f be c0             	movsbl %al,%eax
c0114ee5:	83 e8 37             	sub    $0x37,%eax
c0114ee8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c0114eeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114eee:	3b 45 10             	cmp    0x10(%ebp),%eax
c0114ef1:	7c 02                	jl     c0114ef5 <strtol+0x124>
            break;
c0114ef3:	eb 1a                	jmp    c0114f0f <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c0114ef5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0114ef9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0114efc:	0f af 45 10          	imul   0x10(%ebp),%eax
c0114f00:	89 c2                	mov    %eax,%edx
c0114f02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114f05:	01 d0                	add    %edx,%eax
c0114f07:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c0114f0a:	e9 6f ff ff ff       	jmp    c0114e7e <strtol+0xad>

    if (endptr) {
c0114f0f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114f13:	74 08                	je     c0114f1d <strtol+0x14c>
        *endptr = (char *) s;
c0114f15:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f18:	8b 55 08             	mov    0x8(%ebp),%edx
c0114f1b:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c0114f1d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0114f21:	74 07                	je     c0114f2a <strtol+0x159>
c0114f23:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0114f26:	f7 d8                	neg    %eax
c0114f28:	eb 03                	jmp    c0114f2d <strtol+0x15c>
c0114f2a:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0114f2d:	c9                   	leave  
c0114f2e:	c3                   	ret    

c0114f2f <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c0114f2f:	55                   	push   %ebp
c0114f30:	89 e5                	mov    %esp,%ebp
c0114f32:	57                   	push   %edi
c0114f33:	83 ec 24             	sub    $0x24,%esp
c0114f36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f39:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c0114f3c:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c0114f40:	8b 55 08             	mov    0x8(%ebp),%edx
c0114f43:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0114f46:	88 45 f7             	mov    %al,-0x9(%ebp)
c0114f49:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c0114f4f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0114f52:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0114f56:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0114f59:	89 d7                	mov    %edx,%edi
c0114f5b:	f3 aa                	rep stos %al,%es:(%edi)
c0114f5d:	89 fa                	mov    %edi,%edx
c0114f5f:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0114f62:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c0114f65:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c0114f68:	83 c4 24             	add    $0x24,%esp
c0114f6b:	5f                   	pop    %edi
c0114f6c:	5d                   	pop    %ebp
c0114f6d:	c3                   	ret    

c0114f6e <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c0114f6e:	55                   	push   %ebp
c0114f6f:	89 e5                	mov    %esp,%ebp
c0114f71:	57                   	push   %edi
c0114f72:	56                   	push   %esi
c0114f73:	53                   	push   %ebx
c0114f74:	83 ec 30             	sub    $0x30,%esp
c0114f77:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114f7d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f80:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114f83:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f86:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c0114f89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114f8c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0114f8f:	73 42                	jae    c0114fd3 <memmove+0x65>
c0114f91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114f94:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0114f97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114f9a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114f9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114fa0:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c0114fa3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114fa6:	c1 e8 02             	shr    $0x2,%eax
c0114fa9:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c0114fab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0114fae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114fb1:	89 d7                	mov    %edx,%edi
c0114fb3:	89 c6                	mov    %eax,%esi
c0114fb5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0114fb7:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0114fba:	83 e1 03             	and    $0x3,%ecx
c0114fbd:	74 02                	je     c0114fc1 <memmove+0x53>
c0114fbf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0114fc1:	89 f0                	mov    %esi,%eax
c0114fc3:	89 fa                	mov    %edi,%edx
c0114fc5:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c0114fc8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0114fcb:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c0114fce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114fd1:	eb 36                	jmp    c0115009 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c0114fd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114fd6:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114fd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114fdc:	01 c2                	add    %eax,%edx
c0114fde:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114fe1:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0114fe4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114fe7:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c0114fea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114fed:	89 c1                	mov    %eax,%ecx
c0114fef:	89 d8                	mov    %ebx,%eax
c0114ff1:	89 d6                	mov    %edx,%esi
c0114ff3:	89 c7                	mov    %eax,%edi
c0114ff5:	fd                   	std    
c0114ff6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0114ff8:	fc                   	cld    
c0114ff9:	89 f8                	mov    %edi,%eax
c0114ffb:	89 f2                	mov    %esi,%edx
c0114ffd:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c0115000:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0115003:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c0115006:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c0115009:	83 c4 30             	add    $0x30,%esp
c011500c:	5b                   	pop    %ebx
c011500d:	5e                   	pop    %esi
c011500e:	5f                   	pop    %edi
c011500f:	5d                   	pop    %ebp
c0115010:	c3                   	ret    

c0115011 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c0115011:	55                   	push   %ebp
c0115012:	89 e5                	mov    %esp,%ebp
c0115014:	57                   	push   %edi
c0115015:	56                   	push   %esi
c0115016:	83 ec 20             	sub    $0x20,%esp
c0115019:	8b 45 08             	mov    0x8(%ebp),%eax
c011501c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011501f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115022:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115025:	8b 45 10             	mov    0x10(%ebp),%eax
c0115028:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c011502b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011502e:	c1 e8 02             	shr    $0x2,%eax
c0115031:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c0115033:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0115036:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115039:	89 d7                	mov    %edx,%edi
c011503b:	89 c6                	mov    %eax,%esi
c011503d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c011503f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0115042:	83 e1 03             	and    $0x3,%ecx
c0115045:	74 02                	je     c0115049 <memcpy+0x38>
c0115047:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0115049:	89 f0                	mov    %esi,%eax
c011504b:	89 fa                	mov    %edi,%edx
c011504d:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0115050:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0115053:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c0115056:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c0115059:	83 c4 20             	add    $0x20,%esp
c011505c:	5e                   	pop    %esi
c011505d:	5f                   	pop    %edi
c011505e:	5d                   	pop    %ebp
c011505f:	c3                   	ret    

c0115060 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c0115060:	55                   	push   %ebp
c0115061:	89 e5                	mov    %esp,%ebp
c0115063:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c0115066:	8b 45 08             	mov    0x8(%ebp),%eax
c0115069:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c011506c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011506f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c0115072:	eb 30                	jmp    c01150a4 <memcmp+0x44>
        if (*s1 != *s2) {
c0115074:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0115077:	0f b6 10             	movzbl (%eax),%edx
c011507a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011507d:	0f b6 00             	movzbl (%eax),%eax
c0115080:	38 c2                	cmp    %al,%dl
c0115082:	74 18                	je     c011509c <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c0115084:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0115087:	0f b6 00             	movzbl (%eax),%eax
c011508a:	0f b6 d0             	movzbl %al,%edx
c011508d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115090:	0f b6 00             	movzbl (%eax),%eax
c0115093:	0f b6 c0             	movzbl %al,%eax
c0115096:	29 c2                	sub    %eax,%edx
c0115098:	89 d0                	mov    %edx,%eax
c011509a:	eb 1a                	jmp    c01150b6 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c011509c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01150a0:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c01150a4:	8b 45 10             	mov    0x10(%ebp),%eax
c01150a7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01150aa:	89 55 10             	mov    %edx,0x10(%ebp)
c01150ad:	85 c0                	test   %eax,%eax
c01150af:	75 c3                	jne    c0115074 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c01150b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01150b6:	c9                   	leave  
c01150b7:	c3                   	ret    
